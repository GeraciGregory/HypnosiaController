
STM32HypnosiaController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c098  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9a0  0800c9a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9a0  0800c9a0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9a0  0800c9a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9a0  0800c9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9a4  0800c9a4  0001c9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c9a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000074  0800ca1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800ca1c  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ad6e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009ac7  00000000  00000000  0005ae0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f30  00000000  00000000  000648d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cb8  00000000  00000000  00066808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ba9  00000000  00000000  000684c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026fdc  00000000  00000000  0008a069  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009adb4  00000000  00000000  000b1045  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bdf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b84  00000000  00000000  0014be74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c140 	.word	0x0800c140

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800c140 	.word	0x0800c140

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_SPI_RxCpltCallback>:
#include "app/Controller.h"
#include "stm32f0xx_it.h"
extern CAN_RxHeaderTypeDef myRxMessage;

extern "C" void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <HAL_SPI_RxCpltCallback+0x28>)
 80003fe:	2110      	movs	r1, #16
 8000400:	0018      	movs	r0, r3
 8000402:	f002 f93b 	bl	800267c <HAL_GPIO_TogglePin>
	Controller::getInstance()->onIrqSPI();
 8000406:	f005 f863 	bl	80054d0 <_ZN10Controller11getInstanceEv>
 800040a:	0003      	movs	r3, r0
 800040c:	0018      	movs	r0, r3
 800040e:	f005 f892 	bl	8005536 <_ZN10Controller8onIrqSPIEv>
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	48000800 	.word	0x48000800

08000420 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern "C" void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	//Controller::getInstance()->readCANItFrame();
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800042a:	2101      	movs	r1, #1
 800042c:	0018      	movs	r0, r3
 800042e:	f002 f925 	bl	800267c <HAL_GPIO_TogglePin>
	Controller::getInstance()->onIrqCAN();
 8000432:	f005 f84d 	bl	80054d0 <_ZN10Controller11getInstanceEv>
 8000436:	0003      	movs	r3, r0
 8000438:	0018      	movs	r0, r3
 800043a:	f005 f895 	bl	8005568 <_ZN10Controller8onIrqCANEv>
}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	48000400 	.word	0x48000400

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fde8 	bl	8001024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f84a 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 fa18 	bl	800088c <MX_GPIO_Init>
  MX_DMA_Init();
 800045c:	f000 f9f8 	bl	8000850 <MX_DMA_Init>
  MX_CAN_Init();
 8000460:	f000 f8a4 	bl	80005ac <MX_CAN_Init>
  MX_SPI1_Init();
 8000464:	f000 f8da 	bl	800061c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000468:	f000 f9c2 	bl	80007f0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800046c:	f000 f910 	bl	8000690 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <main+0x98>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  filterConfig.FilterIdHigh = 14;
 8000476:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <main+0x98>)
 8000478:	220e      	movs	r2, #14
 800047a:	601a      	str	r2, [r3, #0]
  filterConfig.FilterIdLow = 0;
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <main+0x98>)
 800047e:	2200      	movs	r2, #0
 8000480:	605a      	str	r2, [r3, #4]
  filterConfig.FilterMaskIdHigh = 0;
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <main+0x98>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  filterConfig.FilterMaskIdLow = 0;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <main+0x98>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <main+0x98>)
 8000490:	2201      	movs	r2, #1
 8000492:	61da      	str	r2, [r3, #28]
  filterConfig.FilterActivation = ENABLE;
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <main+0x98>)
 8000496:	2201      	movs	r2, #1
 8000498:	621a      	str	r2, [r3, #32]
  if(HAL_CAN_ConfigFilter(&hcan, &filterConfig) != HAL_OK)
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <main+0x98>)
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <main+0x9c>)
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 ff0f 	bl	80012c4 <HAL_CAN_ConfigFilter>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <main+0x62>
  {
	  Error_Handler();
 80004aa:	f000 fb21 	bl	8000af0 <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan) != HAL_OK)  //Start CAN
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <main+0x9c>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fff9 	bl	80014a8 <HAL_CAN_Start>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <main+0x72>
  {
	  Error_Handler();
 80004ba:	f000 fb19 	bl	8000af0 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)//Enable CAN interrupt
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <main+0x9c>)
 80004c0:	2102      	movs	r1, #2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fa31 	bl	800192a <HAL_CAN_ActivateNotification>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <main+0x84>
  {
	  Error_Handler();
 80004cc:	f000 fb10 	bl	8000af0 <Error_Handler>
  }
  XF_initialize(10);
 80004d0:	200a      	movs	r0, #10
 80004d2:	f009 fd1b 	bl	8009f0c <XF_initialize>
  Factory_initialize();
 80004d6:	f007 fd39 	bl	8007f4c <Factory_initialize>
  Factory_build();
 80004da:	f007 fd3e 	bl	8007f5a <Factory_build>
  XF_exec();
 80004de:	f009 fd23 	bl	8009f28 <XF_exec>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <main+0x96>
 80004e4:	200001f8 	.word	0x200001f8
 80004e8:	20000220 	.word	0x20000220

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b099      	sub	sp, #100	; 0x64
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	242c      	movs	r4, #44	; 0x2c
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2334      	movs	r3, #52	; 0x34
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f00a fe64 	bl	800b1ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	231c      	movs	r3, #28
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2310      	movs	r3, #16
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f00a fe5c 	bl	800b1ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	231c      	movs	r3, #28
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f00a fe55 	bl	800b1ca <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000520:	0021      	movs	r1, r4
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2201      	movs	r2, #1
 800052c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2202      	movs	r2, #2
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	0252      	lsls	r2, r2, #9
 800053a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	02d2      	lsls	r2, r2, #11
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2200      	movs	r2, #0
 8000548:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	187b      	adds	r3, r7, r1
 800054c:	0018      	movs	r0, r3
 800054e:	f002 f8b1 	bl	80026b4 <HAL_RCC_OscConfig>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000556:	f000 facb 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	211c      	movs	r1, #28
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2207      	movs	r2, #7
 8000560:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2202      	movs	r2, #2
 8000566:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2101      	movs	r1, #1
 8000578:	0018      	movs	r0, r3
 800057a:	f002 fc21 	bl	8002dc0 <HAL_RCC_ClockConfig>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000582:	f000 fab5 	bl	8000af0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000586:	003b      	movs	r3, r7
 8000588:	2201      	movs	r2, #1
 800058a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800058c:	003b      	movs	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000592:	003b      	movs	r3, r7
 8000594:	0018      	movs	r0, r3
 8000596:	f002 fd8d 	bl	80030b4 <HAL_RCCEx_PeriphCLKConfig>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800059e:	f000 faa7 	bl	8000af0 <Error_Handler>
  }
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b019      	add	sp, #100	; 0x64
 80005a8:	bd90      	pop	{r4, r7, pc}
	...

080005ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_CAN_Init+0x68>)
 80005b2:	4a19      	ldr	r2, [pc, #100]	; (8000618 <MX_CAN_Init+0x6c>)
 80005b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_CAN_Init+0x68>)
 80005b8:	2203      	movs	r2, #3
 80005ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_CAN_Init+0x68>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_CAN_Init+0x68>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_CAN_Init+0x68>)
 80005ca:	22c0      	movs	r2, #192	; 0xc0
 80005cc:	0312      	lsls	r2, r2, #12
 80005ce:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_CAN_Init+0x68>)
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	0352      	lsls	r2, r2, #13
 80005d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_CAN_Init+0x68>)
 80005da:	2200      	movs	r2, #0
 80005dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_CAN_Init+0x68>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_CAN_Init+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_CAN_Init+0x68>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_CAN_Init+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_CAN_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <MX_CAN_Init+0x68>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fd62 	bl	80010c8 <HAL_CAN_Init>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000608:	f000 fa72 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	20000220 	.word	0x20000220
 8000618:	40006400 	.word	0x40006400

0800061c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000622:	4a1a      	ldr	r2, [pc, #104]	; (800068c <MX_SPI1_Init+0x70>)
 8000624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_SPI1_Init+0x6c>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	00d2      	lsls	r2, r2, #3
 8000632:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000636:	22e0      	movs	r2, #224	; 0xe0
 8000638:	00d2      	lsls	r2, r2, #3
 800063a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_SPI1_Init+0x6c>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_SPI1_Init+0x6c>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_SPI1_Init+0x6c>)
 800065c:	2200      	movs	r2, #0
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000662:	2207      	movs	r2, #7
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000668:	2200      	movs	r2, #0
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_SPI1_Init+0x6c>)
 800066e:	2200      	movs	r2, #0
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MX_SPI1_Init+0x6c>)
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fe1d 	bl	80032b4 <HAL_SPI_Init>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800067e:	f000 fa37 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000033c 	.word	0x2000033c
 800068c:	40013000 	.word	0x40013000

08000690 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	2348      	movs	r3, #72	; 0x48
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	0018      	movs	r0, r3
 800069c:	2310      	movs	r3, #16
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f00a fd92 	bl	800b1ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a6:	2340      	movs	r3, #64	; 0x40
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	0018      	movs	r0, r3
 80006ac:	2308      	movs	r3, #8
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f00a fd8a 	bl	800b1ca <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b6:	2324      	movs	r3, #36	; 0x24
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	231c      	movs	r3, #28
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f00a fd82 	bl	800b1ca <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	0018      	movs	r0, r3
 80006ca:	2320      	movs	r3, #32
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f00a fd7b 	bl	800b1ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d4:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <MX_TIM1_Init+0x158>)
 80006d6:	4a45      	ldr	r2, [pc, #276]	; (80007ec <MX_TIM1_Init+0x15c>)
 80006d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006da:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <MX_TIM1_Init+0x158>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <MX_TIM1_Init+0x158>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80006e6:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <MX_TIM1_Init+0x158>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <MX_TIM1_Init+0x158>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_TIM1_Init+0x158>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f8:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_TIM1_Init+0x158>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <MX_TIM1_Init+0x158>)
 8000700:	0018      	movs	r0, r3
 8000702:	f003 fce5 	bl	80040d0 <HAL_TIM_Base_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800070a:	f000 f9f1 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070e:	2148      	movs	r1, #72	; 0x48
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0152      	lsls	r2, r2, #5
 8000716:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000718:	187a      	adds	r2, r7, r1
 800071a:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <MX_TIM1_Init+0x158>)
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f003 fd84 	bl	800422c <HAL_TIM_ConfigClockSource>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000728:	f000 f9e2 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_TIM1_Init+0x158>)
 800072e:	0018      	movs	r0, r3
 8000730:	f003 fcfa 	bl	8004128 <HAL_TIM_OC_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000738:	f000 f9da 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074a:	187a      	adds	r2, r7, r1
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_TIM1_Init+0x158>)
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f004 f93f 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800075a:	f000 f9c9 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800075e:	2124      	movs	r1, #36	; 0x24
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078a:	1879      	adds	r1, r7, r1
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_TIM1_Init+0x158>)
 800078e:	2200      	movs	r2, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f003 fcfd 	bl	8004190 <HAL_TIM_OC_ConfigChannel>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800079a:	f000 f9a9 	bl	8000af0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	0192      	lsls	r2, r2, #6
 80007c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ca:	1d3a      	adds	r2, r7, #4
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_TIM1_Init+0x158>)
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f004 f95d 	bl	8004a90 <HAL_TIMEx_ConfigBreakDeadTime>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80007da:	f000 f989 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b016      	add	sp, #88	; 0x58
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	200002fc 	.word	0x200002fc
 80007ec:	40012c00 	.word	0x40012c00

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART1_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <MX_USART1_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART1_UART_Init+0x58>)
 80007fc:	2296      	movs	r2, #150	; 0x96
 80007fe:	0212      	lsls	r2, r2, #8
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000834:	0018      	movs	r0, r3
 8000836:	f004 f989 	bl	8004b4c <HAL_UART_Init>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f957 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000027c 	.word	0x2000027c
 800084c:	40013800 	.word	0x40013800

08000850 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_DMA_Init+0x38>)
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_DMA_Init+0x38>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_DMA_Init+0x38>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	200a      	movs	r0, #10
 8000874:	f001 fb40 	bl	8001ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000878:	200a      	movs	r0, #10
 800087a:	f001 fb52 	bl	8001f22 <HAL_NVIC_EnableIRQ>

}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	40021000 	.word	0x40021000

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b08d      	sub	sp, #52	; 0x34
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	241c      	movs	r4, #28
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	2314      	movs	r3, #20
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f00a fc94 	bl	800b1ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	4b88      	ldr	r3, [pc, #544]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	4b87      	ldr	r3, [pc, #540]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0389      	lsls	r1, r1, #14
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b84      	ldr	r3, [pc, #528]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	039b      	lsls	r3, r3, #14
 80008b8:	4013      	ands	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b81      	ldr	r3, [pc, #516]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	4b80      	ldr	r3, [pc, #512]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	03c9      	lsls	r1, r1, #15
 80008c8:	430a      	orrs	r2, r1
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	4b7d      	ldr	r3, [pc, #500]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	03db      	lsls	r3, r3, #15
 80008d4:	4013      	ands	r3, r2
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b7a      	ldr	r3, [pc, #488]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	4b79      	ldr	r3, [pc, #484]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	0309      	lsls	r1, r1, #12
 80008e4:	430a      	orrs	r2, r1
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	4b76      	ldr	r3, [pc, #472]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008ea:	695a      	ldr	r2, [r3, #20]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	031b      	lsls	r3, r3, #12
 80008f0:	4013      	ands	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b73      	ldr	r3, [pc, #460]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	4b72      	ldr	r3, [pc, #456]	; (8000ac4 <MX_GPIO_Init+0x238>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0289      	lsls	r1, r1, #10
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	4b6f      	ldr	r3, [pc, #444]	; (8000ac4 <MX_GPIO_Init+0x238>)
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	029b      	lsls	r3, r3, #10
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <MX_GPIO_Init+0x238>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b6b      	ldr	r3, [pc, #428]	; (8000ac4 <MX_GPIO_Init+0x238>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	02c9      	lsls	r1, r1, #11
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <MX_GPIO_Init+0x238>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	02db      	lsls	r3, r3, #11
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <MX_GPIO_Init+0x238>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b64      	ldr	r3, [pc, #400]	; (8000ac4 <MX_GPIO_Init+0x238>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	0349      	lsls	r1, r1, #13
 8000938:	430a      	orrs	r2, r1
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b61      	ldr	r3, [pc, #388]	; (8000ac4 <MX_GPIO_Init+0x238>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	035b      	lsls	r3, r3, #13
 8000944:	4013      	ands	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M5_As_Pin|M5_Bs_Pin|M5_Cs_Pin|M5_Ah_Pin 
 800094a:	495f      	ldr	r1, [pc, #380]	; (8000ac8 <MX_GPIO_Init+0x23c>)
 800094c:	4b5f      	ldr	r3, [pc, #380]	; (8000acc <MX_GPIO_Init+0x240>)
 800094e:	2200      	movs	r2, #0
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fe76 	bl	8002642 <HAL_GPIO_WritePin>
                          |M5_Bh_Pin|M4_Bm_Pin|M4_Cm_Pin|M4_Ah_Pin 
                          |M4_Bh_Pin|M4_Ch_Pin|M4_As_Pin|M4_Bs_Pin 
                          |M4_Cs_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, M5_Ch_Pin|M5_Am_Pin|STBY_Pin|M3_As_Pin, GPIO_PIN_RESET);
 8000956:	495e      	ldr	r1, [pc, #376]	; (8000ad0 <MX_GPIO_Init+0x244>)
 8000958:	4b5e      	ldr	r3, [pc, #376]	; (8000ad4 <MX_GPIO_Init+0x248>)
 800095a:	2200      	movs	r2, #0
 800095c:	0018      	movs	r0, r3
 800095e:	f001 fe70 	bl	8002642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M5_Bm_Pin|M5_Cm_Pin|LED_6_Pin|LED_5_Pin 
 8000962:	495d      	ldr	r1, [pc, #372]	; (8000ad8 <MX_GPIO_Init+0x24c>)
 8000964:	4b5d      	ldr	r3, [pc, #372]	; (8000adc <MX_GPIO_Init+0x250>)
 8000966:	2200      	movs	r2, #0
 8000968:	0018      	movs	r0, r3
 800096a:	f001 fe6a 	bl	8002642 <HAL_GPIO_WritePin>
                          |M2_Bh_Pin|M2_Ch_Pin|M2_Am_Pin|M2_Bm_Pin 
                          |M3_Cs_Pin|M3_Ah_Pin|M3_Bh_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|M4_Am_Pin|LED_1_Pin 
 800096e:	495c      	ldr	r1, [pc, #368]	; (8000ae0 <MX_GPIO_Init+0x254>)
 8000970:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <MX_GPIO_Init+0x258>)
 8000972:	2200      	movs	r2, #0
 8000974:	0018      	movs	r0, r3
 8000976:	f001 fe64 	bl	8002642 <HAL_GPIO_WritePin>
                          |M1_As_Pin|M1_Bs_Pin|M1_Cs_Pin|M1_Am_Pin 
                          |M1_Bm_Pin|M6_Bh_Pin|M6_Ch_Pin|M6_As_Pin 
                          |M6_Bs_Pin|M6_Cs_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M1_Cm_Pin|M1_Ah_Pin|M1_Bh_Pin|M1_Ch_Pin 
 800097a:	495b      	ldr	r1, [pc, #364]	; (8000ae8 <MX_GPIO_Init+0x25c>)
 800097c:	4b5b      	ldr	r3, [pc, #364]	; (8000aec <MX_GPIO_Init+0x260>)
 800097e:	2200      	movs	r2, #0
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fe5e 	bl	8002642 <HAL_GPIO_WritePin>
                          |M2_As_Pin|M2_Bs_Pin|M2_Cs_Pin|M2_Ah_Pin 
                          |M3_Ch_Pin|M3_Am_Pin|M3_Bm_Pin|M3_Cm_Pin 
                          |M6_Am_Pin|M6_Bm_Pin|M6_Cm_Pin|M6_Ah_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_Cm_Pin|M3_Bs_Pin, GPIO_PIN_RESET);
 8000986:	2381      	movs	r3, #129	; 0x81
 8000988:	0219      	lsls	r1, r3, #8
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2200      	movs	r2, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fe56 	bl	8002642 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M5_As_Pin M5_Bs_Pin M5_Cs_Pin M5_Ah_Pin 
                           M5_Bh_Pin M4_Bm_Pin M4_Cm_Pin M4_Ah_Pin 
                           M4_Bh_Pin M4_Ch_Pin M4_As_Pin M4_Bs_Pin 
                           M4_Cs_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = M5_As_Pin|M5_Bs_Pin|M5_Cs_Pin|M5_Ah_Pin 
 8000996:	193b      	adds	r3, r7, r4
 8000998:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <MX_GPIO_Init+0x23c>)
 800099a:	601a      	str	r2, [r3, #0]
                          |M5_Bh_Pin|M4_Bm_Pin|M4_Cm_Pin|M4_Ah_Pin 
                          |M4_Bh_Pin|M4_Ch_Pin|M4_As_Pin|M4_Bs_Pin 
                          |M4_Cs_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2201      	movs	r2, #1
 80009a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	4a46      	ldr	r2, [pc, #280]	; (8000acc <MX_GPIO_Init+0x240>)
 80009b2:	0019      	movs	r1, r3
 80009b4:	0010      	movs	r0, r2
 80009b6:	f001 fcaf 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : M5_Ch_Pin M5_Am_Pin STBY_Pin M3_As_Pin */
  GPIO_InitStruct.Pin = M5_Ch_Pin|M5_Am_Pin|STBY_Pin|M3_As_Pin;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	4a44      	ldr	r2, [pc, #272]	; (8000ad0 <MX_GPIO_Init+0x244>)
 80009be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2201      	movs	r2, #1
 80009c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <MX_GPIO_Init+0x248>)
 80009d6:	0019      	movs	r1, r3
 80009d8:	0010      	movs	r0, r2
 80009da:	f001 fc9d 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : M5_Bm_Pin M5_Cm_Pin LED_6_Pin LED_5_Pin 
                           M2_Bh_Pin M2_Ch_Pin M2_Am_Pin M2_Bm_Pin 
                           M3_Cs_Pin M3_Ah_Pin M3_Bh_Pin */
  GPIO_InitStruct.Pin = M5_Bm_Pin|M5_Cm_Pin|LED_6_Pin|LED_5_Pin 
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <MX_GPIO_Init+0x24c>)
 80009e2:	601a      	str	r2, [r3, #0]
                          |M2_Bh_Pin|M2_Ch_Pin|M2_Am_Pin|M2_Bm_Pin 
                          |M3_Cs_Pin|M3_Ah_Pin|M3_Bh_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	4a38      	ldr	r2, [pc, #224]	; (8000adc <MX_GPIO_Init+0x250>)
 80009fa:	0019      	movs	r1, r3
 80009fc:	0010      	movs	r0, r2
 80009fe:	f001 fc8b 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_4_Pin */
  GPIO_InitStruct.Pin = SW_4_Pin;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2208      	movs	r2, #8
 8000a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2202      	movs	r2, #2
 8000a12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_4_GPIO_Port, &GPIO_InitStruct);
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <MX_GPIO_Init+0x248>)
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0010      	movs	r0, r2
 8000a1c:	f001 fc7c 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_3_Pin SW_2_Pin SW_1_Pin SW_0_Pin */
  GPIO_InitStruct.Pin = SW_3_Pin|SW_2_Pin|SW_1_Pin|SW_0_Pin;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	220f      	movs	r2, #15
 8000a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2202      	movs	r2, #2
 8000a30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	193a      	adds	r2, r7, r4
 8000a34:	2390      	movs	r3, #144	; 0x90
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 fc6c 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin M4_Am_Pin LED_1_Pin 
                           M1_As_Pin M1_Bs_Pin M1_Cs_Pin M1_Am_Pin 
                           M1_Bm_Pin M6_Bh_Pin M6_Ch_Pin M6_As_Pin 
                           M6_Bs_Pin M6_Cs_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|M4_Am_Pin|LED_1_Pin 
 8000a40:	0021      	movs	r1, r4
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <MX_GPIO_Init+0x254>)
 8000a46:	601a      	str	r2, [r3, #0]
                          |M1_As_Pin|M1_Bs_Pin|M1_Cs_Pin|M1_Am_Pin 
                          |M1_Bm_Pin|M6_Bh_Pin|M6_Ch_Pin|M6_As_Pin 
                          |M6_Bs_Pin|M6_Cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <MX_GPIO_Init+0x258>)
 8000a60:	0019      	movs	r1, r3
 8000a62:	0010      	movs	r0, r2
 8000a64:	f001 fc58 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Cm_Pin M1_Ah_Pin M1_Bh_Pin M1_Ch_Pin 
                           M2_As_Pin M2_Bs_Pin M2_Cs_Pin M2_Ah_Pin 
                           M3_Ch_Pin M3_Am_Pin M3_Bm_Pin M3_Cm_Pin 
                           M6_Am_Pin M6_Bm_Pin M6_Cm_Pin M6_Ah_Pin */
  GPIO_InitStruct.Pin = M1_Cm_Pin|M1_Ah_Pin|M1_Bh_Pin|M1_Ch_Pin 
 8000a68:	0021      	movs	r1, r4
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <MX_GPIO_Init+0x25c>)
 8000a6e:	601a      	str	r2, [r3, #0]
                          |M2_As_Pin|M2_Bs_Pin|M2_Cs_Pin|M2_Ah_Pin 
                          |M3_Ch_Pin|M3_Am_Pin|M3_Bm_Pin|M3_Cm_Pin 
                          |M6_Am_Pin|M6_Bm_Pin|M6_Cm_Pin|M6_Ah_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	000c      	movs	r4, r1
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	4a19      	ldr	r2, [pc, #100]	; (8000aec <MX_GPIO_Init+0x260>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f001 fc44 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_Cm_Pin M3_Bs_Pin */
  GPIO_InitStruct.Pin = M2_Cm_Pin|M3_Bs_Pin;
 8000a90:	0021      	movs	r1, r4
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2281      	movs	r2, #129	; 0x81
 8000a96:	0212      	lsls	r2, r2, #8
 8000a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	187a      	adds	r2, r7, r1
 8000aae:	2390      	movs	r3, #144	; 0x90
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fc2f 	bl	8002318 <HAL_GPIO_Init>

}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b00d      	add	sp, #52	; 0x34
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	0000fffc 	.word	0x0000fffc
 8000acc:	48001000 	.word	0x48001000
 8000ad0:	00000644 	.word	0x00000644
 8000ad4:	48001400 	.word	0x48001400
 8000ad8:	00001ff3 	.word	0x00001ff3
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	0000fcff 	.word	0x0000fcff
 8000ae4:	48000400 	.word	0x48000400
 8000ae8:	0000ffff 	.word	0x0000ffff
 8000aec:	48000c00 	.word	0x48000c00

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x44>)
 8000b04:	699a      	ldr	r2, [r3, #24]
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_MspInit+0x44>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	619a      	str	r2, [r3, #24]
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x44>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x44>)
 8000b1c:	69da      	ldr	r2, [r3, #28]
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_MspInit+0x44>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0549      	lsls	r1, r1, #21
 8000b24:	430a      	orrs	r2, r1
 8000b26:	61da      	str	r2, [r3, #28]
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_MspInit+0x44>)
 8000b2a:	69da      	ldr	r2, [r3, #28]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	055b      	lsls	r3, r3, #21
 8000b30:	4013      	ands	r3, r2
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	2314      	movs	r3, #20
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	0018      	movs	r0, r3
 8000b52:	2314      	movs	r3, #20
 8000b54:	001a      	movs	r2, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	f00a fb37 	bl	800b1ca <memset>
  if(hcan->Instance==CAN)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <HAL_CAN_MspInit+0xa4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d13b      	bne.n	8000bde <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_CAN_MspInit+0xa8>)
 8000b68:	69da      	ldr	r2, [r3, #28]
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_CAN_MspInit+0xa8>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	0489      	lsls	r1, r1, #18
 8000b70:	430a      	orrs	r2, r1
 8000b72:	61da      	str	r2, [r3, #28]
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_CAN_MspInit+0xa8>)
 8000b76:	69da      	ldr	r2, [r3, #28]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	049b      	lsls	r3, r3, #18
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_CAN_MspInit+0xa8>)
 8000b84:	695a      	ldr	r2, [r3, #20]
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_CAN_MspInit+0xa8>)
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	0289      	lsls	r1, r1, #10
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_CAN_MspInit+0xa8>)
 8000b92:	695a      	ldr	r2, [r3, #20]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	029b      	lsls	r3, r3, #10
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b9e:	2114      	movs	r1, #20
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	22c0      	movs	r2, #192	; 0xc0
 8000ba4:	0152      	lsls	r2, r2, #5
 8000ba6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2202      	movs	r2, #2
 8000bac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	187a      	adds	r2, r7, r1
 8000bc2:	2390      	movs	r3, #144	; 0x90
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 fba5 	bl	8002318 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	201e      	movs	r0, #30
 8000bd4:	f001 f990 	bl	8001ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000bd8:	201e      	movs	r0, #30
 8000bda:	f001 f9a2 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b00a      	add	sp, #40	; 0x28
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40006400 	.word	0x40006400
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	2314      	movs	r3, #20
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f00a fae1 	bl	800b1ca <memset>
  if(hspi->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a33      	ldr	r2, [pc, #204]	; (8000cdc <HAL_SPI_MspInit+0xec>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d160      	bne.n	8000cd4 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <HAL_SPI_MspInit+0xf0>)
 8000c14:	699a      	ldr	r2, [r3, #24]
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <HAL_SPI_MspInit+0xf0>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0149      	lsls	r1, r1, #5
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	619a      	str	r2, [r3, #24]
 8000c20:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <HAL_SPI_MspInit+0xf0>)
 8000c22:	699a      	ldr	r2, [r3, #24]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	015b      	lsls	r3, r3, #5
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <HAL_SPI_MspInit+0xf0>)
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <HAL_SPI_MspInit+0xf0>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0289      	lsls	r1, r1, #10
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	615a      	str	r2, [r3, #20]
 8000c3c:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <HAL_SPI_MspInit+0xf0>)
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000c4a:	2114      	movs	r1, #20
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	22b0      	movs	r2, #176	; 0xb0
 8000c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2202      	movs	r2, #2
 8000c56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2203      	movs	r2, #3
 8000c62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	187a      	adds	r2, r7, r1
 8000c6c:	2390      	movs	r3, #144	; 0x90
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f001 fb50 	bl	8002318 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000c7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <HAL_SPI_MspInit+0xf8>)
 8000c7c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f001 f956 	bl	8001f5c <HAL_DMA_Init>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8000cb4:	f7ff ff1c 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000cbc:	659a      	str	r2, [r3, #88]	; 0x58
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_SPI_MspInit+0xf4>)
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2019      	movs	r0, #25
 8000cca:	f001 f915 	bl	8001ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cce:	2019      	movs	r0, #25
 8000cd0:	f001 f927 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b00a      	add	sp, #40	; 0x28
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	200003a0 	.word	0x200003a0
 8000ce8:	4002001c 	.word	0x4002001c

08000cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x38>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10d      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x3c>)
 8000d00:	699a      	ldr	r2, [r3, #24]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_TIM_Base_MspInit+0x3c>)
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	0109      	lsls	r1, r1, #4
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	619a      	str	r2, [r3, #24]
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_TIM_Base_MspInit+0x3c>)
 8000d0e:	699a      	ldr	r2, [r3, #24]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b004      	add	sp, #16
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	2314      	movs	r3, #20
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2314      	movs	r3, #20
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f00a fa43 	bl	800b1ca <memset>
  if(huart->Instance==USART1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_UART_MspInit+0x94>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d133      	bne.n	8000db6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	01c9      	lsls	r1, r1, #7
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	619a      	str	r2, [r3, #24]
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d5e:	699a      	ldr	r2, [r3, #24]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	01db      	lsls	r3, r3, #7
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0289      	lsls	r1, r1, #10
 8000d74:	430a      	orrs	r2, r1
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d7a:	695a      	ldr	r2, [r3, #20]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	029b      	lsls	r3, r3, #10
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d86:	2114      	movs	r1, #20
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	22c0      	movs	r2, #192	; 0xc0
 8000d8c:	00d2      	lsls	r2, r2, #3
 8000d8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2201      	movs	r2, #1
 8000da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	187a      	adds	r2, r7, r1
 8000daa:	2390      	movs	r3, #144	; 0x90
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f001 fab1 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b00a      	add	sp, #40	; 0x28
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if (PORT_IDF_STM32CUBE != 0)
	if ((HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000df0:	f000 f960 	bl	80010b4 <HAL_GetTick>
 8000df4:	0004      	movs	r4, r0
 8000df6:	f00a f90d 	bl	800b014 <XF_tickIntervalInMilliseconds>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fa08 	bl	8000214 <__aeabi_uidivmod>
 8000e04:	1e0b      	subs	r3, r1, #0
 8000e06:	d101      	bne.n	8000e0c <SysTick_Handler+0x20>
	{
		XF_tick();
 8000e08:	f00a f8ee 	bl	800afe8 <XF_tick>
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e14 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f001 f992 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	200003a0 	.word	0x200003a0

08000e2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <SPI1_IRQHandler+0x14>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f002 fdc0 	bl	80039b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	2000033c 	.word	0x2000033c

08000e44 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <CEC_CAN_IRQHandler+0x14>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fd97 	bl	800197e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000220 	.word	0x20000220

08000e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	return 1;
 8000e60:	2301      	movs	r3, #1
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_kill>:

int _kill(int pid, int sig)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e72:	f00a f949 	bl	800b108 <__errno>
 8000e76:	0003      	movs	r3, r0
 8000e78:	2216      	movs	r2, #22
 8000e7a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	425b      	negs	r3, r3
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_exit>:

void _exit (int status)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e90:	2301      	movs	r3, #1
 8000e92:	425a      	negs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ffe5 	bl	8000e68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e9e:	e7fe      	b.n	8000e9e <_exit+0x16>

08000ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eb2:	e000      	b.n	8000eb6 <_read+0x16>
 8000eb4:	bf00      	nop
 8000eb6:	0001      	movs	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
	}

return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b006      	add	sp, #24
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e009      	b.n	8000f00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	e000      	b.n	8000efa <_write+0x20>
 8000ef8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf1      	blt.n	8000eec <_write+0x12>
	}
	return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b006      	add	sp, #24
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:

int _close(int file)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	return -1;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	425b      	negs	r3, r3
}
 8000f1e:	0018      	movs	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	0192      	lsls	r2, r2, #6
 8000f36:	605a      	str	r2, [r3, #4]
	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_isatty>:

int _isatty(int file)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	return 1;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b002      	add	sp, #8
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	0018      	movs	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b004      	add	sp, #16
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x50>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x16>
		heap_end = &end;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <_sbrk+0x50>)
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <_sbrk+0x54>)
 8000f80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <_sbrk+0x50>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <_sbrk+0x50>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	18d3      	adds	r3, r2, r3
 8000f90:	466a      	mov	r2, sp
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d907      	bls.n	8000fa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f96:	f00a f8b7 	bl	800b108 <__errno>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	220c      	movs	r2, #12
 8000f9e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	425b      	negs	r3, r3
 8000fa4:	e006      	b.n	8000fb4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <_sbrk+0x50>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	18d2      	adds	r2, r2, r3
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <_sbrk+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000090 	.word	0x20000090
 8000fc0:	200003f0 	.word	0x200003f0

08000fc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LoopForever+0xe>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	; (800101c <LoopForever+0x16>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ffa:	f7ff ffe3 	bl	8000fc4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ffe:	f00a f899 	bl	800b134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001002:	f7ff fa23 	bl	800044c <main>

08001006 <LoopForever>:

LoopForever:
    b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
  ldr   r0, =_estack
 8001008:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001014:	0800c9a8 	.word	0x0800c9a8
  ldr r2, =_sbss
 8001018:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800101c:	200003ec 	.word	0x200003ec

08001020 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC1_COMP_IRQHandler>
	...

08001024 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_Init+0x24>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_Init+0x24>)
 800102e:	2110      	movs	r1, #16
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f809 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103a:	f7ff fd5f 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_InitTick+0x5c>)
 8001056:	681c      	ldr	r4, [r3, #0]
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_InitTick+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	0019      	movs	r1, r3
 800105e:	23fa      	movs	r3, #250	; 0xfa
 8001060:	0098      	lsls	r0, r3, #2
 8001062:	f7ff f851 	bl	8000108 <__udivsi3>
 8001066:	0003      	movs	r3, r0
 8001068:	0019      	movs	r1, r3
 800106a:	0020      	movs	r0, r4
 800106c:	f7ff f84c 	bl	8000108 <__udivsi3>
 8001070:	0003      	movs	r3, r0
 8001072:	0018      	movs	r0, r3
 8001074:	f000 ff65 	bl	8001f42 <HAL_SYSTICK_Config>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d001      	beq.n	8001080 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e00f      	b.n	80010a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d80b      	bhi.n	800109e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	2301      	movs	r3, #1
 800108a:	425b      	negs	r3, r3
 800108c:	2200      	movs	r2, #0
 800108e:	0018      	movs	r0, r3
 8001090:	f000 ff32 	bl	8001ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_InitTick+0x64>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b003      	add	sp, #12
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <HAL_GetTick+0x10>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	200003e4 	.word	0x200003e4

080010c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0f0      	b.n	80012bc <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2220      	movs	r2, #32
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff fd2b 	bl	8000b44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2102      	movs	r1, #2
 80010fa:	438a      	bics	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010fe:	f7ff ffd9 	bl	80010b4 <HAL_GetTick>
 8001102:	0003      	movs	r3, r0
 8001104:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001106:	e013      	b.n	8001130 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001108:	f7ff ffd4 	bl	80010b4 <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b0a      	cmp	r3, #10
 8001114:	d90c      	bls.n	8001130 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	0292      	lsls	r2, r2, #10
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2220      	movs	r2, #32
 8001128:	2105      	movs	r1, #5
 800112a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0c5      	b.n	80012bc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2202      	movs	r2, #2
 8001138:	4013      	ands	r3, r2
 800113a:	d1e5      	bne.n	8001108 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2101      	movs	r1, #1
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800114c:	f7ff ffb2 	bl	80010b4 <HAL_GetTick>
 8001150:	0003      	movs	r3, r0
 8001152:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001154:	e013      	b.n	800117e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001156:	f7ff ffad 	bl	80010b4 <HAL_GetTick>
 800115a:	0002      	movs	r2, r0
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b0a      	cmp	r3, #10
 8001162:	d90c      	bls.n	800117e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	0292      	lsls	r2, r2, #10
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2220      	movs	r2, #32
 8001176:	2105      	movs	r1, #5
 8001178:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e09e      	b.n	80012bc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	4013      	ands	r3, r2
 8001188:	d0e5      	beq.n	8001156 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7e1b      	ldrb	r3, [r3, #24]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	438a      	bics	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7e5b      	ldrb	r3, [r3, #25]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e007      	b.n	80011de <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	438a      	bics	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7e9b      	ldrb	r3, [r3, #26]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d108      	bne.n	80011f8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2120      	movs	r1, #32
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e007      	b.n	8001208 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2120      	movs	r1, #32
 8001204:	438a      	bics	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7edb      	ldrb	r3, [r3, #27]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2110      	movs	r1, #16
 800121c:	438a      	bics	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e007      	b.n	8001232 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2110      	movs	r1, #16
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7f1b      	ldrb	r3, [r3, #28]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2108      	movs	r1, #8
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e007      	b.n	800125c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2108      	movs	r1, #8
 8001258:	438a      	bics	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7f5b      	ldrb	r3, [r3, #29]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d108      	bne.n	8001276 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2104      	movs	r1, #4
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e007      	b.n	8001286 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2104      	movs	r1, #4
 8001282:	438a      	bics	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	431a      	orrs	r2, r3
 800129c:	0011      	movs	r1, r2
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2220      	movs	r2, #32
 80012b6:	2101      	movs	r1, #1
 80012b8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b004      	add	sp, #16
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d4:	2013      	movs	r0, #19
 80012d6:	183b      	adds	r3, r7, r0
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	2120      	movs	r1, #32
 80012dc:	5c52      	ldrb	r2, [r2, r1]
 80012de:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80012e0:	183b      	adds	r3, r7, r0
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d005      	beq.n	80012f4 <HAL_CAN_ConfigFilter+0x30>
 80012e8:	2313      	movs	r3, #19
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d000      	beq.n	80012f4 <HAL_CAN_ConfigFilter+0x30>
 80012f2:	e0cd      	b.n	8001490 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	58d3      	ldr	r3, [r2, r3]
 80012fc:	2201      	movs	r2, #1
 80012fe:	431a      	orrs	r2, r3
 8001300:	0011      	movs	r1, r2
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	221f      	movs	r2, #31
 8001310:	4013      	ands	r3, r2
 8001312:	2201      	movs	r2, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	0013      	movs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	2387      	movs	r3, #135	; 0x87
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	58d3      	ldr	r3, [r2, r3]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	43d2      	mvns	r2, r2
 8001326:	401a      	ands	r2, r3
 8001328:	0011      	movs	r1, r2
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	2387      	movs	r3, #135	; 0x87
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d129      	bne.n	800138e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	2383      	movs	r3, #131	; 0x83
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	58d3      	ldr	r3, [r2, r3]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	43d2      	mvns	r2, r2
 8001346:	401a      	ands	r2, r3
 8001348:	0011      	movs	r1, r2
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	2383      	movs	r3, #131	; 0x83
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001364:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3248      	adds	r2, #72	; 0x48
 800136a:	00d2      	lsls	r2, r2, #3
 800136c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001380:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001382:	6979      	ldr	r1, [r7, #20]
 8001384:	3348      	adds	r3, #72	; 0x48
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	18cb      	adds	r3, r1, r3
 800138a:	3304      	adds	r3, #4
 800138c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d128      	bne.n	80013e8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	2383      	movs	r3, #131	; 0x83
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	58d2      	ldr	r2, [r2, r3]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	0011      	movs	r1, r2
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	2383      	movs	r3, #131	; 0x83
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013be:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3248      	adds	r2, #72	; 0x48
 80013c4:	00d2      	lsls	r2, r2, #3
 80013c6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013dc:	6979      	ldr	r1, [r7, #20]
 80013de:	3348      	adds	r3, #72	; 0x48
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	18cb      	adds	r3, r1, r3
 80013e4:	3304      	adds	r3, #4
 80013e6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10c      	bne.n	800140a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	2381      	movs	r3, #129	; 0x81
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	58d3      	ldr	r3, [r2, r3]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	43d2      	mvns	r2, r2
 80013fc:	401a      	ands	r2, r3
 80013fe:	0011      	movs	r1, r2
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	2381      	movs	r3, #129	; 0x81
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	50d1      	str	r1, [r2, r3]
 8001408:	e00a      	b.n	8001420 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	2381      	movs	r3, #129	; 0x81
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	58d2      	ldr	r2, [r2, r3]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	431a      	orrs	r2, r3
 8001416:	0011      	movs	r1, r2
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	2381      	movs	r3, #129	; 0x81
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10c      	bne.n	8001442 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	2385      	movs	r3, #133	; 0x85
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	58d3      	ldr	r3, [r2, r3]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	43d2      	mvns	r2, r2
 8001434:	401a      	ands	r2, r3
 8001436:	0011      	movs	r1, r2
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	2385      	movs	r3, #133	; 0x85
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	50d1      	str	r1, [r2, r3]
 8001440:	e00a      	b.n	8001458 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	2385      	movs	r3, #133	; 0x85
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	58d2      	ldr	r2, [r2, r3]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	431a      	orrs	r2, r3
 800144e:	0011      	movs	r1, r2
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	2385      	movs	r3, #133	; 0x85
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d10a      	bne.n	8001476 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	2387      	movs	r3, #135	; 0x87
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	58d2      	ldr	r2, [r2, r3]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	431a      	orrs	r2, r3
 800146c:	0011      	movs	r1, r2
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	2387      	movs	r3, #135	; 0x87
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	58d3      	ldr	r3, [r2, r3]
 800147e:	2201      	movs	r2, #1
 8001480:	4393      	bics	r3, r2
 8001482:	0019      	movs	r1, r3
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e007      	b.n	80014a0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	02d2      	lsls	r2, r2, #11
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
  }
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b006      	add	sp, #24
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2220      	movs	r2, #32
 80014b4:	5c9b      	ldrb	r3, [r3, r2]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d12f      	bne.n	800151c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	2102      	movs	r1, #2
 80014c2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2101      	movs	r1, #1
 80014d0:	438a      	bics	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fdee 	bl	80010b4 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014dc:	e013      	b.n	8001506 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014de:	f7ff fde9 	bl	80010b4 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b0a      	cmp	r3, #10
 80014ea:	d90c      	bls.n	8001506 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	0292      	lsls	r2, r2, #10
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	2105      	movs	r1, #5
 8001500:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e012      	b.n	800152c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	4013      	ands	r3, r2
 8001510:	d1e5      	bne.n	80014de <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	e007      	b.n	800152c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	0312      	lsls	r2, r2, #12
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
  }
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b004      	add	sp, #16
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001542:	201f      	movs	r0, #31
 8001544:	183b      	adds	r3, r7, r0
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	2120      	movs	r1, #32
 800154a:	5c52      	ldrb	r2, [r2, r1]
 800154c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001556:	183b      	adds	r3, r7, r0
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_CAN_AddTxMessage+0x36>
 800155e:	231f      	movs	r3, #31
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d000      	beq.n	800156a <HAL_CAN_AddTxMessage+0x36>
 8001568:	e0b7      	b.n	80016da <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	04db      	lsls	r3, r3, #19
 8001570:	4013      	ands	r3, r2
 8001572:	d10a      	bne.n	800158a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	051b      	lsls	r3, r3, #20
 800157a:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800157c:	d105      	bne.n	800158a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	055b      	lsls	r3, r3, #21
 8001584:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001586:	d100      	bne.n	800158a <HAL_CAN_AddTxMessage+0x56>
 8001588:	e09e      	b.n	80016c8 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	0e1b      	lsrs	r3, r3, #24
 800158e:	2203      	movs	r2, #3
 8001590:	4013      	ands	r3, r2
 8001592:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d908      	bls.n	80015ac <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	0412      	lsls	r2, r2, #16
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e09e      	b.n	80016ea <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015ac:	2201      	movs	r2, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	409a      	lsls	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4311      	orrs	r1, r2
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	3218      	adds	r2, #24
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	50d1      	str	r1, [r2, r3]
 80015d6:	e00f      	b.n	80015f8 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e2:	431a      	orrs	r2, r3
 80015e4:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80015ee:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	3218      	adds	r2, #24
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3318      	adds	r3, #24
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	18cb      	adds	r3, r1, r3
 8001608:	3304      	adds	r3, #4
 800160a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	7d1b      	ldrb	r3, [r3, #20]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d112      	bne.n	800163a <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3318      	adds	r3, #24
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	18d3      	adds	r3, r2, r3
 8001620:	3304      	adds	r3, #4
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3318      	adds	r3, #24
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	18cb      	adds	r3, r1, r3
 8001636:	3304      	adds	r3, #4
 8001638:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3307      	adds	r3, #7
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	061a      	lsls	r2, r3, #24
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3306      	adds	r3, #6
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3305      	adds	r3, #5
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3304      	adds	r3, #4
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	0019      	movs	r1, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	6979      	ldr	r1, [r7, #20]
 8001666:	23c6      	movs	r3, #198	; 0xc6
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	0109      	lsls	r1, r1, #4
 800166c:	1841      	adds	r1, r0, r1
 800166e:	18cb      	adds	r3, r1, r3
 8001670:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3303      	adds	r3, #3
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	061a      	lsls	r2, r3, #24
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3302      	adds	r3, #2
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	0019      	movs	r1, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	6979      	ldr	r1, [r7, #20]
 800169c:	23c4      	movs	r3, #196	; 0xc4
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	0109      	lsls	r1, r1, #4
 80016a2:	1841      	adds	r1, r0, r1
 80016a4:	18cb      	adds	r3, r1, r3
 80016a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	3218      	adds	r2, #24
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	58d2      	ldr	r2, [r2, r3]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	4311      	orrs	r1, r2
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	3218      	adds	r2, #24
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e010      	b.n	80016ea <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	0392      	lsls	r2, r2, #14
 80016d0:	431a      	orrs	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e007      	b.n	80016ea <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	02d2      	lsls	r2, r2, #11
 80016e2:	431a      	orrs	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
  }
}
 80016ea:	0018      	movs	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b008      	add	sp, #32
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001700:	2017      	movs	r0, #23
 8001702:	183b      	adds	r3, r7, r0
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	2120      	movs	r1, #32
 8001708:	5c52      	ldrb	r2, [r2, r1]
 800170a:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800170c:	183b      	adds	r3, r7, r0
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d005      	beq.n	8001720 <HAL_CAN_GetRxMessage+0x2e>
 8001714:	2317      	movs	r3, #23
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d000      	beq.n	8001720 <HAL_CAN_GetRxMessage+0x2e>
 800171e:	e0f8      	b.n	8001912 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10e      	bne.n	8001744 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2203      	movs	r2, #3
 800172e:	4013      	ands	r3, r2
 8001730:	d117      	bne.n	8001762 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	0392      	lsls	r2, r2, #14
 800173a:	431a      	orrs	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0ee      	b.n	8001922 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2203      	movs	r2, #3
 800174c:	4013      	ands	r3, r2
 800174e:	d108      	bne.n	8001762 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0392      	lsls	r2, r2, #14
 8001758:	431a      	orrs	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0df      	b.n	8001922 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	321b      	adds	r2, #27
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	58d3      	ldr	r3, [r2, r3]
 800176e:	2204      	movs	r2, #4
 8001770:	401a      	ands	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10b      	bne.n	8001796 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	321b      	adds	r2, #27
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	58d3      	ldr	r3, [r2, r3]
 800178a:	0d5b      	lsrs	r3, r3, #21
 800178c:	055b      	lsls	r3, r3, #21
 800178e:	0d5a      	lsrs	r2, r3, #21
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e00a      	b.n	80017ac <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	321b      	adds	r2, #27
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	58d3      	ldr	r3, [r2, r3]
 80017a2:	08db      	lsrs	r3, r3, #3
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	321b      	adds	r2, #27
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	58d3      	ldr	r3, [r2, r3]
 80017b8:	2202      	movs	r2, #2
 80017ba:	401a      	ands	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	331b      	adds	r3, #27
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	18d3      	adds	r3, r2, r3
 80017cc:	3304      	adds	r3, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	220f      	movs	r2, #15
 80017d2:	401a      	ands	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	331b      	adds	r3, #27
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	18d3      	adds	r3, r2, r3
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	22ff      	movs	r2, #255	; 0xff
 80017ec:	401a      	ands	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	331b      	adds	r3, #27
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	18d3      	adds	r3, r2, r3
 80017fe:	3304      	adds	r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0c1b      	lsrs	r3, r3, #16
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	0c1a      	lsrs	r2, r3, #16
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	23dc      	movs	r3, #220	; 0xdc
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	188a      	adds	r2, r1, r2
 800181a:	18d3      	adds	r3, r2, r3
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	23dc      	movs	r3, #220	; 0xdc
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	188a      	adds	r2, r1, r2
 8001832:	18d3      	adds	r3, r2, r3
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	0a1a      	lsrs	r2, r3, #8
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	23dc      	movs	r3, #220	; 0xdc
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	188a      	adds	r2, r1, r2
 800184e:	18d3      	adds	r3, r2, r3
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0c1a      	lsrs	r2, r3, #16
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3302      	adds	r3, #2
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	23dc      	movs	r3, #220	; 0xdc
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	188a      	adds	r2, r1, r2
 800186a:	18d3      	adds	r3, r2, r3
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e1a      	lsrs	r2, r3, #24
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	3303      	adds	r3, #3
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	23de      	movs	r3, #222	; 0xde
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	188a      	adds	r2, r1, r2
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3304      	adds	r3, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6819      	ldr	r1, [r3, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	23de      	movs	r3, #222	; 0xde
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	188a      	adds	r2, r1, r2
 80018a0:	18d3      	adds	r3, r2, r3
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0a1a      	lsrs	r2, r3, #8
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3305      	adds	r3, #5
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	23de      	movs	r3, #222	; 0xde
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	188a      	adds	r2, r1, r2
 80018bc:	18d3      	adds	r3, r2, r3
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0c1a      	lsrs	r2, r3, #16
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	3306      	adds	r3, #6
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	23de      	movs	r3, #222	; 0xde
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	188a      	adds	r2, r1, r2
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0e1a      	lsrs	r2, r3, #24
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	3307      	adds	r3, #7
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d108      	bne.n	80018fe <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2120      	movs	r1, #32
 80018f8:	430a      	orrs	r2, r1
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	e007      	b.n	800190e <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2120      	movs	r1, #32
 800190a:	430a      	orrs	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e007      	b.n	8001922 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2280      	movs	r2, #128	; 0x80
 8001918:	02d2      	lsls	r2, r2, #11
 800191a:	431a      	orrs	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
  }
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b006      	add	sp, #24
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001934:	200f      	movs	r0, #15
 8001936:	183b      	adds	r3, r7, r0
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	2120      	movs	r1, #32
 800193c:	5c52      	ldrb	r2, [r2, r1]
 800193e:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001940:	183b      	adds	r3, r7, r0
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d004      	beq.n	8001952 <HAL_CAN_ActivateNotification+0x28>
 8001948:	230f      	movs	r3, #15
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d109      	bne.n	8001966 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6959      	ldr	r1, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e007      	b.n	8001976 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	02d2      	lsls	r2, r2, #11
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
  }
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b004      	add	sp, #16
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b08a      	sub	sp, #40	; 0x28
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019ba:	6a3b      	ldr	r3, [r7, #32]
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	d100      	bne.n	80019c4 <HAL_CAN_IRQHandler+0x46>
 80019c2:	e084      	b.n	8001ace <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d024      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2201      	movs	r2, #1
 80019d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d004      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0018      	movs	r0, r3
 80019e0:	f000 f97e 	bl	8001ce0 <HAL_CAN_TxMailbox0CompleteCallback>
 80019e4:	e017      	b.n	8001a16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2204      	movs	r2, #4
 80019ea:	4013      	ands	r3, r2
 80019ec:	d005      	beq.n	80019fa <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	4313      	orrs	r3, r2
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e00d      	b.n	8001a16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2208      	movs	r2, #8
 80019fe:	4013      	ands	r3, r2
 8001a00:	d005      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	0152      	lsls	r2, r2, #5
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	e003      	b.n	8001a16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f000 f97d 	bl	8001d10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d028      	beq.n	8001a72 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	0052      	lsls	r2, r2, #1
 8001a28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d004      	beq.n	8001a3e <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 f95a 	bl	8001cf0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a3c:	e019      	b.n	8001a72 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4013      	ands	r3, r2
 8001a46:	d005      	beq.n	8001a54 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	0192      	lsls	r2, r2, #6
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e00e      	b.n	8001a72 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d005      	beq.n	8001a6a <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	01d2      	lsls	r2, r2, #7
 8001a64:	4313      	orrs	r3, r2
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
 8001a68:	e003      	b.n	8001a72 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 f957 	bl	8001d20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	025b      	lsls	r3, r3, #9
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d028      	beq.n	8001ace <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0252      	lsls	r2, r2, #9
 8001a84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 f934 	bl	8001d00 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a98:	e019      	b.n	8001ace <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	02db      	lsls	r3, r3, #11
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d005      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0212      	lsls	r2, r2, #8
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	e00e      	b.n	8001ace <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	031b      	lsls	r3, r3, #12
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d005      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	0252      	lsls	r2, r2, #9
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac4:	e003      	b.n	8001ace <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 f931 	bl	8001d30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d00c      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2210      	movs	r2, #16
 8001ada:	4013      	ands	r3, r2
 8001adc:	d008      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2210      	movs	r2, #16
 8001aee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	2204      	movs	r2, #4
 8001af4:	4013      	ands	r3, r2
 8001af6:	d00b      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2208      	movs	r2, #8
 8001afc:	4013      	ands	r3, r2
 8001afe:	d007      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2208      	movs	r2, #8
 8001b06:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 f918 	bl	8001d40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d009      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2203      	movs	r2, #3
 8001b20:	4013      	ands	r3, r2
 8001b22:	d003      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7fe fc7a 	bl	8000420 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	4013      	ands	r3, r2
 8001b32:	d00c      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2210      	movs	r2, #16
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d008      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	00d2      	lsls	r2, r2, #3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	2220      	movs	r2, #32
 8001b52:	4013      	ands	r3, r2
 8001b54:	d00b      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2208      	movs	r2, #8
 8001b64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 f8f9 	bl	8001d60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	2210      	movs	r2, #16
 8001b72:	4013      	ands	r3, r2
 8001b74:	d009      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d003      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f000 f8e3 	bl	8001d50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b8a:	6a3a      	ldr	r2, [r7, #32]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	029b      	lsls	r3, r3, #10
 8001b90:	4013      	ands	r3, r2
 8001b92:	d00b      	beq.n	8001bac <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2210      	movs	r2, #16
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f000 f8e2 	bl	8001d70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bac:	6a3a      	ldr	r2, [r7, #32]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	025b      	lsls	r3, r3, #9
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d00b      	beq.n	8001bce <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 f8d9 	bl	8001d80 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bce:	6a3a      	ldr	r2, [r7, #32]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d100      	bne.n	8001bda <HAL_CAN_IRQHandler+0x25c>
 8001bd8:	e071      	b.n	8001cbe <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	4013      	ands	r3, r2
 8001be0:	d100      	bne.n	8001be4 <HAL_CAN_IRQHandler+0x266>
 8001be2:	e068      	b.n	8001cb6 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001be4:	6a3a      	ldr	r2, [r7, #32]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bf4:	d003      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bfe:	6a3a      	ldr	r2, [r7, #32]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c0e:	d003      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	2202      	movs	r2, #2
 8001c14:	4313      	orrs	r3, r2
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c18:	6a3a      	ldr	r2, [r7, #32]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2204      	movs	r2, #4
 8001c26:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c28:	d003      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c32:	6a3a      	ldr	r2, [r7, #32]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d03c      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2270      	movs	r2, #112	; 0x70
 8001c40:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c42:	d038      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2270      	movs	r2, #112	; 0x70
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b30      	cmp	r3, #48	; 0x30
 8001c4c:	d016      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x2fe>
 8001c4e:	d804      	bhi.n	8001c5a <HAL_CAN_IRQHandler+0x2dc>
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d009      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x2ea>
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d00c      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c58:	e025      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001c5a:	2b50      	cmp	r3, #80	; 0x50
 8001c5c:	d018      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x312>
 8001c5e:	2b60      	cmp	r3, #96	; 0x60
 8001c60:	d01b      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x31c>
 8001c62:	2b40      	cmp	r3, #64	; 0x40
 8001c64:	d00f      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x308>
            break;
 8001c66:	e01e      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c70:	e019      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	2210      	movs	r2, #16
 8001c76:	4313      	orrs	r3, r2
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c7a:	e014      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2220      	movs	r2, #32
 8001c80:	4313      	orrs	r3, r2
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c84:	e00f      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	2240      	movs	r2, #64	; 0x40
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8e:	e00a      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	4313      	orrs	r3, r2
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c98:	e005      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	0052      	lsls	r2, r2, #1
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca4:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2170      	movs	r1, #112	; 0x70
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d009      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f000 f85c 	bl	8001d90 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b00a      	add	sp, #40	; 0x28
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b002      	add	sp, #8
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b002      	add	sp, #8
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b002      	add	sp, #8
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	0002      	movs	r2, r0
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b7f      	cmp	r3, #127	; 0x7f
 8001db2:	d809      	bhi.n	8001dc8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	001a      	movs	r2, r3
 8001dba:	231f      	movs	r3, #31
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_EnableIRQ+0x30>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4091      	lsls	r1, r2
 8001dc4:	000a      	movs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
  }
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	0002      	movs	r2, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b7f      	cmp	r3, #127	; 0x7f
 8001de8:	d828      	bhi.n	8001e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	33c0      	adds	r3, #192	; 0xc0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	589b      	ldr	r3, [r3, r2]
 8001dfa:	1dfa      	adds	r2, r7, #7
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	0011      	movs	r1, r2
 8001e00:	2203      	movs	r2, #3
 8001e02:	400a      	ands	r2, r1
 8001e04:	00d2      	lsls	r2, r2, #3
 8001e06:	21ff      	movs	r1, #255	; 0xff
 8001e08:	4091      	lsls	r1, r2
 8001e0a:	000a      	movs	r2, r1
 8001e0c:	43d2      	mvns	r2, r2
 8001e0e:	401a      	ands	r2, r3
 8001e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	401a      	ands	r2, r3
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	2303      	movs	r3, #3
 8001e22:	4003      	ands	r3, r0
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	430a      	orrs	r2, r1
 8001e34:	33c0      	adds	r3, #192	; 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e3a:	e031      	b.n	8001ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <__NVIC_SetPriority+0xd8>)
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	0019      	movs	r1, r3
 8001e44:	230f      	movs	r3, #15
 8001e46:	400b      	ands	r3, r1
 8001e48:	3b08      	subs	r3, #8
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3306      	adds	r3, #6
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1dfa      	adds	r2, r7, #7
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	400a      	ands	r2, r1
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	21ff      	movs	r1, #255	; 0xff
 8001e64:	4091      	lsls	r1, r2
 8001e66:	000a      	movs	r2, r1
 8001e68:	43d2      	mvns	r2, r2
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	401a      	ands	r2, r3
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	4003      	ands	r3, r0
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e84:	4809      	ldr	r0, [pc, #36]	; (8001eac <__NVIC_SetPriority+0xd8>)
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	001c      	movs	r4, r3
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	4023      	ands	r3, r4
 8001e90:	3b08      	subs	r3, #8
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	430a      	orrs	r2, r1
 8001e96:	3306      	adds	r3, #6
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	18c3      	adds	r3, r0, r3
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <SysTick_Config+0x40>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e010      	b.n	8001ee8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <SysTick_Config+0x44>)
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	3a01      	subs	r2, #1
 8001ecc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	2103      	movs	r1, #3
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff ff7d 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SysTick_Config+0x44>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x44>)
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b002      	add	sp, #8
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	00ffffff 	.word	0x00ffffff
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	210f      	movs	r1, #15
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	1c02      	adds	r2, r0, #0
 8001f08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	0002      	movs	r2, r0
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff ff33 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff ffaf 	bl	8001eb0 <SysTick_Config>
 8001f52:	0003      	movs	r3, r0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e036      	b.n	8001fe0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2221      	movs	r2, #33	; 0x21
 8001f76:	2102      	movs	r1, #2
 8001f78:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_DMA_Init+0x8c>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 f98c 	bl	80022e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2221      	movs	r2, #33	; 0x21
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}  
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b004      	add	sp, #16
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	ffffc00f 	.word	0xffffc00f

08001fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2317      	movs	r3, #23
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2220      	movs	r2, #32
 8002006:	5c9b      	ldrb	r3, [r3, r2]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_DMA_Start_IT+0x24>
 800200c:	2302      	movs	r3, #2
 800200e:	e04f      	b.n	80020b0 <HAL_DMA_Start_IT+0xc4>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	2101      	movs	r1, #1
 8002016:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2221      	movs	r2, #33	; 0x21
 800201c:	5c9b      	ldrb	r3, [r3, r2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d13a      	bne.n	800209a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2221      	movs	r2, #33	; 0x21
 8002028:	2102      	movs	r1, #2
 800202a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	438a      	bics	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f91d 	bl	8002288 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	210e      	movs	r1, #14
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e00f      	b.n	8002088 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	210a      	movs	r1, #10
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2104      	movs	r1, #4
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e007      	b.n	80020aa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	2100      	movs	r1, #0
 80020a0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80020a2:	2317      	movs	r3, #23
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2202      	movs	r2, #2
 80020a8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80020aa:	2317      	movs	r3, #23
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
} 
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b006      	add	sp, #24
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	230f      	movs	r3, #15
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2221      	movs	r2, #33	; 0x21
 80020cc:	5c9b      	ldrb	r3, [r3, r2]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d007      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2204      	movs	r2, #4
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020da:	230f      	movs	r3, #15
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
 80020e2:	e028      	b.n	8002136 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	210e      	movs	r1, #14
 80020f0:	438a      	bics	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2101      	movs	r1, #1
 8002100:	438a      	bics	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	2101      	movs	r1, #1
 800210e:	4091      	lsls	r1, r2
 8002110:	000a      	movs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2221      	movs	r2, #33	; 0x21
 8002118:	2101      	movs	r1, #1
 800211a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	0010      	movs	r0, r2
 8002134:	4798      	blx	r3
    } 
  }
  return status;
 8002136:	230f      	movs	r3, #15
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	781b      	ldrb	r3, [r3, #0]
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2204      	movs	r2, #4
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	d024      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x72>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2204      	movs	r2, #4
 8002170:	4013      	ands	r3, r2
 8002172:	d020      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2220      	movs	r2, #32
 800217c:	4013      	ands	r3, r2
 800217e:	d107      	bne.n	8002190 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2104      	movs	r1, #4
 800218c:	438a      	bics	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	2104      	movs	r1, #4
 800219a:	4091      	lsls	r1, r2
 800219c:	000a      	movs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d100      	bne.n	80021aa <HAL_DMA_IRQHandler+0x66>
 80021a8:	e06a      	b.n	8002280 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	0010      	movs	r0, r2
 80021b2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80021b4:	e064      	b.n	8002280 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2202      	movs	r2, #2
 80021bc:	409a      	lsls	r2, r3
 80021be:	0013      	movs	r3, r2
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	d02b      	beq.n	800221e <HAL_DMA_IRQHandler+0xda>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2202      	movs	r2, #2
 80021ca:	4013      	ands	r3, r2
 80021cc:	d027      	beq.n	800221e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2220      	movs	r2, #32
 80021d6:	4013      	ands	r3, r2
 80021d8:	d10b      	bne.n	80021f2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	210a      	movs	r1, #10
 80021e6:	438a      	bics	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	2101      	movs	r1, #1
 80021f0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2102      	movs	r1, #2
 80021fc:	4091      	lsls	r1, r2
 80021fe:	000a      	movs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	2100      	movs	r1, #0
 8002208:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d036      	beq.n	8002280 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	0010      	movs	r0, r2
 800221a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800221c:	e030      	b.n	8002280 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2208      	movs	r2, #8
 8002224:	409a      	lsls	r2, r3
 8002226:	0013      	movs	r3, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4013      	ands	r3, r2
 800222c:	d028      	beq.n	8002280 <HAL_DMA_IRQHandler+0x13c>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2208      	movs	r2, #8
 8002232:	4013      	ands	r3, r2
 8002234:	d024      	beq.n	8002280 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	210e      	movs	r1, #14
 8002242:	438a      	bics	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	2101      	movs	r1, #1
 8002250:	4091      	lsls	r1, r2
 8002252:	000a      	movs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2221      	movs	r2, #33	; 0x21
 8002260:	2101      	movs	r1, #1
 8002262:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	2100      	movs	r1, #0
 800226a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	0010      	movs	r0, r2
 800227c:	4798      	blx	r3
    }
   }
}  
 800227e:	e7ff      	b.n	8002280 <HAL_DMA_IRQHandler+0x13c>
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b004      	add	sp, #16
 8002286:	bd80      	pop	{r7, pc}

08002288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	2101      	movs	r1, #1
 80022a0:	4091      	lsls	r1, r2
 80022a2:	000a      	movs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d108      	bne.n	80022c8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022c6:	e007      	b.n	80022d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}

080022e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a08      	ldr	r2, [pc, #32]	; (8002310 <DMA_CalcBaseAndBitshift+0x30>)
 80022ee:	4694      	mov	ip, r2
 80022f0:	4463      	add	r3, ip
 80022f2:	2114      	movs	r1, #20
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7fd ff07 	bl	8000108 <__udivsi3>
 80022fa:	0003      	movs	r3, r0
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a03      	ldr	r2, [pc, #12]	; (8002314 <DMA_CalcBaseAndBitshift+0x34>)
 8002306:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}
 8002310:	bffdfff8 	.word	0xbffdfff8
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	e155      	b.n	80025d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4091      	lsls	r1, r2
 8002332:	000a      	movs	r2, r1
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <HAL_GPIO_Init+0x28>
 800233e:	e146      	b.n	80025ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x38>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b12      	cmp	r3, #18
 800234e:	d123      	bne.n	8002398 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	58d3      	ldr	r3, [r2, r3]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2207      	movs	r2, #7
 8002362:	4013      	ands	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	409a      	lsls	r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	43da      	mvns	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2107      	movs	r1, #7
 800237c:	400b      	ands	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	409a      	lsls	r2, r3
 8002382:	0013      	movs	r3, r2
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	6939      	ldr	r1, [r7, #16]
 8002396:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	409a      	lsls	r2, r3
 80023a6:	0013      	movs	r3, r2
 80023a8:	43da      	mvns	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2203      	movs	r2, #3
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	0013      	movs	r3, r2
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d00b      	beq.n	80023ec <HAL_GPIO_Init+0xd4>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d007      	beq.n	80023ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e0:	2b11      	cmp	r3, #17
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b12      	cmp	r3, #18
 80023ea:	d130      	bne.n	800244e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	409a      	lsls	r2, r3
 80023fa:	0013      	movs	r3, r2
 80023fc:	43da      	mvns	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	409a      	lsls	r2, r3
 800240e:	0013      	movs	r3, r2
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002422:	2201      	movs	r2, #1
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
 8002428:	0013      	movs	r3, r2
 800242a:	43da      	mvns	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	2201      	movs	r2, #1
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	409a      	lsls	r2, r3
 800245c:	0013      	movs	r3, r2
 800245e:	43da      	mvns	r2, r3
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	409a      	lsls	r2, r3
 8002470:	0013      	movs	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	055b      	lsls	r3, r3, #21
 8002486:	4013      	ands	r3, r2
 8002488:	d100      	bne.n	800248c <HAL_GPIO_Init+0x174>
 800248a:	e0a0      	b.n	80025ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248c:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_GPIO_Init+0x2d4>)
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	4b56      	ldr	r3, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x2d4>)
 8002492:	2101      	movs	r1, #1
 8002494:	430a      	orrs	r2, r1
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_GPIO_Init+0x2d4>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2201      	movs	r2, #1
 800249e:	4013      	ands	r3, r2
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_GPIO_Init+0x2d8>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	589b      	ldr	r3, [r3, r2]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2203      	movs	r2, #3
 80024b6:	4013      	ands	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	409a      	lsls	r2, r3
 80024be:	0013      	movs	r3, r2
 80024c0:	43da      	mvns	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	2390      	movs	r3, #144	; 0x90
 80024cc:	05db      	lsls	r3, r3, #23
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_Init+0x1ee>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <HAL_GPIO_Init+0x2dc>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0x1ea>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a46      	ldr	r2, [pc, #280]	; (80025f8 <HAL_GPIO_Init+0x2e0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_Init+0x1e6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a45      	ldr	r2, [pc, #276]	; (80025fc <HAL_GPIO_Init+0x2e4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x1e2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a44      	ldr	r2, [pc, #272]	; (8002600 <HAL_GPIO_Init+0x2e8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_Init+0x1de>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x1f0>
 80024f6:	2305      	movs	r3, #5
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x1f0>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x1f0>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x1f0>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x1f0>
 8002506:	2300      	movs	r3, #0
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	2103      	movs	r1, #3
 800250c:	400a      	ands	r2, r1
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_GPIO_Init+0x2d8>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43da      	mvns	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	025b      	lsls	r3, r3, #9
 800253e:	4013      	ands	r3, r2
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002550:	4b2c      	ldr	r3, [pc, #176]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43da      	mvns	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	029b      	lsls	r3, r3, #10
 8002568:	4013      	ands	r3, r2
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43da      	mvns	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	035b      	lsls	r3, r3, #13
 8002592:	4013      	ands	r3, r2
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800259e:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	039b      	lsls	r3, r3, #14
 80025bc:	4013      	ands	r3, r2
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_GPIO_Init+0x2ec>)
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	40da      	lsrs	r2, r3
 80025dc:	1e13      	subs	r3, r2, #0
 80025de:	d000      	beq.n	80025e2 <HAL_GPIO_Init+0x2ca>
 80025e0:	e6a2      	b.n	8002328 <HAL_GPIO_Init+0x10>
  } 
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b006      	add	sp, #24
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40010000 	.word	0x40010000
 80025f4:	48000400 	.word	0x48000400
 80025f8:	48000800 	.word	0x48000800
 80025fc:	48000c00 	.word	0x48000c00
 8002600:	48001000 	.word	0x48001000
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	000a      	movs	r2, r1
 8002612:	1cbb      	adds	r3, r7, #2
 8002614:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	1cba      	adds	r2, r7, #2
 800261c:	8812      	ldrh	r2, [r2, #0]
 800261e:	4013      	ands	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002622:	230f      	movs	r3, #15
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e003      	b.n	8002634 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262c:	230f      	movs	r3, #15
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002634:	230f      	movs	r3, #15
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	781b      	ldrb	r3, [r3, #0]
  }
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	0008      	movs	r0, r1
 800264c:	0011      	movs	r1, r2
 800264e:	1cbb      	adds	r3, r7, #2
 8002650:	1c02      	adds	r2, r0, #0
 8002652:	801a      	strh	r2, [r3, #0]
 8002654:	1c7b      	adds	r3, r7, #1
 8002656:	1c0a      	adds	r2, r1, #0
 8002658:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800265a:	1c7b      	adds	r3, r7, #1
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002662:	1cbb      	adds	r3, r7, #2
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800266a:	e003      	b.n	8002674 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800266c:	1cbb      	adds	r3, r7, #2
 800266e:	881a      	ldrh	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	000a      	movs	r2, r1
 8002686:	1cbb      	adds	r3, r7, #2
 8002688:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	1cba      	adds	r2, r7, #2
 8002690:	8812      	ldrh	r2, [r2, #0]
 8002692:	4013      	ands	r3, r2
 8002694:	d005      	beq.n	80026a2 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002696:	1cbb      	adds	r3, r7, #2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	041a      	lsls	r2, r3, #16
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80026a0:	e003      	b.n	80026aa <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026a2:	1cbb      	adds	r3, r7, #2
 80026a4:	881a      	ldrh	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b002      	add	sp, #8
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f000 fb76 	bl	8002db4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	d100      	bne.n	80026d4 <HAL_RCC_OscConfig+0x20>
 80026d2:	e08e      	b.n	80027f2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026d4:	4bc5      	ldr	r3, [pc, #788]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	220c      	movs	r2, #12
 80026da:	4013      	ands	r3, r2
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d00e      	beq.n	80026fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e0:	4bc2      	ldr	r3, [pc, #776]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	220c      	movs	r2, #12
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d117      	bne.n	800271c <HAL_RCC_OscConfig+0x68>
 80026ec:	4bbf      	ldr	r3, [pc, #764]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	23c0      	movs	r3, #192	; 0xc0
 80026f2:	025b      	lsls	r3, r3, #9
 80026f4:	401a      	ands	r2, r3
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	025b      	lsls	r3, r3, #9
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d10e      	bne.n	800271c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fe:	4bbb      	ldr	r3, [pc, #748]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	029b      	lsls	r3, r3, #10
 8002706:	4013      	ands	r3, r2
 8002708:	d100      	bne.n	800270c <HAL_RCC_OscConfig+0x58>
 800270a:	e071      	b.n	80027f0 <HAL_RCC_OscConfig+0x13c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d000      	beq.n	8002716 <HAL_RCC_OscConfig+0x62>
 8002714:	e06c      	b.n	80027f0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f000 fb4c 	bl	8002db4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x80>
 8002724:	4bb1      	ldr	r3, [pc, #708]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4bb0      	ldr	r3, [pc, #704]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	0249      	lsls	r1, r1, #9
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e02f      	b.n	8002794 <HAL_RCC_OscConfig+0xe0>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0xa2>
 800273c:	4bab      	ldr	r3, [pc, #684]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4baa      	ldr	r3, [pc, #680]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002742:	49ab      	ldr	r1, [pc, #684]	; (80029f0 <HAL_RCC_OscConfig+0x33c>)
 8002744:	400a      	ands	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	4ba8      	ldr	r3, [pc, #672]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4ba7      	ldr	r3, [pc, #668]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800274e:	49a9      	ldr	r1, [pc, #676]	; (80029f4 <HAL_RCC_OscConfig+0x340>)
 8002750:	400a      	ands	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e01e      	b.n	8002794 <HAL_RCC_OscConfig+0xe0>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d10e      	bne.n	800277c <HAL_RCC_OscConfig+0xc8>
 800275e:	4ba3      	ldr	r3, [pc, #652]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4ba2      	ldr	r3, [pc, #648]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	02c9      	lsls	r1, r1, #11
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	4b9f      	ldr	r3, [pc, #636]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b9e      	ldr	r3, [pc, #632]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	0249      	lsls	r1, r1, #9
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0xe0>
 800277c:	4b9b      	ldr	r3, [pc, #620]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b9a      	ldr	r3, [pc, #616]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002782:	499b      	ldr	r1, [pc, #620]	; (80029f0 <HAL_RCC_OscConfig+0x33c>)
 8002784:	400a      	ands	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4b98      	ldr	r3, [pc, #608]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b97      	ldr	r3, [pc, #604]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800278e:	4999      	ldr	r1, [pc, #612]	; (80029f4 <HAL_RCC_OscConfig+0x340>)
 8002790:	400a      	ands	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d014      	beq.n	80027c6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe fc8a 	bl	80010b4 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a6:	f7fe fc85 	bl	80010b4 <HAL_GetTick>
 80027aa:	0002      	movs	r2, r0
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b64      	cmp	r3, #100	; 0x64
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e2fd      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b8:	4b8c      	ldr	r3, [pc, #560]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	029b      	lsls	r3, r3, #10
 80027c0:	4013      	ands	r3, r2
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0xf2>
 80027c4:	e015      	b.n	80027f2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fc75 	bl	80010b4 <HAL_GetTick>
 80027ca:	0003      	movs	r3, r0
 80027cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe fc70 	bl	80010b4 <HAL_GetTick>
 80027d4:	0002      	movs	r2, r0
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e2e8      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	4b82      	ldr	r3, [pc, #520]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	029b      	lsls	r3, r3, #10
 80027ea:	4013      	ands	r3, r2
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x11c>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2202      	movs	r2, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	d100      	bne.n	80027fe <HAL_RCC_OscConfig+0x14a>
 80027fc:	e06c      	b.n	80028d8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027fe:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	220c      	movs	r2, #12
 8002804:	4013      	ands	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002808:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	220c      	movs	r2, #12
 800280e:	4013      	ands	r3, r2
 8002810:	2b08      	cmp	r3, #8
 8002812:	d11f      	bne.n	8002854 <HAL_RCC_OscConfig+0x1a0>
 8002814:	4b75      	ldr	r3, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	23c0      	movs	r3, #192	; 0xc0
 800281a:	025b      	lsls	r3, r3, #9
 800281c:	401a      	ands	r2, r3
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	429a      	cmp	r2, r3
 8002824:	d116      	bne.n	8002854 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	4b71      	ldr	r3, [pc, #452]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2202      	movs	r2, #2
 800282c:	4013      	ands	r3, r2
 800282e:	d005      	beq.n	800283c <HAL_RCC_OscConfig+0x188>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d001      	beq.n	800283c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e2bb      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b6b      	ldr	r3, [pc, #428]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	22f8      	movs	r2, #248	; 0xf8
 8002842:	4393      	bics	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00da      	lsls	r2, r3, #3
 800284c:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e041      	b.n	80028d8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d024      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285c:	4b63      	ldr	r3, [pc, #396]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b62      	ldr	r3, [pc, #392]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002862:	2101      	movs	r1, #1
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fc24 	bl	80010b4 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002872:	f7fe fc1f 	bl	80010b4 <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e297      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2202      	movs	r2, #2
 800288a:	4013      	ands	r3, r2
 800288c:	d0f1      	beq.n	8002872 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288e:	4b57      	ldr	r3, [pc, #348]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	22f8      	movs	r2, #248	; 0xf8
 8002894:	4393      	bics	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	00da      	lsls	r2, r3, #3
 800289e:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e018      	b.n	80028d8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a6:	4b51      	ldr	r3, [pc, #324]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80028ac:	2101      	movs	r1, #1
 80028ae:	438a      	bics	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe fbff 	bl	80010b4 <HAL_GetTick>
 80028b6:	0003      	movs	r3, r0
 80028b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028bc:	f7fe fbfa 	bl	80010b4 <HAL_GetTick>
 80028c0:	0002      	movs	r2, r0
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e272      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d1f1      	bne.n	80028bc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2208      	movs	r2, #8
 80028de:	4013      	ands	r3, r2
 80028e0:	d036      	beq.n	8002950 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d019      	beq.n	800291e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ea:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80028ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ee:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80028f0:	2101      	movs	r1, #1
 80028f2:	430a      	orrs	r2, r1
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f6:	f7fe fbdd 	bl	80010b4 <HAL_GetTick>
 80028fa:	0003      	movs	r3, r0
 80028fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe fbd8 	bl	80010b4 <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e250      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d0f1      	beq.n	8002900 <HAL_RCC_OscConfig+0x24c>
 800291c:	e018      	b.n	8002950 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291e:	4b33      	ldr	r3, [pc, #204]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002922:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002924:	2101      	movs	r1, #1
 8002926:	438a      	bics	r2, r1
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7fe fbc3 	bl	80010b4 <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fbbe 	bl	80010b4 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e236      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2202      	movs	r2, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d1f1      	bne.n	8002934 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2204      	movs	r2, #4
 8002956:	4013      	ands	r3, r2
 8002958:	d100      	bne.n	800295c <HAL_RCC_OscConfig+0x2a8>
 800295a:	e0b5      	b.n	8002ac8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295c:	231f      	movs	r3, #31
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	055b      	lsls	r3, r3, #21
 800296c:	4013      	ands	r3, r2
 800296e:	d111      	bne.n	8002994 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	0549      	lsls	r1, r1, #21
 800297a:	430a      	orrs	r2, r1
 800297c:	61da      	str	r2, [r3, #28]
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800298c:	231f      	movs	r3, #31
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_RCC_OscConfig+0x344>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4013      	ands	r3, r2
 800299e:	d11a      	bne.n	80029d6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a0:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_RCC_OscConfig+0x344>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_RCC_OscConfig+0x344>)
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	0049      	lsls	r1, r1, #1
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fb81 	bl	80010b4 <HAL_GetTick>
 80029b2:	0003      	movs	r3, r0
 80029b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b8:	f7fe fb7c 	bl	80010b4 <HAL_GetTick>
 80029bc:	0002      	movs	r2, r0
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1f4      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_OscConfig+0x344>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d10e      	bne.n	80029fc <HAL_RCC_OscConfig+0x348>
 80029de:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	4b02      	ldr	r3, [pc, #8]	; (80029ec <HAL_RCC_OscConfig+0x338>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	621a      	str	r2, [r3, #32]
 80029ea:	e035      	b.n	8002a58 <HAL_RCC_OscConfig+0x3a4>
 80029ec:	40021000 	.word	0x40021000
 80029f0:	fffeffff 	.word	0xfffeffff
 80029f4:	fffbffff 	.word	0xfffbffff
 80029f8:	40007000 	.word	0x40007000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x36a>
 8002a04:	4bca      	ldr	r3, [pc, #808]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a06:	6a1a      	ldr	r2, [r3, #32]
 8002a08:	4bc9      	ldr	r3, [pc, #804]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	621a      	str	r2, [r3, #32]
 8002a10:	4bc7      	ldr	r3, [pc, #796]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	4bc6      	ldr	r3, [pc, #792]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a16:	2104      	movs	r1, #4
 8002a18:	438a      	bics	r2, r1
 8002a1a:	621a      	str	r2, [r3, #32]
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x3a4>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x38c>
 8002a26:	4bc2      	ldr	r3, [pc, #776]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a28:	6a1a      	ldr	r2, [r3, #32]
 8002a2a:	4bc1      	ldr	r3, [pc, #772]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	621a      	str	r2, [r3, #32]
 8002a32:	4bbf      	ldr	r3, [pc, #764]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a34:	6a1a      	ldr	r2, [r3, #32]
 8002a36:	4bbe      	ldr	r3, [pc, #760]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	621a      	str	r2, [r3, #32]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x3a4>
 8002a40:	4bbb      	ldr	r3, [pc, #748]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	4bba      	ldr	r3, [pc, #744]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a46:	2101      	movs	r1, #1
 8002a48:	438a      	bics	r2, r1
 8002a4a:	621a      	str	r2, [r3, #32]
 8002a4c:	4bb8      	ldr	r3, [pc, #736]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	4bb7      	ldr	r3, [pc, #732]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a52:	2104      	movs	r1, #4
 8002a54:	438a      	bics	r2, r1
 8002a56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d014      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7fe fb28 	bl	80010b4 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	e009      	b.n	8002a7e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe fb23 	bl	80010b4 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	4aaf      	ldr	r2, [pc, #700]	; (8002d34 <HAL_RCC_OscConfig+0x680>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e19a      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	4bac      	ldr	r3, [pc, #688]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x3b6>
 8002a88:	e013      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fb13 	bl	80010b4 <HAL_GetTick>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a92:	e009      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe fb0e 	bl	80010b4 <HAL_GetTick>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	4aa5      	ldr	r2, [pc, #660]	; (8002d34 <HAL_RCC_OscConfig+0x680>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e185      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa8:	4ba1      	ldr	r3, [pc, #644]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	2202      	movs	r2, #2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ab2:	231f      	movs	r3, #31
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b9c      	ldr	r3, [pc, #624]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	4b9b      	ldr	r3, [pc, #620]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002ac2:	499d      	ldr	r1, [pc, #628]	; (8002d38 <HAL_RCC_OscConfig+0x684>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2210      	movs	r2, #16
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d12a      	bne.n	8002b30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ada:	4b95      	ldr	r3, [pc, #596]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ade:	4b94      	ldr	r3, [pc, #592]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ae6:	4b92      	ldr	r3, [pc, #584]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aea:	4b91      	ldr	r3, [pc, #580]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fadf 	bl	80010b4 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002afc:	f7fe fada 	bl	80010b4 <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e152      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b0e:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	d0f1      	beq.n	8002afc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b18:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	22f8      	movs	r2, #248	; 0xf8
 8002b1e:	4393      	bics	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	00da      	lsls	r2, r3, #3
 8002b28:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b2e:	e034      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	3305      	adds	r3, #5
 8002b36:	d111      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b38:	4b7d      	ldr	r3, [pc, #500]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3c:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b3e:	2104      	movs	r1, #4
 8002b40:	438a      	bics	r2, r1
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b44:	4b7a      	ldr	r3, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	22f8      	movs	r2, #248	; 0xf8
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	00da      	lsls	r2, r3, #3
 8002b54:	4b76      	ldr	r3, [pc, #472]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	430a      	orrs	r2, r1
 8002b58:	635a      	str	r2, [r3, #52]	; 0x34
 8002b5a:	e01e      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b5c:	4b74      	ldr	r3, [pc, #464]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b60:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b62:	2104      	movs	r1, #4
 8002b64:	430a      	orrs	r2, r1
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b68:	4b71      	ldr	r3, [pc, #452]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6c:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b6e:	2101      	movs	r1, #1
 8002b70:	438a      	bics	r2, r1
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7fe fa9e 	bl	80010b4 <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b7e:	f7fe fa99 	bl	80010b4 <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e111      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b90:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	2202      	movs	r2, #2
 8002b96:	4013      	ands	r3, r2
 8002b98:	d1f1      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d05c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ba4:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	220c      	movs	r2, #12
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	d00e      	beq.n	8002bce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002bb0:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	220c      	movs	r2, #12
 8002bb6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d114      	bne.n	8002be6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002bbc:	4b5c      	ldr	r3, [pc, #368]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	025b      	lsls	r3, r3, #9
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	23c0      	movs	r3, #192	; 0xc0
 8002bc8:	025b      	lsls	r3, r3, #9
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10b      	bne.n	8002be6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002bce:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	025b      	lsls	r3, r3, #9
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d040      	beq.n	8002c5c <HAL_RCC_OscConfig+0x5a8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d03c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0e6      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01b      	beq.n	8002c26 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002bee:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf2:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	0249      	lsls	r1, r1, #9
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fa5a 	bl	80010b4 <HAL_GetTick>
 8002c00:	0003      	movs	r3, r0
 8002c02:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c06:	f7fe fa55 	bl	80010b4 <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0cd      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	4013      	ands	r3, r2
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x552>
 8002c24:	e01b      	b.n	8002c5e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c26:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002c2c:	4943      	ldr	r1, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x688>)
 8002c2e:	400a      	ands	r2, r1
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fa3f 	bl	80010b4 <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c3c:	f7fe fa3a 	bl	80010b4 <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0b2      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c4e:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	025b      	lsls	r3, r3, #9
 8002c56:	4013      	ands	r3, r2
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x588>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c5c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d100      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5b4>
 8002c66:	e0a4      	b.n	8002db2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	220c      	movs	r2, #12
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d100      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5c2>
 8002c74:	e078      	b.n	8002d68 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d14c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002c84:	492e      	ldr	r1, [pc, #184]	; (8002d40 <HAL_RCC_OscConfig+0x68c>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fa13 	bl	80010b4 <HAL_GetTick>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe fa0e 	bl	80010b4 <HAL_GetTick>
 8002c98:	0002      	movs	r2, r0
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e086      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	049b      	lsls	r3, r3, #18
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	4393      	bics	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_RCC_OscConfig+0x690>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	0449      	lsls	r1, r1, #17
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe f9e1 	bl	80010b4 <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe f9dc 	bl	80010b4 <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e054      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	049b      	lsls	r3, r3, #18
 8002d12:	4013      	ands	r3, r2
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x644>
 8002d16:	e04c      	b.n	8002db2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <HAL_RCC_OscConfig+0x67c>)
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <HAL_RCC_OscConfig+0x68c>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe f9c6 	bl	80010b4 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0x6a6>
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	40021000 	.word	0x40021000
 8002d34:	00001388 	.word	0x00001388
 8002d38:	efffffff 	.word	0xefffffff
 8002d3c:	fffeffff 	.word	0xfffeffff
 8002d40:	feffffff 	.word	0xfeffffff
 8002d44:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fe f9b4 	bl	80010b4 <HAL_GetTick>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e02c      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_RCC_OscConfig+0x708>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	049b      	lsls	r3, r3, #18
 8002d62:	4013      	ands	r3, r2
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x694>
 8002d66:	e024      	b.n	8002db2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e01f      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_RCC_OscConfig+0x708>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x708>)
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	23c0      	movs	r3, #192	; 0xc0
 8002d84:	025b      	lsls	r3, r3, #9
 8002d86:	401a      	ands	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d10e      	bne.n	8002dae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	220f      	movs	r2, #15
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	23f0      	movs	r3, #240	; 0xf0
 8002da2:	039b      	lsls	r3, r3, #14
 8002da4:	401a      	ands	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b008      	add	sp, #32
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0bf      	b.n	8002f54 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <HAL_RCC_ClockConfig+0x19c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d911      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <HAL_RCC_ClockConfig+0x19c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2201      	movs	r2, #1
 8002de8:	4393      	bics	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <HAL_RCC_ClockConfig+0x19c>)
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x19c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0a6      	b.n	8002f54 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d015      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2204      	movs	r2, #4
 8002e16:	4013      	ands	r3, r2
 8002e18:	d006      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e1a:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e20:	21e0      	movs	r1, #224	; 0xe0
 8002e22:	00c9      	lsls	r1, r1, #3
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	22f0      	movs	r2, #240	; 0xf0
 8002e2e:	4393      	bics	r3, r2
 8002e30:	0019      	movs	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	d04c      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	029b      	lsls	r3, r3, #10
 8002e56:	4013      	ands	r3, r2
 8002e58:	d120      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e07a      	b.n	8002f54 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b3e      	ldr	r3, [pc, #248]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	049b      	lsls	r3, r3, #18
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d114      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06e      	b.n	8002f54 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	025b      	lsls	r3, r3, #9
 8002e86:	4013      	ands	r3, r2
 8002e88:	d108      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e062      	b.n	8002f54 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8e:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2202      	movs	r2, #2
 8002e94:	4013      	ands	r3, r2
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e05b      	b.n	8002f54 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9c:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	4393      	bics	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb0:	f7fe f900 	bl	80010b4 <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb8:	e009      	b.n	8002ece <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eba:	f7fe f8fb 	bl	80010b4 <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <HAL_RCC_ClockConfig+0x1a4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e042      	b.n	8002f54 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d1ec      	bne.n	8002eba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_ClockConfig+0x19c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d211      	bcs.n	8002f12 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_RCC_ClockConfig+0x19c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_RCC_ClockConfig+0x19c>)
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x19c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2201      	movs	r2, #1
 8002f06:	4013      	ands	r3, r2
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e020      	b.n	8002f54 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2204      	movs	r2, #4
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d009      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <HAL_RCC_ClockConfig+0x1a8>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f30:	f000 f820 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8002f34:	0001      	movs	r1, r0
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1a0>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	220f      	movs	r2, #15
 8002f3e:	4013      	ands	r3, r2
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <HAL_RCC_ClockConfig+0x1ac>)
 8002f42:	5cd3      	ldrb	r3, [r2, r3]
 8002f44:	000a      	movs	r2, r1
 8002f46:	40da      	lsrs	r2, r3
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_RCC_ClockConfig+0x1b0>)
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fe f87d 	bl	800104c <HAL_InitTick>
  
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b004      	add	sp, #16
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	00001388 	.word	0x00001388
 8002f68:	fffff8ff 	.word	0xfffff8ff
 8002f6c:	0800c330 	.word	0x0800c330
 8002f70:	20000000 	.word	0x20000000

08002f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b08f      	sub	sp, #60	; 0x3c
 8002f78:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f7a:	2314      	movs	r3, #20
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002f80:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f82:	c313      	stmia	r3!, {r0, r1, r4}
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	4a35      	ldr	r2, [pc, #212]	; (8003060 <HAL_RCC_GetSysClockFreq+0xec>)
 8002f8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f8e:	c313      	stmia	r3!, {r0, r1, r4}
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002fa8:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d006      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x52>
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d043      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0xd0>
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d144      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fc4:	e044      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	0c9b      	lsrs	r3, r3, #18
 8002fca:	220f      	movs	r2, #15
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2214      	movs	r2, #20
 8002fd0:	18ba      	adds	r2, r7, r2
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fd6:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	220f      	movs	r2, #15
 8002fdc:	4013      	ands	r3, r2
 8002fde:	1d3a      	adds	r2, r7, #4
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe6:	23c0      	movs	r3, #192	; 0xc0
 8002fe8:	025b      	lsls	r3, r3, #9
 8002fea:	401a      	ands	r2, r3
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	025b      	lsls	r3, r3, #9
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d109      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff6:	481c      	ldr	r0, [pc, #112]	; (8003068 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002ff8:	f7fd f886 	bl	8000108 <__udivsi3>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	001a      	movs	r2, r3
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	4353      	muls	r3, r2
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	e01a      	b.n	800303e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300a:	23c0      	movs	r3, #192	; 0xc0
 800300c:	025b      	lsls	r3, r3, #9
 800300e:	401a      	ands	r2, r3
 8003010:	23c0      	movs	r3, #192	; 0xc0
 8003012:	025b      	lsls	r3, r3, #9
 8003014:	429a      	cmp	r2, r3
 8003016:	d109      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800301a:	4814      	ldr	r0, [pc, #80]	; (800306c <HAL_RCC_GetSysClockFreq+0xf8>)
 800301c:	f7fd f874 	bl	8000108 <__udivsi3>
 8003020:	0003      	movs	r3, r0
 8003022:	001a      	movs	r2, r3
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	4353      	muls	r3, r2
 8003028:	637b      	str	r3, [r7, #52]	; 0x34
 800302a:	e008      	b.n	800303e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800302c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302e:	4810      	ldr	r0, [pc, #64]	; (8003070 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003030:	f7fd f86a 	bl	8000108 <__udivsi3>
 8003034:	0003      	movs	r3, r0
 8003036:	001a      	movs	r2, r3
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	4353      	muls	r3, r2
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003042:	e005      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003046:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003048:	e002      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_GetSysClockFreq+0xfc>)
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800304e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b00f      	add	sp, #60	; 0x3c
 8003058:	bd90      	pop	{r4, r7, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	0800c158 	.word	0x0800c158
 8003060:	0800c168 	.word	0x0800c168
 8003064:	40021000 	.word	0x40021000
 8003068:	00f42400 	.word	0x00f42400
 800306c:	02dc6c00 	.word	0x02dc6c00
 8003070:	007a1200 	.word	0x007a1200

08003074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003078:	4b02      	ldr	r3, [pc, #8]	; (8003084 <HAL_RCC_GetHCLKFreq+0x10>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800308c:	f7ff fff2 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 8003090:	0001      	movs	r1, r0
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	2207      	movs	r2, #7
 800309a:	4013      	ands	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	40d9      	lsrs	r1, r3
 80030a2:	000b      	movs	r3, r1
}    
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	40021000 	.word	0x40021000
 80030b0:	0800c340 	.word	0x0800c340

080030b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	025b      	lsls	r3, r3, #9
 80030cc:	4013      	ands	r3, r2
 80030ce:	d100      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80030d0:	e08f      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2317      	movs	r3, #23
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030da:	4b6f      	ldr	r3, [pc, #444]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	055b      	lsls	r3, r3, #21
 80030e2:	4013      	ands	r3, r2
 80030e4:	d111      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	0549      	lsls	r1, r1, #21
 80030f0:	430a      	orrs	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	055b      	lsls	r3, r3, #21
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003102:	2317      	movs	r3, #23
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b64      	ldr	r3, [pc, #400]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4013      	ands	r3, r2
 8003114:	d11a      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003116:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b60      	ldr	r3, [pc, #384]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	0049      	lsls	r1, r1, #1
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003124:	f7fd ffc6 	bl	80010b4 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fd ffc1 	bl	80010b4 <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	; 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0a6      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b56      	ldr	r3, [pc, #344]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4013      	ands	r3, r2
 800314a:	d0f0      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800314c:	4b52      	ldr	r3, [pc, #328]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	23c0      	movs	r3, #192	; 0xc0
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d034      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	23c0      	movs	r3, #192	; 0xc0
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4013      	ands	r3, r2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	429a      	cmp	r2, r3
 800316c:	d02c      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003174:	4013      	ands	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003178:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	4b46      	ldr	r3, [pc, #280]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800317e:	2180      	movs	r1, #128	; 0x80
 8003180:	0249      	lsls	r1, r1, #9
 8003182:	430a      	orrs	r2, r1
 8003184:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003186:	4b44      	ldr	r3, [pc, #272]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800318c:	4945      	ldr	r1, [pc, #276]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800318e:	400a      	ands	r2, r1
 8003190:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fd ff88 	bl	80010b4 <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a8:	e009      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fd ff83 	bl	80010b4 <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	4a3c      	ldr	r2, [pc, #240]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e067      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031be:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	2202      	movs	r2, #2
 80031c4:	4013      	ands	r3, r2
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c8:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031dc:	2317      	movs	r3, #23
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ec:	492f      	ldr	r1, [pc, #188]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031fc:	4b26      	ldr	r3, [pc, #152]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	2203      	movs	r2, #3
 8003202:	4393      	bics	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800320c:	430a      	orrs	r2, r1
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2202      	movs	r2, #2
 8003216:	4013      	ands	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800321a:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003220:	4013      	ands	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800322a:	430a      	orrs	r2, r1
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2220      	movs	r2, #32
 8003234:	4013      	ands	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003238:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	2210      	movs	r2, #16
 800323e:	4393      	bics	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003248:	430a      	orrs	r2, r1
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	029b      	lsls	r3, r3, #10
 8003254:	4013      	ands	r3, r2
 8003256:	d009      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	4393      	bics	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003268:	430a      	orrs	r2, r1
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4013      	ands	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	2240      	movs	r2, #64	; 0x40
 800327e:	4393      	bics	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003288:	430a      	orrs	r2, r1
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b006      	add	sp, #24
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	40021000 	.word	0x40021000
 800329c:	40007000 	.word	0x40007000
 80032a0:	fffffcff 	.word	0xfffffcff
 80032a4:	fffeffff 	.word	0xfffeffff
 80032a8:	00001388 	.word	0x00001388
 80032ac:	efffffff 	.word	0xefffffff
 80032b0:	fffcffff 	.word	0xfffcffff

080032b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e08a      	b.n	80033dc <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	225d      	movs	r2, #93	; 0x5d
 80032d0:	5c9b      	ldrb	r3, [r3, r2]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	225c      	movs	r2, #92	; 0x5c
 80032dc:	2100      	movs	r1, #0
 80032de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7fd fc84 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	225d      	movs	r2, #93	; 0x5d
 80032ec:	2102      	movs	r1, #2
 80032ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2140      	movs	r1, #64	; 0x40
 80032fc:	438a      	bics	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	23e0      	movs	r3, #224	; 0xe0
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	429a      	cmp	r2, r3
 800330a:	d902      	bls.n	8003312 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e002      	b.n	8003318 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	015b      	lsls	r3, r3, #5
 8003316:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	23f0      	movs	r3, #240	; 0xf0
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	429a      	cmp	r2, r3
 8003322:	d008      	beq.n	8003336 <HAL_SPI_Init+0x82>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	23e0      	movs	r3, #224	; 0xe0
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	429a      	cmp	r2, r3
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	23e0      	movs	r3, #224	; 0xe0
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	429a      	cmp	r2, r3
 8003348:	d903      	bls.n	8003352 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
 8003350:	e002      	b.n	8003358 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6999      	ldr	r1, [r3, #24]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	400b      	ands	r3, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	431a      	orrs	r2, r3
 8003386:	0011      	movs	r1, r2
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	2204      	movs	r2, #4
 800339c:	401a      	ands	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	0011      	movs	r1, r2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4907      	ldr	r1, [pc, #28]	; (80033e4 <HAL_SPI_Init+0x130>)
 80033c8:	400a      	ands	r2, r1
 80033ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	225d      	movs	r2, #93	; 0x5d
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b004      	add	sp, #16
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	fffff7ff 	.word	0xfffff7ff

080033e8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	1dbb      	adds	r3, r7, #6
 80033f4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033f6:	2317      	movs	r3, #23
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d112      	bne.n	800342c <HAL_SPI_Receive_DMA+0x44>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	2382      	movs	r3, #130	; 0x82
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	429a      	cmp	r2, r3
 8003410:	d10c      	bne.n	800342c <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	225d      	movs	r2, #93	; 0x5d
 8003416:	2104      	movs	r1, #4
 8003418:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800341a:	1dbb      	adds	r3, r7, #6
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f916 	bl	8003654 <HAL_SPI_TransmitReceive_DMA>
 8003428:	0003      	movs	r3, r0
 800342a:	e103      	b.n	8003634 <HAL_SPI_Receive_DMA+0x24c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	225c      	movs	r2, #92	; 0x5c
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_SPI_Receive_DMA+0x52>
 8003436:	2302      	movs	r3, #2
 8003438:	e0fc      	b.n	8003634 <HAL_SPI_Receive_DMA+0x24c>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	225c      	movs	r2, #92	; 0x5c
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	225d      	movs	r2, #93	; 0x5d
 8003446:	5c9b      	ldrb	r3, [r3, r2]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d004      	beq.n	8003458 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800344e:	2317      	movs	r3, #23
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]
    goto error;
 8003456:	e0e6      	b.n	8003626 <HAL_SPI_Receive_DMA+0x23e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_SPI_Receive_DMA+0x7e>
 800345e:	1dbb      	adds	r3, r7, #6
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8003466:	2317      	movs	r3, #23
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
    goto error;
 800346e:	e0da      	b.n	8003626 <HAL_SPI_Receive_DMA+0x23e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	225d      	movs	r2, #93	; 0x5d
 8003474:	2104      	movs	r1, #4
 8003476:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1dba      	adds	r2, r7, #6
 8003488:	2144      	movs	r1, #68	; 0x44
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1dba      	adds	r2, r7, #6
 8003492:	2146      	movs	r1, #70	; 0x46
 8003494:	8812      	ldrh	r2, [r2, #0]
 8003496:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d107      	bne.n	80034cc <HAL_SPI_Receive_DMA+0xe4>
  {
    SPI_1LINE_RX(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	495d      	ldr	r1, [pc, #372]	; (800363c <HAL_SPI_Receive_DMA+0x254>)
 80034c8:	400a      	ands	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
    errorcode = HAL_ERROR;
    goto error;
  }
#endif

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	495a      	ldr	r1, [pc, #360]	; (8003640 <HAL_SPI_Receive_DMA+0x258>)
 80034d8:	400a      	ands	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	23e0      	movs	r3, #224	; 0xe0
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d908      	bls.n	80034fa <HAL_SPI_Receive_DMA+0x112>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4954      	ldr	r1, [pc, #336]	; (8003644 <HAL_SPI_Receive_DMA+0x25c>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	e045      	b.n	8003586 <HAL_SPI_Receive_DMA+0x19e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	0149      	lsls	r1, r1, #5
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	429a      	cmp	r2, r3
 8003518:	d135      	bne.n	8003586 <HAL_SPI_Receive_DMA+0x19e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4947      	ldr	r1, [pc, #284]	; (8003644 <HAL_SPI_Receive_DMA+0x25c>)
 8003526:	400a      	ands	r2, r1
 8003528:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2246      	movs	r2, #70	; 0x46
 800352e:	5a9b      	ldrh	r3, [r3, r2]
 8003530:	b29b      	uxth	r3, r3
 8003532:	001a      	movs	r2, r3
 8003534:	2301      	movs	r3, #1
 8003536:	4013      	ands	r3, r2
 8003538:	d111      	bne.n	800355e <HAL_SPI_Receive_DMA+0x176>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	493e      	ldr	r1, [pc, #248]	; (8003640 <HAL_SPI_Receive_DMA+0x258>)
 8003546:	400a      	ands	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2246      	movs	r2, #70	; 0x46
 800354e:	5a9b      	ldrh	r3, [r3, r2]
 8003550:	b29b      	uxth	r3, r3
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	b299      	uxth	r1, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2246      	movs	r2, #70	; 0x46
 800355a:	5299      	strh	r1, [r3, r2]
 800355c:	e013      	b.n	8003586 <HAL_SPI_Receive_DMA+0x19e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	0189      	lsls	r1, r1, #6
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2246      	movs	r2, #70	; 0x46
 8003574:	5a9b      	ldrh	r3, [r3, r2]
 8003576:	b29b      	uxth	r3, r3
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	b29b      	uxth	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	b299      	uxth	r1, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2246      	movs	r2, #70	; 0x46
 8003584:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <HAL_SPI_Receive_DMA+0x260>)
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	4a2e      	ldr	r2, [pc, #184]	; (800364c <HAL_SPI_Receive_DMA+0x264>)
 8003594:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <HAL_SPI_Receive_DMA+0x268>)
 800359c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	0019      	movs	r1, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2246      	movs	r2, #70	; 0x46
 80035bc:	5a9b      	ldrh	r3, [r3, r2]
 80035be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80035c0:	0022      	movs	r2, r4
 80035c2:	f7fe fd13 	bl	8001fec <HAL_DMA_Start_IT>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d00e      	beq.n	80035e8 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ce:	2210      	movs	r2, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80035d6:	2317      	movs	r3, #23
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	225d      	movs	r2, #93	; 0x5d
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]
    goto error;
 80035e6:	e01e      	b.n	8003626 <HAL_SPI_Receive_DMA+0x23e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2240      	movs	r2, #64	; 0x40
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d007      	beq.n	8003606 <HAL_SPI_Receive_DMA+0x21e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2140      	movs	r1, #64	; 0x40
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2120      	movs	r1, #32
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	225c      	movs	r2, #92	; 0x5c
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800362e:	2317      	movs	r3, #23
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	781b      	ldrb	r3, [r3, #0]
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b007      	add	sp, #28
 800363a:	bd90      	pop	{r4, r7, pc}
 800363c:	ffffbfff 	.word	0xffffbfff
 8003640:	ffffdfff 	.word	0xffffdfff
 8003644:	ffffefff 	.word	0xffffefff
 8003648:	08003d15 	.word	0x08003d15
 800364c:	08003bf5 	.word	0x08003bf5
 8003650:	08003d51 	.word	0x08003d51

08003654 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	001a      	movs	r2, r3
 8003662:	1cbb      	adds	r3, r7, #2
 8003664:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003666:	2317      	movs	r3, #23
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	225c      	movs	r2, #92	; 0x5c
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_SPI_TransmitReceive_DMA+0x28>
 8003678:	2302      	movs	r3, #2
 800367a:	e186      	b.n	800398a <HAL_SPI_TransmitReceive_DMA+0x336>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	225c      	movs	r2, #92	; 0x5c
 8003680:	2101      	movs	r1, #1
 8003682:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003684:	2016      	movs	r0, #22
 8003686:	183b      	adds	r3, r7, r0
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	215d      	movs	r1, #93	; 0x5d
 800368c:	5c52      	ldrb	r2, [r2, r1]
 800368e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003696:	183b      	adds	r3, r7, r0
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d012      	beq.n	80036c4 <HAL_SPI_TransmitReceive_DMA+0x70>
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	2382      	movs	r3, #130	; 0x82
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d108      	bne.n	80036ba <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_SPI_TransmitReceive_DMA+0x66>
 80036b0:	2316      	movs	r3, #22
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d004      	beq.n	80036c4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80036ba:	2317      	movs	r3, #23
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	2202      	movs	r2, #2
 80036c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80036c2:	e15b      	b.n	800397c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80036d0:	1cbb      	adds	r3, r7, #2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80036d8:	2317      	movs	r3, #23
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
    goto error;
 80036e0:	e14c      	b.n	800397c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	225d      	movs	r2, #93	; 0x5d
 80036e6:	5c9b      	ldrb	r3, [r3, r2]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d003      	beq.n	80036f6 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	225d      	movs	r2, #93	; 0x5d
 80036f2:	2105      	movs	r1, #5
 80036f4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1cba      	adds	r2, r7, #2
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1cba      	adds	r2, r7, #2
 800370e:	8812      	ldrh	r2, [r2, #0]
 8003710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1cba      	adds	r2, r7, #2
 800371c:	2144      	movs	r1, #68	; 0x44
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1cba      	adds	r2, r7, #2
 8003726:	2146      	movs	r1, #70	; 0x46
 8003728:	8812      	ldrh	r2, [r2, #0]
 800372a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	651a      	str	r2, [r3, #80]	; 0x50
    goto error;
  }
#endif

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4994      	ldr	r1, [pc, #592]	; (8003994 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8003744:	400a      	ands	r2, r1
 8003746:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	23e0      	movs	r3, #224	; 0xe0
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	429a      	cmp	r2, r3
 8003752:	d908      	bls.n	8003766 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	498e      	ldr	r1, [pc, #568]	; (8003998 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8003760:	400a      	ands	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	e074      	b.n	8003850 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2180      	movs	r1, #128	; 0x80
 8003772:	0149      	lsls	r1, r1, #5
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	429a      	cmp	r2, r3
 8003784:	d127      	bne.n	80037d6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800378a:	001a      	movs	r2, r3
 800378c:	2301      	movs	r3, #1
 800378e:	4013      	ands	r3, r2
 8003790:	d10f      	bne.n	80037b2 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	497f      	ldr	r1, [pc, #508]	; (800399c <HAL_SPI_TransmitReceive_DMA+0x348>)
 800379e:	400a      	ands	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b0:	e011      	b.n	80037d6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	01c9      	lsls	r1, r1, #7
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d135      	bne.n	8003850 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	496a      	ldr	r1, [pc, #424]	; (8003998 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2246      	movs	r2, #70	; 0x46
 80037f8:	5a9b      	ldrh	r3, [r3, r2]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	001a      	movs	r2, r3
 80037fe:	2301      	movs	r3, #1
 8003800:	4013      	ands	r3, r2
 8003802:	d111      	bne.n	8003828 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4964      	ldr	r1, [pc, #400]	; (80039a0 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8003810:	400a      	ands	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2246      	movs	r2, #70	; 0x46
 8003818:	5a9b      	ldrh	r3, [r3, r2]
 800381a:	b29b      	uxth	r3, r3
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	b299      	uxth	r1, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2246      	movs	r2, #70	; 0x46
 8003824:	5299      	strh	r1, [r3, r2]
 8003826:	e013      	b.n	8003850 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	0189      	lsls	r1, r1, #6
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2246      	movs	r2, #70	; 0x46
 800383e:	5a9b      	ldrh	r3, [r3, r2]
 8003840:	b29b      	uxth	r3, r3
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	3301      	adds	r3, #1
 8003848:	b299      	uxth	r1, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2246      	movs	r2, #70	; 0x46
 800384e:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	225d      	movs	r2, #93	; 0x5d
 8003854:	5c9b      	ldrb	r3, [r3, r2]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b04      	cmp	r3, #4
 800385a:	d108      	bne.n	800386e <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	4a50      	ldr	r2, [pc, #320]	; (80039a4 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	4a4f      	ldr	r2, [pc, #316]	; (80039a8 <HAL_SPI_TransmitReceive_DMA+0x354>)
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
 800386c:	e007      	b.n	800387e <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	4a4e      	ldr	r2, [pc, #312]	; (80039ac <HAL_SPI_TransmitReceive_DMA+0x358>)
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	4a4d      	ldr	r2, [pc, #308]	; (80039b0 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800387c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	4a4c      	ldr	r2, [pc, #304]	; (80039b4 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8003884:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	2200      	movs	r2, #0
 800388c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	0019      	movs	r1, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2246      	movs	r2, #70	; 0x46
 80038a4:	5a9b      	ldrh	r3, [r3, r2]
 80038a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80038a8:	0022      	movs	r2, r4
 80038aa:	f7fe fb9f 	bl	8001fec <HAL_DMA_Start_IT>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d00e      	beq.n	80038d0 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b6:	2210      	movs	r2, #16
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80038be:	2317      	movs	r3, #23
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	225d      	movs	r2, #93	; 0x5d
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]
    goto error;
 80038ce:	e055      	b.n	800397c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2101      	movs	r1, #1
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	2200      	movs	r2, #0
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	2200      	movs	r2, #0
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	2200      	movs	r2, #0
 80038fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	0019      	movs	r1, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003916:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003918:	f7fe fb68 	bl	8001fec <HAL_DMA_Start_IT>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d00e      	beq.n	800393e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	2210      	movs	r2, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800392c:	2317      	movs	r3, #23
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	225d      	movs	r2, #93	; 0x5d
 8003938:	2101      	movs	r1, #1
 800393a:	5499      	strb	r1, [r3, r2]
    goto error;
 800393c:	e01e      	b.n	800397c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	4013      	ands	r3, r2
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d007      	beq.n	800395c <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2140      	movs	r1, #64	; 0x40
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2120      	movs	r1, #32
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2102      	movs	r1, #2
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	225c      	movs	r2, #92	; 0x5c
 8003980:	2100      	movs	r1, #0
 8003982:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003984:	2317      	movs	r3, #23
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	781b      	ldrb	r3, [r3, #0]
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b007      	add	sp, #28
 8003990:	bd90      	pop	{r4, r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	ffff9fff 	.word	0xffff9fff
 8003998:	ffffefff 	.word	0xffffefff
 800399c:	ffffbfff 	.word	0xffffbfff
 80039a0:	ffffdfff 	.word	0xffffdfff
 80039a4:	08003d15 	.word	0x08003d15
 80039a8:	08003bf5 	.word	0x08003bf5
 80039ac:	08003d33 	.word	0x08003d33
 80039b0:	08003c7f 	.word	0x08003c7f
 80039b4:	08003d51 	.word	0x08003d51

080039b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	001a      	movs	r2, r3
 80039d6:	2301      	movs	r3, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d10f      	bne.n	80039fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2201      	movs	r2, #1
 80039e0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039e2:	d00b      	beq.n	80039fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	001a      	movs	r2, r3
 80039ea:	2301      	movs	r3, #1
 80039ec:	4013      	ands	r3, r2
 80039ee:	d005      	beq.n	80039fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	0010      	movs	r0, r2
 80039f8:	4798      	blx	r3
    return;
 80039fa:	e0d6      	b.n	8003baa <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	001a      	movs	r2, r3
 8003a02:	2301      	movs	r3, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <HAL_SPI_IRQHandler+0x68>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	09db      	lsrs	r3, r3, #7
 8003a0c:	001a      	movs	r2, r3
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4013      	ands	r3, r2
 8003a12:	d005      	beq.n	8003a20 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	0010      	movs	r0, r2
 8003a1c:	4798      	blx	r3
    return;
 8003a1e:	e0c4      	b.n	8003baa <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	001a      	movs	r2, r3
 8003a26:	2301      	movs	r3, #1
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d10c      	bne.n	8003a46 <HAL_SPI_IRQHandler+0x8e>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	001a      	movs	r2, r3
 8003a32:	2301      	movs	r3, #1
 8003a34:	4013      	ands	r3, r2
 8003a36:	d106      	bne.n	8003a46 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4013      	ands	r3, r2
 8003a42:	d100      	bne.n	8003a46 <HAL_SPI_IRQHandler+0x8e>
 8003a44:	e0b1      	b.n	8003baa <HAL_SPI_IRQHandler+0x1f2>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d100      	bne.n	8003a54 <HAL_SPI_IRQHandler+0x9c>
 8003a52:	e0aa      	b.n	8003baa <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	099b      	lsrs	r3, r3, #6
 8003a58:	001a      	movs	r2, r3
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d023      	beq.n	8003aa8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	225d      	movs	r2, #93	; 0x5d
 8003a64:	5c9b      	ldrb	r3, [r3, r2]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d011      	beq.n	8003a90 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a70:	2204      	movs	r2, #4
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
        return;
 8003aa6:	e080      	b.n	8003baa <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	001a      	movs	r2, r3
 8003aae:	2301      	movs	r3, #1
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d014      	beq.n	8003ade <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab8:	2201      	movs	r2, #1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2140      	movs	r1, #64	; 0x40
 8003ad8:	438a      	bics	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d00c      	beq.n	8003b04 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	2208      	movs	r2, #8
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d04d      	beq.n	8003ba8 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	21e0      	movs	r1, #224	; 0xe0
 8003b18:	438a      	bics	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	225d      	movs	r2, #93	; 0x5d
 8003b20:	2101      	movs	r1, #1
 8003b22:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2202      	movs	r2, #2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d103      	bne.n	8003b34 <HAL_SPI_IRQHandler+0x17c>
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4013      	ands	r3, r2
 8003b32:	d032      	beq.n	8003b9a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2103      	movs	r1, #3
 8003b40:	438a      	bics	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b50:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <HAL_SPI_IRQHandler+0x1f8>)
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fe faad 	bl	80020b8 <HAL_DMA_Abort_IT>
 8003b5e:	1e03      	subs	r3, r0, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	2240      	movs	r2, #64	; 0x40
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	4a0d      	ldr	r2, [pc, #52]	; (8003bb0 <HAL_SPI_IRQHandler+0x1f8>)
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	0018      	movs	r0, r3
 8003b84:	f7fe fa98 	bl	80020b8 <HAL_DMA_Abort_IT>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	2240      	movs	r2, #64	; 0x40
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003b98:	e004      	b.n	8003ba4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f000 f821 	bl	8003be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ba2:	e000      	b.n	8003ba6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003ba4:	46c0      	nop			; (mov r8, r8)
    return;
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46c0      	nop			; (mov r8, r8)
  }
}
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b008      	add	sp, #32
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	08003d93 	.word	0x08003d93

08003bb4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c02:	f7fd fa57 	bl	80010b4 <HAL_GetTick>
 8003c06:	0003      	movs	r3, r0
 8003c08:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2220      	movs	r2, #32
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d02b      	beq.n	8003c70 <SPI_DMAReceiveCplt+0x7c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2120      	movs	r1, #32
 8003c24:	438a      	bics	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2103      	movs	r1, #3
 8003c34:	438a      	bics	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2164      	movs	r1, #100	; 0x64
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 f9a2 	bl	8003f88 <SPI_EndRxTransaction>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d002      	beq.n	8003c4e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2246      	movs	r2, #70	; 0x46
 8003c52:	2100      	movs	r1, #0
 8003c54:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	225d      	movs	r2, #93	; 0x5d
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <SPI_DMAReceiveCplt+0x7c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7ff ffbb 	bl	8003be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003c6e:	e003      	b.n	8003c78 <SPI_DMAReceiveCplt+0x84>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7fc fbbe 	bl	80003f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b004      	add	sp, #16
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c8c:	f7fd fa12 	bl	80010b4 <HAL_GetTick>
 8003c90:	0003      	movs	r3, r0
 8003c92:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d031      	beq.n	8003d06 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2120      	movs	r1, #32
 8003cae:	438a      	bics	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2164      	movs	r1, #100	; 0x64
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 f9c3 	bl	8004044 <SPI_EndRxTxTransaction>
 8003cbe:	1e03      	subs	r3, r0, #0
 8003cc0:	d005      	beq.n	8003cce <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2103      	movs	r1, #3
 8003cda:	438a      	bics	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2246      	movs	r2, #70	; 0x46
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	225d      	movs	r2, #93	; 0x5d
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff ff70 	bl	8003be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d04:	e003      	b.n	8003d0e <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7ff ff53 	bl	8003bb4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b004      	add	sp, #16
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff ff4d 	bl	8003bc4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff ff46 	bl	8003bd4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b004      	add	sp, #16
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2103      	movs	r1, #3
 8003d6a:	438a      	bics	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d72:	2210      	movs	r2, #16
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	225d      	movs	r2, #93	; 0x5d
 8003d7e:	2101      	movs	r1, #1
 8003d80:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff ff2d 	bl	8003be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2246      	movs	r2, #70	; 0x46
 8003da4:	2100      	movs	r1, #0
 8003da6:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff ff17 	bl	8003be4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd0:	e050      	b.n	8003e74 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	d04d      	beq.n	8003e74 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003dd8:	f7fd f96c 	bl	80010b4 <HAL_GetTick>
 8003ddc:	0002      	movs	r2, r0
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d902      	bls.n	8003dee <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d142      	bne.n	8003e74 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	21e0      	movs	r1, #224	; 0xe0
 8003dfa:	438a      	bics	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	2382      	movs	r3, #130	; 0x82
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d113      	bne.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0x72>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d005      	beq.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d107      	bne.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2140      	movs	r1, #64	; 0x40
 8003e2e:	438a      	bics	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d110      	bne.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4914      	ldr	r1, [pc, #80]	; (8003e9c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0189      	lsls	r1, r1, #6
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	225d      	movs	r2, #93	; 0x5d
 8003e64:	2101      	movs	r1, #1
 8003e66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	225c      	movs	r2, #92	; 0x5c
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e00f      	b.n	8003e94 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	425a      	negs	r2, r3
 8003e84:	4153      	adcs	r3, r2
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d19f      	bne.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	ffffdfff 	.word	0xffffdfff

08003ea0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003eae:	e05c      	b.n	8003f6a <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	23c0      	movs	r3, #192	; 0xc0
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d106      	bne.n	8003ec8 <SPI_WaitFifoStateUntilTimeout+0x28>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	d04d      	beq.n	8003f6a <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003ece:	f7fd f8f1 	bl	80010b4 <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d902      	bls.n	8003ee4 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d142      	bne.n	8003f6a <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	21e0      	movs	r1, #224	; 0xe0
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	2382      	movs	r3, #130	; 0x82
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d113      	bne.n	8003f28 <SPI_WaitFifoStateUntilTimeout+0x88>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d005      	beq.n	8003f18 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2140      	movs	r1, #64	; 0x40
 8003f24:	438a      	bics	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	019b      	lsls	r3, r3, #6
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d110      	bne.n	8003f56 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4911      	ldr	r1, [pc, #68]	; (8003f84 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	0189      	lsls	r1, r1, #6
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	225d      	movs	r2, #93	; 0x5d
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	225c      	movs	r2, #92	; 0x5c
 8003f62:	2100      	movs	r1, #0
 8003f64:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e008      	b.n	8003f7c <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d19a      	bne.n	8003eb0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b004      	add	sp, #16
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	ffffdfff 	.word	0xffffdfff

08003f88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	2382      	movs	r3, #130	; 0x82
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d113      	bne.n	8003fc8 <SPI_EndRxTransaction+0x40>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d005      	beq.n	8003fb8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d107      	bne.n	8003fc8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2140      	movs	r1, #64	; 0x40
 8003fc4:	438a      	bics	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2180      	movs	r1, #128	; 0x80
 8003fd6:	f7ff fef3 	bl	8003dc0 <SPI_WaitFlagStateUntilTimeout>
 8003fda:	1e03      	subs	r3, r0, #0
 8003fdc:	d007      	beq.n	8003fee <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e026      	b.n	800403c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	2382      	movs	r3, #130	; 0x82
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d11f      	bne.n	800403a <SPI_EndRxTransaction+0xb2>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	2380      	movs	r3, #128	; 0x80
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	429a      	cmp	r2, r3
 8004004:	d005      	beq.n	8004012 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	429a      	cmp	r2, r3
 8004010:	d113      	bne.n	800403a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	23c0      	movs	r3, #192	; 0xc0
 8004016:	00d9      	lsls	r1, r3, #3
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	0013      	movs	r3, r2
 8004020:	2200      	movs	r2, #0
 8004022:	f7ff ff3d 	bl	8003ea0 <SPI_WaitFifoStateUntilTimeout>
 8004026:	1e03      	subs	r3, r0, #0
 8004028:	d007      	beq.n	800403a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	2220      	movs	r2, #32
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e000      	b.n	800403c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bd80      	pop	{r7, pc}

08004044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	23c0      	movs	r3, #192	; 0xc0
 8004054:	0159      	lsls	r1, r3, #5
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	0013      	movs	r3, r2
 800405e:	2200      	movs	r2, #0
 8004060:	f7ff ff1e 	bl	8003ea0 <SPI_WaitFifoStateUntilTimeout>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d007      	beq.n	8004078 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	2220      	movs	r2, #32
 800406e:	431a      	orrs	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e027      	b.n	80040c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	0013      	movs	r3, r2
 8004082:	2200      	movs	r2, #0
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	f7ff fe9b 	bl	8003dc0 <SPI_WaitFlagStateUntilTimeout>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d007      	beq.n	800409e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004092:	2220      	movs	r2, #32
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e014      	b.n	80040c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	23c0      	movs	r3, #192	; 0xc0
 80040a2:	00d9      	lsls	r1, r3, #3
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	0013      	movs	r3, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	f7ff fef7 	bl	8003ea0 <SPI_WaitFifoStateUntilTimeout>
 80040b2:	1e03      	subs	r3, r0, #0
 80040b4:	d007      	beq.n	80040c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ba:	2220      	movs	r2, #32
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e000      	b.n	80040c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b004      	add	sp, #16
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e01e      	b.n	8004120 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	223d      	movs	r2, #61	; 0x3d
 80040e6:	5c9b      	ldrb	r3, [r3, r2]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	223c      	movs	r2, #60	; 0x3c
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fc fdf7 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	223d      	movs	r2, #61	; 0x3d
 8004102:	2102      	movs	r1, #2
 8004104:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3304      	adds	r3, #4
 800410e:	0019      	movs	r1, r3
 8004110:	0010      	movs	r0, r2
 8004112:	f000 f949 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	223d      	movs	r2, #61	; 0x3d
 800411a:	2101      	movs	r1, #1
 800411c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	0018      	movs	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e01e      	b.n	8004178 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	223d      	movs	r2, #61	; 0x3d
 800413e:	5c9b      	ldrb	r3, [r3, r2]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	223c      	movs	r2, #60	; 0x3c
 800414a:	2100      	movs	r1, #0
 800414c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f000 f815 	bl	8004180 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	223d      	movs	r2, #61	; 0x3d
 800415a:	2102      	movs	r1, #2
 800415c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	0019      	movs	r1, r3
 8004168:	0010      	movs	r0, r2
 800416a:	f000 f91d 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	223d      	movs	r2, #61	; 0x3d
 8004172:	2101      	movs	r1, #1
 8004174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	b002      	add	sp, #8
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	223c      	movs	r2, #60	; 0x3c
 80041a0:	5c9b      	ldrb	r3, [r3, r2]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_OC_ConfigChannel+0x1a>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e03c      	b.n	8004224 <HAL_TIM_OC_ConfigChannel+0x94>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	223c      	movs	r2, #60	; 0x3c
 80041ae:	2101      	movs	r1, #1
 80041b0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	223d      	movs	r2, #61	; 0x3d
 80041b6:	2102      	movs	r1, #2
 80041b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d010      	beq.n	80041e2 <HAL_TIM_OC_ConfigChannel+0x52>
 80041c0:	d802      	bhi.n	80041c8 <HAL_TIM_OC_ConfigChannel+0x38>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 80041c6:	e024      	b.n	8004212 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d012      	beq.n	80041f2 <HAL_TIM_OC_ConfigChannel+0x62>
 80041cc:	2b0c      	cmp	r3, #12
 80041ce:	d018      	beq.n	8004202 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 80041d0:	e01f      	b.n	8004212 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	0011      	movs	r1, r2
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 f964 	bl	80044a8 <TIM_OC1_SetConfig>
      break;
 80041e0:	e017      	b.n	8004212 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	0011      	movs	r1, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f000 f9e4 	bl	80045b8 <TIM_OC2_SetConfig>
      break;
 80041f0:	e00f      	b.n	8004212 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	0011      	movs	r1, r2
 80041fa:	0018      	movs	r0, r3
 80041fc:	f000 fa60 	bl	80046c0 <TIM_OC3_SetConfig>
      break;
 8004200:	e007      	b.n	8004212 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f000 fade 	bl	80047cc <TIM_OC4_SetConfig>
      break;
 8004210:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	223d      	movs	r2, #61	; 0x3d
 8004216:	2101      	movs	r1, #1
 8004218:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	223c      	movs	r2, #60	; 0x3c
 800421e:	2100      	movs	r1, #0
 8004220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b004      	add	sp, #16
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	223c      	movs	r2, #60	; 0x3c
 800423a:	5c9b      	ldrb	r3, [r3, r2]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIM_ConfigClockSource+0x18>
 8004240:	2302      	movs	r3, #2
 8004242:	e0ab      	b.n	800439c <HAL_TIM_ConfigClockSource+0x170>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	223c      	movs	r2, #60	; 0x3c
 8004248:	2101      	movs	r1, #1
 800424a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	223d      	movs	r2, #61	; 0x3d
 8004250:	2102      	movs	r1, #2
 8004252:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2277      	movs	r2, #119	; 0x77
 8004260:	4393      	bics	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a4f      	ldr	r2, [pc, #316]	; (80043a4 <HAL_TIM_ConfigClockSource+0x178>)
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d100      	bne.n	800427e <HAL_TIM_ConfigClockSource+0x52>
 800427c:	e06b      	b.n	8004356 <HAL_TIM_ConfigClockSource+0x12a>
 800427e:	d80e      	bhi.n	800429e <HAL_TIM_ConfigClockSource+0x72>
 8004280:	2b10      	cmp	r3, #16
 8004282:	d100      	bne.n	8004286 <HAL_TIM_ConfigClockSource+0x5a>
 8004284:	e077      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x14a>
 8004286:	d803      	bhi.n	8004290 <HAL_TIM_ConfigClockSource+0x64>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d100      	bne.n	800428e <HAL_TIM_ConfigClockSource+0x62>
 800428c:	e073      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800428e:	e07c      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004290:	2b20      	cmp	r3, #32
 8004292:	d100      	bne.n	8004296 <HAL_TIM_ConfigClockSource+0x6a>
 8004294:	e06f      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x14a>
 8004296:	2b30      	cmp	r3, #48	; 0x30
 8004298:	d100      	bne.n	800429c <HAL_TIM_ConfigClockSource+0x70>
 800429a:	e06c      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800429c:	e075      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800429e:	2b70      	cmp	r3, #112	; 0x70
 80042a0:	d00e      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0x94>
 80042a2:	d804      	bhi.n	80042ae <HAL_TIM_ConfigClockSource+0x82>
 80042a4:	2b50      	cmp	r3, #80	; 0x50
 80042a6:	d036      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0xea>
 80042a8:	2b60      	cmp	r3, #96	; 0x60
 80042aa:	d044      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80042ac:	e06d      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	0152      	lsls	r2, r2, #5
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d068      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x15c>
 80042b6:	2280      	movs	r2, #128	; 0x80
 80042b8:	0192      	lsls	r2, r2, #6
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d017      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80042be:	e064      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f000 fb60 	bl	8004994 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2277      	movs	r2, #119	; 0x77
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	609a      	str	r2, [r3, #8]
      break;
 80042ec:	e04d      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6899      	ldr	r1, [r3, #8]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f000 fb49 	bl	8004994 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	01c9      	lsls	r1, r1, #7
 8004310:	430a      	orrs	r2, r1
 8004312:	609a      	str	r2, [r3, #8]
      break;
 8004314:	e039      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6859      	ldr	r1, [r3, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	001a      	movs	r2, r3
 8004324:	f000 fabc 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2150      	movs	r1, #80	; 0x50
 800432e:	0018      	movs	r0, r3
 8004330:	f000 fb16 	bl	8004960 <TIM_ITRx_SetConfig>
      break;
 8004334:	e029      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	001a      	movs	r2, r3
 8004344:	f000 fada 	bl	80048fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2160      	movs	r1, #96	; 0x60
 800434e:	0018      	movs	r0, r3
 8004350:	f000 fb06 	bl	8004960 <TIM_ITRx_SetConfig>
      break;
 8004354:	e019      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	001a      	movs	r2, r3
 8004364:	f000 fa9c 	bl	80048a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2140      	movs	r1, #64	; 0x40
 800436e:	0018      	movs	r0, r3
 8004370:	f000 faf6 	bl	8004960 <TIM_ITRx_SetConfig>
      break;
 8004374:	e009      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	0019      	movs	r1, r3
 8004380:	0010      	movs	r0, r2
 8004382:	f000 faed 	bl	8004960 <TIM_ITRx_SetConfig>
      break;
 8004386:	e000      	b.n	800438a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004388:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	223d      	movs	r2, #61	; 0x3d
 800438e:	2101      	movs	r1, #1
 8004390:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223c      	movs	r2, #60	; 0x3c
 8004396:	2100      	movs	r1, #0
 8004398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b004      	add	sp, #16
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	ffff00ff 	.word	0xffff00ff

080043a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a34      	ldr	r2, [pc, #208]	; (800448c <TIM_Base_SetConfig+0xe4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d008      	beq.n	80043d2 <TIM_Base_SetConfig+0x2a>
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	05db      	lsls	r3, r3, #23
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x2a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a30      	ldr	r2, [pc, #192]	; (8004490 <TIM_Base_SetConfig+0xe8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2270      	movs	r2, #112	; 0x70
 80043d6:	4393      	bics	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <TIM_Base_SetConfig+0xe4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <TIM_Base_SetConfig+0x76>
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	05db      	lsls	r3, r3, #23
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d013      	beq.n	800441e <TIM_Base_SetConfig+0x76>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a25      	ldr	r2, [pc, #148]	; (8004490 <TIM_Base_SetConfig+0xe8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00f      	beq.n	800441e <TIM_Base_SetConfig+0x76>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <TIM_Base_SetConfig+0xec>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_Base_SetConfig+0x76>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a23      	ldr	r2, [pc, #140]	; (8004498 <TIM_Base_SetConfig+0xf0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_Base_SetConfig+0x76>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <TIM_Base_SetConfig+0xf4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_Base_SetConfig+0x76>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <TIM_Base_SetConfig+0xf8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d108      	bne.n	8004430 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <TIM_Base_SetConfig+0xfc>)
 8004422:	4013      	ands	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2280      	movs	r2, #128	; 0x80
 8004434:	4393      	bics	r3, r2
 8004436:	001a      	movs	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a0c      	ldr	r2, [pc, #48]	; (800448c <TIM_Base_SetConfig+0xe4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_Base_SetConfig+0xce>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <TIM_Base_SetConfig+0xf0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_Base_SetConfig+0xce>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a0c      	ldr	r2, [pc, #48]	; (800449c <TIM_Base_SetConfig+0xf4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_Base_SetConfig+0xce>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <TIM_Base_SetConfig+0xf8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d103      	bne.n	800447e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	615a      	str	r2, [r3, #20]
}
 8004484:	46c0      	nop			; (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b004      	add	sp, #16
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40012c00 	.word	0x40012c00
 8004490:	40000400 	.word	0x40000400
 8004494:	40002000 	.word	0x40002000
 8004498:	40014000 	.word	0x40014000
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800
 80044a4:	fffffcff 	.word	0xfffffcff

080044a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	2201      	movs	r2, #1
 80044b8:	4393      	bics	r3, r2
 80044ba:	001a      	movs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2270      	movs	r2, #112	; 0x70
 80044d6:	4393      	bics	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2203      	movs	r2, #3
 80044de:	4393      	bics	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2202      	movs	r2, #2
 80044f0:	4393      	bics	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <TIM_OC1_SetConfig+0xf8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_OC1_SetConfig+0x76>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <TIM_OC1_SetConfig+0xfc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_OC1_SetConfig+0x76>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <TIM_OC1_SetConfig+0x100>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_OC1_SetConfig+0x76>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <TIM_OC1_SetConfig+0x104>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10c      	bne.n	8004538 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2208      	movs	r2, #8
 8004522:	4393      	bics	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2204      	movs	r2, #4
 8004534:	4393      	bics	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <TIM_OC1_SetConfig+0xf8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_OC1_SetConfig+0xb0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <TIM_OC1_SetConfig+0xfc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_OC1_SetConfig+0xb0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a17      	ldr	r2, [pc, #92]	; (80045a8 <TIM_OC1_SetConfig+0x100>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_OC1_SetConfig+0xb0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a16      	ldr	r2, [pc, #88]	; (80045ac <TIM_OC1_SetConfig+0x104>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d111      	bne.n	800457c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <TIM_OC1_SetConfig+0x108>)
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <TIM_OC1_SetConfig+0x10c>)
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b006      	add	sp, #24
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800
 80045b0:	fffffeff 	.word	0xfffffeff
 80045b4:	fffffdff 	.word	0xfffffdff

080045b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	2210      	movs	r2, #16
 80045c8:	4393      	bics	r3, r2
 80045ca:	001a      	movs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a2e      	ldr	r2, [pc, #184]	; (80046a0 <TIM_OC2_SetConfig+0xe8>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <TIM_OC2_SetConfig+0xec>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2220      	movs	r2, #32
 8004602:	4393      	bics	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a24      	ldr	r2, [pc, #144]	; (80046a8 <TIM_OC2_SetConfig+0xf0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10d      	bne.n	8004636 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	4393      	bics	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2240      	movs	r2, #64	; 0x40
 8004632:	4393      	bics	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <TIM_OC2_SetConfig+0xf0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_OC2_SetConfig+0x9e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <TIM_OC2_SetConfig+0xf4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <TIM_OC2_SetConfig+0x9e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <TIM_OC2_SetConfig+0xf8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_OC2_SetConfig+0x9e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <TIM_OC2_SetConfig+0xfc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d113      	bne.n	800467e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <TIM_OC2_SetConfig+0x100>)
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <TIM_OC2_SetConfig+0x104>)
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b006      	add	sp, #24
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	ffff8fff 	.word	0xffff8fff
 80046a4:	fffffcff 	.word	0xfffffcff
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800
 80046b8:	fffffbff 	.word	0xfffffbff
 80046bc:	fffff7ff 	.word	0xfffff7ff

080046c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	4a35      	ldr	r2, [pc, #212]	; (80047a4 <TIM_OC3_SetConfig+0xe4>)
 80046d0:	401a      	ands	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2270      	movs	r2, #112	; 0x70
 80046ec:	4393      	bics	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2203      	movs	r2, #3
 80046f4:	4393      	bics	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	4a28      	ldr	r2, [pc, #160]	; (80047a8 <TIM_OC3_SetConfig+0xe8>)
 8004706:	4013      	ands	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a24      	ldr	r2, [pc, #144]	; (80047ac <TIM_OC3_SetConfig+0xec>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d10d      	bne.n	800473a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <TIM_OC3_SetConfig+0xf0>)
 8004722:	4013      	ands	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <TIM_OC3_SetConfig+0xf4>)
 8004736:	4013      	ands	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <TIM_OC3_SetConfig+0xec>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_OC3_SetConfig+0x9a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <TIM_OC3_SetConfig+0xf8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_OC3_SetConfig+0x9a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <TIM_OC3_SetConfig+0xfc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_OC3_SetConfig+0x9a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <TIM_OC3_SetConfig+0x100>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d113      	bne.n	8004782 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <TIM_OC3_SetConfig+0x104>)
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <TIM_OC3_SetConfig+0x108>)
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	46bd      	mov	sp, r7
 80047a0:	b006      	add	sp, #24
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	fffffeff 	.word	0xfffffeff
 80047a8:	fffffdff 	.word	0xfffffdff
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	fffff7ff 	.word	0xfffff7ff
 80047b4:	fffffbff 	.word	0xfffffbff
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800
 80047c4:	ffffefff 	.word	0xffffefff
 80047c8:	ffffdfff 	.word	0xffffdfff

080047cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a28      	ldr	r2, [pc, #160]	; (800487c <TIM_OC4_SetConfig+0xb0>)
 80047dc:	401a      	ands	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a22      	ldr	r2, [pc, #136]	; (8004880 <TIM_OC4_SetConfig+0xb4>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a21      	ldr	r2, [pc, #132]	; (8004884 <TIM_OC4_SetConfig+0xb8>)
 8004800:	4013      	ands	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <TIM_OC4_SetConfig+0xbc>)
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	031b      	lsls	r3, r3, #12
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <TIM_OC4_SetConfig+0xc0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC4_SetConfig+0x78>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <TIM_OC4_SetConfig+0xc4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC4_SetConfig+0x78>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a17      	ldr	r2, [pc, #92]	; (8004894 <TIM_OC4_SetConfig+0xc8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC4_SetConfig+0x78>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a16      	ldr	r2, [pc, #88]	; (8004898 <TIM_OC4_SetConfig+0xcc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d109      	bne.n	8004858 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <TIM_OC4_SetConfig+0xd0>)
 8004848:	4013      	ands	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b006      	add	sp, #24
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	ffffefff 	.word	0xffffefff
 8004880:	ffff8fff 	.word	0xffff8fff
 8004884:	fffffcff 	.word	0xfffffcff
 8004888:	ffffdfff 	.word	0xffffdfff
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40014000 	.word	0x40014000
 8004894:	40014400 	.word	0x40014400
 8004898:	40014800 	.word	0x40014800
 800489c:	ffffbfff 	.word	0xffffbfff

080048a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	2201      	movs	r2, #1
 80048b8:	4393      	bics	r3, r2
 80048ba:	001a      	movs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	22f0      	movs	r2, #240	; 0xf0
 80048ca:	4393      	bics	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	220a      	movs	r2, #10
 80048dc:	4393      	bics	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b006      	add	sp, #24
 80048fa:	bd80      	pop	{r7, pc}

080048fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	2210      	movs	r2, #16
 800490e:	4393      	bics	r3, r2
 8004910:	001a      	movs	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	4a0d      	ldr	r2, [pc, #52]	; (800495c <TIM_TI2_ConfigInputStage+0x60>)
 8004926:	4013      	ands	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	031b      	lsls	r3, r3, #12
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	22a0      	movs	r2, #160	; 0xa0
 8004938:	4393      	bics	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b006      	add	sp, #24
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	ffff0fff 	.word	0xffff0fff

08004960 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2270      	movs	r2, #112	; 0x70
 8004974:	4393      	bics	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	2207      	movs	r2, #7
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	609a      	str	r2, [r3, #8]
}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	46bd      	mov	sp, r7
 800498e:	b004      	add	sp, #16
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <TIM_ETR_SetConfig+0x3c>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	021a      	lsls	r2, r3, #8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	609a      	str	r2, [r3, #8]
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b006      	add	sp, #24
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	ffff00ff 	.word	0xffff00ff

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	223c      	movs	r2, #60	; 0x3c
 80049e2:	5c9b      	ldrb	r3, [r3, r2]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e047      	b.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	223c      	movs	r2, #60	; 0x3c
 80049f0:	2101      	movs	r1, #1
 80049f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	223d      	movs	r2, #61	; 0x3d
 80049f8:	2102      	movs	r1, #2
 80049fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2270      	movs	r2, #112	; 0x70
 8004a10:	4393      	bics	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00f      	beq.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	05db      	lsls	r3, r3, #23
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d009      	beq.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d10c      	bne.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2280      	movs	r2, #128	; 0x80
 8004a54:	4393      	bics	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	223d      	movs	r2, #61	; 0x3d
 8004a6e:	2101      	movs	r1, #1
 8004a70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	223c      	movs	r2, #60	; 0x3c
 8004a76:	2100      	movs	r1, #0
 8004a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b004      	add	sp, #16
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40014000 	.word	0x40014000

08004a90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	223c      	movs	r2, #60	; 0x3c
 8004aa2:	5c9b      	ldrb	r3, [r3, r2]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e03e      	b.n	8004b2a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	223c      	movs	r2, #60	; 0x3c
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	22ff      	movs	r2, #255	; 0xff
 8004ab8:	4393      	bics	r3, r2
 8004aba:	001a      	movs	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004ac8:	401a      	ands	r2, r3
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004af2:	401a      	ands	r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004b00:	401a      	ands	r2, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004b0e:	401a      	ands	r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	223c      	movs	r2, #60	; 0x3c
 8004b24:	2100      	movs	r1, #0
 8004b26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b004      	add	sp, #16
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	fffffcff 	.word	0xfffffcff
 8004b38:	fffffbff 	.word	0xfffffbff
 8004b3c:	fffff7ff 	.word	0xfffff7ff
 8004b40:	ffffefff 	.word	0xffffefff
 8004b44:	ffffdfff 	.word	0xffffdfff
 8004b48:	ffffbfff 	.word	0xffffbfff

08004b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e044      	b.n	8004be8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d107      	bne.n	8004b76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2270      	movs	r2, #112	; 0x70
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7fc f8db 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2224      	movs	r2, #36	; 0x24
 8004b7a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2101      	movs	r1, #1
 8004b88:	438a      	bics	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 f830 	bl	8004bf4 <UART_SetConfig>
 8004b94:	0003      	movs	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e024      	b.n	8004be8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 f9ef 	bl	8004f8c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	490d      	ldr	r1, [pc, #52]	; (8004bf0 <HAL_UART_Init+0xa4>)
 8004bba:	400a      	ands	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	212a      	movs	r1, #42	; 0x2a
 8004bca:	438a      	bics	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2101      	movs	r1, #1
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 fa87 	bl	80050f4 <UART_CheckIdleState>
 8004be6:	0003      	movs	r3, r0
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	ffffb7ff 	.word	0xffffb7ff

08004bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c00:	2317      	movs	r3, #23
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4ac5      	ldr	r2, [pc, #788]	; (8004f3c <UART_SetConfig+0x348>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4ac0      	ldr	r2, [pc, #768]	; (8004f40 <UART_SetConfig+0x34c>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	0019      	movs	r1, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4ab7      	ldr	r2, [pc, #732]	; (8004f44 <UART_SetConfig+0x350>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4ab3      	ldr	r2, [pc, #716]	; (8004f48 <UART_SetConfig+0x354>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d125      	bne.n	8004cca <UART_SetConfig+0xd6>
 8004c7e:	4bb3      	ldr	r3, [pc, #716]	; (8004f4c <UART_SetConfig+0x358>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	2203      	movs	r2, #3
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d00f      	beq.n	8004caa <UART_SetConfig+0xb6>
 8004c8a:	d304      	bcc.n	8004c96 <UART_SetConfig+0xa2>
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d011      	beq.n	8004cb4 <UART_SetConfig+0xc0>
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d005      	beq.n	8004ca0 <UART_SetConfig+0xac>
 8004c94:	e013      	b.n	8004cbe <UART_SetConfig+0xca>
 8004c96:	231f      	movs	r3, #31
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	e064      	b.n	8004d6a <UART_SetConfig+0x176>
 8004ca0:	231f      	movs	r3, #31
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e05f      	b.n	8004d6a <UART_SetConfig+0x176>
 8004caa:	231f      	movs	r3, #31
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	2204      	movs	r2, #4
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e05a      	b.n	8004d6a <UART_SetConfig+0x176>
 8004cb4:	231f      	movs	r3, #31
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2208      	movs	r2, #8
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e055      	b.n	8004d6a <UART_SetConfig+0x176>
 8004cbe:	231f      	movs	r3, #31
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	2210      	movs	r2, #16
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	e04f      	b.n	8004d6a <UART_SetConfig+0x176>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4aa0      	ldr	r2, [pc, #640]	; (8004f50 <UART_SetConfig+0x35c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d132      	bne.n	8004d3a <UART_SetConfig+0x146>
 8004cd4:	4b9d      	ldr	r3, [pc, #628]	; (8004f4c <UART_SetConfig+0x358>)
 8004cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd8:	23c0      	movs	r3, #192	; 0xc0
 8004cda:	029b      	lsls	r3, r3, #10
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	0252      	lsls	r2, r2, #9
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d019      	beq.n	8004d1a <UART_SetConfig+0x126>
 8004ce6:	2280      	movs	r2, #128	; 0x80
 8004ce8:	0252      	lsls	r2, r2, #9
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d802      	bhi.n	8004cf4 <UART_SetConfig+0x100>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <UART_SetConfig+0x112>
 8004cf2:	e01c      	b.n	8004d2e <UART_SetConfig+0x13a>
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	0292      	lsls	r2, r2, #10
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <UART_SetConfig+0x130>
 8004cfc:	22c0      	movs	r2, #192	; 0xc0
 8004cfe:	0292      	lsls	r2, r2, #10
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d005      	beq.n	8004d10 <UART_SetConfig+0x11c>
 8004d04:	e013      	b.n	8004d2e <UART_SetConfig+0x13a>
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e02c      	b.n	8004d6a <UART_SetConfig+0x176>
 8004d10:	231f      	movs	r3, #31
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	2202      	movs	r2, #2
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e027      	b.n	8004d6a <UART_SetConfig+0x176>
 8004d1a:	231f      	movs	r3, #31
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2204      	movs	r2, #4
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e022      	b.n	8004d6a <UART_SetConfig+0x176>
 8004d24:	231f      	movs	r3, #31
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	2208      	movs	r2, #8
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	e01d      	b.n	8004d6a <UART_SetConfig+0x176>
 8004d2e:	231f      	movs	r3, #31
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2210      	movs	r2, #16
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	e017      	b.n	8004d6a <UART_SetConfig+0x176>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a85      	ldr	r2, [pc, #532]	; (8004f54 <UART_SetConfig+0x360>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d104      	bne.n	8004d4e <UART_SetConfig+0x15a>
 8004d44:	231f      	movs	r3, #31
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	e00d      	b.n	8004d6a <UART_SetConfig+0x176>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a81      	ldr	r2, [pc, #516]	; (8004f58 <UART_SetConfig+0x364>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d104      	bne.n	8004d62 <UART_SetConfig+0x16e>
 8004d58:	231f      	movs	r3, #31
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e003      	b.n	8004d6a <UART_SetConfig+0x176>
 8004d62:	231f      	movs	r3, #31
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2210      	movs	r2, #16
 8004d68:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d000      	beq.n	8004d78 <UART_SetConfig+0x184>
 8004d76:	e07d      	b.n	8004e74 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8004d78:	231f      	movs	r3, #31
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d01c      	beq.n	8004dbc <UART_SetConfig+0x1c8>
 8004d82:	dc02      	bgt.n	8004d8a <UART_SetConfig+0x196>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <UART_SetConfig+0x1a0>
 8004d88:	e04b      	b.n	8004e22 <UART_SetConfig+0x22e>
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d025      	beq.n	8004dda <UART_SetConfig+0x1e6>
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d037      	beq.n	8004e02 <UART_SetConfig+0x20e>
 8004d92:	e046      	b.n	8004e22 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d94:	f7fe f978 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	005a      	lsls	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	18d2      	adds	r2, r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	0019      	movs	r1, r3
 8004dae:	0010      	movs	r0, r2
 8004db0:	f7fb f9aa 	bl	8000108 <__udivsi3>
 8004db4:	0003      	movs	r3, r0
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	61bb      	str	r3, [r7, #24]
        break;
 8004dba:	e037      	b.n	8004e2c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	4a66      	ldr	r2, [pc, #408]	; (8004f5c <UART_SetConfig+0x368>)
 8004dc4:	189a      	adds	r2, r3, r2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	0019      	movs	r1, r3
 8004dcc:	0010      	movs	r0, r2
 8004dce:	f7fb f99b 	bl	8000108 <__udivsi3>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	61bb      	str	r3, [r7, #24]
        break;
 8004dd8:	e028      	b.n	8004e2c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dda:	f7fe f8cb 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8004dde:	0003      	movs	r3, r0
 8004de0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	005a      	lsls	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	18d2      	adds	r2, r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	0019      	movs	r1, r3
 8004df4:	0010      	movs	r0, r2
 8004df6:	f7fb f987 	bl	8000108 <__udivsi3>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	61bb      	str	r3, [r7, #24]
        break;
 8004e00:	e014      	b.n	8004e2c <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	2280      	movs	r2, #128	; 0x80
 8004e0a:	0252      	lsls	r2, r2, #9
 8004e0c:	189a      	adds	r2, r3, r2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	0019      	movs	r1, r3
 8004e14:	0010      	movs	r0, r2
 8004e16:	f7fb f977 	bl	8000108 <__udivsi3>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	61bb      	str	r3, [r7, #24]
        break;
 8004e20:	e004      	b.n	8004e2c <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8004e22:	2317      	movs	r3, #23
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	2201      	movs	r2, #1
 8004e28:	701a      	strb	r2, [r3, #0]
        break;
 8004e2a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	d91b      	bls.n	8004e6a <UART_SetConfig+0x276>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	4a4a      	ldr	r2, [pc, #296]	; (8004f60 <UART_SetConfig+0x36c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d817      	bhi.n	8004e6a <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	200a      	movs	r0, #10
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	210f      	movs	r1, #15
 8004e44:	438a      	bics	r2, r1
 8004e46:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2207      	movs	r2, #7
 8004e50:	4013      	ands	r3, r2
 8004e52:	b299      	uxth	r1, r3
 8004e54:	183b      	adds	r3, r7, r0
 8004e56:	183a      	adds	r2, r7, r0
 8004e58:	8812      	ldrh	r2, [r2, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	183a      	adds	r2, r7, r0
 8004e64:	8812      	ldrh	r2, [r2, #0]
 8004e66:	60da      	str	r2, [r3, #12]
 8004e68:	e082      	b.n	8004f70 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e6a:	2317      	movs	r3, #23
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	2201      	movs	r2, #1
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e07d      	b.n	8004f70 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8004e74:	231f      	movs	r3, #31
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d01b      	beq.n	8004eb6 <UART_SetConfig+0x2c2>
 8004e7e:	dc02      	bgt.n	8004e86 <UART_SetConfig+0x292>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <UART_SetConfig+0x29c>
 8004e84:	e049      	b.n	8004f1a <UART_SetConfig+0x326>
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d024      	beq.n	8004ed4 <UART_SetConfig+0x2e0>
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d035      	beq.n	8004efa <UART_SetConfig+0x306>
 8004e8e:	e044      	b.n	8004f1a <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fe f8fa 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8004e94:	0003      	movs	r3, r0
 8004e96:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	085a      	lsrs	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	18d2      	adds	r2, r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	0010      	movs	r0, r2
 8004eaa:	f7fb f92d 	bl	8000108 <__udivsi3>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	61bb      	str	r3, [r7, #24]
        break;
 8004eb4:	e036      	b.n	8004f24 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	4a29      	ldr	r2, [pc, #164]	; (8004f64 <UART_SetConfig+0x370>)
 8004ebe:	189a      	adds	r2, r3, r2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	0010      	movs	r0, r2
 8004ec8:	f7fb f91e 	bl	8000108 <__udivsi3>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	61bb      	str	r3, [r7, #24]
        break;
 8004ed2:	e027      	b.n	8004f24 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed4:	f7fe f84e 	bl	8002f74 <HAL_RCC_GetSysClockFreq>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	085a      	lsrs	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	18d2      	adds	r2, r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	0019      	movs	r1, r3
 8004eec:	0010      	movs	r0, r2
 8004eee:	f7fb f90b 	bl	8000108 <__udivsi3>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	61bb      	str	r3, [r7, #24]
        break;
 8004ef8:	e014      	b.n	8004f24 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	2280      	movs	r2, #128	; 0x80
 8004f02:	0212      	lsls	r2, r2, #8
 8004f04:	189a      	adds	r2, r3, r2
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	0019      	movs	r1, r3
 8004f0c:	0010      	movs	r0, r2
 8004f0e:	f7fb f8fb 	bl	8000108 <__udivsi3>
 8004f12:	0003      	movs	r3, r0
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	61bb      	str	r3, [r7, #24]
        break;
 8004f18:	e004      	b.n	8004f24 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8004f1a:	2317      	movs	r3, #23
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
        break;
 8004f22:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	d91e      	bls.n	8004f68 <UART_SetConfig+0x374>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	4a0c      	ldr	r2, [pc, #48]	; (8004f60 <UART_SetConfig+0x36c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d81a      	bhi.n	8004f68 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	e019      	b.n	8004f70 <UART_SetConfig+0x37c>
 8004f3c:	efff69f3 	.word	0xefff69f3
 8004f40:	ffffcfff 	.word	0xffffcfff
 8004f44:	fffff4ff 	.word	0xfffff4ff
 8004f48:	40013800 	.word	0x40013800
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40004400 	.word	0x40004400
 8004f54:	40004800 	.word	0x40004800
 8004f58:	40004c00 	.word	0x40004c00
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	0000ffff 	.word	0x0000ffff
 8004f64:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8004f68:	2317      	movs	r3, #23
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f7c:	2317      	movs	r3, #23
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	781b      	ldrb	r3, [r3, #0]
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b008      	add	sp, #32
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)

08004f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2201      	movs	r2, #1
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4a4a      	ldr	r2, [pc, #296]	; (80050d0 <UART_AdvFeatureConfig+0x144>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	0019      	movs	r1, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	2202      	movs	r2, #2
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4a43      	ldr	r2, [pc, #268]	; (80050d4 <UART_AdvFeatureConfig+0x148>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	0019      	movs	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2204      	movs	r2, #4
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	4a3b      	ldr	r2, [pc, #236]	; (80050d8 <UART_AdvFeatureConfig+0x14c>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	0019      	movs	r1, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2208      	movs	r2, #8
 8005000:	4013      	ands	r3, r2
 8005002:	d00b      	beq.n	800501c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4a34      	ldr	r2, [pc, #208]	; (80050dc <UART_AdvFeatureConfig+0x150>)
 800500c:	4013      	ands	r3, r2
 800500e:	0019      	movs	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2210      	movs	r2, #16
 8005022:	4013      	ands	r3, r2
 8005024:	d00b      	beq.n	800503e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <UART_AdvFeatureConfig+0x154>)
 800502e:	4013      	ands	r3, r2
 8005030:	0019      	movs	r1, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	2220      	movs	r2, #32
 8005044:	4013      	ands	r3, r2
 8005046:	d00b      	beq.n	8005060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <UART_AdvFeatureConfig+0x158>)
 8005050:	4013      	ands	r3, r2
 8005052:	0019      	movs	r1, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	2240      	movs	r2, #64	; 0x40
 8005066:	4013      	ands	r3, r2
 8005068:	d01d      	beq.n	80050a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <UART_AdvFeatureConfig+0x15c>)
 8005072:	4013      	ands	r3, r2
 8005074:	0019      	movs	r1, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	035b      	lsls	r3, r3, #13
 800508a:	429a      	cmp	r2, r3
 800508c:	d10b      	bne.n	80050a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a15      	ldr	r2, [pc, #84]	; (80050ec <UART_AdvFeatureConfig+0x160>)
 8005096:	4013      	ands	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2280      	movs	r2, #128	; 0x80
 80050ac:	4013      	ands	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <UART_AdvFeatureConfig+0x164>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	605a      	str	r2, [r3, #4]
  }
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b002      	add	sp, #8
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	fffdffff 	.word	0xfffdffff
 80050d4:	fffeffff 	.word	0xfffeffff
 80050d8:	fffbffff 	.word	0xfffbffff
 80050dc:	ffff7fff 	.word	0xffff7fff
 80050e0:	ffffefff 	.word	0xffffefff
 80050e4:	ffffdfff 	.word	0xffffdfff
 80050e8:	ffefffff 	.word	0xffefffff
 80050ec:	ff9fffff 	.word	0xff9fffff
 80050f0:	fff7ffff 	.word	0xfff7ffff

080050f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005102:	f7fb ffd7 	bl	80010b4 <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2208      	movs	r2, #8
 8005112:	4013      	ands	r3, r2
 8005114:	2b08      	cmp	r3, #8
 8005116:	d10d      	bne.n	8005134 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	0399      	lsls	r1, r3, #14
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4b16      	ldr	r3, [pc, #88]	; (800517c <UART_CheckIdleState+0x88>)
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	0013      	movs	r3, r2
 8005126:	2200      	movs	r2, #0
 8005128:	f000 f82a 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 800512c:	1e03      	subs	r3, r0, #0
 800512e:	d001      	beq.n	8005134 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e01f      	b.n	8005174 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2204      	movs	r2, #4
 800513c:	4013      	ands	r3, r2
 800513e:	2b04      	cmp	r3, #4
 8005140:	d10d      	bne.n	800515e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	03d9      	lsls	r1, r3, #15
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4b0c      	ldr	r3, [pc, #48]	; (800517c <UART_CheckIdleState+0x88>)
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	0013      	movs	r3, r2
 8005150:	2200      	movs	r2, #0
 8005152:	f000 f815 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 8005156:	1e03      	subs	r3, r0, #0
 8005158:	d001      	beq.n	800515e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e00a      	b.n	8005174 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2270      	movs	r2, #112	; 0x70
 800516e:	2100      	movs	r1, #0
 8005170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	0018      	movs	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	b004      	add	sp, #16
 800517a:	bd80      	pop	{r7, pc}
 800517c:	01ffffff 	.word	0x01ffffff

08005180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	1dfb      	adds	r3, r7, #7
 800518e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005190:	e05d      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	3301      	adds	r3, #1
 8005196:	d05a      	beq.n	800524e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005198:	f7fb ff8c 	bl	80010b4 <HAL_GetTick>
 800519c:	0002      	movs	r2, r0
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d302      	bcc.n	80051ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11b      	bne.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	492f      	ldr	r1, [pc, #188]	; (8005278 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80051ba:	400a      	ands	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2101      	movs	r1, #1
 80051ca:	438a      	bics	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2270      	movs	r2, #112	; 0x70
 80051de:	2100      	movs	r1, #0
 80051e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e043      	b.n	800526e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2204      	movs	r2, #4
 80051ee:	4013      	ands	r3, r2
 80051f0:	d02d      	beq.n	800524e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	401a      	ands	r2, r3
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	429a      	cmp	r2, r3
 8005204:	d123      	bne.n	800524e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	0112      	lsls	r2, r2, #4
 800520e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4917      	ldr	r1, [pc, #92]	; (8005278 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800521c:	400a      	ands	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2101      	movs	r1, #1
 800522c:	438a      	bics	r2, r1
 800522e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2270      	movs	r2, #112	; 0x70
 8005246:	2100      	movs	r1, #0
 8005248:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e00f      	b.n	800526e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	4013      	ands	r3, r2
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	425a      	negs	r2, r3
 800525e:	4153      	adcs	r3, r2
 8005260:	b2db      	uxtb	r3, r3
 8005262:	001a      	movs	r2, r3
 8005264:	1dfb      	adds	r3, r7, #7
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d092      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	0018      	movs	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	b004      	add	sp, #16
 8005274:	bd80      	pop	{r7, pc}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	fffffe5f 	.word	0xfffffe5f

0800527c <_ZN5ClockC1Eb>:
#include <app/Clock.h>

Clock::Clock(bool nbrWatchPtr)
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	000a      	movs	r2, r1
 8005286:	1cfb      	adds	r3, r7, #3
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	4a2b      	ldr	r2, [pc, #172]	; (8005338 <_ZN5ClockC1Eb+0xbc>)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	601a      	str	r2, [r3, #0]
{
	//False -> 2 watch pointers
	//True -> 3 watch pointers
	if(nbrWatchPtr == false)
 8005290:	1cfb      	adds	r3, r7, #3
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2201      	movs	r2, #1
 8005296:	4053      	eors	r3, r2
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01d      	beq.n	80052da <_ZN5ClockC1Eb+0x5e>
	{
		_watchPtr[0] = new WatchPointer(3);	//3° output angle
 800529e:	2392      	movs	r3, #146	; 0x92
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	0018      	movs	r0, r3
 80052a4:	f005 fecb 	bl	800b03e <_Znwj>
 80052a8:	0003      	movs	r3, r0
 80052aa:	001c      	movs	r4, r3
 80052ac:	2103      	movs	r1, #3
 80052ae:	0020      	movs	r0, r4
 80052b0:	f002 fa4a 	bl	8007748 <_ZN12WatchPointerC1Eh>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605c      	str	r4, [r3, #4]
		_watchPtr[1] = new WatchPointer(2);	//2° output angle
 80052b8:	2392      	movs	r3, #146	; 0x92
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	0018      	movs	r0, r3
 80052be:	f005 febe 	bl	800b03e <_Znwj>
 80052c2:	0003      	movs	r3, r0
 80052c4:	001c      	movs	r4, r3
 80052c6:	2102      	movs	r1, #2
 80052c8:	0020      	movs	r0, r4
 80052ca:	f002 fa3d 	bl	8007748 <_ZN12WatchPointerC1Eh>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	609c      	str	r4, [r3, #8]
		nbrWatchPointer = 2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	741a      	strb	r2, [r3, #16]
 80052d8:	e029      	b.n	800532e <_ZN5ClockC1Eb+0xb2>
	}
	else
	{
		_watchPtr[0] = new WatchPointer(2);	//2° output angle
 80052da:	2392      	movs	r3, #146	; 0x92
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	0018      	movs	r0, r3
 80052e0:	f005 fead 	bl	800b03e <_Znwj>
 80052e4:	0003      	movs	r3, r0
 80052e6:	001c      	movs	r4, r3
 80052e8:	2102      	movs	r1, #2
 80052ea:	0020      	movs	r0, r4
 80052ec:	f002 fa2c 	bl	8007748 <_ZN12WatchPointerC1Eh>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605c      	str	r4, [r3, #4]
		_watchPtr[1] = new WatchPointer(2);	//2° output angle
 80052f4:	2392      	movs	r3, #146	; 0x92
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f005 fea0 	bl	800b03e <_Znwj>
 80052fe:	0003      	movs	r3, r0
 8005300:	001c      	movs	r4, r3
 8005302:	2102      	movs	r1, #2
 8005304:	0020      	movs	r0, r4
 8005306:	f002 fa1f 	bl	8007748 <_ZN12WatchPointerC1Eh>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609c      	str	r4, [r3, #8]
		_watchPtr[2] = new WatchPointer(6);	//6° output angle
 800530e:	2392      	movs	r3, #146	; 0x92
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	0018      	movs	r0, r3
 8005314:	f005 fe93 	bl	800b03e <_Znwj>
 8005318:	0003      	movs	r3, r0
 800531a:	001c      	movs	r4, r3
 800531c:	2106      	movs	r1, #6
 800531e:	0020      	movs	r0, r4
 8005320:	f002 fa12 	bl	8007748 <_ZN12WatchPointerC1Eh>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60dc      	str	r4, [r3, #12]
		nbrWatchPointer = 3;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2203      	movs	r2, #3
 800532c:	741a      	strb	r2, [r3, #16]
	}
}
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	b003      	add	sp, #12
 8005336:	bd90      	pop	{r4, r7, pc}
 8005338:	0800c350 	.word	0x0800c350

0800533c <_ZN5ClockD1Ev>:

Clock::~Clock()
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	4a03      	ldr	r2, [pc, #12]	; (8005354 <_ZN5ClockD1Ev+0x18>)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	601a      	str	r2, [r3, #0]
{}
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	b002      	add	sp, #8
 8005352:	bd80      	pop	{r7, pc}
 8005354:	0800c350 	.word	0x0800c350

08005358 <_ZN5ClockD0Ev>:
Clock::~Clock()
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
{}
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff ffea 	bl	800533c <_ZN5ClockD1Ev>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2114      	movs	r1, #20
 800536c:	0018      	movs	r0, r3
 800536e:	f005 fe62 	bl	800b036 <_ZdlPvj>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b002      	add	sp, #8
 800537a:	bd80      	pop	{r7, pc}

0800537c <_ZN5Clock15getWatchPointerEi>:

WatchPointer* Clock::getWatchPointer(int index)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	if(index < nbrWatchPointer)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7c1b      	ldrb	r3, [r3, #16]
 800538a:	001a      	movs	r2, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	4293      	cmp	r3, r2
 8005390:	da06      	bge.n	80053a0 <_ZN5Clock15getWatchPointerEi+0x24>
	{
		return _watchPtr[index];
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	3304      	adds	r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	e001      	b.n	80053a4 <_ZN5Clock15getWatchPointerEi+0x28>
	}
	else
	{
		Error_Handler();
 80053a0:	f7fb fba6 	bl	8000af0 <Error_Handler>
	}
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}

080053ac <_ZNK7XFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return _eventType; }
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	791b      	ldrb	r3, [r3, #4]
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	0018      	movs	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	b002      	add	sp, #8
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <_ZNK7XFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { _pBehavior = pBehavior; }

    inline int getId() const { return _id; }		///< Returns #_id identifying the event in the behaviors context.
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b002      	add	sp, #8
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <_ZN13XFEventStatusC1ENS_12eEventStatusE>:
	/**
	 * Constructor
	 *
	 * \param eventStatus Initial value of the event status.
	 */
    XFEventStatus(eEventStatus eventStatus = Unknown) : _status(eventStatus) {}
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	000a      	movs	r2, r1
 80053e0:	1cfb      	adds	r3, r7, #3
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1cfa      	adds	r2, r7, #3
 80053e8:	7812      	ldrb	r2, [r2, #0]
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b002      	add	sp, #8
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <_ZN10XFBehavior15scheduleTimeoutEii>:
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 80053f6:	b590      	push	{r4, r7, lr}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	0018      	movs	r0, r3
 8005406:	f003 f92a 	bl	800865e <_ZN10XFBehavior13getDispatcherEv>
 800540a:	6803      	ldr	r3, [r0, #0]
 800540c:	3318      	adds	r3, #24
 800540e:	681c      	ldr	r4, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	47a0      	blx	r4
 8005418:	46c0      	nop			; (mov r8, r8)
 800541a:	46bd      	mov	sp, r7
 800541c:	b005      	add	sp, #20
 800541e:	bd90      	pop	{r4, r7, pc}

08005420 <_ZN10ControllerC1Ev>:
#include "event/evTimeTrigger.h"
#include "event/evDone.h"
#include "event/evGoToZero.h"
#include "Core/Inc/main.h"

Controller::Controller()
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2100      	movs	r1, #0
 800542c:	0018      	movs	r0, r3
 800542e:	f003 f829 	bl	8008484 <_ZN10XFBehaviorC1Eb>
 8005432:	4a0e      	ldr	r2, [pc, #56]	; (800546c <_ZN10ControllerC1Ev+0x4c>)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0d      	ldr	r2, [pc, #52]	; (8005470 <_ZN10ControllerC1Ev+0x50>)
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40
{
	_currentState = STATE_INIT;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	224b      	movs	r2, #75	; 0x4b
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]

	test = 0;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	223b      	movs	r2, #59	; 0x3b
 800544c:	2100      	movs	r1, #0
 800544e:	5499      	strb	r1, [r3, r2]

	goToZero = false;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2244      	movs	r2, #68	; 0x44
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]

	//ONLY FOR TEST
	nbrWatchPtrClk = 0b00010110;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2246      	movs	r2, #70	; 0x46
 800545c:	2116      	movs	r1, #22
 800545e:	5499      	strb	r1, [r3, r2]
}
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b002      	add	sp, #8
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	0800c4a8 	.word	0x0800c4a8
 8005470:	0800c178 	.word	0x0800c178

08005474 <_ZN10ControllerD1Ev>:

Controller::~Controller()
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	4a05      	ldr	r2, [pc, #20]	; (8005494 <_ZN10ControllerD1Ev+0x20>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0018      	movs	r0, r3
 8005486:	f003 f84d 	bl	8008524 <_ZN10XFBehaviorD1Ev>
{}
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b002      	add	sp, #8
 8005492:	bd80      	pop	{r7, pc}
 8005494:	0800c4a8 	.word	0x0800c4a8

08005498 <_ZN10ControllerD0Ev>:
Controller::~Controller()
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
{}
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	0018      	movs	r0, r3
 80054a4:	f7ff ffe6 	bl	8005474 <_ZN10ControllerD1Ev>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2150      	movs	r1, #80	; 0x50
 80054ac:	0018      	movs	r0, r3
 80054ae:	f005 fdc2 	bl	800b036 <_ZdlPvj>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	0018      	movs	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b002      	add	sp, #8
 80054ba:	bd80      	pop	{r7, pc}

080054bc <__tcf_0>:

//Singleton pattern
//Return the reference of the singleton
Controller* Controller::getInstance()
{
	static Controller _controller;
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
 80054c0:	4b02      	ldr	r3, [pc, #8]	; (80054cc <__tcf_0+0x10>)
 80054c2:	0018      	movs	r0, r3
 80054c4:	f7ff ffd6 	bl	8005474 <_ZN10ControllerD1Ev>
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000094 	.word	0x20000094

080054d0 <_ZN10Controller11getInstanceEv>:
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
	static Controller _controller;
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <_ZN10Controller11getInstanceEv+0x2c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2201      	movs	r2, #1
 80054da:	4013      	ands	r3, r2
 80054dc:	d10a      	bne.n	80054f4 <_ZN10Controller11getInstanceEv+0x24>
 80054de:	4b08      	ldr	r3, [pc, #32]	; (8005500 <_ZN10Controller11getInstanceEv+0x30>)
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7ff ff9d 	bl	8005420 <_ZN10ControllerC1Ev>
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <_ZN10Controller11getInstanceEv+0x2c>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <_ZN10Controller11getInstanceEv+0x34>)
 80054ee:	0018      	movs	r0, r3
 80054f0:	f005 fe02 	bl	800b0f8 <atexit>
	return &_controller;
 80054f4:	4b02      	ldr	r3, [pc, #8]	; (8005500 <_ZN10Controller11getInstanceEv+0x30>)
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	200000e4 	.word	0x200000e4
 8005500:	20000094 	.word	0x20000094
 8005504:	080054bd 	.word	0x080054bd

08005508 <_ZN10Controller11intitializeEv>:

void Controller::intitialize()
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}

08005518 <_ZN10Controller5startEv>:

void Controller::start()
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	startBehavior();
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3308      	adds	r3, #8
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	0010      	movs	r0, r2
 800552c:	4798      	blx	r3
}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	46bd      	mov	sp, r7
 8005532:	b002      	add	sp, #8
 8005534:	bd80      	pop	{r7, pc}

08005536 <_ZN10Controller8onIrqSPIEv>:

void Controller::onIrqSPI()
{
 8005536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
	GEN(evSpiIrq());
 800553e:	687d      	ldr	r5, [r7, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	681c      	ldr	r4, [r3, #0]
 8005548:	2014      	movs	r0, #20
 800554a:	f005 fd78 	bl	800b03e <_Znwj>
 800554e:	0003      	movs	r3, r0
 8005550:	001e      	movs	r6, r3
 8005552:	0030      	movs	r0, r6
 8005554:	f002 fec6 	bl	80082e4 <_ZN8evSpiIrqC1Ev>
 8005558:	0031      	movs	r1, r6
 800555a:	0028      	movs	r0, r5
 800555c:	47a0      	blx	r4
}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	b003      	add	sp, #12
 8005564:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005568 <_ZN10Controller8onIrqCANEv>:

void Controller::onIrqCAN()
{
 8005568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &myRxMessage, buffer_CAN_rx);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3333      	adds	r3, #51	; 0x33
 8005574:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <_ZN10Controller8onIrqCANEv+0x40>)
 8005576:	480d      	ldr	r0, [pc, #52]	; (80055ac <_ZN10Controller8onIrqCANEv+0x44>)
 8005578:	2100      	movs	r1, #0
 800557a:	f7fc f8ba 	bl	80016f2 <HAL_CAN_GetRxMessage>
	GEN(evCanIrq());
 800557e:	687d      	ldr	r5, [r7, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	681c      	ldr	r4, [r3, #0]
 8005588:	2014      	movs	r0, #20
 800558a:	f005 fd58 	bl	800b03e <_Znwj>
 800558e:	0003      	movs	r3, r0
 8005590:	001e      	movs	r6, r3
 8005592:	0030      	movs	r0, r6
 8005594:	f002 fd56 	bl	8008044 <_ZN8evCanIrqC1Ev>
 8005598:	0031      	movs	r1, r6
 800559a:	0028      	movs	r0, r5
 800559c:	47a0      	blx	r4
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b003      	add	sp, #12
 80055a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	20000248 	.word	0x20000248
 80055ac:	20000220 	.word	0x20000220

080055b0 <_ZN10Controller13readDIPSwitchEv>:

void Controller::readDIPSwitch()
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	//Read DIP switchs used for the processor address
	// |= <=> XOR
	myAddress |= HAL_GPIO_ReadPin(SW_4_GPIO_Port, SW_4_Pin) << 4;
 80055b8:	4b30      	ldr	r3, [pc, #192]	; (800567c <_ZN10Controller13readDIPSwitchEv+0xcc>)
 80055ba:	2108      	movs	r1, #8
 80055bc:	0018      	movs	r0, r3
 80055be:	f7fd f823 	bl	8002608 <HAL_GPIO_ReadPin>
 80055c2:	0003      	movs	r3, r0
 80055c4:	0119      	lsls	r1, r3, #4
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2245      	movs	r2, #69	; 0x45
 80055ca:	5c9b      	ldrb	r3, [r3, r2]
 80055cc:	b25a      	sxtb	r2, r3
 80055ce:	b24b      	sxtb	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	b2d9      	uxtb	r1, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2245      	movs	r2, #69	; 0x45
 80055da:	5499      	strb	r1, [r3, r2]
	myAddress |= HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) << 3;
 80055dc:	2390      	movs	r3, #144	; 0x90
 80055de:	05db      	lsls	r3, r3, #23
 80055e0:	2101      	movs	r1, #1
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fd f810 	bl	8002608 <HAL_GPIO_ReadPin>
 80055e8:	0003      	movs	r3, r0
 80055ea:	00d9      	lsls	r1, r3, #3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2245      	movs	r2, #69	; 0x45
 80055f0:	5c9b      	ldrb	r3, [r3, r2]
 80055f2:	b25a      	sxtb	r2, r3
 80055f4:	b24b      	sxtb	r3, r1
 80055f6:	4313      	orrs	r3, r2
 80055f8:	b25b      	sxtb	r3, r3
 80055fa:	b2d9      	uxtb	r1, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2245      	movs	r2, #69	; 0x45
 8005600:	5499      	strb	r1, [r3, r2]
	myAddress |= HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) << 2;
 8005602:	2390      	movs	r3, #144	; 0x90
 8005604:	05db      	lsls	r3, r3, #23
 8005606:	2102      	movs	r1, #2
 8005608:	0018      	movs	r0, r3
 800560a:	f7fc fffd 	bl	8002608 <HAL_GPIO_ReadPin>
 800560e:	0003      	movs	r3, r0
 8005610:	0099      	lsls	r1, r3, #2
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2245      	movs	r2, #69	; 0x45
 8005616:	5c9b      	ldrb	r3, [r3, r2]
 8005618:	b25a      	sxtb	r2, r3
 800561a:	b24b      	sxtb	r3, r1
 800561c:	4313      	orrs	r3, r2
 800561e:	b25b      	sxtb	r3, r3
 8005620:	b2d9      	uxtb	r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2245      	movs	r2, #69	; 0x45
 8005626:	5499      	strb	r1, [r3, r2]
	myAddress |= HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) << 1;
 8005628:	2390      	movs	r3, #144	; 0x90
 800562a:	05db      	lsls	r3, r3, #23
 800562c:	2104      	movs	r1, #4
 800562e:	0018      	movs	r0, r3
 8005630:	f7fc ffea 	bl	8002608 <HAL_GPIO_ReadPin>
 8005634:	0003      	movs	r3, r0
 8005636:	0059      	lsls	r1, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2245      	movs	r2, #69	; 0x45
 800563c:	5c9b      	ldrb	r3, [r3, r2]
 800563e:	b25a      	sxtb	r2, r3
 8005640:	b24b      	sxtb	r3, r1
 8005642:	4313      	orrs	r3, r2
 8005644:	b25b      	sxtb	r3, r3
 8005646:	b2d9      	uxtb	r1, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2245      	movs	r2, #69	; 0x45
 800564c:	5499      	strb	r1, [r3, r2]
	myAddress |= HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) << 0;
 800564e:	2390      	movs	r3, #144	; 0x90
 8005650:	05db      	lsls	r3, r3, #23
 8005652:	2108      	movs	r1, #8
 8005654:	0018      	movs	r0, r3
 8005656:	f7fc ffd7 	bl	8002608 <HAL_GPIO_ReadPin>
 800565a:	0003      	movs	r3, r0
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2245      	movs	r2, #69	; 0x45
 8005662:	5c9b      	ldrb	r3, [r3, r2]
 8005664:	b25a      	sxtb	r2, r3
 8005666:	b24b      	sxtb	r3, r1
 8005668:	4313      	orrs	r3, r2
 800566a:	b25b      	sxtb	r3, r3
 800566c:	b2d9      	uxtb	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2245      	movs	r2, #69	; 0x45
 8005672:	5499      	strb	r1, [r3, r2]
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}
 800567c:	48001400 	.word	0x48001400

08005680 <_ZN10Controller20initializeMotorsGPIOEv>:

void Controller::initializeMotorsGPIO()
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b087      	sub	sp, #28
 8005684:	af04      	add	r7, sp, #16
 8005686:	6078      	str	r0, [r7, #4]
	//False -> 2 watch pointers
	//True -> 3 watch pointers
	_clock[0] = new Clock((nbrWatchPtrClk & 0b00000001)); //2
 8005688:	2014      	movs	r0, #20
 800568a:	f005 fcd8 	bl	800b03e <_Znwj>
 800568e:	0003      	movs	r3, r0
 8005690:	001c      	movs	r4, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2246      	movs	r2, #70	; 0x46
 8005696:	5c9b      	ldrb	r3, [r3, r2]
 8005698:	001a      	movs	r2, r3
 800569a:	2301      	movs	r3, #1
 800569c:	4013      	ands	r3, r2
 800569e:	1e5a      	subs	r2, r3, #1
 80056a0:	4193      	sbcs	r3, r2
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	0019      	movs	r1, r3
 80056a6:	0020      	movs	r0, r4
 80056a8:	f7ff fde8 	bl	800527c <_ZN5ClockC1Eb>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	611c      	str	r4, [r3, #16]
	_clock[1] = new Clock((nbrWatchPtrClk & 0b00000010) >> 1); //3
 80056b0:	2014      	movs	r0, #20
 80056b2:	f005 fcc4 	bl	800b03e <_Znwj>
 80056b6:	0003      	movs	r3, r0
 80056b8:	001c      	movs	r4, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2246      	movs	r2, #70	; 0x46
 80056be:	5c9b      	ldrb	r3, [r3, r2]
 80056c0:	001a      	movs	r2, r3
 80056c2:	2302      	movs	r3, #2
 80056c4:	4013      	ands	r3, r2
 80056c6:	1e5a      	subs	r2, r3, #1
 80056c8:	4193      	sbcs	r3, r2
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	0019      	movs	r1, r3
 80056ce:	0020      	movs	r0, r4
 80056d0:	f7ff fdd4 	bl	800527c <_ZN5ClockC1Eb>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	615c      	str	r4, [r3, #20]
	_clock[2] = new Clock((nbrWatchPtrClk & 0b00000100) >> 2); //3
 80056d8:	2014      	movs	r0, #20
 80056da:	f005 fcb0 	bl	800b03e <_Znwj>
 80056de:	0003      	movs	r3, r0
 80056e0:	001c      	movs	r4, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2246      	movs	r2, #70	; 0x46
 80056e6:	5c9b      	ldrb	r3, [r3, r2]
 80056e8:	001a      	movs	r2, r3
 80056ea:	2304      	movs	r3, #4
 80056ec:	4013      	ands	r3, r2
 80056ee:	1e5a      	subs	r2, r3, #1
 80056f0:	4193      	sbcs	r3, r2
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	0019      	movs	r1, r3
 80056f6:	0020      	movs	r0, r4
 80056f8:	f7ff fdc0 	bl	800527c <_ZN5ClockC1Eb>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	619c      	str	r4, [r3, #24]
	_clock[3] = new Clock((nbrWatchPtrClk & 0b00001000) >> 3); //2
 8005700:	2014      	movs	r0, #20
 8005702:	f005 fc9c 	bl	800b03e <_Znwj>
 8005706:	0003      	movs	r3, r0
 8005708:	001c      	movs	r4, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2246      	movs	r2, #70	; 0x46
 800570e:	5c9b      	ldrb	r3, [r3, r2]
 8005710:	001a      	movs	r2, r3
 8005712:	2308      	movs	r3, #8
 8005714:	4013      	ands	r3, r2
 8005716:	1e5a      	subs	r2, r3, #1
 8005718:	4193      	sbcs	r3, r2
 800571a:	b2db      	uxtb	r3, r3
 800571c:	0019      	movs	r1, r3
 800571e:	0020      	movs	r0, r4
 8005720:	f7ff fdac 	bl	800527c <_ZN5ClockC1Eb>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	61dc      	str	r4, [r3, #28]
	_clock[4] = new Clock((nbrWatchPtrClk & 0b00010000) >> 4); //3
 8005728:	2014      	movs	r0, #20
 800572a:	f005 fc88 	bl	800b03e <_Znwj>
 800572e:	0003      	movs	r3, r0
 8005730:	001c      	movs	r4, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2246      	movs	r2, #70	; 0x46
 8005736:	5c9b      	ldrb	r3, [r3, r2]
 8005738:	001a      	movs	r2, r3
 800573a:	2310      	movs	r3, #16
 800573c:	4013      	ands	r3, r2
 800573e:	1e5a      	subs	r2, r3, #1
 8005740:	4193      	sbcs	r3, r2
 8005742:	b2db      	uxtb	r3, r3
 8005744:	0019      	movs	r1, r3
 8005746:	0020      	movs	r0, r4
 8005748:	f7ff fd98 	bl	800527c <_ZN5ClockC1Eb>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	621c      	str	r4, [r3, #32]
	_clock[5] = new Clock((nbrWatchPtrClk & 0b00100000) >> 5); //2
 8005750:	2014      	movs	r0, #20
 8005752:	f005 fc74 	bl	800b03e <_Znwj>
 8005756:	0003      	movs	r3, r0
 8005758:	001c      	movs	r4, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2246      	movs	r2, #70	; 0x46
 800575e:	5c9b      	ldrb	r3, [r3, r2]
 8005760:	001a      	movs	r2, r3
 8005762:	2320      	movs	r3, #32
 8005764:	4013      	ands	r3, r2
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	4193      	sbcs	r3, r2
 800576a:	b2db      	uxtb	r3, r3
 800576c:	0019      	movs	r1, r3
 800576e:	0020      	movs	r0, r4
 8005770:	f7ff fd84 	bl	800527c <_ZN5ClockC1Eb>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	625c      	str	r4, [r3, #36]	; 0x24

	//Pin nbr --> see schematic, 0..15
	//Motor 1 -> biaxes
	_clock[0]->getWatchPointer(0)->initGPIO(M1_Ah_GPIO_Port, M1_Ah_Pin,
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2100      	movs	r1, #0
 800577e:	0018      	movs	r0, r3
 8005780:	f7ff fdfc 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8005784:	0004      	movs	r4, r0
 8005786:	487b      	ldr	r0, [pc, #492]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	009a      	lsls	r2, r3, #2
 800578c:	4979      	ldr	r1, [pc, #484]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	9302      	str	r3, [sp, #8]
 8005794:	4b77      	ldr	r3, [pc, #476]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	0003      	movs	r3, r0
 80057a0:	0020      	movs	r0, r4
 80057a2:	f002 f849 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M1_Bh_GPIO_Port, M1_Bh_Pin,
											M1_Ch_GPIO_Port, M1_Ch_Pin);
	_clock[0]->getWatchPointer(1)->initGPIO(M1_Am_GPIO_Port, M1_Am_Pin,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2101      	movs	r1, #1
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7ff fde5 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80057b2:	0004      	movs	r4, r0
 80057b4:	4870      	ldr	r0, [pc, #448]	; (8005978 <_ZN10Controller20initializeMotorsGPIOEv+0x2f8>)
 80057b6:	2380      	movs	r3, #128	; 0x80
 80057b8:	01da      	lsls	r2, r3, #7
 80057ba:	496f      	ldr	r1, [pc, #444]	; (8005978 <_ZN10Controller20initializeMotorsGPIOEv+0x2f8>)
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	9302      	str	r3, [sp, #8]
 80057c2:	4b6c      	ldr	r3, [pc, #432]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	0003      	movs	r3, r0
 80057ce:	0020      	movs	r0, r4
 80057d0:	f002 f832 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M1_Bm_GPIO_Port, M1_Bm_Pin,
											M1_Cm_GPIO_Port, M1_Cm_Pin);
	//Motor 2 -> triaxes
	_clock[1]->getWatchPointer(0)->initGPIO(M2_Ah_GPIO_Port, M2_Ah_Pin,
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	2100      	movs	r1, #0
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff fdce 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80057e0:	0004      	movs	r4, r0
 80057e2:	4866      	ldr	r0, [pc, #408]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x2fc>)
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	4962      	ldr	r1, [pc, #392]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	9302      	str	r3, [sp, #8]
 80057ee:	4b63      	ldr	r3, [pc, #396]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x2fc>)
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	2340      	movs	r3, #64	; 0x40
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	0003      	movs	r3, r0
 80057f8:	0020      	movs	r0, r4
 80057fa:	f002 f81d 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M2_Bh_GPIO_Port, M2_Bh_Pin,
											M2_Ch_GPIO_Port, M2_Ch_Pin);
	_clock[1]->getWatchPointer(1)->initGPIO(M2_Am_GPIO_Port, M2_Am_Pin,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	2101      	movs	r1, #1
 8005804:	0018      	movs	r0, r3
 8005806:	f7ff fdb9 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800580a:	0004      	movs	r4, r0
 800580c:	485b      	ldr	r0, [pc, #364]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x2fc>)
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	005a      	lsls	r2, r3, #1
 8005812:	495a      	ldr	r1, [pc, #360]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x2fc>)
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	9302      	str	r3, [sp, #8]
 800581a:	2390      	movs	r3, #144	; 0x90
 800581c:	05db      	lsls	r3, r3, #23
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	2380      	movs	r3, #128	; 0x80
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	0003      	movs	r3, r0
 8005828:	0020      	movs	r0, r4
 800582a:	f002 f805 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
	/*_clock[1]->getWatchPointer(2)->initGPIO(M2_As_GPIO_Port, M2_As_Pin,
											M2_Bs_GPIO_Port, M2_Bs_Pin,
											M2_Cs_GPIO_Port, M2_Cs_Pin);*/

	//Motor 3 -> triaxes
	_clock[2]->getWatchPointer(0)->initGPIO(M3_Ah_GPIO_Port, M3_Ah_Pin,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2100      	movs	r1, #0
 8005834:	0018      	movs	r0, r3
 8005836:	f7ff fda1 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800583a:	0004      	movs	r4, r0
 800583c:	484f      	ldr	r0, [pc, #316]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x2fc>)
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	011a      	lsls	r2, r3, #4
 8005842:	494e      	ldr	r1, [pc, #312]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x2fc>)
 8005844:	2301      	movs	r3, #1
 8005846:	9302      	str	r3, [sp, #8]
 8005848:	4b4a      	ldr	r3, [pc, #296]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	015b      	lsls	r3, r3, #5
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	0003      	movs	r3, r0
 8005854:	0020      	movs	r0, r4
 8005856:	f001 ffef 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M3_Bh_GPIO_Port, M3_Bh_Pin,
											M3_Ch_GPIO_Port, M3_Ch_Pin);
	_clock[2]->getWatchPointer(1)->initGPIO(M3_Am_GPIO_Port, M3_Am_Pin,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2101      	movs	r1, #1
 8005860:	0018      	movs	r0, r3
 8005862:	f7ff fd8b 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8005866:	4a43      	ldr	r2, [pc, #268]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 8005868:	4942      	ldr	r1, [pc, #264]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 800586a:	2308      	movs	r3, #8
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	4b41      	ldr	r3, [pc, #260]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	2304      	movs	r3, #4
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	0013      	movs	r3, r2
 8005878:	2202      	movs	r2, #2
 800587a:	f001 ffdd 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
	/*_clock[2]->getWatchPointer(2)->initGPIO(M3_As_GPIO_Port, M3_As_Pin,
											M3_Bs_GPIO_Port, M3_Bs_Pin,
											M3_Cs_GPIO_Port, M3_Cs_Pin);*/

	//Motor 4 -> biaxes
	_clock[3]->getWatchPointer(0)->initGPIO(M4_Ah_GPIO_Port, M4_Ah_Pin,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	2100      	movs	r1, #0
 8005884:	0018      	movs	r0, r3
 8005886:	f7ff fd79 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800588a:	0004      	movs	r4, r0
 800588c:	483c      	ldr	r0, [pc, #240]	; (8005980 <_ZN10Controller20initializeMotorsGPIOEv+0x300>)
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	009a      	lsls	r2, r3, #2
 8005892:	493b      	ldr	r1, [pc, #236]	; (8005980 <_ZN10Controller20initializeMotorsGPIOEv+0x300>)
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	9302      	str	r3, [sp, #8]
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <_ZN10Controller20initializeMotorsGPIOEv+0x300>)
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	2380      	movs	r3, #128	; 0x80
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	0003      	movs	r3, r0
 80058a6:	0020      	movs	r0, r4
 80058a8:	f001 ffc6 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M4_Bh_GPIO_Port, M4_Bh_Pin,
											M4_Ch_GPIO_Port, M4_Ch_Pin);
	_clock[3]->getWatchPointer(1)->initGPIO(M4_Am_GPIO_Port, M4_Am_Pin,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	2101      	movs	r1, #1
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7ff fd62 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80058b8:	4a31      	ldr	r2, [pc, #196]	; (8005980 <_ZN10Controller20initializeMotorsGPIOEv+0x300>)
 80058ba:	492f      	ldr	r1, [pc, #188]	; (8005978 <_ZN10Controller20initializeMotorsGPIOEv+0x2f8>)
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	9302      	str	r3, [sp, #8]
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <_ZN10Controller20initializeMotorsGPIOEv+0x300>)
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	0013      	movs	r3, r2
 80058cc:	2204      	movs	r2, #4
 80058ce:	f001 ffb3 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M4_Bm_GPIO_Port, M4_Bm_Pin,
											M4_Cm_GPIO_Port, M4_Cm_Pin);

	//Motor 5 -> triaxes
	_clock[4]->getWatchPointer(0)->initGPIO(M5_Ah_GPIO_Port, M5_Ah_Pin,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	2100      	movs	r1, #0
 80058d8:	0018      	movs	r0, r3
 80058da:	f7ff fd4f 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80058de:	4a28      	ldr	r2, [pc, #160]	; (8005980 <_ZN10Controller20initializeMotorsGPIOEv+0x300>)
 80058e0:	4927      	ldr	r1, [pc, #156]	; (8005980 <_ZN10Controller20initializeMotorsGPIOEv+0x300>)
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	9302      	str	r3, [sp, #8]
 80058e8:	4b26      	ldr	r3, [pc, #152]	; (8005984 <_ZN10Controller20initializeMotorsGPIOEv+0x304>)
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	2340      	movs	r3, #64	; 0x40
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	0013      	movs	r3, r2
 80058f2:	2220      	movs	r2, #32
 80058f4:	f001 ffa0 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M5_Bh_GPIO_Port, M5_Bh_Pin,
											M5_Ch_GPIO_Port, M5_Ch_Pin);
	_clock[4]->getWatchPointer(1)->initGPIO(M5_Am_GPIO_Port, M5_Am_Pin,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	2101      	movs	r1, #1
 80058fe:	0018      	movs	r0, r3
 8005900:	f7ff fd3c 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8005904:	0004      	movs	r4, r0
 8005906:	481d      	ldr	r0, [pc, #116]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x2fc>)
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	00da      	lsls	r2, r3, #3
 800590c:	491d      	ldr	r1, [pc, #116]	; (8005984 <_ZN10Controller20initializeMotorsGPIOEv+0x304>)
 800590e:	2302      	movs	r3, #2
 8005910:	9302      	str	r3, [sp, #8]
 8005912:	4b1a      	ldr	r3, [pc, #104]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x2fc>)
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	2301      	movs	r3, #1
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	0003      	movs	r3, r0
 800591c:	0020      	movs	r0, r4
 800591e:	f001 ff8b 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
	/*_clock[4]->getWatchPointer(2)->initGPIO(M5_As_GPIO_Port, M5_As_Pin,
											M5_Bs_GPIO_Port, M5_Bs_Pin,
											M5_Cs_GPIO_Port, M5_Cs_Pin);*/

	//Motor 6 -> biaxes
	_clock[5]->getWatchPointer(0)->initGPIO(M6_Ah_GPIO_Port, M6_Ah_Pin,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2100      	movs	r1, #0
 8005928:	0018      	movs	r0, r3
 800592a:	f7ff fd27 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800592e:	4a12      	ldr	r2, [pc, #72]	; (8005978 <_ZN10Controller20initializeMotorsGPIOEv+0x2f8>)
 8005930:	4910      	ldr	r1, [pc, #64]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 8005932:	2310      	movs	r3, #16
 8005934:	9302      	str	r3, [sp, #8]
 8005936:	4b10      	ldr	r3, [pc, #64]	; (8005978 <_ZN10Controller20initializeMotorsGPIOEv+0x2f8>)
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	2308      	movs	r3, #8
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	0013      	movs	r3, r2
 8005940:	2280      	movs	r2, #128	; 0x80
 8005942:	f001 ff79 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M6_Bh_GPIO_Port, M6_Bh_Pin,
											M6_Ch_GPIO_Port, M6_Ch_Pin);
	_clock[5]->getWatchPointer(1)->initGPIO(M6_Am_GPIO_Port, M6_Am_Pin,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2101      	movs	r1, #1
 800594c:	0018      	movs	r0, r3
 800594e:	f7ff fd15 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8005952:	4a08      	ldr	r2, [pc, #32]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 8005954:	4907      	ldr	r1, [pc, #28]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 8005956:	2340      	movs	r3, #64	; 0x40
 8005958:	9302      	str	r3, [sp, #8]
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x2f4>)
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	2320      	movs	r3, #32
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	0013      	movs	r3, r2
 8005964:	2210      	movs	r2, #16
 8005966:	f001 ff67 	bl	8007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M6_Bm_GPIO_Port, M6_Bm_Pin,
											M6_Cm_GPIO_Port, M6_Cm_Pin);
}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	b003      	add	sp, #12
 8005970:	bd90      	pop	{r4, r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	48000c00 	.word	0x48000c00
 8005978:	48000400 	.word	0x48000400
 800597c:	48000800 	.word	0x48000800
 8005980:	48001000 	.word	0x48001000
 8005984:	48001400 	.word	0x48001400

08005988 <_ZN10Controller12processEventEv>:

XFEventStatus Controller::processEvent()
{
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

	eEventStatus eventStatus = XFEventStatus::Unknown;
 8005990:	230f      	movs	r3, #15
 8005992:	18fb      	adds	r3, r7, r3
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
	_oldState = _currentState;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	224b      	movs	r2, #75	; 0x4b
 800599c:	5c99      	ldrb	r1, [r3, r2]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	224c      	movs	r2, #76	; 0x4c
 80059a2:	5499      	strb	r1, [r3, r2]


	//Transition switch
	switch(_currentState)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	224b      	movs	r2, #75	; 0x4b
 80059a8:	5c9b      	ldrb	r3, [r3, r2]
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d900      	bls.n	80059b0 <_ZN10Controller12processEventEv+0x28>
 80059ae:	e1bf      	b.n	8005d30 <_ZN10Controller12processEventEv+0x3a8>
 80059b0:	009a      	lsls	r2, r3, #2
 80059b2:	4bd8      	ldr	r3, [pc, #864]	; (8005d14 <_ZN10Controller12processEventEv+0x38c>)
 80059b4:	18d3      	adds	r3, r2, r3
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	469f      	mov	pc, r3
	{
	case STATE_INIT:
		if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	0018      	movs	r0, r3
 80059be:	f002 fe64 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 80059c2:	0003      	movs	r3, r0
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7ff fcf1 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 80059ca:	0003      	movs	r3, r0
 80059cc:	3b01      	subs	r3, #1
 80059ce:	425a      	negs	r2, r3
 80059d0:	4153      	adcs	r3, r2
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d100      	bne.n	80059da <_ZN10Controller12processEventEv+0x52>
 80059d8:	e1ad      	b.n	8005d36 <_ZN10Controller12processEventEv+0x3ae>
		{
			_currentState = STATE_WAIT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	224b      	movs	r2, #75	; 0x4b
 80059de:	2101      	movs	r1, #1
 80059e0:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 80059e2:	230f      	movs	r3, #15
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80059ea:	e1a4      	b.n	8005d36 <_ZN10Controller12processEventEv+0x3ae>

	case STATE_WAIT:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f002 fe4b 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 80059f4:	0003      	movs	r3, r0
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7ff fcd8 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 80059fc:	0003      	movs	r3, r0
 80059fe:	3b02      	subs	r3, #2
 8005a00:	425a      	negs	r2, r3
 8005a02:	4153      	adcs	r3, r2
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <_ZN10Controller12processEventEv+0x8a>
		{
			//_currentState = STATE_TRIGGER;
			eventStatus = XFEventStatus::Consumed;
 8005a0a:	230f      	movs	r3, #15
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
		}

		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	0018      	movs	r0, r3
 8005a16:	f002 fe38 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7ff fcc5 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005a22:	0003      	movs	r3, r0
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d10c      	bne.n	8005a42 <_ZN10Controller12processEventEv+0xba>
				getCurrentEvent()->getId() == EventIds::evSpiIrqId)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f002 fe2d 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005a30:	0003      	movs	r3, r0
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7ff fcc5 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8005a38:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <_ZN10Controller12processEventEv+0xba>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <_ZN10Controller12processEventEv+0xbc>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <_ZN10Controller12processEventEv+0xd0>
		{
			_currentState = STATE_SPI;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	224b      	movs	r2, #75	; 0x4b
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005a50:	230f      	movs	r3, #15
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f002 fe15 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005a60:	0003      	movs	r3, r0
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7ff fca2 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d10c      	bne.n	8005a88 <_ZN10Controller12processEventEv+0x100>
				getCurrentEvent()->getId() == EventIds::evCanIrqId)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	0018      	movs	r0, r3
 8005a72:	f002 fe0a 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005a76:	0003      	movs	r3, r0
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7ff fca2 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8005a7e:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d101      	bne.n	8005a88 <_ZN10Controller12processEventEv+0x100>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <_ZN10Controller12processEventEv+0x102>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <_ZN10Controller12processEventEv+0x116>
		{
			_currentState = STATE_CAN;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	224b      	movs	r2, #75	; 0x4b
 8005a92:	2103      	movs	r1, #3
 8005a94:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005a96:	230f      	movs	r3, #15
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f002 fdf2 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f7ff fc7f 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005aae:	0003      	movs	r3, r0
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d10c      	bne.n	8005ace <_ZN10Controller12processEventEv+0x146>
				getCurrentEvent()->getId() == EventIds::evFlagTriggerId)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f002 fde7 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005abc:	0003      	movs	r3, r0
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f7ff fc7f 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8005ac4:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d101      	bne.n	8005ace <_ZN10Controller12processEventEv+0x146>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <_ZN10Controller12processEventEv+0x148>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <_ZN10Controller12processEventEv+0x15c>
		{
			_currentState = STATE_TRIGGER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	224b      	movs	r2, #75	; 0x4b
 8005ad8:	2104      	movs	r1, #4
 8005ada:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005adc:	230f      	movs	r3, #15
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f002 fdcf 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005aec:	0003      	movs	r3, r0
 8005aee:	0018      	movs	r0, r3
 8005af0:	f7ff fc5c 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005af4:	0003      	movs	r3, r0
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d10c      	bne.n	8005b14 <_ZN10Controller12processEventEv+0x18c>
				getCurrentEvent()->getId() == EventIds::evGoToZeroId)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f002 fdc4 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005b02:	0003      	movs	r3, r0
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7ff fc5c 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8005b0a:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d101      	bne.n	8005b14 <_ZN10Controller12processEventEv+0x18c>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <_ZN10Controller12processEventEv+0x18e>
 8005b14:	2300      	movs	r3, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d100      	bne.n	8005b1c <_ZN10Controller12processEventEv+0x194>
 8005b1a:	e10e      	b.n	8005d3a <_ZN10Controller12processEventEv+0x3b2>
		{
			_currentState = STATE_GO_TO_ZERO;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	224b      	movs	r2, #75	; 0x4b
 8005b20:	2106      	movs	r1, #6
 8005b22:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005b24:	230f      	movs	r3, #15
 8005b26:	18fb      	adds	r3, r7, r3
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b2c:	e105      	b.n	8005d3a <_ZN10Controller12processEventEv+0x3b2>

	case STATE_SPI:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	0018      	movs	r0, r3
 8005b32:	f002 fdaa 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005b36:	0003      	movs	r3, r0
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7ff fc37 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005b3e:	0003      	movs	r3, r0
 8005b40:	3b02      	subs	r3, #2
 8005b42:	425a      	negs	r2, r3
 8005b44:	4153      	adcs	r3, r2
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d100      	bne.n	8005b4e <_ZN10Controller12processEventEv+0x1c6>
 8005b4c:	e0f7      	b.n	8005d3e <_ZN10Controller12processEventEv+0x3b6>
		{
			_currentState = STATE_WAIT;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	224b      	movs	r2, #75	; 0x4b
 8005b52:	2101      	movs	r1, #1
 8005b54:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005b56:	230f      	movs	r3, #15
 8005b58:	18fb      	adds	r3, r7, r3
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b5e:	e0ee      	b.n	8005d3e <_ZN10Controller12processEventEv+0x3b6>

	case STATE_CAN:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	0018      	movs	r0, r3
 8005b64:	f002 fd91 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f7ff fc1e 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005b70:	0003      	movs	r3, r0
 8005b72:	3b02      	subs	r3, #2
 8005b74:	425a      	negs	r2, r3
 8005b76:	4153      	adcs	r3, r2
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d100      	bne.n	8005b80 <_ZN10Controller12processEventEv+0x1f8>
 8005b7e:	e0e0      	b.n	8005d42 <_ZN10Controller12processEventEv+0x3ba>
		{
			_currentState = STATE_WAIT;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	224b      	movs	r2, #75	; 0x4b
 8005b84:	2101      	movs	r1, #1
 8005b86:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005b88:	230f      	movs	r3, #15
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b90:	e0d7      	b.n	8005d42 <_ZN10Controller12processEventEv+0x3ba>

	case STATE_TRIGGER:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f002 fd78 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f7ff fc05 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	3b02      	subs	r3, #2
 8005ba6:	425a      	negs	r2, r3
 8005ba8:	4153      	adcs	r3, r2
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <_ZN10Controller12processEventEv+0x238>
		{
			_currentState = STATE_WAIT_TRIGGER;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	224b      	movs	r2, #75	; 0x4b
 8005bb4:	2105      	movs	r1, #5
 8005bb6:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005bb8:	230f      	movs	r3, #15
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
		}

		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f002 fd61 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7ff fbee 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d10c      	bne.n	8005bf0 <_ZN10Controller12processEventEv+0x268>
				getCurrentEvent()->getId() == EventIds::evDoneId)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f002 fd56 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005bde:	0003      	movs	r3, r0
 8005be0:	0018      	movs	r0, r3
 8005be2:	f7ff fbee 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8005be6:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	d101      	bne.n	8005bf0 <_ZN10Controller12processEventEv+0x268>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <_ZN10Controller12processEventEv+0x26a>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d100      	bne.n	8005bf8 <_ZN10Controller12processEventEv+0x270>
 8005bf6:	e0a6      	b.n	8005d46 <_ZN10Controller12processEventEv+0x3be>
		{
			_currentState = STATE_WAIT;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	224b      	movs	r2, #75	; 0x4b
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005c00:	230f      	movs	r3, #15
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c08:	e09d      	b.n	8005d46 <_ZN10Controller12processEventEv+0x3be>

	case STATE_WAIT_TRIGGER:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f002 fd3c 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005c12:	0003      	movs	r3, r0
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7ff fbc9 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	3b02      	subs	r3, #2
 8005c1e:	425a      	negs	r2, r3
 8005c20:	4153      	adcs	r3, r2
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d100      	bne.n	8005c2a <_ZN10Controller12processEventEv+0x2a2>
 8005c28:	e08f      	b.n	8005d4a <_ZN10Controller12processEventEv+0x3c2>
		{
			_currentState = STATE_TRIGGER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	224b      	movs	r2, #75	; 0x4b
 8005c2e:	2104      	movs	r1, #4
 8005c30:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005c32:	230f      	movs	r3, #15
 8005c34:	18fb      	adds	r3, r7, r3
 8005c36:	2201      	movs	r2, #1
 8005c38:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c3a:	e086      	b.n	8005d4a <_ZN10Controller12processEventEv+0x3c2>

	case STATE_GO_TO_ZERO:
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f002 fd23 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005c44:	0003      	movs	r3, r0
 8005c46:	0018      	movs	r0, r3
 8005c48:	f7ff fbb0 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d10c      	bne.n	8005c6c <_ZN10Controller12processEventEv+0x2e4>
						getCurrentEvent()->getId() == EventIds::evDoneId)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f002 fd18 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f7ff fbb0 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8005c62:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005c64:	2b07      	cmp	r3, #7
 8005c66:	d101      	bne.n	8005c6c <_ZN10Controller12processEventEv+0x2e4>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <_ZN10Controller12processEventEv+0x2e6>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <_ZN10Controller12processEventEv+0x2fa>
		{
			_currentState = STATE_WAIT;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	224b      	movs	r2, #75	; 0x4b
 8005c76:	2101      	movs	r1, #1
 8005c78:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005c7a:	230f      	movs	r3, #15
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	0018      	movs	r0, r3
 8005c86:	f002 fd00 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7ff fb8d 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005c92:	0003      	movs	r3, r0
 8005c94:	3b02      	subs	r3, #2
 8005c96:	425a      	negs	r2, r3
 8005c98:	4153      	adcs	r3, r2
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d056      	beq.n	8005d4e <_ZN10Controller12processEventEv+0x3c6>
		{
			_currentState = STATE_WAIT_ZERO;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	224b      	movs	r2, #75	; 0x4b
 8005ca4:	2107      	movs	r1, #7
 8005ca6:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005ca8:	230f      	movs	r3, #15
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cb0:	e04d      	b.n	8005d4e <_ZN10Controller12processEventEv+0x3c6>

	case STATE_WAIT_ZERO:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f002 fce8 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f7ff fb75 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	3b02      	subs	r3, #2
 8005cc6:	425a      	negs	r2, r3
 8005cc8:	4153      	adcs	r3, r2
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d040      	beq.n	8005d52 <_ZN10Controller12processEventEv+0x3ca>
		{
			_currentState = STATE_GO_TO_ZERO;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	224b      	movs	r2, #75	; 0x4b
 8005cd4:	2106      	movs	r1, #6
 8005cd6:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005cd8:	230f      	movs	r3, #15
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005ce0:	e037      	b.n	8005d52 <_ZN10Controller12processEventEv+0x3ca>

	case STATE_LED:
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f002 fcd0 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8005cea:	0003      	movs	r3, r0
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7ff fb5d 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d10f      	bne.n	8005d18 <_ZN10Controller12processEventEv+0x390>
				getCurrentTimeout()->getId() == Timeout)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f002 fcd0 	bl	80086a0 <_ZN10XFBehavior17getCurrentTimeoutEv>
 8005d00:	0003      	movs	r3, r0
 8005d02:	0018      	movs	r0, r3
 8005d04:	f7ff fb5d 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8005d08:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d104      	bne.n	8005d18 <_ZN10Controller12processEventEv+0x390>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e003      	b.n	8005d1a <_ZN10Controller12processEventEv+0x392>
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	0800c358 	.word	0x0800c358
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01b      	beq.n	8005d56 <_ZN10Controller12processEventEv+0x3ce>
		{
			_currentState = STATE_WAIT;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	224b      	movs	r2, #75	; 0x4b
 8005d22:	2101      	movs	r1, #1
 8005d24:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005d26:	230f      	movs	r3, #15
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005d2e:	e012      	b.n	8005d56 <_ZN10Controller12processEventEv+0x3ce>

	default:
		Error_Handler();
 8005d30:	f7fa fede 	bl	8000af0 <Error_Handler>
		break;
 8005d34:	e010      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	e00e      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	e00c      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	e00a      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	e008      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	e006      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	e004      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	e002      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	e000      	b.n	8005d58 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d56:	46c0      	nop			; (mov r8, r8)
	}
	//Action switch
	if(_oldState != _currentState)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	224c      	movs	r2, #76	; 0x4c
 8005d5c:	5c9a      	ldrb	r2, [r3, r2]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	214b      	movs	r1, #75	; 0x4b
 8005d62:	5c5b      	ldrb	r3, [r3, r1]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d100      	bne.n	8005d6a <_ZN10Controller12processEventEv+0x3e2>
 8005d68:	e132      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
	{
		switch(_currentState)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	224b      	movs	r2, #75	; 0x4b
 8005d6e:	5c9b      	ldrb	r3, [r3, r2]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d900      	bls.n	8005d76 <_ZN10Controller12processEventEv+0x3ee>
 8005d74:	e117      	b.n	8005fa6 <_ZN10Controller12processEventEv+0x61e>
 8005d76:	009a      	lsls	r2, r3, #2
 8005d78:	4b9d      	ldr	r3, [pc, #628]	; (8005ff0 <_ZN10Controller12processEventEv+0x668>)
 8005d7a:	18d3      	adds	r3, r2, r3
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	469f      	mov	pc, r3
		case STATE_INIT:

			break;

		case STATE_WAIT:
			if(_oldState == STATE_INIT)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	224c      	movs	r2, #76	; 0x4c
 8005d84:	5c9b      	ldrb	r3, [r3, r2]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d120      	bne.n	8005dcc <_ZN10Controller12processEventEv+0x444>
			{
				readDIPSwitch();
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff fc0f 	bl	80055b0 <_ZN10Controller13readDIPSwitchEv>
				initializeMotorsGPIO();
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7ff fc73 	bl	8005680 <_ZN10Controller20initializeMotorsGPIOEv>
				HAL_SPI_Receive_DMA(&hspi1, buffer_SPI_rx, SPI_FRAME_SIZE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3328      	adds	r3, #40	; 0x28
 8005d9e:	0019      	movs	r1, r3
 8005da0:	4b94      	ldr	r3, [pc, #592]	; (8005ff4 <_ZN10Controller12processEventEv+0x66c>)
 8005da2:	220b      	movs	r2, #11
 8005da4:	0018      	movs	r0, r3
 8005da6:	f7fd fb1f 	bl	80033e8 <HAL_SPI_Receive_DMA>
				GEN(XFNullTransition());
 8005daa:	687d      	ldr	r5, [r7, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	681c      	ldr	r4, [r3, #0]
 8005db4:	2010      	movs	r0, #16
 8005db6:	f005 f942 	bl	800b03e <_Znwj>
 8005dba:	0003      	movs	r3, r0
 8005dbc:	001e      	movs	r6, r3
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	0030      	movs	r0, r6
 8005dc2:	f002 fd0b 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005dc6:	0031      	movs	r1, r6
 8005dc8:	0028      	movs	r0, r5
 8005dca:	47a0      	blx	r4
			}
			if(_oldState == STATE_SPI)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	224c      	movs	r2, #76	; 0x4c
 8005dd0:	5c9b      	ldrb	r3, [r3, r2]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d107      	bne.n	8005de6 <_ZN10Controller12processEventEv+0x45e>
			{
				HAL_SPI_Receive_DMA(&hspi1, buffer_SPI_rx, SPI_FRAME_SIZE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3328      	adds	r3, #40	; 0x28
 8005dda:	0019      	movs	r1, r3
 8005ddc:	4b85      	ldr	r3, [pc, #532]	; (8005ff4 <_ZN10Controller12processEventEv+0x66c>)
 8005dde:	220b      	movs	r2, #11
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7fd fb01 	bl	80033e8 <HAL_SPI_Receive_DMA>
			}
			if(_oldState == STATE_CAN)
			{

			}
			if(_oldState == STATE_LED)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	224c      	movs	r2, #76	; 0x4c
 8005dea:	5c9b      	ldrb	r3, [r3, r2]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d000      	beq.n	8005df2 <_ZN10Controller12processEventEv+0x46a>
 8005df0:	e0df      	b.n	8005fb2 <_ZN10Controller12processEventEv+0x62a>
			{
				GEN(XFNullTransition());
 8005df2:	687d      	ldr	r5, [r7, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	681c      	ldr	r4, [r3, #0]
 8005dfc:	2010      	movs	r0, #16
 8005dfe:	f005 f91e 	bl	800b03e <_Znwj>
 8005e02:	0003      	movs	r3, r0
 8005e04:	001e      	movs	r6, r3
 8005e06:	2100      	movs	r1, #0
 8005e08:	0030      	movs	r0, r6
 8005e0a:	f002 fce7 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005e0e:	0031      	movs	r1, r6
 8005e10:	0028      	movs	r0, r5
 8005e12:	47a0      	blx	r4
			}
			if(_oldState == STATE_GO_TO_ZERO)
			{

			}
			break;
 8005e14:	e0cd      	b.n	8005fb2 <_ZN10Controller12processEventEv+0x62a>

		case STATE_SPI:
			if(_oldState == STATE_WAIT)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	224c      	movs	r2, #76	; 0x4c
 8005e1a:	5c9b      	ldrb	r3, [r3, r2]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d000      	beq.n	8005e22 <_ZN10Controller12processEventEv+0x49a>
 8005e20:	e0c9      	b.n	8005fb6 <_ZN10Controller12processEventEv+0x62e>
			{
				GEN(XFNullTransition());
 8005e22:	687d      	ldr	r5, [r7, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	681c      	ldr	r4, [r3, #0]
 8005e2c:	2010      	movs	r0, #16
 8005e2e:	f005 f906 	bl	800b03e <_Znwj>
 8005e32:	0003      	movs	r3, r0
 8005e34:	001e      	movs	r6, r3
 8005e36:	2100      	movs	r1, #0
 8005e38:	0030      	movs	r0, r6
 8005e3a:	f002 fccf 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005e3e:	0031      	movs	r1, r6
 8005e40:	0028      	movs	r0, r5
 8005e42:	47a0      	blx	r4
				SPI_readFrame();
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 fb06 	bl	8006458 <_ZN10Controller13SPI_readFrameEv>
			}
			break;
 8005e4c:	e0b3      	b.n	8005fb6 <_ZN10Controller12processEventEv+0x62e>

		case STATE_CAN:
			if(_oldState == STATE_WAIT)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	224c      	movs	r2, #76	; 0x4c
 8005e52:	5c9b      	ldrb	r3, [r3, r2]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d000      	beq.n	8005e5a <_ZN10Controller12processEventEv+0x4d2>
 8005e58:	e0af      	b.n	8005fba <_ZN10Controller12processEventEv+0x632>
			{
				GEN(XFNullTransition());
 8005e5a:	687d      	ldr	r5, [r7, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	681c      	ldr	r4, [r3, #0]
 8005e64:	2010      	movs	r0, #16
 8005e66:	f005 f8ea 	bl	800b03e <_Znwj>
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	001e      	movs	r6, r3
 8005e6e:	2100      	movs	r1, #0
 8005e70:	0030      	movs	r0, r6
 8005e72:	f002 fcb3 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005e76:	0031      	movs	r1, r6
 8005e78:	0028      	movs	r0, r5
 8005e7a:	47a0      	blx	r4
				CAN_readFrame();
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f001 f80e 	bl	8006ea0 <_ZN10Controller13CAN_readFrameEv>
			}
			break;
 8005e84:	e099      	b.n	8005fba <_ZN10Controller12processEventEv+0x632>

		case STATE_TRIGGER:
			if(_oldState == STATE_WAIT || _oldState == STATE_WAIT_TRIGGER)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	224c      	movs	r2, #76	; 0x4c
 8005e8a:	5c9b      	ldrb	r3, [r3, r2]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d005      	beq.n	8005e9c <_ZN10Controller12processEventEv+0x514>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	224c      	movs	r2, #76	; 0x4c
 8005e94:	5c9b      	ldrb	r3, [r3, r2]
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d000      	beq.n	8005e9c <_ZN10Controller12processEventEv+0x514>
 8005e9a:	e090      	b.n	8005fbe <_ZN10Controller12processEventEv+0x636>
			{
				manageMotors();
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 f962 	bl	8006168 <_ZN10Controller12manageMotorsEv>
				//GEN(XFNullTransition());
				//scheduleTimeout(Timeout, 10);
			}
			break;
 8005ea4:	e08b      	b.n	8005fbe <_ZN10Controller12processEventEv+0x636>

		case STATE_WAIT_TRIGGER:
			if(_oldState == STATE_TRIGGER)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	224c      	movs	r2, #76	; 0x4c
 8005eaa:	5c9b      	ldrb	r3, [r3, r2]
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d000      	beq.n	8005eb2 <_ZN10Controller12processEventEv+0x52a>
 8005eb0:	e087      	b.n	8005fc2 <_ZN10Controller12processEventEv+0x63a>
			{
				GEN(XFNullTransition());
 8005eb2:	687d      	ldr	r5, [r7, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	681c      	ldr	r4, [r3, #0]
 8005ebc:	2010      	movs	r0, #16
 8005ebe:	f005 f8be 	bl	800b03e <_Znwj>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	001e      	movs	r6, r3
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	0030      	movs	r0, r6
 8005eca:	f002 fc87 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005ece:	0031      	movs	r1, r6
 8005ed0:	0028      	movs	r0, r5
 8005ed2:	47a0      	blx	r4
			}
			break;
 8005ed4:	e075      	b.n	8005fc2 <_ZN10Controller12processEventEv+0x63a>

		case STATE_GO_TO_ZERO:
			if(_oldState == STATE_WAIT || _oldState == STATE_WAIT_ZERO)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	224c      	movs	r2, #76	; 0x4c
 8005eda:	5c9b      	ldrb	r3, [r3, r2]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d004      	beq.n	8005eea <_ZN10Controller12processEventEv+0x562>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	224c      	movs	r2, #76	; 0x4c
 8005ee4:	5c9b      	ldrb	r3, [r3, r2]
 8005ee6:	2b07      	cmp	r3, #7
 8005ee8:	d16d      	bne.n	8005fc6 <_ZN10Controller12processEventEv+0x63e>
			{
				goToZeroPosition();
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0018      	movs	r0, r3
 8005eee:	f000 f88b 	bl	8006008 <_ZN10Controller16goToZeroPositionEv>
			}

			break;
 8005ef2:	e068      	b.n	8005fc6 <_ZN10Controller12processEventEv+0x63e>

		case STATE_WAIT_ZERO:
			if(_oldState == STATE_GO_TO_ZERO)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	224c      	movs	r2, #76	; 0x4c
 8005ef8:	5c9b      	ldrb	r3, [r3, r2]
 8005efa:	2b06      	cmp	r3, #6
 8005efc:	d165      	bne.n	8005fca <_ZN10Controller12processEventEv+0x642>
			{
				GEN(XFNullTransition());
 8005efe:	687d      	ldr	r5, [r7, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	681c      	ldr	r4, [r3, #0]
 8005f08:	2010      	movs	r0, #16
 8005f0a:	f005 f898 	bl	800b03e <_Znwj>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	001e      	movs	r6, r3
 8005f12:	2100      	movs	r1, #0
 8005f14:	0030      	movs	r0, r6
 8005f16:	f002 fc61 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005f1a:	0031      	movs	r1, r6
 8005f1c:	0028      	movs	r0, r5
 8005f1e:	47a0      	blx	r4
			}
			break;
 8005f20:	e053      	b.n	8005fca <_ZN10Controller12processEventEv+0x642>

		case STATE_LED:
			if(_oldState == STATE_WAIT)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	224c      	movs	r2, #76	; 0x4c
 8005f26:	5c9b      	ldrb	r3, [r3, r2]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d150      	bne.n	8005fce <_ZN10Controller12processEventEv+0x646>
			{
				if(HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) == GPIO_PIN_RESET)
 8005f2c:	2390      	movs	r3, #144	; 0x90
 8005f2e:	05db      	lsls	r3, r3, #23
 8005f30:	2108      	movs	r1, #8
 8005f32:	0018      	movs	r0, r3
 8005f34:	f7fc fb68 	bl	8002608 <HAL_GPIO_ReadPin>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	425a      	negs	r2, r3
 8005f3c:	4153      	adcs	r3, r2
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <_ZN10Controller12processEventEv+0x5cc>
				{
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	482b      	ldr	r0, [pc, #172]	; (8005ff8 <_ZN10Controller12processEventEv+0x670>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	0019      	movs	r1, r3
 8005f4e:	f7fc fb78 	bl	8002642 <HAL_GPIO_WritePin>
 8005f52:	e006      	b.n	8005f62 <_ZN10Controller12processEventEv+0x5da>
				}
				else
				{
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4827      	ldr	r0, [pc, #156]	; (8005ff8 <_ZN10Controller12processEventEv+0x670>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	f7fc fb70 	bl	8002642 <HAL_GPIO_WritePin>
				}
				HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8005f62:	4b25      	ldr	r3, [pc, #148]	; (8005ff8 <_ZN10Controller12processEventEv+0x670>)
 8005f64:	2102      	movs	r1, #2
 8005f66:	0018      	movs	r0, r3
 8005f68:	f7fc fb88 	bl	800267c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8005f6c:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <_ZN10Controller12processEventEv+0x670>)
 8005f6e:	2101      	movs	r1, #1
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7fc fb83 	bl	800267c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	4a20      	ldr	r2, [pc, #128]	; (8005ffc <_ZN10Controller12processEventEv+0x674>)
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	0010      	movs	r0, r2
 8005f80:	f7fc fb7c 	bl	800267c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 8005f84:	4b1e      	ldr	r3, [pc, #120]	; (8006000 <_ZN10Controller12processEventEv+0x678>)
 8005f86:	2120      	movs	r1, #32
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7fc fb77 	bl	800267c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
 8005f8e:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <_ZN10Controller12processEventEv+0x678>)
 8005f90:	2110      	movs	r1, #16
 8005f92:	0018      	movs	r0, r3
 8005f94:	f7fc fb72 	bl	800267c <HAL_GPIO_TogglePin>

				scheduleTimeout(Timeout, 5000);	//5000 = 500ms
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <_ZN10Controller12processEventEv+0x67c>)
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	f7ff fa29 	bl	80053f6 <_ZN10XFBehavior15scheduleTimeoutEii>
				//GEN(XFNullTransition());
			}
			break;
 8005fa4:	e013      	b.n	8005fce <_ZN10Controller12processEventEv+0x646>
		default:
			Error_Handler();
 8005fa6:	f7fa fda3 	bl	8000af0 <Error_Handler>
			break;
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	e010      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	e00e      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	e00c      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	e00a      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	e008      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	e006      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	e004      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	e002      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	e000      	b.n	8005fd0 <_ZN10Controller12processEventEv+0x648>
			break;
 8005fce:	46c0      	nop			; (mov r8, r8)
		}
	}
	return eventStatus;
 8005fd0:	230f      	movs	r3, #15
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	240c      	movs	r4, #12
 8005fd8:	193b      	adds	r3, r7, r4
 8005fda:	0011      	movs	r1, r2
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7ff f9fa 	bl	80053d6 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 8005fe2:	193b      	adds	r3, r7, r4
 8005fe4:	781b      	ldrb	r3, [r3, #0]
}
 8005fe6:	1c18      	adds	r0, r3, #0
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b005      	add	sp, #20
 8005fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	0800c37c 	.word	0x0800c37c
 8005ff4:	2000033c 	.word	0x2000033c
 8005ff8:	48000400 	.word	0x48000400
 8005ffc:	48001000 	.word	0x48001000
 8006000:	48000800 	.word	0x48000800
 8006004:	00001388 	.word	0x00001388

08006008 <_ZN10Controller16goToZeroPositionEv>:

void Controller::goToZeroPosition()
{
 8006008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	bool allToZero = true;
 8006010:	230f      	movs	r3, #15
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
	bool clockwise;

	//Check position of each watch pointer
	for(uint8_t i=0; i<NBR_CLOCK_PER_PROCESSOR; i++)
 8006018:	230e      	movs	r3, #14
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	230e      	movs	r3, #14
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b05      	cmp	r3, #5
 8006028:	d870      	bhi.n	800610c <_ZN10Controller16goToZeroPositionEv+0x104>
	{
		for(uint8_t x=0; x<(MAX_WATCHPOINTER-1); x++)
 800602a:	230d      	movs	r3, #13
 800602c:	18fb      	adds	r3, r7, r3
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	230d      	movs	r3, #13
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d860      	bhi.n	80060fe <_ZN10Controller16goToZeroPositionEv+0xf6>
		{
			if(_clock[i]->getWatchPointer(x)->actualPosition != 0)
 800603c:	230e      	movs	r3, #14
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3204      	adds	r2, #4
 8006046:	0092      	lsls	r2, r2, #2
 8006048:	58d2      	ldr	r2, [r2, r3]
 800604a:	230d      	movs	r3, #13
 800604c:	18fb      	adds	r3, r7, r3
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	0019      	movs	r1, r3
 8006052:	0010      	movs	r0, r2
 8006054:	f7ff f992 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006058:	0002      	movs	r2, r0
 800605a:	4b42      	ldr	r3, [pc, #264]	; (8006164 <_ZN10Controller16goToZeroPositionEv+0x15c>)
 800605c:	5cd3      	ldrb	r3, [r2, r3]
 800605e:	1e5a      	subs	r2, r3, #1
 8006060:	4193      	sbcs	r3, r2
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d043      	beq.n	80060f0 <_ZN10Controller16goToZeroPositionEv+0xe8>
			{
				if(i==1 || i==2 || i==4)
 8006068:	230e      	movs	r3, #14
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d009      	beq.n	8006086 <_ZN10Controller16goToZeroPositionEv+0x7e>
 8006072:	230e      	movs	r3, #14
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d004      	beq.n	8006086 <_ZN10Controller16goToZeroPositionEv+0x7e>
 800607c:	230e      	movs	r3, #14
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d113      	bne.n	80060ae <_ZN10Controller16goToZeroPositionEv+0xa6>
				{
					_clock[i]->getWatchPointer(x)->doOneStep(true);
 8006086:	230e      	movs	r3, #14
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3204      	adds	r2, #4
 8006090:	0092      	lsls	r2, r2, #2
 8006092:	58d2      	ldr	r2, [r2, r3]
 8006094:	230d      	movs	r3, #13
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	0019      	movs	r1, r3
 800609c:	0010      	movs	r0, r2
 800609e:	f7ff f96d 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80060a2:	0003      	movs	r3, r0
 80060a4:	2101      	movs	r1, #1
 80060a6:	0018      	movs	r0, r3
 80060a8:	f001 fbfc 	bl	80078a4 <_ZN12WatchPointer9doOneStepEb>
 80060ac:	e012      	b.n	80060d4 <_ZN10Controller16goToZeroPositionEv+0xcc>
				}
				else
				{
					_clock[i]->getWatchPointer(x)->doOneStep(false);
 80060ae:	230e      	movs	r3, #14
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3204      	adds	r2, #4
 80060b8:	0092      	lsls	r2, r2, #2
 80060ba:	58d2      	ldr	r2, [r2, r3]
 80060bc:	230d      	movs	r3, #13
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	0019      	movs	r1, r3
 80060c4:	0010      	movs	r0, r2
 80060c6:	f7ff f959 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80060ca:	0003      	movs	r3, r0
 80060cc:	2100      	movs	r1, #0
 80060ce:	0018      	movs	r0, r3
 80060d0:	f001 fbe8 	bl	80078a4 <_ZN12WatchPointer9doOneStepEb>

				}
				incrementPosition(false,i,x);
 80060d4:	230e      	movs	r3, #14
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	781a      	ldrb	r2, [r3, #0]
 80060da:	230d      	movs	r3, #13
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	2100      	movs	r1, #0
 80060e4:	f000 f912 	bl	800630c <_ZN10Controller17incrementPositionEbii>
				allToZero = false;
 80060e8:	230f      	movs	r3, #15
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
		for(uint8_t x=0; x<(MAX_WATCHPOINTER-1); x++)
 80060f0:	210d      	movs	r1, #13
 80060f2:	187b      	adds	r3, r7, r1
 80060f4:	781a      	ldrb	r2, [r3, #0]
 80060f6:	187b      	adds	r3, r7, r1
 80060f8:	3201      	adds	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e799      	b.n	8006032 <_ZN10Controller16goToZeroPositionEv+0x2a>
	for(uint8_t i=0; i<NBR_CLOCK_PER_PROCESSOR; i++)
 80060fe:	210e      	movs	r1, #14
 8006100:	187b      	adds	r3, r7, r1
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	187b      	adds	r3, r7, r1
 8006106:	3201      	adds	r2, #1
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e789      	b.n	8006020 <_ZN10Controller16goToZeroPositionEv+0x18>
			}
		}
	}

	if(allToZero == true)
 800610c:	230f      	movs	r3, #15
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d010      	beq.n	8006138 <_ZN10Controller16goToZeroPositionEv+0x130>
	{
		GEN(evDone());
 8006116:	687d      	ldr	r5, [r7, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	681c      	ldr	r4, [r3, #0]
 8006120:	2014      	movs	r0, #20
 8006122:	f004 ff8c 	bl	800b03e <_Znwj>
 8006126:	0003      	movs	r3, r0
 8006128:	001e      	movs	r6, r3
 800612a:	0030      	movs	r0, r6
 800612c:	f002 f832 	bl	8008194 <_ZN6evDoneC1Ev>
 8006130:	0031      	movs	r1, r6
 8006132:	0028      	movs	r0, r5
 8006134:	47a0      	blx	r4
	}
	else
	{
		GEN(XFNullTransition());
	}
}
 8006136:	e010      	b.n	800615a <_ZN10Controller16goToZeroPositionEv+0x152>
		GEN(XFNullTransition());
 8006138:	687d      	ldr	r5, [r7, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	681c      	ldr	r4, [r3, #0]
 8006142:	2010      	movs	r0, #16
 8006144:	f004 ff7b 	bl	800b03e <_Znwj>
 8006148:	0003      	movs	r3, r0
 800614a:	001e      	movs	r6, r3
 800614c:	2100      	movs	r1, #0
 800614e:	0030      	movs	r0, r6
 8006150:	f002 fb44 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8006154:	0031      	movs	r1, r6
 8006156:	0028      	movs	r0, r5
 8006158:	47a0      	blx	r4
}
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	46bd      	mov	sp, r7
 800615e:	b005      	add	sp, #20
 8006160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	0000020a 	.word	0x0000020a

08006168 <_ZN10Controller12manageMotorsEv>:

void Controller::manageMotors()
{
 8006168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	bool allToNewPosition = true;
 8006170:	230f      	movs	r3, #15
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<NBR_CLOCK_PER_PROCESSOR; i++)
 8006178:	230e      	movs	r3, #14
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	230e      	movs	r3, #14
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b05      	cmp	r3, #5
 8006188:	d900      	bls.n	800618c <_ZN10Controller12manageMotorsEv+0x24>
 800618a:	e08f      	b.n	80062ac <_ZN10Controller12manageMotorsEv+0x144>
	{
		for(uint8_t x=0; x<(MAX_WATCHPOINTER-1); x++)
 800618c:	230d      	movs	r3, #13
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2200      	movs	r2, #0
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	230d      	movs	r3, #13
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d900      	bls.n	80061a0 <_ZN10Controller12manageMotorsEv+0x38>
 800619e:	e07e      	b.n	800629e <_ZN10Controller12manageMotorsEv+0x136>
		{
			if(_clock[i]->getWatchPointer(x)->actualPosition != (_clock[i]->getWatchPointer(x)->newPosition))
 80061a0:	250e      	movs	r5, #14
 80061a2:	197b      	adds	r3, r7, r5
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3204      	adds	r2, #4
 80061aa:	0092      	lsls	r2, r2, #2
 80061ac:	58d2      	ldr	r2, [r2, r3]
 80061ae:	260d      	movs	r6, #13
 80061b0:	19bb      	adds	r3, r7, r6
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	0019      	movs	r1, r3
 80061b6:	0010      	movs	r0, r2
 80061b8:	f7ff f8e0 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80061bc:	0002      	movs	r2, r0
 80061be:	4b51      	ldr	r3, [pc, #324]	; (8006304 <_ZN10Controller12manageMotorsEv+0x19c>)
 80061c0:	5cd4      	ldrb	r4, [r2, r3]
 80061c2:	197b      	adds	r3, r7, r5
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3204      	adds	r2, #4
 80061ca:	0092      	lsls	r2, r2, #2
 80061cc:	58d2      	ldr	r2, [r2, r3]
 80061ce:	19bb      	adds	r3, r7, r6
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	0019      	movs	r1, r3
 80061d4:	0010      	movs	r0, r2
 80061d6:	f7ff f8d1 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80061da:	0002      	movs	r2, r0
 80061dc:	4b4a      	ldr	r3, [pc, #296]	; (8006308 <_ZN10Controller12manageMotorsEv+0x1a0>)
 80061de:	5cd3      	ldrb	r3, [r2, r3]
 80061e0:	1ae3      	subs	r3, r4, r3
 80061e2:	1e5a      	subs	r2, r3, #1
 80061e4:	4193      	sbcs	r3, r2
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d051      	beq.n	8006290 <_ZN10Controller12manageMotorsEv+0x128>
			{
				//Check best clockwise
				//bool clockwise = bestClockwise(i,x);
				bool clockwise = false;
 80061ec:	230c      	movs	r3, #12
 80061ee:	18fb      	adds	r3, r7, r3
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]


				if(i==1 || i==2 || i==4)
 80061f4:	230e      	movs	r3, #14
 80061f6:	18fb      	adds	r3, r7, r3
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d009      	beq.n	8006212 <_ZN10Controller12manageMotorsEv+0xaa>
 80061fe:	230e      	movs	r3, #14
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d004      	beq.n	8006212 <_ZN10Controller12manageMotorsEv+0xaa>
 8006208:	230e      	movs	r3, #14
 800620a:	18fb      	adds	r3, r7, r3
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b04      	cmp	r3, #4
 8006210:	d117      	bne.n	8006242 <_ZN10Controller12manageMotorsEv+0xda>
				{
					_clock[i]->getWatchPointer(x)->doOneStep(!clockwise);	//Triaxe clockwise is the opposite of biaxe
 8006212:	230e      	movs	r3, #14
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3204      	adds	r2, #4
 800621c:	0092      	lsls	r2, r2, #2
 800621e:	58d2      	ldr	r2, [r2, r3]
 8006220:	230d      	movs	r3, #13
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	0019      	movs	r1, r3
 8006228:	0010      	movs	r0, r2
 800622a:	f7ff f8a7 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800622e:	230c      	movs	r3, #12
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2201      	movs	r2, #1
 8006236:	4053      	eors	r3, r2
 8006238:	b2db      	uxtb	r3, r3
 800623a:	0019      	movs	r1, r3
 800623c:	f001 fb32 	bl	80078a4 <_ZN12WatchPointer9doOneStepEb>
 8006240:	e015      	b.n	800626e <_ZN10Controller12manageMotorsEv+0x106>
				}
				else
				{
					_clock[i]->getWatchPointer(x)->doOneStep(clockwise);
 8006242:	230e      	movs	r3, #14
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	781a      	ldrb	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3204      	adds	r2, #4
 800624c:	0092      	lsls	r2, r2, #2
 800624e:	58d2      	ldr	r2, [r2, r3]
 8006250:	230d      	movs	r3, #13
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	0019      	movs	r1, r3
 8006258:	0010      	movs	r0, r2
 800625a:	f7ff f88f 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800625e:	0002      	movs	r2, r0
 8006260:	230c      	movs	r3, #12
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	0019      	movs	r1, r3
 8006268:	0010      	movs	r0, r2
 800626a:	f001 fb1b 	bl	80078a4 <_ZN12WatchPointer9doOneStepEb>

				}
				incrementPosition(clockwise,i,x);
 800626e:	230e      	movs	r3, #14
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	230d      	movs	r3, #13
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	781c      	ldrb	r4, [r3, #0]
 800627a:	230c      	movs	r3, #12
 800627c:	18fb      	adds	r3, r7, r3
 800627e:	7819      	ldrb	r1, [r3, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	0023      	movs	r3, r4
 8006284:	f000 f842 	bl	800630c <_ZN10Controller17incrementPositionEbii>
				allToNewPosition = false;
 8006288:	230f      	movs	r3, #15
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
		for(uint8_t x=0; x<(MAX_WATCHPOINTER-1); x++)
 8006290:	210d      	movs	r1, #13
 8006292:	187b      	adds	r3, r7, r1
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	187b      	adds	r3, r7, r1
 8006298:	3201      	adds	r2, #1
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e77a      	b.n	8006194 <_ZN10Controller12manageMotorsEv+0x2c>
	for(uint8_t i=0; i<NBR_CLOCK_PER_PROCESSOR; i++)
 800629e:	210e      	movs	r1, #14
 80062a0:	187b      	adds	r3, r7, r1
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	187b      	adds	r3, r7, r1
 80062a6:	3201      	adds	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	e769      	b.n	8006180 <_ZN10Controller12manageMotorsEv+0x18>
			}
		}
	}

	if(allToNewPosition == true)
 80062ac:	230f      	movs	r3, #15
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <_ZN10Controller12manageMotorsEv+0x170>
	{
		GEN(evDone());
 80062b6:	687d      	ldr	r5, [r7, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	681c      	ldr	r4, [r3, #0]
 80062c0:	2014      	movs	r0, #20
 80062c2:	f004 febc 	bl	800b03e <_Znwj>
 80062c6:	0003      	movs	r3, r0
 80062c8:	001e      	movs	r6, r3
 80062ca:	0030      	movs	r0, r6
 80062cc:	f001 ff62 	bl	8008194 <_ZN6evDoneC1Ev>
 80062d0:	0031      	movs	r1, r6
 80062d2:	0028      	movs	r0, r5
 80062d4:	47a0      	blx	r4
	}
	else
	{
		GEN(XFNullTransition());
	}
}
 80062d6:	e010      	b.n	80062fa <_ZN10Controller12manageMotorsEv+0x192>
		GEN(XFNullTransition());
 80062d8:	687d      	ldr	r5, [r7, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	681c      	ldr	r4, [r3, #0]
 80062e2:	2010      	movs	r0, #16
 80062e4:	f004 feab 	bl	800b03e <_Znwj>
 80062e8:	0003      	movs	r3, r0
 80062ea:	001e      	movs	r6, r3
 80062ec:	2100      	movs	r1, #0
 80062ee:	0030      	movs	r0, r6
 80062f0:	f002 fa74 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 80062f4:	0031      	movs	r1, r6
 80062f6:	0028      	movs	r0, r5
 80062f8:	47a0      	blx	r4
}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b005      	add	sp, #20
 8006300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	0000020a 	.word	0x0000020a
 8006308:	00000209 	.word	0x00000209

0800630c <_ZN10Controller17incrementPositionEbii>:

	return clockwise;
}

void Controller::incrementPosition(bool clockwise, int i, int x)
{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	200b      	movs	r0, #11
 800631a:	183b      	adds	r3, r7, r0
 800631c:	1c0a      	adds	r2, r1, #0
 800631e:	701a      	strb	r2, [r3, #0]
	//Increment position
	if(clockwise == true)
 8006320:	183b      	adds	r3, r7, r0
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d048      	beq.n	80063ba <_ZN10Controller17incrementPositionEbii+0xae>
	{
		if(_clock[i]->getWatchPointer(x)->actualPosition == ((360/_clock[i]->getWatchPointer(x)->outputAngle)-1))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	3204      	adds	r2, #4
 800632e:	0092      	lsls	r2, r2, #2
 8006330:	58d3      	ldr	r3, [r2, r3]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	0011      	movs	r1, r2
 8006336:	0018      	movs	r0, r3
 8006338:	f7ff f820 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800633c:	0002      	movs	r2, r0
 800633e:	4b44      	ldr	r3, [pc, #272]	; (8006450 <_ZN10Controller17incrementPositionEbii+0x144>)
 8006340:	5cd3      	ldrb	r3, [r2, r3]
 8006342:	001c      	movs	r4, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	3204      	adds	r2, #4
 800634a:	0092      	lsls	r2, r2, #2
 800634c:	58d3      	ldr	r3, [r2, r3]
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	0011      	movs	r1, r2
 8006352:	0018      	movs	r0, r3
 8006354:	f7ff f812 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006358:	0002      	movs	r2, r0
 800635a:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <_ZN10Controller17incrementPositionEbii+0x148>)
 800635c:	5cd3      	ldrb	r3, [r2, r3]
 800635e:	0019      	movs	r1, r3
 8006360:	23b4      	movs	r3, #180	; 0xb4
 8006362:	0058      	lsls	r0, r3, #1
 8006364:	f7f9 ff5a 	bl	800021c <__divsi3>
 8006368:	0003      	movs	r3, r0
 800636a:	3b01      	subs	r3, #1
 800636c:	1ae3      	subs	r3, r4, r3
 800636e:	425a      	negs	r2, r3
 8006370:	4153      	adcs	r3, r2
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <_ZN10Controller17incrementPositionEbii+0x8a>
		{
			_clock[i]->getWatchPointer(x)->actualPosition = 0;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	3204      	adds	r2, #4
 800637e:	0092      	lsls	r2, r2, #2
 8006380:	58d3      	ldr	r3, [r2, r3]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	0011      	movs	r1, r2
 8006386:	0018      	movs	r0, r3
 8006388:	f7fe fff8 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800638c:	0002      	movs	r2, r0
 800638e:	4b30      	ldr	r3, [pc, #192]	; (8006450 <_ZN10Controller17incrementPositionEbii+0x144>)
 8006390:	2100      	movs	r1, #0
 8006392:	54d1      	strb	r1, [r2, r3]
		else
		{
			_clock[i]->getWatchPointer(x)->actualPosition--;
		}
	}
}
 8006394:	e058      	b.n	8006448 <_ZN10Controller17incrementPositionEbii+0x13c>
			_clock[i]->getWatchPointer(x)->actualPosition++;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	3204      	adds	r2, #4
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	58d3      	ldr	r3, [r2, r3]
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	0011      	movs	r1, r2
 80063a4:	0018      	movs	r0, r3
 80063a6:	f7fe ffe9 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80063aa:	0003      	movs	r3, r0
 80063ac:	4a28      	ldr	r2, [pc, #160]	; (8006450 <_ZN10Controller17incrementPositionEbii+0x144>)
 80063ae:	5c9a      	ldrb	r2, [r3, r2]
 80063b0:	3201      	adds	r2, #1
 80063b2:	b2d1      	uxtb	r1, r2
 80063b4:	4a26      	ldr	r2, [pc, #152]	; (8006450 <_ZN10Controller17incrementPositionEbii+0x144>)
 80063b6:	5499      	strb	r1, [r3, r2]
}
 80063b8:	e046      	b.n	8006448 <_ZN10Controller17incrementPositionEbii+0x13c>
		if(_clock[i]->getWatchPointer(x)->actualPosition == 0)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	3204      	adds	r2, #4
 80063c0:	0092      	lsls	r2, r2, #2
 80063c2:	58d3      	ldr	r3, [r2, r3]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	0011      	movs	r1, r2
 80063c8:	0018      	movs	r0, r3
 80063ca:	f7fe ffd7 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80063ce:	0002      	movs	r2, r0
 80063d0:	4b1f      	ldr	r3, [pc, #124]	; (8006450 <_ZN10Controller17incrementPositionEbii+0x144>)
 80063d2:	5cd3      	ldrb	r3, [r2, r3]
 80063d4:	425a      	negs	r2, r3
 80063d6:	4153      	adcs	r3, r2
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d023      	beq.n	8006426 <_ZN10Controller17incrementPositionEbii+0x11a>
			_clock[i]->getWatchPointer(x)->actualPosition = ((360/_clock[i]->getWatchPointer(x)->outputAngle)-1);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	3204      	adds	r2, #4
 80063e4:	0092      	lsls	r2, r2, #2
 80063e6:	58d3      	ldr	r3, [r2, r3]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	0011      	movs	r1, r2
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7fe ffc5 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80063f2:	0002      	movs	r2, r0
 80063f4:	4b17      	ldr	r3, [pc, #92]	; (8006454 <_ZN10Controller17incrementPositionEbii+0x148>)
 80063f6:	5cd3      	ldrb	r3, [r2, r3]
 80063f8:	0019      	movs	r1, r3
 80063fa:	23b4      	movs	r3, #180	; 0xb4
 80063fc:	0058      	lsls	r0, r3, #1
 80063fe:	f7f9 ff0d 	bl	800021c <__divsi3>
 8006402:	0003      	movs	r3, r0
 8006404:	b2dc      	uxtb	r4, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	3204      	adds	r2, #4
 800640c:	0092      	lsls	r2, r2, #2
 800640e:	58d3      	ldr	r3, [r2, r3]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	0011      	movs	r1, r2
 8006414:	0018      	movs	r0, r3
 8006416:	f7fe ffb1 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800641a:	0002      	movs	r2, r0
 800641c:	1e63      	subs	r3, r4, #1
 800641e:	b2d9      	uxtb	r1, r3
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <_ZN10Controller17incrementPositionEbii+0x144>)
 8006422:	54d1      	strb	r1, [r2, r3]
}
 8006424:	e010      	b.n	8006448 <_ZN10Controller17incrementPositionEbii+0x13c>
			_clock[i]->getWatchPointer(x)->actualPosition--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	3204      	adds	r2, #4
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	58d3      	ldr	r3, [r2, r3]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	0011      	movs	r1, r2
 8006434:	0018      	movs	r0, r3
 8006436:	f7fe ffa1 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800643a:	0003      	movs	r3, r0
 800643c:	4a04      	ldr	r2, [pc, #16]	; (8006450 <_ZN10Controller17incrementPositionEbii+0x144>)
 800643e:	5c9a      	ldrb	r2, [r3, r2]
 8006440:	3a01      	subs	r2, #1
 8006442:	b2d1      	uxtb	r1, r2
 8006444:	4a02      	ldr	r2, [pc, #8]	; (8006450 <_ZN10Controller17incrementPositionEbii+0x144>)
 8006446:	5499      	strb	r1, [r3, r2]
}
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	b005      	add	sp, #20
 800644e:	bd90      	pop	{r4, r7, pc}
 8006450:	0000020a 	.word	0x0000020a
 8006454:	00000206 	.word	0x00000206

08006458 <_ZN10Controller13SPI_readFrameEv>:

//---------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------SPI------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------
void Controller::SPI_readFrame()
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	uint8_t frameType;

	//Check frame type
	frameType = (buffer_SPI_rx[0] & 0b11000000) >> 6;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2228      	movs	r2, #40	; 0x28
 8006464:	5c9a      	ldrb	r2, [r3, r2]
 8006466:	210f      	movs	r1, #15
 8006468:	187b      	adds	r3, r7, r1
 800646a:	0992      	lsrs	r2, r2, #6
 800646c:	701a      	strb	r2, [r3, #0]

	switch(frameType)
 800646e:	187b      	adds	r3, r7, r1
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d00d      	beq.n	8006492 <_ZN10Controller13SPI_readFrameEv+0x3a>
 8006476:	dc02      	bgt.n	800647e <_ZN10Controller13SPI_readFrameEv+0x26>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <_ZN10Controller13SPI_readFrameEv+0x30>
 800647c:	e018      	b.n	80064b0 <_ZN10Controller13SPI_readFrameEv+0x58>
 800647e:	2b02      	cmp	r3, #2
 8006480:	d00c      	beq.n	800649c <_ZN10Controller13SPI_readFrameEv+0x44>
 8006482:	2b03      	cmp	r3, #3
 8006484:	d00f      	beq.n	80064a6 <_ZN10Controller13SPI_readFrameEv+0x4e>
 8006486:	e013      	b.n	80064b0 <_ZN10Controller13SPI_readFrameEv+0x58>
	{
	//DATA FRAME
	case 0:
		SPI_dataFrame();
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	0018      	movs	r0, r3
 800648c:	f000 f817 	bl	80064be <_ZN10Controller13SPI_dataFrameEv>
		break;
 8006490:	e011      	b.n	80064b6 <_ZN10Controller13SPI_readFrameEv+0x5e>
	//CONFIGURATION FRAME
	case 1:
		SPI_configurationFrame();
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0018      	movs	r0, r3
 8006496:	f000 f832 	bl	80064fe <_ZN10Controller22SPI_configurationFrameEv>
		break;
 800649a:	e00c      	b.n	80064b6 <_ZN10Controller13SPI_readFrameEv+0x5e>
	//BROADCAST CONFIGURATION FRAME
	case 2:
		SPI_broadcastConfigurationFrame();
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f84d 	bl	800653e <_ZN10Controller31SPI_broadcastConfigurationFrameEv>
		break;
 80064a4:	e007      	b.n	80064b6 <_ZN10Controller13SPI_readFrameEv+0x5e>
	//RESET POSITION ZERO FRAME
	case 3:
		SPI_resetPositionZeroFrame();
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 f859 	bl	8006560 <_ZN10Controller26SPI_resetPositionZeroFrameEv>
		break;
 80064ae:	e002      	b.n	80064b6 <_ZN10Controller13SPI_readFrameEv+0x5e>
	default:
		Error_Handler();
 80064b0:	f7fa fb1e 	bl	8000af0 <Error_Handler>
		break;
 80064b4:	46c0      	nop			; (mov r8, r8)
	}
}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b004      	add	sp, #16
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZN10Controller13SPI_dataFrameEv>:

void Controller::SPI_dataFrame()
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
	uint8_t readAddress = buffer_SPI_rx[0] & 0b00111111;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2228      	movs	r2, #40	; 0x28
 80064ca:	5c9a      	ldrb	r2, [r3, r2]
 80064cc:	200f      	movs	r0, #15
 80064ce:	183b      	adds	r3, r7, r0
 80064d0:	213f      	movs	r1, #63	; 0x3f
 80064d2:	400a      	ands	r2, r1
 80064d4:	701a      	strb	r2, [r3, #0]

	//Check Processor address
	if(readAddress == myAddress)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2245      	movs	r2, #69	; 0x45
 80064da:	5c9b      	ldrb	r3, [r3, r2]
 80064dc:	183a      	adds	r2, r7, r0
 80064de:	7812      	ldrb	r2, [r2, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d104      	bne.n	80064ee <_ZN10Controller13SPI_dataFrameEv+0x30>
	{
		SPI_readDataBytes();
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	0018      	movs	r0, r3
 80064e8:	f000 f88c 	bl	8006604 <_ZN10Controller17SPI_readDataBytesEv>
	else
	{
		//Send data via CAN
		CAN_writeFrame();
	}
}
 80064ec:	e003      	b.n	80064f6 <_ZN10Controller13SPI_dataFrameEv+0x38>
		CAN_writeFrame();
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 fc23 	bl	8006d3c <_ZN10Controller14CAN_writeFrameEv>
}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b004      	add	sp, #16
 80064fc:	bd80      	pop	{r7, pc}

080064fe <_ZN10Controller22SPI_configurationFrameEv>:

void Controller::SPI_configurationFrame()
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
	uint8_t readAddress = buffer_SPI_rx[0] & 0b00111111;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2228      	movs	r2, #40	; 0x28
 800650a:	5c9a      	ldrb	r2, [r3, r2]
 800650c:	200f      	movs	r0, #15
 800650e:	183b      	adds	r3, r7, r0
 8006510:	213f      	movs	r1, #63	; 0x3f
 8006512:	400a      	ands	r2, r1
 8006514:	701a      	strb	r2, [r3, #0]

	//Check Processor address
	if(readAddress == myAddress)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2245      	movs	r2, #69	; 0x45
 800651a:	5c9b      	ldrb	r3, [r3, r2]
 800651c:	183a      	adds	r2, r7, r0
 800651e:	7812      	ldrb	r2, [r2, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d104      	bne.n	800652e <_ZN10Controller22SPI_configurationFrameEv+0x30>
	{
		SPI_readConfigBytes();
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	0018      	movs	r0, r3
 8006528:	f000 fb6a 	bl	8006c00 <_ZN10Controller19SPI_readConfigBytesEv>
	else
	{
		//Send data via CAN
		CAN_writeFrame();
	}
}
 800652c:	e003      	b.n	8006536 <_ZN10Controller22SPI_configurationFrameEv+0x38>
		CAN_writeFrame();
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	0018      	movs	r0, r3
 8006532:	f000 fc03 	bl	8006d3c <_ZN10Controller14CAN_writeFrameEv>
}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	46bd      	mov	sp, r7
 800653a:	b004      	add	sp, #16
 800653c:	bd80      	pop	{r7, pc}

0800653e <_ZN10Controller31SPI_broadcastConfigurationFrameEv>:

void Controller::SPI_broadcastConfigurationFrame()
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]

	//Write on our variables
	SPI_readConfigBytes();
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0018      	movs	r0, r3
 800654a:	f000 fb59 	bl	8006c00 <_ZN10Controller19SPI_readConfigBytesEv>

	//Send via CAN for others
	CAN_writeFrame();
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	0018      	movs	r0, r3
 8006552:	f000 fbf3 	bl	8006d3c <_ZN10Controller14CAN_writeFrameEv>

}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	46bd      	mov	sp, r7
 800655a:	b002      	add	sp, #8
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <_ZN10Controller26SPI_resetPositionZeroFrameEv>:

void Controller::SPI_resetPositionZeroFrame()
{
 8006560:	b5b0      	push	{r4, r5, r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	uint8_t readAddress = buffer_SPI_rx[0] & 0b00111111;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2228      	movs	r2, #40	; 0x28
 800656c:	5c9a      	ldrb	r2, [r3, r2]
 800656e:	200f      	movs	r0, #15
 8006570:	183b      	adds	r3, r7, r0
 8006572:	213f      	movs	r1, #63	; 0x3f
 8006574:	400a      	ands	r2, r1
 8006576:	701a      	strb	r2, [r3, #0]
	uint8_t clkAddress;
	uint8_t watchPtrAddress;

	//Check Processor address
	if(readAddress == myAddress)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2245      	movs	r2, #69	; 0x45
 800657c:	5c9b      	ldrb	r3, [r3, r2]
 800657e:	183a      	adds	r2, r7, r0
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d132      	bne.n	80065ec <_ZN10Controller26SPI_resetPositionZeroFrameEv+0x8c>
	{
		clkAddress = (buffer_SPI_rx[1] & 0b00011100) >> 2;	//3 bits
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2229      	movs	r2, #41	; 0x29
 800658a:	5c9b      	ldrb	r3, [r3, r2]
 800658c:	109b      	asrs	r3, r3, #2
 800658e:	b2da      	uxtb	r2, r3
 8006590:	240e      	movs	r4, #14
 8006592:	193b      	adds	r3, r7, r4
 8006594:	2107      	movs	r1, #7
 8006596:	400a      	ands	r2, r1
 8006598:	701a      	strb	r2, [r3, #0]
		watchPtrAddress = (buffer_SPI_rx[1] & 0b00000011);	//2 bits
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2229      	movs	r2, #41	; 0x29
 800659e:	5c9a      	ldrb	r2, [r3, r2]
 80065a0:	250d      	movs	r5, #13
 80065a2:	197b      	adds	r3, r7, r5
 80065a4:	2103      	movs	r1, #3
 80065a6:	400a      	ands	r2, r1
 80065a8:	701a      	strb	r2, [r3, #0]
		//Reset position zero
		_clock[clkAddress]->getWatchPointer(watchPtrAddress)->newPosition = 0;
 80065aa:	193b      	adds	r3, r7, r4
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3204      	adds	r2, #4
 80065b2:	0092      	lsls	r2, r2, #2
 80065b4:	58d2      	ldr	r2, [r2, r3]
 80065b6:	197b      	adds	r3, r7, r5
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	0019      	movs	r1, r3
 80065bc:	0010      	movs	r0, r2
 80065be:	f7fe fedd 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80065c2:	0002      	movs	r2, r0
 80065c4:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <_ZN10Controller26SPI_resetPositionZeroFrameEv+0x9c>)
 80065c6:	2100      	movs	r1, #0
 80065c8:	54d1      	strb	r1, [r2, r3]
		_clock[clkAddress]->getWatchPointer(watchPtrAddress)->actualPosition = 0;
 80065ca:	193b      	adds	r3, r7, r4
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3204      	adds	r2, #4
 80065d2:	0092      	lsls	r2, r2, #2
 80065d4:	58d2      	ldr	r2, [r2, r3]
 80065d6:	197b      	adds	r3, r7, r5
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	0019      	movs	r1, r3
 80065dc:	0010      	movs	r0, r2
 80065de:	f7fe fecd 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80065e2:	0002      	movs	r2, r0
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <_ZN10Controller26SPI_resetPositionZeroFrameEv+0xa0>)
 80065e6:	2100      	movs	r1, #0
 80065e8:	54d1      	strb	r1, [r2, r3]
	else
	{
		//Send data via CAN
		CAN_writeFrame();
	}
}
 80065ea:	e003      	b.n	80065f4 <_ZN10Controller26SPI_resetPositionZeroFrameEv+0x94>
		CAN_writeFrame();
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	0018      	movs	r0, r3
 80065f0:	f000 fba4 	bl	8006d3c <_ZN10Controller14CAN_writeFrameEv>
}
 80065f4:	46c0      	nop			; (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b004      	add	sp, #16
 80065fa:	bdb0      	pop	{r4, r5, r7, pc}
 80065fc:	00000209 	.word	0x00000209
 8006600:	0000020a 	.word	0x0000020a

08006604 <_ZN10Controller17SPI_readDataBytesEv>:

void Controller::SPI_readDataBytes()
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	uint8_t clkAddr = (buffer_SPI_rx[1] & 0b00011100) >> 2;	//3 bits
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2229      	movs	r2, #41	; 0x29
 8006610:	5c9b      	ldrb	r3, [r3, r2]
 8006612:	109b      	asrs	r3, r3, #2
 8006614:	b2da      	uxtb	r2, r3
 8006616:	230f      	movs	r3, #15
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	2107      	movs	r1, #7
 800661c:	400a      	ands	r2, r1
 800661e:	701a      	strb	r2, [r3, #0]
	uint8_t watchPtrAddress = (buffer_SPI_rx[1] & 0b00000011);	//2 bits
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2229      	movs	r2, #41	; 0x29
 8006624:	5c9a      	ldrb	r2, [r3, r2]
 8006626:	200e      	movs	r0, #14
 8006628:	183b      	adds	r3, r7, r0
 800662a:	2103      	movs	r1, #3
 800662c:	400a      	ands	r2, r1
 800662e:	701a      	strb	r2, [r3, #0]
	uint8_t nbrBytes = buffer_SPI_rx[2];
 8006630:	230d      	movs	r3, #13
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	212a      	movs	r1, #42	; 0x2a
 8006638:	5c52      	ldrb	r2, [r2, r1]
 800663a:	701a      	strb	r2, [r3, #0]

	//Write on registers
	switch(watchPtrAddress)
 800663c:	183b      	adds	r3, r7, r0
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d013      	beq.n	800666c <_ZN10Controller17SPI_readDataBytesEv+0x68>
 8006644:	dc02      	bgt.n	800664c <_ZN10Controller17SPI_readDataBytesEv+0x48>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <_ZN10Controller17SPI_readDataBytesEv+0x52>
 800664a:	e030      	b.n	80066ae <_ZN10Controller17SPI_readDataBytesEv+0xaa>
 800664c:	2b02      	cmp	r3, #2
 800664e:	d018      	beq.n	8006682 <_ZN10Controller17SPI_readDataBytesEv+0x7e>
 8006650:	2b03      	cmp	r3, #3
 8006652:	d021      	beq.n	8006698 <_ZN10Controller17SPI_readDataBytesEv+0x94>
 8006654:	e02b      	b.n	80066ae <_ZN10Controller17SPI_readDataBytesEv+0xaa>
	{
	case 0:
		SPI_writeDataRegister_0(clkAddr, nbrBytes);	//Data frame for watch pointer 0
 8006656:	230d      	movs	r3, #13
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	230f      	movs	r3, #15
 800665e:	18fb      	adds	r3, r7, r3
 8006660:	7819      	ldrb	r1, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	0018      	movs	r0, r3
 8006666:	f000 f987 	bl	8006978 <_ZN10Controller23SPI_writeDataRegister_0Ehh>
		break;
 800666a:	e023      	b.n	80066b4 <_ZN10Controller17SPI_readDataBytesEv+0xb0>

	case 1:
		SPI_writeDataRegister_1(clkAddr, nbrBytes); //Data frame for watch pointer 1
 800666c:	230d      	movs	r3, #13
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	230f      	movs	r3, #15
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	7819      	ldrb	r1, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	0018      	movs	r0, r3
 800667c:	f000 fa16 	bl	8006aac <_ZN10Controller23SPI_writeDataRegister_1Ehh>
		break;
 8006680:	e018      	b.n	80066b4 <_ZN10Controller17SPI_readDataBytesEv+0xb0>

	case 2:
		SPI_writeDataRegister_2(clkAddr, nbrBytes); //Data frame for watch pointer 2
 8006682:	230d      	movs	r3, #13
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	230f      	movs	r3, #15
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	7819      	ldrb	r1, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	0018      	movs	r0, r3
 8006692:	f000 faa5 	bl	8006be0 <_ZN10Controller23SPI_writeDataRegister_2Ehh>
		break;
 8006696:	e00d      	b.n	80066b4 <_ZN10Controller17SPI_readDataBytesEv+0xb0>

	case 3:
		SPI_writeDataRegister(clkAddr, nbrBytes); //Data frame for all watch pointer
 8006698:	230d      	movs	r3, #13
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	230f      	movs	r3, #15
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	7819      	ldrb	r1, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	0018      	movs	r0, r3
 80066a8:	f000 f808 	bl	80066bc <_ZN10Controller21SPI_writeDataRegisterEhh>
		break;
 80066ac:	e002      	b.n	80066b4 <_ZN10Controller17SPI_readDataBytesEv+0xb0>

	default:
		Error_Handler();
 80066ae:	f7fa fa1f 	bl	8000af0 <Error_Handler>
		break;
 80066b2:	46c0      	nop			; (mov r8, r8)
	}

}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b004      	add	sp, #16
 80066ba:	bd80      	pop	{r7, pc}

080066bc <_ZN10Controller21SPI_writeDataRegisterEhh>:

void Controller::SPI_writeDataRegister(uint8_t clkAddr, uint8_t nbrBytes)
{
 80066bc:	b590      	push	{r4, r7, lr}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	0008      	movs	r0, r1
 80066c6:	0011      	movs	r1, r2
 80066c8:	1cfb      	adds	r3, r7, #3
 80066ca:	1c02      	adds	r2, r0, #0
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	1cbb      	adds	r3, r7, #2
 80066d0:	1c0a      	adds	r2, r1, #0
 80066d2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 80066d4:	230f      	movs	r3, #15
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	230f      	movs	r3, #15
 80066de:	18fa      	adds	r2, r7, r3
 80066e0:	1cbb      	adds	r3, r7, #2
 80066e2:	7812      	ldrb	r2, [r2, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d300      	bcc.n	80066ec <_ZN10Controller21SPI_writeDataRegisterEhh+0x30>
 80066ea:	e138      	b.n	800695e <_ZN10Controller21SPI_writeDataRegisterEhh+0x2a2>
	{
		switch(i)
 80066ec:	230f      	movs	r3, #15
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b07      	cmp	r3, #7
 80066f4:	d900      	bls.n	80066f8 <_ZN10Controller21SPI_writeDataRegisterEhh+0x3c>
 80066f6:	e128      	b.n	800694a <_ZN10Controller21SPI_writeDataRegisterEhh+0x28e>
 80066f8:	009a      	lsls	r2, r3, #2
 80066fa:	4b9b      	ldr	r3, [pc, #620]	; (8006968 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2ac>)
 80066fc:	18d3      	adds	r3, r2, r3
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(0)->nbrTurns = buffer_SPI_rx[3] & 0b00000111;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	222b      	movs	r2, #43	; 0x2b
 8006706:	5c9c      	ldrb	r4, [r3, r2]
 8006708:	1cfb      	adds	r3, r7, #3
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3204      	adds	r2, #4
 8006710:	0092      	lsls	r2, r2, #2
 8006712:	58d3      	ldr	r3, [r2, r3]
 8006714:	2100      	movs	r1, #0
 8006716:	0018      	movs	r0, r3
 8006718:	f7fe fe30 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800671c:	0002      	movs	r2, r0
 800671e:	2307      	movs	r3, #7
 8006720:	4023      	ands	r3, r4
 8006722:	b2d9      	uxtb	r1, r3
 8006724:	2382      	movs	r3, #130	; 0x82
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->clockwise = (buffer_SPI_rx[3] & 0b00001000) >> 3;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	222b      	movs	r2, #43	; 0x2b
 800672e:	5c9b      	ldrb	r3, [r3, r2]
 8006730:	10db      	asrs	r3, r3, #3
 8006732:	b2dc      	uxtb	r4, r3
 8006734:	1cfb      	adds	r3, r7, #3
 8006736:	781a      	ldrb	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3204      	adds	r2, #4
 800673c:	0092      	lsls	r2, r2, #2
 800673e:	58d3      	ldr	r3, [r2, r3]
 8006740:	2100      	movs	r1, #0
 8006742:	0018      	movs	r0, r3
 8006744:	f7fe fe1a 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006748:	0002      	movs	r2, r0
 800674a:	2301      	movs	r3, #1
 800674c:	4023      	ands	r3, r4
 800674e:	b2d9      	uxtb	r1, r3
 8006750:	4b86      	ldr	r3, [pc, #536]	; (800696c <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b0>)
 8006752:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->nbrTurns = (buffer_SPI_rx[3] & 0b01110000) >> 4;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	222b      	movs	r2, #43	; 0x2b
 8006758:	5c9b      	ldrb	r3, [r3, r2]
 800675a:	111b      	asrs	r3, r3, #4
 800675c:	b2dc      	uxtb	r4, r3
 800675e:	1cfb      	adds	r3, r7, #3
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3204      	adds	r2, #4
 8006766:	0092      	lsls	r2, r2, #2
 8006768:	58d3      	ldr	r3, [r2, r3]
 800676a:	2101      	movs	r1, #1
 800676c:	0018      	movs	r0, r3
 800676e:	f7fe fe05 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006772:	0002      	movs	r2, r0
 8006774:	2307      	movs	r3, #7
 8006776:	4023      	ands	r3, r4
 8006778:	b2d9      	uxtb	r1, r3
 800677a:	2382      	movs	r3, #130	; 0x82
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->clockwise = (buffer_SPI_rx[3] & 0b10000000) >> 7;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	222b      	movs	r2, #43	; 0x2b
 8006784:	5c9c      	ldrb	r4, [r3, r2]
 8006786:	1cfb      	adds	r3, r7, #3
 8006788:	781a      	ldrb	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3204      	adds	r2, #4
 800678e:	0092      	lsls	r2, r2, #2
 8006790:	58d3      	ldr	r3, [r2, r3]
 8006792:	2101      	movs	r1, #1
 8006794:	0018      	movs	r0, r3
 8006796:	f7fe fdf1 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800679a:	0002      	movs	r2, r0
 800679c:	09e3      	lsrs	r3, r4, #7
 800679e:	b2d9      	uxtb	r1, r3
 80067a0:	4b72      	ldr	r3, [pc, #456]	; (800696c <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b0>)
 80067a2:	54d1      	strb	r1, [r2, r3]
			break;
 80067a4:	e0d4      	b.n	8006950 <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 1:
			_clock[clkAddr]->getWatchPointer(0)->newPosition = buffer_SPI_rx[4];
 80067a6:	1cfb      	adds	r3, r7, #3
 80067a8:	781a      	ldrb	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3204      	adds	r2, #4
 80067ae:	0092      	lsls	r2, r2, #2
 80067b0:	58d3      	ldr	r3, [r2, r3]
 80067b2:	2100      	movs	r1, #0
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7fe fde1 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80067ba:	0001      	movs	r1, r0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	222c      	movs	r2, #44	; 0x2c
 80067c0:	5c9a      	ldrb	r2, [r3, r2]
 80067c2:	4b6b      	ldr	r3, [pc, #428]	; (8006970 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b4>)
 80067c4:	54ca      	strb	r2, [r1, r3]
			break;
 80067c6:	e0c3      	b.n	8006950 <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 2:
			_clock[clkAddr]->getWatchPointer(0)->offsetStartTime = buffer_SPI_rx[5] & 0b00001111;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	222d      	movs	r2, #45	; 0x2d
 80067cc:	5c9c      	ldrb	r4, [r3, r2]
 80067ce:	1cfb      	adds	r3, r7, #3
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3204      	adds	r2, #4
 80067d6:	0092      	lsls	r2, r2, #2
 80067d8:	58d3      	ldr	r3, [r2, r3]
 80067da:	2100      	movs	r1, #0
 80067dc:	0018      	movs	r0, r3
 80067de:	f7fe fdcd 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80067e2:	0002      	movs	r2, r0
 80067e4:	230f      	movs	r3, #15
 80067e6:	4023      	ands	r3, r4
 80067e8:	b2d9      	uxtb	r1, r3
 80067ea:	4b62      	ldr	r3, [pc, #392]	; (8006974 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b8>)
 80067ec:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->movmentDurationTime = (buffer_SPI_rx[5] & 0b11110000) >> 4;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	222d      	movs	r2, #45	; 0x2d
 80067f2:	5c9c      	ldrb	r4, [r3, r2]
 80067f4:	1cfb      	adds	r3, r7, #3
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3204      	adds	r2, #4
 80067fc:	0092      	lsls	r2, r2, #2
 80067fe:	58d3      	ldr	r3, [r2, r3]
 8006800:	2100      	movs	r1, #0
 8006802:	0018      	movs	r0, r3
 8006804:	f7fe fdba 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006808:	0002      	movs	r2, r0
 800680a:	0923      	lsrs	r3, r4, #4
 800680c:	b2d9      	uxtb	r1, r3
 800680e:	2383      	movs	r3, #131	; 0x83
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	54d1      	strb	r1, [r2, r3]
			break;
 8006814:	e09c      	b.n	8006950 <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 3:
			_clock[clkAddr]->getWatchPointer(1)->newPosition = buffer_SPI_rx[6];
 8006816:	1cfb      	adds	r3, r7, #3
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3204      	adds	r2, #4
 800681e:	0092      	lsls	r2, r2, #2
 8006820:	58d3      	ldr	r3, [r2, r3]
 8006822:	2101      	movs	r1, #1
 8006824:	0018      	movs	r0, r3
 8006826:	f7fe fda9 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800682a:	0001      	movs	r1, r0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	222e      	movs	r2, #46	; 0x2e
 8006830:	5c9a      	ldrb	r2, [r3, r2]
 8006832:	4b4f      	ldr	r3, [pc, #316]	; (8006970 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b4>)
 8006834:	54ca      	strb	r2, [r1, r3]
			break;
 8006836:	e08b      	b.n	8006950 <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 4:
			_clock[clkAddr]->getWatchPointer(1)->offsetStartTime = buffer_SPI_rx[7] & 0b00001111;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	222f      	movs	r2, #47	; 0x2f
 800683c:	5c9c      	ldrb	r4, [r3, r2]
 800683e:	1cfb      	adds	r3, r7, #3
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3204      	adds	r2, #4
 8006846:	0092      	lsls	r2, r2, #2
 8006848:	58d3      	ldr	r3, [r2, r3]
 800684a:	2101      	movs	r1, #1
 800684c:	0018      	movs	r0, r3
 800684e:	f7fe fd95 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006852:	0002      	movs	r2, r0
 8006854:	230f      	movs	r3, #15
 8006856:	4023      	ands	r3, r4
 8006858:	b2d9      	uxtb	r1, r3
 800685a:	4b46      	ldr	r3, [pc, #280]	; (8006974 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b8>)
 800685c:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->movmentDurationTime = (buffer_SPI_rx[7] & 0b11110000) >> 4;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	222f      	movs	r2, #47	; 0x2f
 8006862:	5c9c      	ldrb	r4, [r3, r2]
 8006864:	1cfb      	adds	r3, r7, #3
 8006866:	781a      	ldrb	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3204      	adds	r2, #4
 800686c:	0092      	lsls	r2, r2, #2
 800686e:	58d3      	ldr	r3, [r2, r3]
 8006870:	2101      	movs	r1, #1
 8006872:	0018      	movs	r0, r3
 8006874:	f7fe fd82 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006878:	0002      	movs	r2, r0
 800687a:	0923      	lsrs	r3, r4, #4
 800687c:	b2d9      	uxtb	r1, r3
 800687e:	2383      	movs	r3, #131	; 0x83
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	54d1      	strb	r1, [r2, r3]
			break;
 8006884:	e064      	b.n	8006950 <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 5:
			_clock[clkAddr]->getWatchPointer(2)->nbrTurns = buffer_SPI_rx[8] & 0b00000111;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2230      	movs	r2, #48	; 0x30
 800688a:	5c9c      	ldrb	r4, [r3, r2]
 800688c:	1cfb      	adds	r3, r7, #3
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3204      	adds	r2, #4
 8006894:	0092      	lsls	r2, r2, #2
 8006896:	58d3      	ldr	r3, [r2, r3]
 8006898:	2102      	movs	r1, #2
 800689a:	0018      	movs	r0, r3
 800689c:	f7fe fd6e 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80068a0:	0002      	movs	r2, r0
 80068a2:	2307      	movs	r3, #7
 80068a4:	4023      	ands	r3, r4
 80068a6:	b2d9      	uxtb	r1, r3
 80068a8:	2382      	movs	r3, #130	; 0x82
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(2)->clockwise = (buffer_SPI_rx[8] & 0b00001000) >> 3;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2230      	movs	r2, #48	; 0x30
 80068b2:	5c9b      	ldrb	r3, [r3, r2]
 80068b4:	10db      	asrs	r3, r3, #3
 80068b6:	b2dc      	uxtb	r4, r3
 80068b8:	1cfb      	adds	r3, r7, #3
 80068ba:	781a      	ldrb	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3204      	adds	r2, #4
 80068c0:	0092      	lsls	r2, r2, #2
 80068c2:	58d3      	ldr	r3, [r2, r3]
 80068c4:	2102      	movs	r1, #2
 80068c6:	0018      	movs	r0, r3
 80068c8:	f7fe fd58 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80068cc:	0002      	movs	r2, r0
 80068ce:	2301      	movs	r3, #1
 80068d0:	4023      	ands	r3, r4
 80068d2:	b2d9      	uxtb	r1, r3
 80068d4:	4b25      	ldr	r3, [pc, #148]	; (800696c <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b0>)
 80068d6:	54d1      	strb	r1, [r2, r3]
			break;
 80068d8:	e03a      	b.n	8006950 <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 6:
			_clock[clkAddr]->getWatchPointer(2)->newPosition = buffer_SPI_rx[9];
 80068da:	1cfb      	adds	r3, r7, #3
 80068dc:	781a      	ldrb	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3204      	adds	r2, #4
 80068e2:	0092      	lsls	r2, r2, #2
 80068e4:	58d3      	ldr	r3, [r2, r3]
 80068e6:	2102      	movs	r1, #2
 80068e8:	0018      	movs	r0, r3
 80068ea:	f7fe fd47 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80068ee:	0001      	movs	r1, r0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2231      	movs	r2, #49	; 0x31
 80068f4:	5c9a      	ldrb	r2, [r3, r2]
 80068f6:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b4>)
 80068f8:	54ca      	strb	r2, [r1, r3]
			break;
 80068fa:	e029      	b.n	8006950 <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 7:
			_clock[clkAddr]->getWatchPointer(2)->offsetStartTime = buffer_SPI_rx[10] & 0b00001111;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2232      	movs	r2, #50	; 0x32
 8006900:	5c9c      	ldrb	r4, [r3, r2]
 8006902:	1cfb      	adds	r3, r7, #3
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3204      	adds	r2, #4
 800690a:	0092      	lsls	r2, r2, #2
 800690c:	58d3      	ldr	r3, [r2, r3]
 800690e:	2102      	movs	r1, #2
 8006910:	0018      	movs	r0, r3
 8006912:	f7fe fd33 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006916:	0002      	movs	r2, r0
 8006918:	230f      	movs	r3, #15
 800691a:	4023      	ands	r3, r4
 800691c:	b2d9      	uxtb	r1, r3
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b8>)
 8006920:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(2)->movmentDurationTime = (buffer_SPI_rx[10] & 0b11110000) >> 4;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2232      	movs	r2, #50	; 0x32
 8006926:	5c9c      	ldrb	r4, [r3, r2]
 8006928:	1cfb      	adds	r3, r7, #3
 800692a:	781a      	ldrb	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3204      	adds	r2, #4
 8006930:	0092      	lsls	r2, r2, #2
 8006932:	58d3      	ldr	r3, [r2, r3]
 8006934:	2102      	movs	r1, #2
 8006936:	0018      	movs	r0, r3
 8006938:	f7fe fd20 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800693c:	0002      	movs	r2, r0
 800693e:	0923      	lsrs	r3, r4, #4
 8006940:	b2d9      	uxtb	r1, r3
 8006942:	2383      	movs	r3, #131	; 0x83
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	54d1      	strb	r1, [r2, r3]
			break;
 8006948:	e002      	b.n	8006950 <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		default:
			Error_Handler();
 800694a:	f7fa f8d1 	bl	8000af0 <Error_Handler>
			break;
 800694e:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 8006950:	210f      	movs	r1, #15
 8006952:	187b      	adds	r3, r7, r1
 8006954:	781a      	ldrb	r2, [r3, #0]
 8006956:	187b      	adds	r3, r7, r1
 8006958:	3201      	adds	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e6be      	b.n	80066dc <_ZN10Controller21SPI_writeDataRegisterEhh+0x20>
		}
	}
}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b005      	add	sp, #20
 8006964:	bd90      	pop	{r4, r7, pc}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	0800c3a0 	.word	0x0800c3a0
 800696c:	00000207 	.word	0x00000207
 8006970:	00000209 	.word	0x00000209
 8006974:	0000020b 	.word	0x0000020b

08006978 <_ZN10Controller23SPI_writeDataRegister_0Ehh>:

//Data register for watch pointer n°0
void Controller::SPI_writeDataRegister_0(uint8_t clkAddr, uint8_t nbrBytes)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	0008      	movs	r0, r1
 8006982:	0011      	movs	r1, r2
 8006984:	1cfb      	adds	r3, r7, #3
 8006986:	1c02      	adds	r2, r0, #0
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	1cbb      	adds	r3, r7, #2
 800698c:	1c0a      	adds	r2, r1, #0
 800698e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 8006990:	230f      	movs	r3, #15
 8006992:	18fb      	adds	r3, r7, r3
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	230f      	movs	r3, #15
 800699a:	18fa      	adds	r2, r7, r3
 800699c:	1cbb      	adds	r3, r7, #2
 800699e:	7812      	ldrb	r2, [r2, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d276      	bcs.n	8006a94 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x11c>
	{
		switch(i)
 80069a6:	230f      	movs	r3, #15
 80069a8:	18fb      	adds	r3, r7, r3
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b07      	cmp	r3, #7
 80069ae:	d866      	bhi.n	8006a7e <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x106>
 80069b0:	009a      	lsls	r2, r3, #2
 80069b2:	4b3a      	ldr	r3, [pc, #232]	; (8006a9c <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x124>)
 80069b4:	18d3      	adds	r3, r2, r3
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(0)->nbrTurns = buffer_SPI_rx[3] & 0b00000111;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	222b      	movs	r2, #43	; 0x2b
 80069be:	5c9c      	ldrb	r4, [r3, r2]
 80069c0:	1cfb      	adds	r3, r7, #3
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3204      	adds	r2, #4
 80069c8:	0092      	lsls	r2, r2, #2
 80069ca:	58d3      	ldr	r3, [r2, r3]
 80069cc:	2100      	movs	r1, #0
 80069ce:	0018      	movs	r0, r3
 80069d0:	f7fe fcd4 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80069d4:	0002      	movs	r2, r0
 80069d6:	2307      	movs	r3, #7
 80069d8:	4023      	ands	r3, r4
 80069da:	b2d9      	uxtb	r1, r3
 80069dc:	2382      	movs	r3, #130	; 0x82
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->clockwise = (buffer_SPI_rx[3] & 0b00001000) >> 3;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	222b      	movs	r2, #43	; 0x2b
 80069e6:	5c9b      	ldrb	r3, [r3, r2]
 80069e8:	10db      	asrs	r3, r3, #3
 80069ea:	b2dc      	uxtb	r4, r3
 80069ec:	1cfb      	adds	r3, r7, #3
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3204      	adds	r2, #4
 80069f4:	0092      	lsls	r2, r2, #2
 80069f6:	58d3      	ldr	r3, [r2, r3]
 80069f8:	2100      	movs	r1, #0
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7fe fcbe 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006a00:	0002      	movs	r2, r0
 8006a02:	2301      	movs	r3, #1
 8006a04:	4023      	ands	r3, r4
 8006a06:	b2d9      	uxtb	r1, r3
 8006a08:	4b25      	ldr	r3, [pc, #148]	; (8006aa0 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x128>)
 8006a0a:	54d1      	strb	r1, [r2, r3]
			break;
 8006a0c:	e03b      	b.n	8006a86 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x10e>
		case 1:
			_clock[clkAddr]->getWatchPointer(0)->newPosition = buffer_SPI_rx[4];
 8006a0e:	1cfb      	adds	r3, r7, #3
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3204      	adds	r2, #4
 8006a16:	0092      	lsls	r2, r2, #2
 8006a18:	58d3      	ldr	r3, [r2, r3]
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7fe fcad 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006a22:	0001      	movs	r1, r0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	222c      	movs	r2, #44	; 0x2c
 8006a28:	5c9a      	ldrb	r2, [r3, r2]
 8006a2a:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x12c>)
 8006a2c:	54ca      	strb	r2, [r1, r3]
			break;
 8006a2e:	e02a      	b.n	8006a86 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x10e>
		case 2:
			_clock[clkAddr]->getWatchPointer(0)->offsetStartTime = buffer_SPI_rx[5] & 0b00001111;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	222d      	movs	r2, #45	; 0x2d
 8006a34:	5c9c      	ldrb	r4, [r3, r2]
 8006a36:	1cfb      	adds	r3, r7, #3
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3204      	adds	r2, #4
 8006a3e:	0092      	lsls	r2, r2, #2
 8006a40:	58d3      	ldr	r3, [r2, r3]
 8006a42:	2100      	movs	r1, #0
 8006a44:	0018      	movs	r0, r3
 8006a46:	f7fe fc99 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006a4a:	0002      	movs	r2, r0
 8006a4c:	230f      	movs	r3, #15
 8006a4e:	4023      	ands	r3, r4
 8006a50:	b2d9      	uxtb	r1, r3
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x130>)
 8006a54:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->movmentDurationTime = (buffer_SPI_rx[5] & 0b11110000) >> 4;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	222d      	movs	r2, #45	; 0x2d
 8006a5a:	5c9c      	ldrb	r4, [r3, r2]
 8006a5c:	1cfb      	adds	r3, r7, #3
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3204      	adds	r2, #4
 8006a64:	0092      	lsls	r2, r2, #2
 8006a66:	58d3      	ldr	r3, [r2, r3]
 8006a68:	2100      	movs	r1, #0
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7fe fc86 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006a70:	0002      	movs	r2, r0
 8006a72:	0923      	lsrs	r3, r4, #4
 8006a74:	b2d9      	uxtb	r1, r3
 8006a76:	2383      	movs	r3, #131	; 0x83
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	54d1      	strb	r1, [r2, r3]
			break;
 8006a7c:	e003      	b.n	8006a86 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x10e>
		case 6:
			break;
		case 7:
			break;
		default:
			Error_Handler();
 8006a7e:	f7fa f837 	bl	8000af0 <Error_Handler>
			break;
 8006a82:	e000      	b.n	8006a86 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x10e>
			break;
 8006a84:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 8006a86:	210f      	movs	r1, #15
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	781a      	ldrb	r2, [r3, #0]
 8006a8c:	187b      	adds	r3, r7, r1
 8006a8e:	3201      	adds	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e781      	b.n	8006998 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x20>
		}
	}
}
 8006a94:	46c0      	nop			; (mov r8, r8)
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b005      	add	sp, #20
 8006a9a:	bd90      	pop	{r4, r7, pc}
 8006a9c:	0800c3c0 	.word	0x0800c3c0
 8006aa0:	00000207 	.word	0x00000207
 8006aa4:	00000209 	.word	0x00000209
 8006aa8:	0000020b 	.word	0x0000020b

08006aac <_ZN10Controller23SPI_writeDataRegister_1Ehh>:

//Data register for watch pointer n°1
void Controller::SPI_writeDataRegister_1(uint8_t clkAddr, uint8_t nbrBytes)
{
 8006aac:	b590      	push	{r4, r7, lr}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	0008      	movs	r0, r1
 8006ab6:	0011      	movs	r1, r2
 8006ab8:	1cfb      	adds	r3, r7, #3
 8006aba:	1c02      	adds	r2, r0, #0
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	1cbb      	adds	r3, r7, #2
 8006ac0:	1c0a      	adds	r2, r1, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 8006ac4:	230f      	movs	r3, #15
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	230f      	movs	r3, #15
 8006ace:	18fa      	adds	r2, r7, r3
 8006ad0:	1cbb      	adds	r3, r7, #2
 8006ad2:	7812      	ldrb	r2, [r2, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d276      	bcs.n	8006bc8 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x11c>
	{
		switch(i)
 8006ada:	230f      	movs	r3, #15
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b07      	cmp	r3, #7
 8006ae2:	d866      	bhi.n	8006bb2 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x106>
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	4b3a      	ldr	r3, [pc, #232]	; (8006bd0 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x124>)
 8006ae8:	18d3      	adds	r3, r2, r3
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(1)->nbrTurns = buffer_SPI_rx[3] & 0b00000111;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	222b      	movs	r2, #43	; 0x2b
 8006af2:	5c9c      	ldrb	r4, [r3, r2]
 8006af4:	1cfb      	adds	r3, r7, #3
 8006af6:	781a      	ldrb	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3204      	adds	r2, #4
 8006afc:	0092      	lsls	r2, r2, #2
 8006afe:	58d3      	ldr	r3, [r2, r3]
 8006b00:	2101      	movs	r1, #1
 8006b02:	0018      	movs	r0, r3
 8006b04:	f7fe fc3a 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006b08:	0002      	movs	r2, r0
 8006b0a:	2307      	movs	r3, #7
 8006b0c:	4023      	ands	r3, r4
 8006b0e:	b2d9      	uxtb	r1, r3
 8006b10:	2382      	movs	r3, #130	; 0x82
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->clockwise = (buffer_SPI_rx[3] & 0b00001000) >> 3;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	222b      	movs	r2, #43	; 0x2b
 8006b1a:	5c9b      	ldrb	r3, [r3, r2]
 8006b1c:	10db      	asrs	r3, r3, #3
 8006b1e:	b2dc      	uxtb	r4, r3
 8006b20:	1cfb      	adds	r3, r7, #3
 8006b22:	781a      	ldrb	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3204      	adds	r2, #4
 8006b28:	0092      	lsls	r2, r2, #2
 8006b2a:	58d3      	ldr	r3, [r2, r3]
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f7fe fc24 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006b34:	0002      	movs	r2, r0
 8006b36:	2301      	movs	r3, #1
 8006b38:	4023      	ands	r3, r4
 8006b3a:	b2d9      	uxtb	r1, r3
 8006b3c:	4b25      	ldr	r3, [pc, #148]	; (8006bd4 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x128>)
 8006b3e:	54d1      	strb	r1, [r2, r3]
			break;
 8006b40:	e03b      	b.n	8006bba <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x10e>
		case 1:
			_clock[clkAddr]->getWatchPointer(1)->newPosition = buffer_SPI_rx[4];
 8006b42:	1cfb      	adds	r3, r7, #3
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3204      	adds	r2, #4
 8006b4a:	0092      	lsls	r2, r2, #2
 8006b4c:	58d3      	ldr	r3, [r2, r3]
 8006b4e:	2101      	movs	r1, #1
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7fe fc13 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006b56:	0001      	movs	r1, r0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	222c      	movs	r2, #44	; 0x2c
 8006b5c:	5c9a      	ldrb	r2, [r3, r2]
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x12c>)
 8006b60:	54ca      	strb	r2, [r1, r3]
			break;
 8006b62:	e02a      	b.n	8006bba <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x10e>
		case 2:
			_clock[clkAddr]->getWatchPointer(1)->offsetStartTime = buffer_SPI_rx[5] & 0b00001111;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	222d      	movs	r2, #45	; 0x2d
 8006b68:	5c9c      	ldrb	r4, [r3, r2]
 8006b6a:	1cfb      	adds	r3, r7, #3
 8006b6c:	781a      	ldrb	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3204      	adds	r2, #4
 8006b72:	0092      	lsls	r2, r2, #2
 8006b74:	58d3      	ldr	r3, [r2, r3]
 8006b76:	2101      	movs	r1, #1
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f7fe fbff 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006b7e:	0002      	movs	r2, r0
 8006b80:	230f      	movs	r3, #15
 8006b82:	4023      	ands	r3, r4
 8006b84:	b2d9      	uxtb	r1, r3
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x130>)
 8006b88:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->movmentDurationTime = (buffer_SPI_rx[5] & 0b11110000) >> 4;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	222d      	movs	r2, #45	; 0x2d
 8006b8e:	5c9c      	ldrb	r4, [r3, r2]
 8006b90:	1cfb      	adds	r3, r7, #3
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3204      	adds	r2, #4
 8006b98:	0092      	lsls	r2, r2, #2
 8006b9a:	58d3      	ldr	r3, [r2, r3]
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7fe fbec 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8006ba4:	0002      	movs	r2, r0
 8006ba6:	0923      	lsrs	r3, r4, #4
 8006ba8:	b2d9      	uxtb	r1, r3
 8006baa:	2383      	movs	r3, #131	; 0x83
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	54d1      	strb	r1, [r2, r3]
			break;
 8006bb0:	e003      	b.n	8006bba <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x10e>
		case 6:
			break;
		case 7:
			break;
		default:
			Error_Handler();
 8006bb2:	f7f9 ff9d 	bl	8000af0 <Error_Handler>
			break;
 8006bb6:	e000      	b.n	8006bba <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x10e>
			break;
 8006bb8:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 8006bba:	210f      	movs	r1, #15
 8006bbc:	187b      	adds	r3, r7, r1
 8006bbe:	781a      	ldrb	r2, [r3, #0]
 8006bc0:	187b      	adds	r3, r7, r1
 8006bc2:	3201      	adds	r2, #1
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	e781      	b.n	8006acc <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x20>
		}
	}
}
 8006bc8:	46c0      	nop			; (mov r8, r8)
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b005      	add	sp, #20
 8006bce:	bd90      	pop	{r4, r7, pc}
 8006bd0:	0800c3e0 	.word	0x0800c3e0
 8006bd4:	00000207 	.word	0x00000207
 8006bd8:	00000209 	.word	0x00000209
 8006bdc:	0000020b 	.word	0x0000020b

08006be0 <_ZN10Controller23SPI_writeDataRegister_2Ehh>:

//Data register for watch pointer n°2
//Used only with triaxes movments
void Controller::SPI_writeDataRegister_2(uint8_t clkAddr, uint8_t nbrBytes)
{}
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	0008      	movs	r0, r1
 8006bea:	0011      	movs	r1, r2
 8006bec:	1cfb      	adds	r3, r7, #3
 8006bee:	1c02      	adds	r2, r0, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	1cbb      	adds	r3, r7, #2
 8006bf4:	1c0a      	adds	r2, r1, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	46c0      	nop			; (mov r8, r8)
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	b002      	add	sp, #8
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <_ZN10Controller19SPI_readConfigBytesEv>:

void Controller::SPI_readConfigBytes()
{
 8006c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	uint8_t nbrBytes = buffer_SPI_rx[1];
 8006c08:	230e      	movs	r3, #14
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	2129      	movs	r1, #41	; 0x29
 8006c10:	5c52      	ldrb	r2, [r2, r1]
 8006c12:	701a      	strb	r2, [r3, #0]
	uint8_t indexRegister = buffer_SPI_rx[2];
 8006c14:	200d      	movs	r0, #13
 8006c16:	183b      	adds	r3, r7, r0
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	212a      	movs	r1, #42	; 0x2a
 8006c1c:	5c52      	ldrb	r2, [r2, r1]
 8006c1e:	701a      	strb	r2, [r3, #0]
	//First, read data bytes
	//Then, write on each variables
	for(uint8_t i=indexRegister; i<nbrBytes; i++)
 8006c20:	230f      	movs	r3, #15
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	183a      	adds	r2, r7, r0
 8006c26:	7812      	ldrb	r2, [r2, #0]
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	230f      	movs	r3, #15
 8006c2c:	18fa      	adds	r2, r7, r3
 8006c2e:	230e      	movs	r3, #14
 8006c30:	18fb      	adds	r3, r7, r3
 8006c32:	7812      	ldrb	r2, [r2, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d300      	bcc.n	8006c3c <_ZN10Controller19SPI_readConfigBytesEv+0x3c>
 8006c3a:	e078      	b.n	8006d2e <_ZN10Controller19SPI_readConfigBytesEv+0x12e>
	{
		switch(i)
 8006c3c:	230f      	movs	r3, #15
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b07      	cmp	r3, #7
 8006c44:	d866      	bhi.n	8006d14 <_ZN10Controller19SPI_readConfigBytesEv+0x114>
 8006c46:	009a      	lsls	r2, r3, #2
 8006c48:	4b3b      	ldr	r3, [pc, #236]	; (8006d38 <_ZN10Controller19SPI_readConfigBytesEv+0x138>)
 8006c4a:	18d3      	adds	r3, r2, r3
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	469f      	mov	pc, r3
		{
		case 0:
			statusBytes = buffer_SPI_rx[i+3];
 8006c50:	230f      	movs	r3, #15
 8006c52:	18fb      	adds	r3, r7, r3
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	3303      	adds	r3, #3
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	2128      	movs	r1, #40	; 0x28
 8006c5c:	18d3      	adds	r3, r2, r3
 8006c5e:	185b      	adds	r3, r3, r1
 8006c60:	7819      	ldrb	r1, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2247      	movs	r2, #71	; 0x47
 8006c66:	5499      	strb	r1, [r3, r2]
			if(((statusBytes & 0b00100000) >> 5) == true)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2247      	movs	r2, #71	; 0x47
 8006c6c:	5c9b      	ldrb	r3, [r3, r2]
 8006c6e:	001a      	movs	r2, r3
 8006c70:	2320      	movs	r3, #32
 8006c72:	4013      	ands	r3, r2
 8006c74:	d00f      	beq.n	8006c96 <_ZN10Controller19SPI_readConfigBytesEv+0x96>
			{
				GEN(evGoToZero());		//FLAG GO TO ZERO
 8006c76:	687d      	ldr	r5, [r7, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	681c      	ldr	r4, [r3, #0]
 8006c80:	2014      	movs	r0, #20
 8006c82:	f004 f9dc 	bl	800b03e <_Znwj>
 8006c86:	0003      	movs	r3, r0
 8006c88:	001e      	movs	r6, r3
 8006c8a:	0030      	movs	r0, r6
 8006c8c:	f001 faf2 	bl	8008274 <_ZN10evGoToZeroC1Ev>
 8006c90:	0031      	movs	r1, r6
 8006c92:	0028      	movs	r0, r5
 8006c94:	47a0      	blx	r4
			}
			if(((statusBytes & 0b00010000)>>4) == true)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2247      	movs	r2, #71	; 0x47
 8006c9a:	5c9b      	ldrb	r3, [r3, r2]
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d03c      	beq.n	8006d1e <_ZN10Controller19SPI_readConfigBytesEv+0x11e>
			{
				GEN(evFlagTrigger());	//FLAG TRIGGER
 8006ca4:	687d      	ldr	r5, [r7, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	330c      	adds	r3, #12
 8006cac:	681c      	ldr	r4, [r3, #0]
 8006cae:	2014      	movs	r0, #20
 8006cb0:	f004 f9c5 	bl	800b03e <_Znwj>
 8006cb4:	0003      	movs	r3, r0
 8006cb6:	001e      	movs	r6, r3
 8006cb8:	0030      	movs	r0, r6
 8006cba:	f001 faa3 	bl	8008204 <_ZN13evFlagTriggerC1Ev>
 8006cbe:	0031      	movs	r1, r6
 8006cc0:	0028      	movs	r0, r5
 8006cc2:	47a0      	blx	r4
			}
			break;
 8006cc4:	e02b      	b.n	8006d1e <_ZN10Controller19SPI_readConfigBytesEv+0x11e>
		case 1:
			startTime = buffer_SPI_rx[i+3];
 8006cc6:	230f      	movs	r3, #15
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	3303      	adds	r3, #3
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	2128      	movs	r1, #40	; 0x28
 8006cd2:	18d3      	adds	r3, r2, r3
 8006cd4:	185b      	adds	r3, r3, r1
 8006cd6:	7819      	ldrb	r1, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2248      	movs	r2, #72	; 0x48
 8006cdc:	5499      	strb	r1, [r3, r2]
			break;
 8006cde:	e01f      	b.n	8006d20 <_ZN10Controller19SPI_readConfigBytesEv+0x120>
		case 2:
			stopTime = buffer_SPI_rx[i+3];
 8006ce0:	230f      	movs	r3, #15
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	3303      	adds	r3, #3
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	2128      	movs	r1, #40	; 0x28
 8006cec:	18d3      	adds	r3, r2, r3
 8006cee:	185b      	adds	r3, r3, r1
 8006cf0:	7819      	ldrb	r1, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2249      	movs	r2, #73	; 0x49
 8006cf6:	5499      	strb	r1, [r3, r2]
			break;
 8006cf8:	e012      	b.n	8006d20 <_ZN10Controller19SPI_readConfigBytesEv+0x120>
		case 3:
			nbrWatchPtrClk = buffer_SPI_rx[i+3];
 8006cfa:	230f      	movs	r3, #15
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	3303      	adds	r3, #3
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	2128      	movs	r1, #40	; 0x28
 8006d06:	18d3      	adds	r3, r2, r3
 8006d08:	185b      	adds	r3, r3, r1
 8006d0a:	7819      	ldrb	r1, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2246      	movs	r2, #70	; 0x46
 8006d10:	5499      	strb	r1, [r3, r2]
			break;
 8006d12:	e005      	b.n	8006d20 <_ZN10Controller19SPI_readConfigBytesEv+0x120>
			break;
		case 7:
			//Free
			break;
		default:
			Error_Handler();
 8006d14:	f7f9 feec 	bl	8000af0 <Error_Handler>
			break;
 8006d18:	e002      	b.n	8006d20 <_ZN10Controller19SPI_readConfigBytesEv+0x120>
			break;
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	e000      	b.n	8006d20 <_ZN10Controller19SPI_readConfigBytesEv+0x120>
			break;
 8006d1e:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=indexRegister; i<nbrBytes; i++)
 8006d20:	210f      	movs	r1, #15
 8006d22:	187b      	adds	r3, r7, r1
 8006d24:	781a      	ldrb	r2, [r3, #0]
 8006d26:	187b      	adds	r3, r7, r1
 8006d28:	3201      	adds	r2, #1
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	e77d      	b.n	8006c2a <_ZN10Controller19SPI_readConfigBytesEv+0x2a>
		}
	}
}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	46bd      	mov	sp, r7
 8006d32:	b005      	add	sp, #20
 8006d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	0800c400 	.word	0x0800c400

08006d3c <_ZN10Controller14CAN_writeFrameEv>:

//---------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------CAN------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------
void Controller::CAN_writeFrame()
{
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	uint8_t frameType = (buffer_SPI_rx[0]&0b11000000) >> 6;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2228      	movs	r2, #40	; 0x28
 8006d48:	5c9a      	ldrb	r2, [r3, r2]
 8006d4a:	200e      	movs	r0, #14
 8006d4c:	183b      	adds	r3, r7, r0
 8006d4e:	0992      	lsrs	r2, r2, #6
 8006d50:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef statusCAN;

	myTxMessage.StdId = 0x00;									//Message identifier -> 11 bits identifier (initialized)
 8006d52:	4b51      	ldr	r3, [pc, #324]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]
	myTxMessage.StdId += (buffer_SPI_rx[0]&0b11000000) << 3;	//2 bits = frame type (bit 10 & bit 9)
 8006d58:	4b4f      	ldr	r3, [pc, #316]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2128      	movs	r1, #40	; 0x28
 8006d60:	5c5b      	ldrb	r3, [r3, r1]
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	0019      	movs	r1, r3
 8006d66:	23c0      	movs	r3, #192	; 0xc0
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	400b      	ands	r3, r1
 8006d6c:	18d2      	adds	r2, r2, r3
 8006d6e:	4b4a      	ldr	r3, [pc, #296]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d70:	601a      	str	r2, [r3, #0]
	myTxMessage.StdId += (buffer_SPI_rx[0]&0b00001111) << 5;	//4 bits = Processor Address (bit 8 to bit 5)
 8006d72:	4b49      	ldr	r3, [pc, #292]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2128      	movs	r1, #40	; 0x28
 8006d7a:	5c5b      	ldrb	r3, [r3, r1]
 8006d7c:	015b      	lsls	r3, r3, #5
 8006d7e:	0019      	movs	r1, r3
 8006d80:	23f0      	movs	r3, #240	; 0xf0
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	400b      	ands	r3, r1
 8006d86:	18d2      	adds	r2, r2, r3
 8006d88:	4b43      	ldr	r3, [pc, #268]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d8a:	601a      	str	r2, [r3, #0]

	//myTxMessage.ExtId = 0x00;									//Used of 29 bits identifier
	myTxMessage.IDE = CAN_ID_STD;								//Used 11 bits identifier
 8006d8c:	4b42      	ldr	r3, [pc, #264]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
	myTxMessage.RTR = CAN_RTR_DATA;								//DATA frame
 8006d92:	4b41      	ldr	r3, [pc, #260]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	60da      	str	r2, [r3, #12]

	switch(frameType)
 8006d98:	183b      	adds	r3, r7, r0
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	dc04      	bgt.n	8006daa <_ZN10Controller14CAN_writeFrameEv+0x6e>
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	da2f      	bge.n	8006e04 <_ZN10Controller14CAN_writeFrameEv+0xc8>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <_ZN10Controller14CAN_writeFrameEv+0x74>
 8006da8:	e067      	b.n	8006e7a <_ZN10Controller14CAN_writeFrameEv+0x13e>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d03e      	beq.n	8006e2c <_ZN10Controller14CAN_writeFrameEv+0xf0>
 8006dae:	e064      	b.n	8006e7a <_ZN10Controller14CAN_writeFrameEv+0x13e>
	{
	case 0://Data frame
		myTxMessage.StdId += (buffer_SPI_rx[1]&0b00011100);		//3 bits = ClockAddress (bit 5 to bit 2)
 8006db0:	4b39      	ldr	r3, [pc, #228]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2129      	movs	r1, #41	; 0x29
 8006db8:	5c5b      	ldrb	r3, [r3, r1]
 8006dba:	0019      	movs	r1, r3
 8006dbc:	231c      	movs	r3, #28
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	18d2      	adds	r2, r2, r3
 8006dc2:	4b35      	ldr	r3, [pc, #212]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006dc4:	601a      	str	r2, [r3, #0]
		myTxMessage.StdId += (buffer_SPI_rx[1]&0b00000011);		//2 bits = Watch pointer address (bit 1 & bit 0)
 8006dc6:	4b34      	ldr	r3, [pc, #208]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2129      	movs	r1, #41	; 0x29
 8006dce:	5c5b      	ldrb	r3, [r3, r1]
 8006dd0:	0019      	movs	r1, r3
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	400b      	ands	r3, r1
 8006dd6:	18d2      	adds	r2, r2, r3
 8006dd8:	4b2f      	ldr	r3, [pc, #188]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006dda:	601a      	str	r2, [r3, #0]

		myTxMessage.DLC = buffer_SPI_rx[2];						//Data Length Code
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	222a      	movs	r2, #42	; 0x2a
 8006de0:	5c9b      	ldrb	r3, [r3, r2]
 8006de2:	001a      	movs	r2, r3
 8006de4:	4b2c      	ldr	r3, [pc, #176]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006de6:	611a      	str	r2, [r3, #16]
		statusCAN = HAL_CAN_AddTxMessage(&hcan, &myTxMessage, &buffer_SPI_rx[3], &TxMailbox);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	332b      	adds	r3, #43	; 0x2b
 8006dec:	001a      	movs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	333c      	adds	r3, #60	; 0x3c
 8006df2:	210f      	movs	r1, #15
 8006df4:	187c      	adds	r4, r7, r1
 8006df6:	4928      	ldr	r1, [pc, #160]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006df8:	4828      	ldr	r0, [pc, #160]	; (8006e9c <_ZN10Controller14CAN_writeFrameEv+0x160>)
 8006dfa:	f7fa fb9b 	bl	8001534 <HAL_CAN_AddTxMessage>
 8006dfe:	0003      	movs	r3, r0
 8006e00:	7023      	strb	r3, [r4, #0]
		break;
 8006e02:	e03d      	b.n	8006e80 <_ZN10Controller14CAN_writeFrameEv+0x144>
	case 1://Configuration frame
	case 2://Broadcast configuration frame
		myTxMessage.DLC = buffer_SPI_rx[1];						//Data Length Code
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2229      	movs	r2, #41	; 0x29
 8006e08:	5c9b      	ldrb	r3, [r3, r2]
 8006e0a:	001a      	movs	r2, r3
 8006e0c:	4b22      	ldr	r3, [pc, #136]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e0e:	611a      	str	r2, [r3, #16]
		statusCAN = HAL_CAN_AddTxMessage(&hcan, &myTxMessage, &buffer_SPI_rx[2], &TxMailbox);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	332a      	adds	r3, #42	; 0x2a
 8006e14:	001a      	movs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	333c      	adds	r3, #60	; 0x3c
 8006e1a:	210f      	movs	r1, #15
 8006e1c:	187c      	adds	r4, r7, r1
 8006e1e:	491e      	ldr	r1, [pc, #120]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e20:	481e      	ldr	r0, [pc, #120]	; (8006e9c <_ZN10Controller14CAN_writeFrameEv+0x160>)
 8006e22:	f7fa fb87 	bl	8001534 <HAL_CAN_AddTxMessage>
 8006e26:	0003      	movs	r3, r0
 8006e28:	7023      	strb	r3, [r4, #0]
		break;
 8006e2a:	e029      	b.n	8006e80 <_ZN10Controller14CAN_writeFrameEv+0x144>
	case 3://Reset position frame
		myTxMessage.StdId += (buffer_SPI_rx[1]&0b00011100);		//2 bits = ClockAddress (bit 5 to bit 2)
 8006e2c:	4b1a      	ldr	r3, [pc, #104]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2129      	movs	r1, #41	; 0x29
 8006e34:	5c5b      	ldrb	r3, [r3, r1]
 8006e36:	0019      	movs	r1, r3
 8006e38:	231c      	movs	r3, #28
 8006e3a:	400b      	ands	r3, r1
 8006e3c:	18d2      	adds	r2, r2, r3
 8006e3e:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e40:	601a      	str	r2, [r3, #0]
		myTxMessage.StdId += (buffer_SPI_rx[1]&0b00000011);		//4 bits = Watch pointer address (bit 1 & bit 0)
 8006e42:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2129      	movs	r1, #41	; 0x29
 8006e4a:	5c5b      	ldrb	r3, [r3, r1]
 8006e4c:	0019      	movs	r1, r3
 8006e4e:	2303      	movs	r3, #3
 8006e50:	400b      	ands	r3, r1
 8006e52:	18d2      	adds	r2, r2, r3
 8006e54:	4b10      	ldr	r3, [pc, #64]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e56:	601a      	str	r2, [r3, #0]
		myTxMessage.DLC = 0;									//Data Length Code
 8006e58:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	611a      	str	r2, [r3, #16]
		statusCAN = HAL_CAN_AddTxMessage(&hcan, &myTxMessage, &buffer_SPI_rx[0], &TxMailbox);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3328      	adds	r3, #40	; 0x28
 8006e62:	001a      	movs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	333c      	adds	r3, #60	; 0x3c
 8006e68:	210f      	movs	r1, #15
 8006e6a:	187c      	adds	r4, r7, r1
 8006e6c:	490a      	ldr	r1, [pc, #40]	; (8006e98 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e6e:	480b      	ldr	r0, [pc, #44]	; (8006e9c <_ZN10Controller14CAN_writeFrameEv+0x160>)
 8006e70:	f7fa fb60 	bl	8001534 <HAL_CAN_AddTxMessage>
 8006e74:	0003      	movs	r3, r0
 8006e76:	7023      	strb	r3, [r4, #0]
		break;
 8006e78:	e002      	b.n	8006e80 <_ZN10Controller14CAN_writeFrameEv+0x144>
	default:
		Error_Handler();
 8006e7a:	f7f9 fe39 	bl	8000af0 <Error_Handler>
		break;
 8006e7e:	46c0      	nop			; (mov r8, r8)
	}

	if( statusCAN != HAL_OK )
 8006e80:	230f      	movs	r3, #15
 8006e82:	18fb      	adds	r3, r7, r3
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <_ZN10Controller14CAN_writeFrameEv+0x152>
	{
		Error_Handler();
 8006e8a:	f7f9 fe31 	bl	8000af0 <Error_Handler>
	}
}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b005      	add	sp, #20
 8006e94:	bd90      	pop	{r4, r7, pc}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	20000264 	.word	0x20000264
 8006e9c:	20000220 	.word	0x20000220

08006ea0 <_ZN10Controller13CAN_readFrameEv>:


void Controller::CAN_readFrame()
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	uint8_t frameType = (myRxMessage.StdId & 0b11000000000) >> 9;
 8006ea8:	4b18      	ldr	r3, [pc, #96]	; (8006f0c <_ZN10Controller13CAN_readFrameEv+0x6c>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	0a5b      	lsrs	r3, r3, #9
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	200f      	movs	r0, #15
 8006eb2:	183b      	adds	r3, r7, r0
 8006eb4:	2103      	movs	r1, #3
 8006eb6:	400a      	ands	r2, r1
 8006eb8:	701a      	strb	r2, [r3, #0]
	//uint8_t processorAddress = (myRxMessage.StdId & 0b00111100000) >> 5;
	//uint8_t clockAddress = (myRxMessage.StdId & 0b00000011100) >> 2;
	//uint8_t watchPointerAddress = (myRxMessage.StdId & 0b00000000011);

	switch(frameType)
 8006eba:	183b      	adds	r3, r7, r0
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d00d      	beq.n	8006ede <_ZN10Controller13CAN_readFrameEv+0x3e>
 8006ec2:	dc02      	bgt.n	8006eca <_ZN10Controller13CAN_readFrameEv+0x2a>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <_ZN10Controller13CAN_readFrameEv+0x34>
 8006ec8:	e018      	b.n	8006efc <_ZN10Controller13CAN_readFrameEv+0x5c>
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d00c      	beq.n	8006ee8 <_ZN10Controller13CAN_readFrameEv+0x48>
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d00f      	beq.n	8006ef2 <_ZN10Controller13CAN_readFrameEv+0x52>
 8006ed2:	e013      	b.n	8006efc <_ZN10Controller13CAN_readFrameEv+0x5c>
	{
	case 0:
		CAN_dataFrame();
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f000 f81a 	bl	8006f10 <_ZN10Controller13CAN_dataFrameEv>
		break;
 8006edc:	e011      	b.n	8006f02 <_ZN10Controller13CAN_readFrameEv+0x62>
	case 1:
		CAN_configurationFrame();
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f000 f833 	bl	8006f4c <_ZN10Controller22CAN_configurationFrameEv>
		break;
 8006ee6:	e00c      	b.n	8006f02 <_ZN10Controller13CAN_readFrameEv+0x62>
	case 2:
		CAN_broadcastConfigurationFrame();
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	0018      	movs	r0, r3
 8006eec:	f000 f84c 	bl	8006f88 <_ZN10Controller31CAN_broadcastConfigurationFrameEv>
		break;
 8006ef0:	e007      	b.n	8006f02 <_ZN10Controller13CAN_readFrameEv+0x62>
	case 3:
		CAN_resetPositionZeroFrame();
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 f853 	bl	8006fa0 <_ZN10Controller26CAN_resetPositionZeroFrameEv>
		break;
 8006efa:	e002      	b.n	8006f02 <_ZN10Controller13CAN_readFrameEv+0x62>
	default:
		Error_Handler();
 8006efc:	f7f9 fdf8 	bl	8000af0 <Error_Handler>
		break;
 8006f00:	46c0      	nop			; (mov r8, r8)
	}
}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	46bd      	mov	sp, r7
 8006f06:	b004      	add	sp, #16
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	20000248 	.word	0x20000248

08006f10 <_ZN10Controller13CAN_dataFrameEv>:

void Controller::CAN_dataFrame()
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	uint8_t processorAddress = (myRxMessage.StdId & 0b00111100000) >> 5;
 8006f18:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <_ZN10Controller13CAN_dataFrameEv+0x38>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	095b      	lsrs	r3, r3, #5
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	200f      	movs	r0, #15
 8006f22:	183b      	adds	r3, r7, r0
 8006f24:	210f      	movs	r1, #15
 8006f26:	400a      	ands	r2, r1
 8006f28:	701a      	strb	r2, [r3, #0]

	if(processorAddress == myAddress)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2245      	movs	r2, #69	; 0x45
 8006f2e:	5c9b      	ldrb	r3, [r3, r2]
 8006f30:	183a      	adds	r2, r7, r0
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d103      	bne.n	8006f40 <_ZN10Controller13CAN_dataFrameEv+0x30>
	{
		CAN_readDataBytes();
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 f880 	bl	8007040 <_ZN10Controller17CAN_readDataBytesEv>
	}
}
 8006f40:	46c0      	nop			; (mov r8, r8)
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b004      	add	sp, #16
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000248 	.word	0x20000248

08006f4c <_ZN10Controller22CAN_configurationFrameEv>:

void Controller::CAN_configurationFrame()
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	uint8_t processorAddress = (myRxMessage.StdId & 0b00111100000) >> 5;
 8006f54:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <_ZN10Controller22CAN_configurationFrameEv+0x38>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	200f      	movs	r0, #15
 8006f5e:	183b      	adds	r3, r7, r0
 8006f60:	210f      	movs	r1, #15
 8006f62:	400a      	ands	r2, r1
 8006f64:	701a      	strb	r2, [r3, #0]

	if(processorAddress == myAddress)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2245      	movs	r2, #69	; 0x45
 8006f6a:	5c9b      	ldrb	r3, [r3, r2]
 8006f6c:	183a      	adds	r2, r7, r0
 8006f6e:	7812      	ldrb	r2, [r2, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d103      	bne.n	8006f7c <_ZN10Controller22CAN_configurationFrameEv+0x30>
	{
		CAN_readConfigBytes();
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	0018      	movs	r0, r3
 8006f78:	f000 fb60 	bl	800763c <_ZN10Controller19CAN_readConfigBytesEv>
	}
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b004      	add	sp, #16
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20000248 	.word	0x20000248

08006f88 <_ZN10Controller31CAN_broadcastConfigurationFrameEv>:

void Controller::CAN_broadcastConfigurationFrame()
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	//Because broadcast
	CAN_readConfigBytes();
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	0018      	movs	r0, r3
 8006f94:	f000 fb52 	bl	800763c <_ZN10Controller19CAN_readConfigBytesEv>
}
 8006f98:	46c0      	nop			; (mov r8, r8)
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b002      	add	sp, #8
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <_ZN10Controller26CAN_resetPositionZeroFrameEv>:

void Controller::CAN_resetPositionZeroFrame()
{
 8006fa0:	b5b0      	push	{r4, r5, r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
	uint8_t processorAddress = (myRxMessage.StdId & 0b00111100000) >> 5;
 8006fa8:	4b22      	ldr	r3, [pc, #136]	; (8007034 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x94>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	200f      	movs	r0, #15
 8006fb2:	183b      	adds	r3, r7, r0
 8006fb4:	210f      	movs	r1, #15
 8006fb6:	400a      	ands	r2, r1
 8006fb8:	701a      	strb	r2, [r3, #0]

	if(processorAddress == myAddress)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2245      	movs	r2, #69	; 0x45
 8006fbe:	5c9b      	ldrb	r3, [r3, r2]
 8006fc0:	183a      	adds	r2, r7, r0
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d130      	bne.n	800702a <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x8a>
	{
		uint8_t clockAddress = (myRxMessage.StdId & 0b00000011100) >> 2;
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x94>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	089b      	lsrs	r3, r3, #2
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	240e      	movs	r4, #14
 8006fd2:	193b      	adds	r3, r7, r4
 8006fd4:	2107      	movs	r1, #7
 8006fd6:	400a      	ands	r2, r1
 8006fd8:	701a      	strb	r2, [r3, #0]
		uint8_t watchPointerAddress = (myRxMessage.StdId & 0b00000000011);
 8006fda:	4b16      	ldr	r3, [pc, #88]	; (8007034 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	250d      	movs	r5, #13
 8006fe2:	197b      	adds	r3, r7, r5
 8006fe4:	2103      	movs	r1, #3
 8006fe6:	400a      	ands	r2, r1
 8006fe8:	701a      	strb	r2, [r3, #0]
		//Reset position zero
		_clock[clockAddress]->getWatchPointer(watchPointerAddress)->newPosition = 0;
 8006fea:	193b      	adds	r3, r7, r4
 8006fec:	781a      	ldrb	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3204      	adds	r2, #4
 8006ff2:	0092      	lsls	r2, r2, #2
 8006ff4:	58d2      	ldr	r2, [r2, r3]
 8006ff6:	197b      	adds	r3, r7, r5
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	0010      	movs	r0, r2
 8006ffe:	f7fe f9bd 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007002:	0002      	movs	r2, r0
 8007004:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x98>)
 8007006:	2100      	movs	r1, #0
 8007008:	54d1      	strb	r1, [r2, r3]
		_clock[clockAddress]->getWatchPointer(watchPointerAddress)->actualPosition = 0;
 800700a:	193b      	adds	r3, r7, r4
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3204      	adds	r2, #4
 8007012:	0092      	lsls	r2, r2, #2
 8007014:	58d2      	ldr	r2, [r2, r3]
 8007016:	197b      	adds	r3, r7, r5
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	0019      	movs	r1, r3
 800701c:	0010      	movs	r0, r2
 800701e:	f7fe f9ad 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007022:	0002      	movs	r2, r0
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x9c>)
 8007026:	2100      	movs	r1, #0
 8007028:	54d1      	strb	r1, [r2, r3]
	}
}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	46bd      	mov	sp, r7
 800702e:	b004      	add	sp, #16
 8007030:	bdb0      	pop	{r4, r5, r7, pc}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	20000248 	.word	0x20000248
 8007038:	00000209 	.word	0x00000209
 800703c:	0000020a 	.word	0x0000020a

08007040 <_ZN10Controller17CAN_readDataBytesEv>:

void Controller::CAN_readDataBytes()
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
	uint8_t clkAddr = (myRxMessage.StdId & 0b00000011100) >> 2;	//3 bits
 8007048:	4b2a      	ldr	r3, [pc, #168]	; (80070f4 <_ZN10Controller17CAN_readDataBytesEv+0xb4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	089b      	lsrs	r3, r3, #2
 800704e:	b2da      	uxtb	r2, r3
 8007050:	230f      	movs	r3, #15
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	2107      	movs	r1, #7
 8007056:	400a      	ands	r2, r1
 8007058:	701a      	strb	r2, [r3, #0]
	uint8_t watchPtrAddress = (buffer_SPI_rx[1] & 0b00000011);	//2 bits
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2229      	movs	r2, #41	; 0x29
 800705e:	5c9a      	ldrb	r2, [r3, r2]
 8007060:	200e      	movs	r0, #14
 8007062:	183b      	adds	r3, r7, r0
 8007064:	2103      	movs	r1, #3
 8007066:	400a      	ands	r2, r1
 8007068:	701a      	strb	r2, [r3, #0]
	uint8_t nbrBytes = myRxMessage.DLC;
 800706a:	4b22      	ldr	r3, [pc, #136]	; (80070f4 <_ZN10Controller17CAN_readDataBytesEv+0xb4>)
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	230d      	movs	r3, #13
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	701a      	strb	r2, [r3, #0]


	//First, read data bytes
	//Then, write on each variables
	switch(watchPtrAddress)
 8007074:	183b      	adds	r3, r7, r0
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d013      	beq.n	80070a4 <_ZN10Controller17CAN_readDataBytesEv+0x64>
 800707c:	dc02      	bgt.n	8007084 <_ZN10Controller17CAN_readDataBytesEv+0x44>
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <_ZN10Controller17CAN_readDataBytesEv+0x4e>
 8007082:	e030      	b.n	80070e6 <_ZN10Controller17CAN_readDataBytesEv+0xa6>
 8007084:	2b02      	cmp	r3, #2
 8007086:	d018      	beq.n	80070ba <_ZN10Controller17CAN_readDataBytesEv+0x7a>
 8007088:	2b03      	cmp	r3, #3
 800708a:	d021      	beq.n	80070d0 <_ZN10Controller17CAN_readDataBytesEv+0x90>
 800708c:	e02b      	b.n	80070e6 <_ZN10Controller17CAN_readDataBytesEv+0xa6>
	{
	case 0:
		CAN_writeDataRegister_0(clkAddr, nbrBytes);	//Data frame for watch pointer 0
 800708e:	230d      	movs	r3, #13
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	230f      	movs	r3, #15
 8007096:	18fb      	adds	r3, r7, r3
 8007098:	7819      	ldrb	r1, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	0018      	movs	r0, r3
 800709e:	f000 f989 	bl	80073b4 <_ZN10Controller23CAN_writeDataRegister_0Ehh>
		break;
 80070a2:	e023      	b.n	80070ec <_ZN10Controller17CAN_readDataBytesEv+0xac>

	case 1:
		CAN_writeDataRegister_1(clkAddr, nbrBytes); //Data frame for watch pointer 1
 80070a4:	230d      	movs	r3, #13
 80070a6:	18fb      	adds	r3, r7, r3
 80070a8:	781a      	ldrb	r2, [r3, #0]
 80070aa:	230f      	movs	r3, #15
 80070ac:	18fb      	adds	r3, r7, r3
 80070ae:	7819      	ldrb	r1, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	0018      	movs	r0, r3
 80070b4:	f000 fa18 	bl	80074e8 <_ZN10Controller23CAN_writeDataRegister_1Ehh>
		break;
 80070b8:	e018      	b.n	80070ec <_ZN10Controller17CAN_readDataBytesEv+0xac>

	case 2:
		CAN_writeDataRegister_2(clkAddr, nbrBytes); //Data frame for watch pointer 2
 80070ba:	230d      	movs	r3, #13
 80070bc:	18fb      	adds	r3, r7, r3
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	230f      	movs	r3, #15
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	7819      	ldrb	r1, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0018      	movs	r0, r3
 80070ca:	f000 faa7 	bl	800761c <_ZN10Controller23CAN_writeDataRegister_2Ehh>
		break;
 80070ce:	e00d      	b.n	80070ec <_ZN10Controller17CAN_readDataBytesEv+0xac>

	case 3:
		CAN_writeDataRegister(clkAddr, nbrBytes); //Data frame for all watch pointer
 80070d0:	230d      	movs	r3, #13
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	781a      	ldrb	r2, [r3, #0]
 80070d6:	230f      	movs	r3, #15
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	7819      	ldrb	r1, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	0018      	movs	r0, r3
 80070e0:	f000 f80a 	bl	80070f8 <_ZN10Controller21CAN_writeDataRegisterEhh>
		break;
 80070e4:	e002      	b.n	80070ec <_ZN10Controller17CAN_readDataBytesEv+0xac>

	default:
		Error_Handler();
 80070e6:	f7f9 fd03 	bl	8000af0 <Error_Handler>
		break;
 80070ea:	46c0      	nop			; (mov r8, r8)
	}
}
 80070ec:	46c0      	nop			; (mov r8, r8)
 80070ee:	46bd      	mov	sp, r7
 80070f0:	b004      	add	sp, #16
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000248 	.word	0x20000248

080070f8 <_ZN10Controller21CAN_writeDataRegisterEhh>:

void Controller::CAN_writeDataRegister(uint8_t clkAddr, uint8_t nbrBytes)
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	0008      	movs	r0, r1
 8007102:	0011      	movs	r1, r2
 8007104:	1cfb      	adds	r3, r7, #3
 8007106:	1c02      	adds	r2, r0, #0
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	1cbb      	adds	r3, r7, #2
 800710c:	1c0a      	adds	r2, r1, #0
 800710e:	701a      	strb	r2, [r3, #0]
	//Write on registers
	for(uint8_t i=0; i<nbrBytes; i++)
 8007110:	230f      	movs	r3, #15
 8007112:	18fb      	adds	r3, r7, r3
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	230f      	movs	r3, #15
 800711a:	18fa      	adds	r2, r7, r3
 800711c:	1cbb      	adds	r3, r7, #2
 800711e:	7812      	ldrb	r2, [r2, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d300      	bcc.n	8007128 <_ZN10Controller21CAN_writeDataRegisterEhh+0x30>
 8007126:	e138      	b.n	800739a <_ZN10Controller21CAN_writeDataRegisterEhh+0x2a2>
	{
		switch(i)
 8007128:	230f      	movs	r3, #15
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b07      	cmp	r3, #7
 8007130:	d900      	bls.n	8007134 <_ZN10Controller21CAN_writeDataRegisterEhh+0x3c>
 8007132:	e128      	b.n	8007386 <_ZN10Controller21CAN_writeDataRegisterEhh+0x28e>
 8007134:	009a      	lsls	r2, r3, #2
 8007136:	4b9b      	ldr	r3, [pc, #620]	; (80073a4 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2ac>)
 8007138:	18d3      	adds	r3, r2, r3
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(0)->nbrTurns = buffer_CAN_rx[0] & 0b00000111;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2233      	movs	r2, #51	; 0x33
 8007142:	5c9c      	ldrb	r4, [r3, r2]
 8007144:	1cfb      	adds	r3, r7, #3
 8007146:	781a      	ldrb	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3204      	adds	r2, #4
 800714c:	0092      	lsls	r2, r2, #2
 800714e:	58d3      	ldr	r3, [r2, r3]
 8007150:	2100      	movs	r1, #0
 8007152:	0018      	movs	r0, r3
 8007154:	f7fe f912 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007158:	0002      	movs	r2, r0
 800715a:	2307      	movs	r3, #7
 800715c:	4023      	ands	r3, r4
 800715e:	b2d9      	uxtb	r1, r3
 8007160:	2382      	movs	r3, #130	; 0x82
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->clockwise = (buffer_CAN_rx[0] & 0b00001000) >> 3;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2233      	movs	r2, #51	; 0x33
 800716a:	5c9b      	ldrb	r3, [r3, r2]
 800716c:	10db      	asrs	r3, r3, #3
 800716e:	b2dc      	uxtb	r4, r3
 8007170:	1cfb      	adds	r3, r7, #3
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3204      	adds	r2, #4
 8007178:	0092      	lsls	r2, r2, #2
 800717a:	58d3      	ldr	r3, [r2, r3]
 800717c:	2100      	movs	r1, #0
 800717e:	0018      	movs	r0, r3
 8007180:	f7fe f8fc 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007184:	0002      	movs	r2, r0
 8007186:	2301      	movs	r3, #1
 8007188:	4023      	ands	r3, r4
 800718a:	b2d9      	uxtb	r1, r3
 800718c:	4b86      	ldr	r3, [pc, #536]	; (80073a8 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b0>)
 800718e:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->nbrTurns = (buffer_CAN_rx[0] & 0b01110000) >> 4;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2233      	movs	r2, #51	; 0x33
 8007194:	5c9b      	ldrb	r3, [r3, r2]
 8007196:	111b      	asrs	r3, r3, #4
 8007198:	b2dc      	uxtb	r4, r3
 800719a:	1cfb      	adds	r3, r7, #3
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3204      	adds	r2, #4
 80071a2:	0092      	lsls	r2, r2, #2
 80071a4:	58d3      	ldr	r3, [r2, r3]
 80071a6:	2101      	movs	r1, #1
 80071a8:	0018      	movs	r0, r3
 80071aa:	f7fe f8e7 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80071ae:	0002      	movs	r2, r0
 80071b0:	2307      	movs	r3, #7
 80071b2:	4023      	ands	r3, r4
 80071b4:	b2d9      	uxtb	r1, r3
 80071b6:	2382      	movs	r3, #130	; 0x82
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->clockwise = (buffer_CAN_rx[0] & 0b10000000) >> 7;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2233      	movs	r2, #51	; 0x33
 80071c0:	5c9c      	ldrb	r4, [r3, r2]
 80071c2:	1cfb      	adds	r3, r7, #3
 80071c4:	781a      	ldrb	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3204      	adds	r2, #4
 80071ca:	0092      	lsls	r2, r2, #2
 80071cc:	58d3      	ldr	r3, [r2, r3]
 80071ce:	2101      	movs	r1, #1
 80071d0:	0018      	movs	r0, r3
 80071d2:	f7fe f8d3 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80071d6:	0002      	movs	r2, r0
 80071d8:	09e3      	lsrs	r3, r4, #7
 80071da:	b2d9      	uxtb	r1, r3
 80071dc:	4b72      	ldr	r3, [pc, #456]	; (80073a8 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b0>)
 80071de:	54d1      	strb	r1, [r2, r3]
			break;
 80071e0:	e0d4      	b.n	800738c <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 1:
			_clock[clkAddr]->getWatchPointer(0)->newPosition = buffer_CAN_rx[1];
 80071e2:	1cfb      	adds	r3, r7, #3
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3204      	adds	r2, #4
 80071ea:	0092      	lsls	r2, r2, #2
 80071ec:	58d3      	ldr	r3, [r2, r3]
 80071ee:	2100      	movs	r1, #0
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7fe f8c3 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80071f6:	0001      	movs	r1, r0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2234      	movs	r2, #52	; 0x34
 80071fc:	5c9a      	ldrb	r2, [r3, r2]
 80071fe:	4b6b      	ldr	r3, [pc, #428]	; (80073ac <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b4>)
 8007200:	54ca      	strb	r2, [r1, r3]
			break;
 8007202:	e0c3      	b.n	800738c <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 2:
			_clock[clkAddr]->getWatchPointer(0)->offsetStartTime = buffer_CAN_rx[2] & 0b00001111;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2235      	movs	r2, #53	; 0x35
 8007208:	5c9c      	ldrb	r4, [r3, r2]
 800720a:	1cfb      	adds	r3, r7, #3
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3204      	adds	r2, #4
 8007212:	0092      	lsls	r2, r2, #2
 8007214:	58d3      	ldr	r3, [r2, r3]
 8007216:	2100      	movs	r1, #0
 8007218:	0018      	movs	r0, r3
 800721a:	f7fe f8af 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800721e:	0002      	movs	r2, r0
 8007220:	230f      	movs	r3, #15
 8007222:	4023      	ands	r3, r4
 8007224:	b2d9      	uxtb	r1, r3
 8007226:	4b62      	ldr	r3, [pc, #392]	; (80073b0 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b8>)
 8007228:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->movmentDurationTime = (buffer_CAN_rx[2] & 0b11110000) >> 4;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2235      	movs	r2, #53	; 0x35
 800722e:	5c9c      	ldrb	r4, [r3, r2]
 8007230:	1cfb      	adds	r3, r7, #3
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3204      	adds	r2, #4
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	58d3      	ldr	r3, [r2, r3]
 800723c:	2100      	movs	r1, #0
 800723e:	0018      	movs	r0, r3
 8007240:	f7fe f89c 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007244:	0002      	movs	r2, r0
 8007246:	0923      	lsrs	r3, r4, #4
 8007248:	b2d9      	uxtb	r1, r3
 800724a:	2383      	movs	r3, #131	; 0x83
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	54d1      	strb	r1, [r2, r3]
			break;
 8007250:	e09c      	b.n	800738c <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 3:
			_clock[clkAddr]->getWatchPointer(1)->newPosition = buffer_CAN_rx[3];
 8007252:	1cfb      	adds	r3, r7, #3
 8007254:	781a      	ldrb	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3204      	adds	r2, #4
 800725a:	0092      	lsls	r2, r2, #2
 800725c:	58d3      	ldr	r3, [r2, r3]
 800725e:	2101      	movs	r1, #1
 8007260:	0018      	movs	r0, r3
 8007262:	f7fe f88b 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007266:	0001      	movs	r1, r0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2236      	movs	r2, #54	; 0x36
 800726c:	5c9a      	ldrb	r2, [r3, r2]
 800726e:	4b4f      	ldr	r3, [pc, #316]	; (80073ac <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b4>)
 8007270:	54ca      	strb	r2, [r1, r3]
			break;
 8007272:	e08b      	b.n	800738c <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 4:
			_clock[clkAddr]->getWatchPointer(1)->offsetStartTime = buffer_CAN_rx[4] & 0b00001111;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2237      	movs	r2, #55	; 0x37
 8007278:	5c9c      	ldrb	r4, [r3, r2]
 800727a:	1cfb      	adds	r3, r7, #3
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3204      	adds	r2, #4
 8007282:	0092      	lsls	r2, r2, #2
 8007284:	58d3      	ldr	r3, [r2, r3]
 8007286:	2101      	movs	r1, #1
 8007288:	0018      	movs	r0, r3
 800728a:	f7fe f877 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800728e:	0002      	movs	r2, r0
 8007290:	230f      	movs	r3, #15
 8007292:	4023      	ands	r3, r4
 8007294:	b2d9      	uxtb	r1, r3
 8007296:	4b46      	ldr	r3, [pc, #280]	; (80073b0 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b8>)
 8007298:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->movmentDurationTime = (buffer_CAN_rx[4] & 0b11110000) >> 4;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2237      	movs	r2, #55	; 0x37
 800729e:	5c9c      	ldrb	r4, [r3, r2]
 80072a0:	1cfb      	adds	r3, r7, #3
 80072a2:	781a      	ldrb	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3204      	adds	r2, #4
 80072a8:	0092      	lsls	r2, r2, #2
 80072aa:	58d3      	ldr	r3, [r2, r3]
 80072ac:	2101      	movs	r1, #1
 80072ae:	0018      	movs	r0, r3
 80072b0:	f7fe f864 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80072b4:	0002      	movs	r2, r0
 80072b6:	0923      	lsrs	r3, r4, #4
 80072b8:	b2d9      	uxtb	r1, r3
 80072ba:	2383      	movs	r3, #131	; 0x83
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	54d1      	strb	r1, [r2, r3]
			break;
 80072c0:	e064      	b.n	800738c <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 5:
			_clock[clkAddr]->getWatchPointer(2)->nbrTurns = buffer_CAN_rx[5] & 0b00000111;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2238      	movs	r2, #56	; 0x38
 80072c6:	5c9c      	ldrb	r4, [r3, r2]
 80072c8:	1cfb      	adds	r3, r7, #3
 80072ca:	781a      	ldrb	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3204      	adds	r2, #4
 80072d0:	0092      	lsls	r2, r2, #2
 80072d2:	58d3      	ldr	r3, [r2, r3]
 80072d4:	2102      	movs	r1, #2
 80072d6:	0018      	movs	r0, r3
 80072d8:	f7fe f850 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80072dc:	0002      	movs	r2, r0
 80072de:	2307      	movs	r3, #7
 80072e0:	4023      	ands	r3, r4
 80072e2:	b2d9      	uxtb	r1, r3
 80072e4:	2382      	movs	r3, #130	; 0x82
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(2)->clockwise = (buffer_CAN_rx[5] & 0b00001000) >> 3;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2238      	movs	r2, #56	; 0x38
 80072ee:	5c9b      	ldrb	r3, [r3, r2]
 80072f0:	10db      	asrs	r3, r3, #3
 80072f2:	b2dc      	uxtb	r4, r3
 80072f4:	1cfb      	adds	r3, r7, #3
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3204      	adds	r2, #4
 80072fc:	0092      	lsls	r2, r2, #2
 80072fe:	58d3      	ldr	r3, [r2, r3]
 8007300:	2102      	movs	r1, #2
 8007302:	0018      	movs	r0, r3
 8007304:	f7fe f83a 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007308:	0002      	movs	r2, r0
 800730a:	2301      	movs	r3, #1
 800730c:	4023      	ands	r3, r4
 800730e:	b2d9      	uxtb	r1, r3
 8007310:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b0>)
 8007312:	54d1      	strb	r1, [r2, r3]
			break;
 8007314:	e03a      	b.n	800738c <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 6:
			_clock[clkAddr]->getWatchPointer(2)->newPosition = buffer_CAN_rx[6];
 8007316:	1cfb      	adds	r3, r7, #3
 8007318:	781a      	ldrb	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3204      	adds	r2, #4
 800731e:	0092      	lsls	r2, r2, #2
 8007320:	58d3      	ldr	r3, [r2, r3]
 8007322:	2102      	movs	r1, #2
 8007324:	0018      	movs	r0, r3
 8007326:	f7fe f829 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800732a:	0001      	movs	r1, r0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2239      	movs	r2, #57	; 0x39
 8007330:	5c9a      	ldrb	r2, [r3, r2]
 8007332:	4b1e      	ldr	r3, [pc, #120]	; (80073ac <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b4>)
 8007334:	54ca      	strb	r2, [r1, r3]
			break;
 8007336:	e029      	b.n	800738c <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 7:
			_clock[clkAddr]->getWatchPointer(2)->offsetStartTime = buffer_CAN_rx[7] & 0b00001111;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	223a      	movs	r2, #58	; 0x3a
 800733c:	5c9c      	ldrb	r4, [r3, r2]
 800733e:	1cfb      	adds	r3, r7, #3
 8007340:	781a      	ldrb	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3204      	adds	r2, #4
 8007346:	0092      	lsls	r2, r2, #2
 8007348:	58d3      	ldr	r3, [r2, r3]
 800734a:	2102      	movs	r1, #2
 800734c:	0018      	movs	r0, r3
 800734e:	f7fe f815 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007352:	0002      	movs	r2, r0
 8007354:	230f      	movs	r3, #15
 8007356:	4023      	ands	r3, r4
 8007358:	b2d9      	uxtb	r1, r3
 800735a:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b8>)
 800735c:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(2)->movmentDurationTime = (buffer_CAN_rx[7] & 0b11110000) >> 4;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	223a      	movs	r2, #58	; 0x3a
 8007362:	5c9c      	ldrb	r4, [r3, r2]
 8007364:	1cfb      	adds	r3, r7, #3
 8007366:	781a      	ldrb	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3204      	adds	r2, #4
 800736c:	0092      	lsls	r2, r2, #2
 800736e:	58d3      	ldr	r3, [r2, r3]
 8007370:	2102      	movs	r1, #2
 8007372:	0018      	movs	r0, r3
 8007374:	f7fe f802 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007378:	0002      	movs	r2, r0
 800737a:	0923      	lsrs	r3, r4, #4
 800737c:	b2d9      	uxtb	r1, r3
 800737e:	2383      	movs	r3, #131	; 0x83
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	54d1      	strb	r1, [r2, r3]
			break;
 8007384:	e002      	b.n	800738c <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		default:
			Error_Handler();
 8007386:	f7f9 fbb3 	bl	8000af0 <Error_Handler>
			break;
 800738a:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 800738c:	210f      	movs	r1, #15
 800738e:	187b      	adds	r3, r7, r1
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	187b      	adds	r3, r7, r1
 8007394:	3201      	adds	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	e6be      	b.n	8007118 <_ZN10Controller21CAN_writeDataRegisterEhh+0x20>
		}
	}
}
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	46bd      	mov	sp, r7
 800739e:	b005      	add	sp, #20
 80073a0:	bd90      	pop	{r4, r7, pc}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	0800c420 	.word	0x0800c420
 80073a8:	00000207 	.word	0x00000207
 80073ac:	00000209 	.word	0x00000209
 80073b0:	0000020b 	.word	0x0000020b

080073b4 <_ZN10Controller23CAN_writeDataRegister_0Ehh>:

void Controller::CAN_writeDataRegister_0(uint8_t clkAddr, uint8_t nbrBytes)
{
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	0008      	movs	r0, r1
 80073be:	0011      	movs	r1, r2
 80073c0:	1cfb      	adds	r3, r7, #3
 80073c2:	1c02      	adds	r2, r0, #0
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	1cbb      	adds	r3, r7, #2
 80073c8:	1c0a      	adds	r2, r1, #0
 80073ca:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 80073cc:	230f      	movs	r3, #15
 80073ce:	18fb      	adds	r3, r7, r3
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	230f      	movs	r3, #15
 80073d6:	18fa      	adds	r2, r7, r3
 80073d8:	1cbb      	adds	r3, r7, #2
 80073da:	7812      	ldrb	r2, [r2, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d276      	bcs.n	80074d0 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x11c>
	{
		switch(i)
 80073e2:	230f      	movs	r3, #15
 80073e4:	18fb      	adds	r3, r7, r3
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	d866      	bhi.n	80074ba <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x106>
 80073ec:	009a      	lsls	r2, r3, #2
 80073ee:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x124>)
 80073f0:	18d3      	adds	r3, r2, r3
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(0)->nbrTurns = buffer_CAN_rx[0] & 0b00000111;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2233      	movs	r2, #51	; 0x33
 80073fa:	5c9c      	ldrb	r4, [r3, r2]
 80073fc:	1cfb      	adds	r3, r7, #3
 80073fe:	781a      	ldrb	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3204      	adds	r2, #4
 8007404:	0092      	lsls	r2, r2, #2
 8007406:	58d3      	ldr	r3, [r2, r3]
 8007408:	2100      	movs	r1, #0
 800740a:	0018      	movs	r0, r3
 800740c:	f7fd ffb6 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007410:	0002      	movs	r2, r0
 8007412:	2307      	movs	r3, #7
 8007414:	4023      	ands	r3, r4
 8007416:	b2d9      	uxtb	r1, r3
 8007418:	2382      	movs	r3, #130	; 0x82
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->clockwise = (buffer_CAN_rx[0] & 0b00001000) >> 3;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2233      	movs	r2, #51	; 0x33
 8007422:	5c9b      	ldrb	r3, [r3, r2]
 8007424:	10db      	asrs	r3, r3, #3
 8007426:	b2dc      	uxtb	r4, r3
 8007428:	1cfb      	adds	r3, r7, #3
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3204      	adds	r2, #4
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	58d3      	ldr	r3, [r2, r3]
 8007434:	2100      	movs	r1, #0
 8007436:	0018      	movs	r0, r3
 8007438:	f7fd ffa0 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800743c:	0002      	movs	r2, r0
 800743e:	2301      	movs	r3, #1
 8007440:	4023      	ands	r3, r4
 8007442:	b2d9      	uxtb	r1, r3
 8007444:	4b25      	ldr	r3, [pc, #148]	; (80074dc <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x128>)
 8007446:	54d1      	strb	r1, [r2, r3]
			break;
 8007448:	e03b      	b.n	80074c2 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x10e>
		case 1:
			_clock[clkAddr]->getWatchPointer(0)->newPosition = buffer_CAN_rx[1];
 800744a:	1cfb      	adds	r3, r7, #3
 800744c:	781a      	ldrb	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3204      	adds	r2, #4
 8007452:	0092      	lsls	r2, r2, #2
 8007454:	58d3      	ldr	r3, [r2, r3]
 8007456:	2100      	movs	r1, #0
 8007458:	0018      	movs	r0, r3
 800745a:	f7fd ff8f 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 800745e:	0001      	movs	r1, r0
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2234      	movs	r2, #52	; 0x34
 8007464:	5c9a      	ldrb	r2, [r3, r2]
 8007466:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x12c>)
 8007468:	54ca      	strb	r2, [r1, r3]
			break;
 800746a:	e02a      	b.n	80074c2 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x10e>
		case 2:
			_clock[clkAddr]->getWatchPointer(0)->offsetStartTime = buffer_CAN_rx[2] & 0b00001111;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2235      	movs	r2, #53	; 0x35
 8007470:	5c9c      	ldrb	r4, [r3, r2]
 8007472:	1cfb      	adds	r3, r7, #3
 8007474:	781a      	ldrb	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3204      	adds	r2, #4
 800747a:	0092      	lsls	r2, r2, #2
 800747c:	58d3      	ldr	r3, [r2, r3]
 800747e:	2100      	movs	r1, #0
 8007480:	0018      	movs	r0, r3
 8007482:	f7fd ff7b 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007486:	0002      	movs	r2, r0
 8007488:	230f      	movs	r3, #15
 800748a:	4023      	ands	r3, r4
 800748c:	b2d9      	uxtb	r1, r3
 800748e:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x130>)
 8007490:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->movmentDurationTime = (buffer_CAN_rx[2] & 0b11110000) >> 4;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2235      	movs	r2, #53	; 0x35
 8007496:	5c9c      	ldrb	r4, [r3, r2]
 8007498:	1cfb      	adds	r3, r7, #3
 800749a:	781a      	ldrb	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3204      	adds	r2, #4
 80074a0:	0092      	lsls	r2, r2, #2
 80074a2:	58d3      	ldr	r3, [r2, r3]
 80074a4:	2100      	movs	r1, #0
 80074a6:	0018      	movs	r0, r3
 80074a8:	f7fd ff68 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80074ac:	0002      	movs	r2, r0
 80074ae:	0923      	lsrs	r3, r4, #4
 80074b0:	b2d9      	uxtb	r1, r3
 80074b2:	2383      	movs	r3, #131	; 0x83
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	54d1      	strb	r1, [r2, r3]
			break;
 80074b8:	e003      	b.n	80074c2 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x10e>
		case 6:
			break;
		case 7:
			break;
		default:
			Error_Handler();
 80074ba:	f7f9 fb19 	bl	8000af0 <Error_Handler>
			break;
 80074be:	e000      	b.n	80074c2 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x10e>
			break;
 80074c0:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 80074c2:	210f      	movs	r1, #15
 80074c4:	187b      	adds	r3, r7, r1
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	187b      	adds	r3, r7, r1
 80074ca:	3201      	adds	r2, #1
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e781      	b.n	80073d4 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x20>
		}
	}
}
 80074d0:	46c0      	nop			; (mov r8, r8)
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b005      	add	sp, #20
 80074d6:	bd90      	pop	{r4, r7, pc}
 80074d8:	0800c440 	.word	0x0800c440
 80074dc:	00000207 	.word	0x00000207
 80074e0:	00000209 	.word	0x00000209
 80074e4:	0000020b 	.word	0x0000020b

080074e8 <_ZN10Controller23CAN_writeDataRegister_1Ehh>:

void Controller::CAN_writeDataRegister_1(uint8_t clkAddr, uint8_t nbrBytes)
{
 80074e8:	b590      	push	{r4, r7, lr}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	0008      	movs	r0, r1
 80074f2:	0011      	movs	r1, r2
 80074f4:	1cfb      	adds	r3, r7, #3
 80074f6:	1c02      	adds	r2, r0, #0
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	1cbb      	adds	r3, r7, #2
 80074fc:	1c0a      	adds	r2, r1, #0
 80074fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 8007500:	230f      	movs	r3, #15
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	230f      	movs	r3, #15
 800750a:	18fa      	adds	r2, r7, r3
 800750c:	1cbb      	adds	r3, r7, #2
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d276      	bcs.n	8007604 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x11c>
	{
		switch(i)
 8007516:	230f      	movs	r3, #15
 8007518:	18fb      	adds	r3, r7, r3
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b07      	cmp	r3, #7
 800751e:	d866      	bhi.n	80075ee <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x106>
 8007520:	009a      	lsls	r2, r3, #2
 8007522:	4b3a      	ldr	r3, [pc, #232]	; (800760c <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x124>)
 8007524:	18d3      	adds	r3, r2, r3
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(1)->nbrTurns = buffer_CAN_rx[0] & 0b00000111;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2233      	movs	r2, #51	; 0x33
 800752e:	5c9c      	ldrb	r4, [r3, r2]
 8007530:	1cfb      	adds	r3, r7, #3
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3204      	adds	r2, #4
 8007538:	0092      	lsls	r2, r2, #2
 800753a:	58d3      	ldr	r3, [r2, r3]
 800753c:	2101      	movs	r1, #1
 800753e:	0018      	movs	r0, r3
 8007540:	f7fd ff1c 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007544:	0002      	movs	r2, r0
 8007546:	2307      	movs	r3, #7
 8007548:	4023      	ands	r3, r4
 800754a:	b2d9      	uxtb	r1, r3
 800754c:	2382      	movs	r3, #130	; 0x82
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->clockwise = (buffer_CAN_rx[0] & 0b00001000) >> 3;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2233      	movs	r2, #51	; 0x33
 8007556:	5c9b      	ldrb	r3, [r3, r2]
 8007558:	10db      	asrs	r3, r3, #3
 800755a:	b2dc      	uxtb	r4, r3
 800755c:	1cfb      	adds	r3, r7, #3
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3204      	adds	r2, #4
 8007564:	0092      	lsls	r2, r2, #2
 8007566:	58d3      	ldr	r3, [r2, r3]
 8007568:	2101      	movs	r1, #1
 800756a:	0018      	movs	r0, r3
 800756c:	f7fd ff06 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007570:	0002      	movs	r2, r0
 8007572:	2301      	movs	r3, #1
 8007574:	4023      	ands	r3, r4
 8007576:	b2d9      	uxtb	r1, r3
 8007578:	4b25      	ldr	r3, [pc, #148]	; (8007610 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x128>)
 800757a:	54d1      	strb	r1, [r2, r3]
			break;
 800757c:	e03b      	b.n	80075f6 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x10e>
		case 1:
			_clock[clkAddr]->getWatchPointer(1)->newPosition = buffer_CAN_rx[1];
 800757e:	1cfb      	adds	r3, r7, #3
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3204      	adds	r2, #4
 8007586:	0092      	lsls	r2, r2, #2
 8007588:	58d3      	ldr	r3, [r2, r3]
 800758a:	2101      	movs	r1, #1
 800758c:	0018      	movs	r0, r3
 800758e:	f7fd fef5 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 8007592:	0001      	movs	r1, r0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2234      	movs	r2, #52	; 0x34
 8007598:	5c9a      	ldrb	r2, [r3, r2]
 800759a:	4b1e      	ldr	r3, [pc, #120]	; (8007614 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x12c>)
 800759c:	54ca      	strb	r2, [r1, r3]
			break;
 800759e:	e02a      	b.n	80075f6 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x10e>
		case 2:
			_clock[clkAddr]->getWatchPointer(1)->offsetStartTime = buffer_CAN_rx[2] & 0b00001111;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2235      	movs	r2, #53	; 0x35
 80075a4:	5c9c      	ldrb	r4, [r3, r2]
 80075a6:	1cfb      	adds	r3, r7, #3
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3204      	adds	r2, #4
 80075ae:	0092      	lsls	r2, r2, #2
 80075b0:	58d3      	ldr	r3, [r2, r3]
 80075b2:	2101      	movs	r1, #1
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7fd fee1 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80075ba:	0002      	movs	r2, r0
 80075bc:	230f      	movs	r3, #15
 80075be:	4023      	ands	r3, r4
 80075c0:	b2d9      	uxtb	r1, r3
 80075c2:	4b15      	ldr	r3, [pc, #84]	; (8007618 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x130>)
 80075c4:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->movmentDurationTime = (buffer_CAN_rx[2] & 0b11110000) >> 4;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2235      	movs	r2, #53	; 0x35
 80075ca:	5c9c      	ldrb	r4, [r3, r2]
 80075cc:	1cfb      	adds	r3, r7, #3
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3204      	adds	r2, #4
 80075d4:	0092      	lsls	r2, r2, #2
 80075d6:	58d3      	ldr	r3, [r2, r3]
 80075d8:	2101      	movs	r1, #1
 80075da:	0018      	movs	r0, r3
 80075dc:	f7fd fece 	bl	800537c <_ZN5Clock15getWatchPointerEi>
 80075e0:	0002      	movs	r2, r0
 80075e2:	0923      	lsrs	r3, r4, #4
 80075e4:	b2d9      	uxtb	r1, r3
 80075e6:	2383      	movs	r3, #131	; 0x83
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	54d1      	strb	r1, [r2, r3]
			break;
 80075ec:	e003      	b.n	80075f6 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x10e>
		case 6:
			break;
		case 7:
			break;
		default:
			Error_Handler();
 80075ee:	f7f9 fa7f 	bl	8000af0 <Error_Handler>
			break;
 80075f2:	e000      	b.n	80075f6 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x10e>
			break;
 80075f4:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 80075f6:	210f      	movs	r1, #15
 80075f8:	187b      	adds	r3, r7, r1
 80075fa:	781a      	ldrb	r2, [r3, #0]
 80075fc:	187b      	adds	r3, r7, r1
 80075fe:	3201      	adds	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	e781      	b.n	8007508 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x20>
		}
	}
}
 8007604:	46c0      	nop			; (mov r8, r8)
 8007606:	46bd      	mov	sp, r7
 8007608:	b005      	add	sp, #20
 800760a:	bd90      	pop	{r4, r7, pc}
 800760c:	0800c460 	.word	0x0800c460
 8007610:	00000207 	.word	0x00000207
 8007614:	00000209 	.word	0x00000209
 8007618:	0000020b 	.word	0x0000020b

0800761c <_ZN10Controller23CAN_writeDataRegister_2Ehh>:

void Controller::CAN_writeDataRegister_2(uint8_t clkAddr, uint8_t nbrBytes)
{}
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	0008      	movs	r0, r1
 8007626:	0011      	movs	r1, r2
 8007628:	1cfb      	adds	r3, r7, #3
 800762a:	1c02      	adds	r2, r0, #0
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	1cbb      	adds	r3, r7, #2
 8007630:	1c0a      	adds	r2, r1, #0
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b002      	add	sp, #8
 800763a:	bd80      	pop	{r7, pc}

0800763c <_ZN10Controller19CAN_readConfigBytesEv>:


void Controller::CAN_readConfigBytes()
{
 800763c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	uint8_t nbrBytes = myRxMessage.DLC;
 8007644:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <_ZN10Controller19CAN_readConfigBytesEv+0x104>)
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	230e      	movs	r3, #14
 800764a:	18fb      	adds	r3, r7, r3
 800764c:	701a      	strb	r2, [r3, #0]
	uint8_t indexRegister = buffer_CAN_rx[0];
 800764e:	200d      	movs	r0, #13
 8007650:	183b      	adds	r3, r7, r0
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	2133      	movs	r1, #51	; 0x33
 8007656:	5c52      	ldrb	r2, [r2, r1]
 8007658:	701a      	strb	r2, [r3, #0]
	//First, read data bytes
	//Then, write on each variables
	for(uint8_t i=indexRegister; i<nbrBytes; i++)
 800765a:	230f      	movs	r3, #15
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	183a      	adds	r2, r7, r0
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	230f      	movs	r3, #15
 8007666:	18fa      	adds	r2, r7, r3
 8007668:	230e      	movs	r3, #14
 800766a:	18fb      	adds	r3, r7, r3
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d261      	bcs.n	8007738 <_ZN10Controller19CAN_readConfigBytesEv+0xfc>
	{
		switch(i)
 8007674:	230f      	movs	r3, #15
 8007676:	18fb      	adds	r3, r7, r3
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b07      	cmp	r3, #7
 800767c:	d84f      	bhi.n	800771e <_ZN10Controller19CAN_readConfigBytesEv+0xe2>
 800767e:	009a      	lsls	r2, r3, #2
 8007680:	4b30      	ldr	r3, [pc, #192]	; (8007744 <_ZN10Controller19CAN_readConfigBytesEv+0x108>)
 8007682:	18d3      	adds	r3, r2, r3
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	469f      	mov	pc, r3
		{
		case 0:
			statusBytes = buffer_CAN_rx[i+1];
 8007688:	230f      	movs	r3, #15
 800768a:	18fb      	adds	r3, r7, r3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	3301      	adds	r3, #1
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	2133      	movs	r1, #51	; 0x33
 8007694:	18d3      	adds	r3, r2, r3
 8007696:	185b      	adds	r3, r3, r1
 8007698:	7819      	ldrb	r1, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2247      	movs	r2, #71	; 0x47
 800769e:	5499      	strb	r1, [r3, r2]
			if(((statusBytes & 0b00010000)>>4) == true)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2247      	movs	r2, #71	; 0x47
 80076a4:	5c9b      	ldrb	r3, [r3, r2]
 80076a6:	001a      	movs	r2, r3
 80076a8:	2310      	movs	r3, #16
 80076aa:	4013      	ands	r3, r2
 80076ac:	d03c      	beq.n	8007728 <_ZN10Controller19CAN_readConfigBytesEv+0xec>
			{
				GEN(evFlagTrigger());	//FLAG TRIGGER
 80076ae:	687d      	ldr	r5, [r7, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	681c      	ldr	r4, [r3, #0]
 80076b8:	2014      	movs	r0, #20
 80076ba:	f003 fcc0 	bl	800b03e <_Znwj>
 80076be:	0003      	movs	r3, r0
 80076c0:	001e      	movs	r6, r3
 80076c2:	0030      	movs	r0, r6
 80076c4:	f000 fd9e 	bl	8008204 <_ZN13evFlagTriggerC1Ev>
 80076c8:	0031      	movs	r1, r6
 80076ca:	0028      	movs	r0, r5
 80076cc:	47a0      	blx	r4
			}
			break;
 80076ce:	e02b      	b.n	8007728 <_ZN10Controller19CAN_readConfigBytesEv+0xec>
		case 1:
			startTime = buffer_CAN_rx[i+1];
 80076d0:	230f      	movs	r3, #15
 80076d2:	18fb      	adds	r3, r7, r3
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	3301      	adds	r3, #1
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	2133      	movs	r1, #51	; 0x33
 80076dc:	18d3      	adds	r3, r2, r3
 80076de:	185b      	adds	r3, r3, r1
 80076e0:	7819      	ldrb	r1, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2248      	movs	r2, #72	; 0x48
 80076e6:	5499      	strb	r1, [r3, r2]
			break;
 80076e8:	e01f      	b.n	800772a <_ZN10Controller19CAN_readConfigBytesEv+0xee>
		case 2:
			stopTime = buffer_CAN_rx[i+1];
 80076ea:	230f      	movs	r3, #15
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	2133      	movs	r1, #51	; 0x33
 80076f6:	18d3      	adds	r3, r2, r3
 80076f8:	185b      	adds	r3, r3, r1
 80076fa:	7819      	ldrb	r1, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2249      	movs	r2, #73	; 0x49
 8007700:	5499      	strb	r1, [r3, r2]
			break;
 8007702:	e012      	b.n	800772a <_ZN10Controller19CAN_readConfigBytesEv+0xee>
		case 3:
			nbrWatchPtrClk = buffer_CAN_rx[i+1];
 8007704:	230f      	movs	r3, #15
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	2133      	movs	r1, #51	; 0x33
 8007710:	18d3      	adds	r3, r2, r3
 8007712:	185b      	adds	r3, r3, r1
 8007714:	7819      	ldrb	r1, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2246      	movs	r2, #70	; 0x46
 800771a:	5499      	strb	r1, [r3, r2]
			break;
 800771c:	e005      	b.n	800772a <_ZN10Controller19CAN_readConfigBytesEv+0xee>
			break;
		case 7:
			//Free
			break;
		default:
			Error_Handler();
 800771e:	f7f9 f9e7 	bl	8000af0 <Error_Handler>
			break;
 8007722:	e002      	b.n	800772a <_ZN10Controller19CAN_readConfigBytesEv+0xee>
			break;
 8007724:	46c0      	nop			; (mov r8, r8)
 8007726:	e000      	b.n	800772a <_ZN10Controller19CAN_readConfigBytesEv+0xee>
			break;
 8007728:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=indexRegister; i<nbrBytes; i++)
 800772a:	210f      	movs	r1, #15
 800772c:	187b      	adds	r3, r7, r1
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	187b      	adds	r3, r7, r1
 8007732:	3201      	adds	r2, #1
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	e795      	b.n	8007664 <_ZN10Controller19CAN_readConfigBytesEv+0x28>
		}
	}
}
 8007738:	46c0      	nop			; (mov r8, r8)
 800773a:	46bd      	mov	sp, r7
 800773c:	b005      	add	sp, #20
 800773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007740:	20000248 	.word	0x20000248
 8007744:	0800c480 	.word	0x0800c480

08007748 <_ZN12WatchPointerC1Eh>:
#include <app/WatchPointer.h>
#include "event/evClockwise.h"
#include "event/evCounterClockwise.h"

WatchPointer::WatchPointer(uint8_t outputAngle)
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	000a      	movs	r2, r1
 8007752:	1cfb      	adds	r3, r7, #3
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2100      	movs	r1, #0
 800775a:	0018      	movs	r0, r3
 800775c:	f000 fe92 	bl	8008484 <_ZN10XFBehaviorC1Eb>
 8007760:	4a1c      	ldr	r2, [pc, #112]	; (80077d4 <_ZN12WatchPointerC1Eh+0x8c>)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	2387      	movs	r3, #135	; 0x87
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	18d3      	adds	r3, r2, r3
 800776e:	2214      	movs	r2, #20
 8007770:	2100      	movs	r1, #0
 8007772:	0018      	movs	r0, r3
 8007774:	f003 fd29 	bl	800b1ca <memset>
{
	this->outputAngle = outputAngle;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	1cfa      	adds	r2, r7, #3
 800777c:	4916      	ldr	r1, [pc, #88]	; (80077d8 <_ZN12WatchPointerC1Eh+0x90>)
 800777e:	7812      	ldrb	r2, [r2, #0]
 8007780:	545a      	strb	r2, [r3, r1]
	_currentState = STATE_INIT;
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	2386      	movs	r3, #134	; 0x86
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	2100      	movs	r1, #0
 800778a:	54d1      	strb	r1, [r2, r3]

	clockwiseStep = true;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a13      	ldr	r2, [pc, #76]	; (80077dc <_ZN12WatchPointerC1Eh+0x94>)
 8007790:	2101      	movs	r1, #1
 8007792:	5499      	strb	r1, [r3, r2]
	counterClockwiseStep = true;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a12      	ldr	r2, [pc, #72]	; (80077e0 <_ZN12WatchPointerC1Eh+0x98>)
 8007798:	2101      	movs	r1, #1
 800779a:	5499      	strb	r1, [r3, r2]

	actualPosition = 0;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a11      	ldr	r2, [pc, #68]	; (80077e4 <_ZN12WatchPointerC1Eh+0x9c>)
 80077a0:	2100      	movs	r1, #0
 80077a2:	5499      	strb	r1, [r3, r2]
	newPosition = 0;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a10      	ldr	r2, [pc, #64]	; (80077e8 <_ZN12WatchPointerC1Eh+0xa0>)
 80077a8:	2100      	movs	r1, #0
 80077aa:	5499      	strb	r1, [r3, r2]

	indexQueue = 0;
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	2381      	movs	r3, #129	; 0x81
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	2100      	movs	r1, #0
 80077b4:	52d1      	strh	r1, [r2, r3]

	tata = 0;
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	2384      	movs	r3, #132	; 0x84
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	2100      	movs	r1, #0
 80077be:	50d1      	str	r1, [r2, r3]
	toto=0;
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	2385      	movs	r3, #133	; 0x85
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	2100      	movs	r1, #0
 80077c8:	50d1      	str	r1, [r2, r3]
}
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	0018      	movs	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b002      	add	sp, #8
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	0800c4f8 	.word	0x0800c4f8
 80077d8:	00000206 	.word	0x00000206
 80077dc:	0000021a 	.word	0x0000021a
 80077e0:	0000021b 	.word	0x0000021b
 80077e4:	0000020a 	.word	0x0000020a
 80077e8:	00000209 	.word	0x00000209

080077ec <_ZN12WatchPointerD1Ev>:

WatchPointer::~WatchPointer()
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	4a05      	ldr	r2, [pc, #20]	; (800780c <_ZN12WatchPointerD1Ev+0x20>)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	0018      	movs	r0, r3
 80077fe:	f000 fe91 	bl	8008524 <_ZN10XFBehaviorD1Ev>
{}
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0018      	movs	r0, r3
 8007806:	46bd      	mov	sp, r7
 8007808:	b002      	add	sp, #8
 800780a:	bd80      	pop	{r7, pc}
 800780c:	0800c4f8 	.word	0x0800c4f8

08007810 <_ZN12WatchPointerD0Ev>:
WatchPointer::~WatchPointer()
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
{}
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	0018      	movs	r0, r3
 800781c:	f7ff ffe6 	bl	80077ec <_ZN12WatchPointerD1Ev>
 8007820:	2392      	movs	r3, #146	; 0x92
 8007822:	009a      	lsls	r2, r3, #2
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	0011      	movs	r1, r2
 8007828:	0018      	movs	r0, r3
 800782a:	f003 fc04 	bl	800b036 <_ZdlPvj>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	0018      	movs	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	b002      	add	sp, #8
 8007836:	bd80      	pop	{r7, pc}

08007838 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>:

void WatchPointer::initGPIO(GPIO_TypeDef* A_Port, uint16_t A_Pin,
							GPIO_TypeDef* B_Port, uint16_t B_Pin,
							GPIO_TypeDef* C_Port, uint16_t C_Pin)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	1dbb      	adds	r3, r7, #6
 8007846:	801a      	strh	r2, [r3, #0]
	this->A_GPIO_Port = A_Port;
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	238c      	movs	r3, #140	; 0x8c
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	50d1      	str	r1, [r2, r3]
	this->A_GPIO_Pin = A_Pin;
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	1db9      	adds	r1, r7, #6
 8007856:	238d      	movs	r3, #141	; 0x8d
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	8809      	ldrh	r1, [r1, #0]
 800785c:	52d1      	strh	r1, [r2, r3]

	this->B_GPIO_Port = B_Port;
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	238e      	movs	r3, #142	; 0x8e
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	50d1      	str	r1, [r2, r3]
	this->B_GPIO_Pin = B_Pin;
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	2318      	movs	r3, #24
 800786c:	18f9      	adds	r1, r7, r3
 800786e:	238f      	movs	r3, #143	; 0x8f
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	8809      	ldrh	r1, [r1, #0]
 8007874:	52d1      	strh	r1, [r2, r3]

	this->C_GPIO_Port = C_Port;
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	2390      	movs	r3, #144	; 0x90
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	69f9      	ldr	r1, [r7, #28]
 800787e:	50d1      	str	r1, [r2, r3]
	this->C_GPIO_Pin = C_Pin;
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	2320      	movs	r3, #32
 8007884:	18f9      	adds	r1, r7, r3
 8007886:	2391      	movs	r3, #145	; 0x91
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	8809      	ldrh	r1, [r1, #0]
 800788c:	52d1      	strh	r1, [r2, r3]

	//Start behavior of state machine
	this->startBehavior();
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	0010      	movs	r0, r2
 800789a:	4798      	blx	r3
}
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b004      	add	sp, #16
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <_ZN12WatchPointer9doOneStepEb>:

void WatchPointer::doOneStep(bool clockwise)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	000a      	movs	r2, r1
 80078ae:	1cfb      	adds	r3, r7, #3
 80078b0:	701a      	strb	r2, [r3, #0]
	eventQueue[indexQueue] = clockwise;
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	2381      	movs	r3, #129	; 0x81
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	5ad3      	ldrh	r3, [r2, r3]
 80078ba:	001a      	movs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	189b      	adds	r3, r3, r2
 80078c0:	1cfa      	adds	r2, r7, #3
 80078c2:	7812      	ldrb	r2, [r2, #0]
 80078c4:	741a      	strb	r2, [r3, #16]
	indexQueue++;
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	2381      	movs	r3, #129	; 0x81
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	5ad3      	ldrh	r3, [r2, r3]
 80078ce:	3301      	adds	r3, #1
 80078d0:	b299      	uxth	r1, r3
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	2381      	movs	r3, #129	; 0x81
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	52d1      	strh	r1, [r2, r3]

	if((_currentState == STATE_WAIT) && ((_oldState == STATE_WAIT) || (_oldState == STATE_INIT)))
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	2386      	movs	r3, #134	; 0x86
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	5cd3      	ldrb	r3, [r2, r3]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d10d      	bne.n	8007902 <_ZN12WatchPointer9doOneStepEb+0x5e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a08      	ldr	r2, [pc, #32]	; (800790c <_ZN12WatchPointer9doOneStepEb+0x68>)
 80078ea:	5c9b      	ldrb	r3, [r3, r2]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d004      	beq.n	80078fa <_ZN12WatchPointer9doOneStepEb+0x56>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a06      	ldr	r2, [pc, #24]	; (800790c <_ZN12WatchPointer9doOneStepEb+0x68>)
 80078f4:	5c9b      	ldrb	r3, [r3, r2]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <_ZN12WatchPointer9doOneStepEb+0x5e>
	{
		generateEvent();
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	0018      	movs	r0, r3
 80078fe:	f000 f807 	bl	8007910 <_ZN12WatchPointer13generateEventEv>
	else
	{
		//Wait we are on STATE_WAIT

	}
}
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	46bd      	mov	sp, r7
 8007906:	b002      	add	sp, #8
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	00000219 	.word	0x00000219

08007910 <_ZN12WatchPointer13generateEventEv>:

void WatchPointer::generateEvent()
{
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	//Check if array is empty
	if(indexQueue != 0)
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	2381      	movs	r3, #129	; 0x81
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	5ad3      	ldrh	r3, [r2, r3]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d051      	beq.n	80079c8 <_ZN12WatchPointer13generateEventEv+0xb8>
	{
		if(eventQueue[0] == true)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	7c1b      	ldrb	r3, [r3, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d010      	beq.n	800794e <_ZN12WatchPointer13generateEventEv+0x3e>
		{
			GEN(evClockwise());
 800792c:	687d      	ldr	r5, [r7, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	330c      	adds	r3, #12
 8007934:	681c      	ldr	r4, [r3, #0]
 8007936:	2014      	movs	r0, #20
 8007938:	f003 fb81 	bl	800b03e <_Znwj>
 800793c:	0003      	movs	r3, r0
 800793e:	001e      	movs	r6, r3
 8007940:	0030      	movs	r0, r6
 8007942:	f000 fbb7 	bl	80080b4 <_ZN11evClockwiseC1Ev>
 8007946:	0031      	movs	r1, r6
 8007948:	0028      	movs	r0, r5
 800794a:	47a0      	blx	r4
 800794c:	e018      	b.n	8007980 <_ZN12WatchPointer13generateEventEv+0x70>
		}
		else
		{
			GEN(evCounterClockwise());
 800794e:	687d      	ldr	r5, [r7, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	330c      	adds	r3, #12
 8007956:	681c      	ldr	r4, [r3, #0]
 8007958:	2014      	movs	r0, #20
 800795a:	f003 fb70 	bl	800b03e <_Znwj>
 800795e:	0003      	movs	r3, r0
 8007960:	001e      	movs	r6, r3
 8007962:	0030      	movs	r0, r6
 8007964:	f000 fbde 	bl	8008124 <_ZN18evCounterClockwiseC1Ev>
 8007968:	0031      	movs	r1, r6
 800796a:	0028      	movs	r0, r5
 800796c:	47a0      	blx	r4
			toto++;
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	2385      	movs	r3, #133	; 0x85
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	58d3      	ldr	r3, [r2, r3]
 8007976:	1c59      	adds	r1, r3, #1
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	2385      	movs	r3, #133	; 0x85
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	50d1      	str	r1, [r2, r3]
		}

		//Decrement position of each value of the array
		for(int i=0; i<indexQueue-1; i++)
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	2381      	movs	r3, #129	; 0x81
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	5ad3      	ldrh	r3, [r2, r3]
 800798c:	3b01      	subs	r3, #1
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	429a      	cmp	r2, r3
 8007992:	da0e      	bge.n	80079b2 <_ZN12WatchPointer13generateEventEv+0xa2>
		{
			eventQueue[i] = eventQueue[i+1];
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	18d3      	adds	r3, r2, r3
 800799c:	7c19      	ldrb	r1, [r3, #16]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	18d3      	adds	r3, r2, r3
 80079a4:	3310      	adds	r3, #16
 80079a6:	1c0a      	adds	r2, r1, #0
 80079a8:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<indexQueue-1; i++)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e7e8      	b.n	8007984 <_ZN12WatchPointer13generateEventEv+0x74>
		}
		indexQueue--;
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	2381      	movs	r3, #129	; 0x81
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	5ad3      	ldrh	r3, [r2, r3]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b299      	uxth	r1, r3
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	2381      	movs	r3, #129	; 0x81
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	52d1      	strh	r1, [r2, r3]
	}
	else
	{
		GEN(XFNullTransition());
	}
}
 80079c6:	e010      	b.n	80079ea <_ZN12WatchPointer13generateEventEv+0xda>
		GEN(XFNullTransition());
 80079c8:	687d      	ldr	r5, [r7, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	681c      	ldr	r4, [r3, #0]
 80079d2:	2010      	movs	r0, #16
 80079d4:	f003 fb33 	bl	800b03e <_Znwj>
 80079d8:	0003      	movs	r3, r0
 80079da:	001e      	movs	r6, r3
 80079dc:	2100      	movs	r1, #0
 80079de:	0030      	movs	r0, r6
 80079e0:	f000 fefc 	bl	80087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 80079e4:	0031      	movs	r1, r6
 80079e6:	0028      	movs	r0, r5
 80079e8:	47a0      	blx	r4
}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b005      	add	sp, #20
 80079f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080079f4 <_ZN12WatchPointer12processEventEv>:

XFEventStatus WatchPointer::processEvent()
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	eEventStatus eventStatus = XFEventStatus::Unknown;
 80079fc:	230f      	movs	r3, #15
 80079fe:	18fb      	adds	r3, r7, r3
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
	_oldState = _currentState;
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	2386      	movs	r3, #134	; 0x86
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	5cd1      	ldrb	r1, [r2, r3]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4ac1      	ldr	r2, [pc, #772]	; (8007d14 <_ZN12WatchPointer12processEventEv+0x320>)
 8007a10:	5499      	strb	r1, [r3, r2]

	//Transition switch
	switch(_currentState)
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	2386      	movs	r3, #134	; 0x86
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	5cd3      	ldrb	r3, [r2, r3]
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d900      	bls.n	8007a20 <_ZN12WatchPointer12processEventEv+0x2c>
 8007a1e:	e0d7      	b.n	8007bd0 <_ZN12WatchPointer12processEventEv+0x1dc>
 8007a20:	009a      	lsls	r2, r3, #2
 8007a22:	4bbd      	ldr	r3, [pc, #756]	; (8007d18 <_ZN12WatchPointer12processEventEv+0x324>)
 8007a24:	18d3      	adds	r3, r2, r3
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	469f      	mov	pc, r3
	{
	case STATE_INIT:
		if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f000 fe2c 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8007a32:	0003      	movs	r3, r0
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7fd fcb9 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8007a3a:	0003      	movs	r3, r0
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	425a      	negs	r2, r3
 8007a40:	4153      	adcs	r3, r2
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d100      	bne.n	8007a4a <_ZN12WatchPointer12processEventEv+0x56>
 8007a48:	e0c4      	b.n	8007bd4 <_ZN12WatchPointer12processEventEv+0x1e0>
		{
			_currentState = STATE_WAIT;
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	2386      	movs	r3, #134	; 0x86
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	2101      	movs	r1, #1
 8007a52:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007a54:	230f      	movs	r3, #15
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	2201      	movs	r2, #1
 8007a5a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007a5c:	e0ba      	b.n	8007bd4 <_ZN12WatchPointer12processEventEv+0x1e0>

	case STATE_WAIT:
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 fe12 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8007a66:	0003      	movs	r3, r0
 8007a68:	0018      	movs	r0, r3
 8007a6a:	f7fd fc9f 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8007a6e:	0003      	movs	r3, r0
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d10c      	bne.n	8007a8e <_ZN12WatchPointer12processEventEv+0x9a>
					getCurrentEvent()->getId() == EventIds::evClockwiseId)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	0018      	movs	r0, r3
 8007a78:	f000 fe07 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	0018      	movs	r0, r3
 8007a80:	f7fd fc9f 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8007a84:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d101      	bne.n	8007a8e <_ZN12WatchPointer12processEventEv+0x9a>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <_ZN12WatchPointer12processEventEv+0x9c>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d008      	beq.n	8007aa6 <_ZN12WatchPointer12processEventEv+0xb2>
		{
			_currentState = STATE_CLKWISE;
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	2386      	movs	r3, #134	; 0x86
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007a9e:	230f      	movs	r3, #15
 8007aa0:	18fb      	adds	r3, r7, r3
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f000 fdee 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8007aae:	0003      	movs	r3, r0
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f7fd fc7b 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d10c      	bne.n	8007ad6 <_ZN12WatchPointer12processEventEv+0xe2>
					getCurrentEvent()->getId() == EventIds::evCounterClockwiseId)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f000 fde3 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f7fd fc7b 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8007acc:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d101      	bne.n	8007ad6 <_ZN12WatchPointer12processEventEv+0xe2>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <_ZN12WatchPointer12processEventEv+0xe4>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d100      	bne.n	8007ade <_ZN12WatchPointer12processEventEv+0xea>
 8007adc:	e07c      	b.n	8007bd8 <_ZN12WatchPointer12processEventEv+0x1e4>
		{
			_currentState = STATE_CNT_CLKWISE;
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	2386      	movs	r3, #134	; 0x86
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	2103      	movs	r1, #3
 8007ae6:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007ae8:	230f      	movs	r3, #15
 8007aea:	18fb      	adds	r3, r7, r3
 8007aec:	2201      	movs	r2, #1
 8007aee:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007af0:	e072      	b.n	8007bd8 <_ZN12WatchPointer12processEventEv+0x1e4>

	case STATE_CLKWISE:
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	0018      	movs	r0, r3
 8007af6:	f000 fdc8 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8007afa:	0003      	movs	r3, r0
 8007afc:	0018      	movs	r0, r3
 8007afe:	f7fd fc55 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8007b02:	0003      	movs	r3, r0
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d10c      	bne.n	8007b22 <_ZN12WatchPointer12processEventEv+0x12e>
						getCurrentTimeout()->getId() == StepTimeout)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f000 fdc8 	bl	80086a0 <_ZN10XFBehavior17getCurrentTimeoutEv>
 8007b10:	0003      	movs	r3, r0
 8007b12:	0018      	movs	r0, r3
 8007b14:	f7fd fc55 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8007b18:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d101      	bne.n	8007b22 <_ZN12WatchPointer12processEventEv+0x12e>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e000      	b.n	8007b24 <_ZN12WatchPointer12processEventEv+0x130>
 8007b22:	2300      	movs	r3, #0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d059      	beq.n	8007bdc <_ZN12WatchPointer12processEventEv+0x1e8>
		{
			_currentState = STATE_COMMON;
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	2386      	movs	r3, #134	; 0x86
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	2104      	movs	r1, #4
 8007b30:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007b32:	230f      	movs	r3, #15
 8007b34:	18fb      	adds	r3, r7, r3
 8007b36:	2201      	movs	r2, #1
 8007b38:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007b3a:	e04f      	b.n	8007bdc <_ZN12WatchPointer12processEventEv+0x1e8>

	case STATE_CNT_CLKWISE:
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f000 fda3 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8007b44:	0003      	movs	r3, r0
 8007b46:	0018      	movs	r0, r3
 8007b48:	f7fd fc30 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8007b4c:	0003      	movs	r3, r0
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d10c      	bne.n	8007b6c <_ZN12WatchPointer12processEventEv+0x178>
						getCurrentTimeout()->getId() == StepTimeout)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	0018      	movs	r0, r3
 8007b56:	f000 fda3 	bl	80086a0 <_ZN10XFBehavior17getCurrentTimeoutEv>
 8007b5a:	0003      	movs	r3, r0
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f7fd fc30 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8007b62:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d101      	bne.n	8007b6c <_ZN12WatchPointer12processEventEv+0x178>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e000      	b.n	8007b6e <_ZN12WatchPointer12processEventEv+0x17a>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d036      	beq.n	8007be0 <_ZN12WatchPointer12processEventEv+0x1ec>
		{
			_currentState = STATE_COMMON;
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	2386      	movs	r3, #134	; 0x86
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	2104      	movs	r1, #4
 8007b7a:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007b7c:	230f      	movs	r3, #15
 8007b7e:	18fb      	adds	r3, r7, r3
 8007b80:	2201      	movs	r2, #1
 8007b82:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007b84:	e02c      	b.n	8007be0 <_ZN12WatchPointer12processEventEv+0x1ec>

	case STATE_COMMON:
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	0018      	movs	r0, r3
 8007b8a:	f000 fd7e 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 8007b8e:	0003      	movs	r3, r0
 8007b90:	0018      	movs	r0, r3
 8007b92:	f7fd fc0b 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8007b96:	0003      	movs	r3, r0
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d10c      	bne.n	8007bb6 <_ZN12WatchPointer12processEventEv+0x1c2>
						getCurrentTimeout()->getId() == StepTimeout)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f000 fd7e 	bl	80086a0 <_ZN10XFBehavior17getCurrentTimeoutEv>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f7fd fc0b 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 8007bac:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <_ZN12WatchPointer12processEventEv+0x1c2>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <_ZN12WatchPointer12processEventEv+0x1c4>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d013      	beq.n	8007be4 <_ZN12WatchPointer12processEventEv+0x1f0>
		{
			_currentState = STATE_WAIT;
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	2386      	movs	r3, #134	; 0x86
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007bc6:	230f      	movs	r3, #15
 8007bc8:	18fb      	adds	r3, r7, r3
 8007bca:	2201      	movs	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007bce:	e009      	b.n	8007be4 <_ZN12WatchPointer12processEventEv+0x1f0>

	default:
		break;
 8007bd0:	46c0      	nop			; (mov r8, r8)
 8007bd2:	e008      	b.n	8007be6 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	e006      	b.n	8007be6 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007bd8:	46c0      	nop			; (mov r8, r8)
 8007bda:	e004      	b.n	8007be6 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007bdc:	46c0      	nop			; (mov r8, r8)
 8007bde:	e002      	b.n	8007be6 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007be0:	46c0      	nop			; (mov r8, r8)
 8007be2:	e000      	b.n	8007be6 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007be4:	46c0      	nop			; (mov r8, r8)
	}
	//Action switch
	if(_oldState != _currentState)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a4a      	ldr	r2, [pc, #296]	; (8007d14 <_ZN12WatchPointer12processEventEv+0x320>)
 8007bea:	5c9a      	ldrb	r2, [r3, r2]
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	2386      	movs	r3, #134	; 0x86
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	5ccb      	ldrb	r3, [r1, r3]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d100      	bne.n	8007bfa <_ZN12WatchPointer12processEventEv+0x206>
 8007bf8:	e194      	b.n	8007f24 <_ZN12WatchPointer12processEventEv+0x530>
	{
		switch(_currentState)
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	2386      	movs	r3, #134	; 0x86
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	5cd3      	ldrb	r3, [r2, r3]
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d900      	bls.n	8007c08 <_ZN12WatchPointer12processEventEv+0x214>
 8007c06:	e182      	b.n	8007f0e <_ZN12WatchPointer12processEventEv+0x51a>
 8007c08:	009a      	lsls	r2, r3, #2
 8007c0a:	4b44      	ldr	r3, [pc, #272]	; (8007d1c <_ZN12WatchPointer12processEventEv+0x328>)
 8007c0c:	18d3      	adds	r3, r2, r3
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	469f      	mov	pc, r3
		{
		case STATE_INIT:
			break;

		case STATE_WAIT:
			if(_oldState == STATE_COMMON)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a3f      	ldr	r2, [pc, #252]	; (8007d14 <_ZN12WatchPointer12processEventEv+0x320>)
 8007c16:	5c9b      	ldrb	r3, [r3, r2]
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d000      	beq.n	8007c1e <_ZN12WatchPointer12processEventEv+0x22a>
 8007c1c:	e17b      	b.n	8007f16 <_ZN12WatchPointer12processEventEv+0x522>
			{
				generateEvent(); //Generate next event
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	0018      	movs	r0, r3
 8007c22:	f7ff fe75 	bl	8007910 <_ZN12WatchPointer13generateEventEv>
			}
			break;
 8007c26:	e176      	b.n	8007f16 <_ZN12WatchPointer12processEventEv+0x522>

		case STATE_CNT_CLKWISE:
			if(_oldState == STATE_WAIT)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a3a      	ldr	r2, [pc, #232]	; (8007d14 <_ZN12WatchPointer12processEventEv+0x320>)
 8007c2c:	5c9b      	ldrb	r3, [r3, r2]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d000      	beq.n	8007c34 <_ZN12WatchPointer12processEventEv+0x240>
 8007c32:	e172      	b.n	8007f1a <_ZN12WatchPointer12processEventEv+0x526>
			{
				//Output -> Input
				GPIO_InitStruct.Pin = B_GPIO_Pin;
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	238f      	movs	r3, #143	; 0x8f
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	5ad3      	ldrh	r3, [r2, r3]
 8007c3c:	0019      	movs	r1, r3
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	2387      	movs	r3, #135	; 0x87
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	2388      	movs	r3, #136	; 0x88
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	2389      	movs	r3, #137	; 0x89
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	2100      	movs	r1, #0
 8007c58:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	238e      	movs	r3, #142	; 0x8e
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	58d2      	ldr	r2, [r2, r3]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2187      	movs	r1, #135	; 0x87
 8007c66:	0089      	lsls	r1, r1, #2
 8007c68:	468c      	mov	ip, r1
 8007c6a:	4463      	add	r3, ip
 8007c6c:	0019      	movs	r1, r3
 8007c6e:	0010      	movs	r0, r2
 8007c70:	f7fa fb52 	bl	8002318 <HAL_GPIO_Init>

				if(counterClockwiseStep == true)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a2a      	ldr	r2, [pc, #168]	; (8007d20 <_ZN12WatchPointer12processEventEv+0x32c>)
 8007c78:	5c9b      	ldrb	r3, [r3, r2]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d018      	beq.n	8007cb0 <_ZN12WatchPointer12processEventEv+0x2bc>
				{
					HAL_GPIO_WritePin(A_GPIO_Port, A_GPIO_Pin, GPIO_PIN_SET);
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	238c      	movs	r3, #140	; 0x8c
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	58d0      	ldr	r0, [r2, r3]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	238d      	movs	r3, #141	; 0x8d
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	5ad3      	ldrh	r3, [r2, r3]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	0019      	movs	r1, r3
 8007c92:	f7fa fcd6 	bl	8002642 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_RESET);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	2390      	movs	r3, #144	; 0x90
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	58d0      	ldr	r0, [r2, r3]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	2391      	movs	r3, #145	; 0x91
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	5ad3      	ldrh	r3, [r2, r3]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	0019      	movs	r1, r3
 8007caa:	f7fa fcca 	bl	8002642 <HAL_GPIO_WritePin>
 8007cae:	e017      	b.n	8007ce0 <_ZN12WatchPointer12processEventEv+0x2ec>
				}
				else
				{
					HAL_GPIO_WritePin(A_GPIO_Port, A_GPIO_Pin, GPIO_PIN_RESET);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	238c      	movs	r3, #140	; 0x8c
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	58d0      	ldr	r0, [r2, r3]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	238d      	movs	r3, #141	; 0x8d
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	5ad3      	ldrh	r3, [r2, r3]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	0019      	movs	r1, r3
 8007cc4:	f7fa fcbd 	bl	8002642 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_SET);
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	2390      	movs	r3, #144	; 0x90
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	58d0      	ldr	r0, [r2, r3]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	2391      	movs	r3, #145	; 0x91
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	5ad3      	ldrh	r3, [r2, r3]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	0019      	movs	r1, r3
 8007cdc:	f7fa fcb1 	bl	8002642 <HAL_GPIO_WritePin>
				}
				counterClockwiseStep = !counterClockwiseStep;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a0f      	ldr	r2, [pc, #60]	; (8007d20 <_ZN12WatchPointer12processEventEv+0x32c>)
 8007ce4:	5c9b      	ldrb	r3, [r3, r2]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	4053      	eors	r3, r2
 8007cea:	b2d9      	uxtb	r1, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a0c      	ldr	r2, [pc, #48]	; (8007d20 <_ZN12WatchPointer12processEventEv+0x32c>)
 8007cf0:	5499      	strb	r1, [r3, r2]
				scheduleTimeout(StepTimeout, DELAY_ON);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	221e      	movs	r2, #30
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f7fd fb7c 	bl	80053f6 <_ZN10XFBehavior15scheduleTimeoutEii>
				tata++;
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	2384      	movs	r3, #132	; 0x84
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	58d3      	ldr	r3, [r2, r3]
 8007d06:	1c59      	adds	r1, r3, #1
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	2384      	movs	r3, #132	; 0x84
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	50d1      	str	r1, [r2, r3]
			}
			break;
 8007d10:	e103      	b.n	8007f1a <_ZN12WatchPointer12processEventEv+0x526>
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	00000219 	.word	0x00000219
 8007d18:	0800c4c8 	.word	0x0800c4c8
 8007d1c:	0800c4dc 	.word	0x0800c4dc
 8007d20:	0000021b 	.word	0x0000021b

		case STATE_CLKWISE:
			if(_oldState == STATE_WAIT)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a87      	ldr	r2, [pc, #540]	; (8007f44 <_ZN12WatchPointer12processEventEv+0x550>)
 8007d28:	5c9b      	ldrb	r3, [r3, r2]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d000      	beq.n	8007d30 <_ZN12WatchPointer12processEventEv+0x33c>
 8007d2e:	e0f6      	b.n	8007f1e <_ZN12WatchPointer12processEventEv+0x52a>
			{
				//Output -> Input
				GPIO_InitStruct.Pin = A_GPIO_Pin;
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	238d      	movs	r3, #141	; 0x8d
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	5ad3      	ldrh	r3, [r2, r3]
 8007d38:	0019      	movs	r1, r3
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	2387      	movs	r3, #135	; 0x87
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	2388      	movs	r3, #136	; 0x88
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	2100      	movs	r1, #0
 8007d4a:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	2389      	movs	r3, #137	; 0x89
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	2100      	movs	r1, #0
 8007d54:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	238c      	movs	r3, #140	; 0x8c
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	58d2      	ldr	r2, [r2, r3]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2187      	movs	r1, #135	; 0x87
 8007d62:	0089      	lsls	r1, r1, #2
 8007d64:	468c      	mov	ip, r1
 8007d66:	4463      	add	r3, ip
 8007d68:	0019      	movs	r1, r3
 8007d6a:	0010      	movs	r0, r2
 8007d6c:	f7fa fad4 	bl	8002318 <HAL_GPIO_Init>

				if(clockwiseStep == true)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a75      	ldr	r2, [pc, #468]	; (8007f48 <_ZN12WatchPointer12processEventEv+0x554>)
 8007d74:	5c9b      	ldrb	r3, [r3, r2]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d018      	beq.n	8007dac <_ZN12WatchPointer12processEventEv+0x3b8>
				{
					HAL_GPIO_WritePin(B_GPIO_Port, B_GPIO_Pin, GPIO_PIN_SET);
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	238e      	movs	r3, #142	; 0x8e
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	58d0      	ldr	r0, [r2, r3]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	238f      	movs	r3, #143	; 0x8f
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	5ad3      	ldrh	r3, [r2, r3]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	0019      	movs	r1, r3
 8007d8e:	f7fa fc58 	bl	8002642 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_RESET);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	2390      	movs	r3, #144	; 0x90
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	58d0      	ldr	r0, [r2, r3]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	2391      	movs	r3, #145	; 0x91
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	5ad3      	ldrh	r3, [r2, r3]
 8007da2:	2200      	movs	r2, #0
 8007da4:	0019      	movs	r1, r3
 8007da6:	f7fa fc4c 	bl	8002642 <HAL_GPIO_WritePin>
 8007daa:	e017      	b.n	8007ddc <_ZN12WatchPointer12processEventEv+0x3e8>
				}
				else
				{
					HAL_GPIO_WritePin(B_GPIO_Port, B_GPIO_Pin, GPIO_PIN_RESET);
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	238e      	movs	r3, #142	; 0x8e
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	58d0      	ldr	r0, [r2, r3]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	238f      	movs	r3, #143	; 0x8f
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	5ad3      	ldrh	r3, [r2, r3]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	0019      	movs	r1, r3
 8007dc0:	f7fa fc3f 	bl	8002642 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_SET);
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	2390      	movs	r3, #144	; 0x90
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	58d0      	ldr	r0, [r2, r3]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	2391      	movs	r3, #145	; 0x91
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	5ad3      	ldrh	r3, [r2, r3]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	0019      	movs	r1, r3
 8007dd8:	f7fa fc33 	bl	8002642 <HAL_GPIO_WritePin>
				}

				clockwiseStep = !clockwiseStep;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a5a      	ldr	r2, [pc, #360]	; (8007f48 <_ZN12WatchPointer12processEventEv+0x554>)
 8007de0:	5c9b      	ldrb	r3, [r3, r2]
 8007de2:	2201      	movs	r2, #1
 8007de4:	4053      	eors	r3, r2
 8007de6:	b2d9      	uxtb	r1, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a57      	ldr	r2, [pc, #348]	; (8007f48 <_ZN12WatchPointer12processEventEv+0x554>)
 8007dec:	5499      	strb	r1, [r3, r2]
				scheduleTimeout(StepTimeout, DELAY_ON);	//3ms
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	221e      	movs	r2, #30
 8007df2:	2101      	movs	r1, #1
 8007df4:	0018      	movs	r0, r3
 8007df6:	f7fd fafe 	bl	80053f6 <_ZN10XFBehavior15scheduleTimeoutEii>
			}
			break;
 8007dfa:	e090      	b.n	8007f1e <_ZN12WatchPointer12processEventEv+0x52a>

		case STATE_COMMON:
			if(_oldState == STATE_CNT_CLKWISE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a51      	ldr	r2, [pc, #324]	; (8007f44 <_ZN12WatchPointer12processEventEv+0x550>)
 8007e00:	5c9b      	ldrb	r3, [r3, r2]
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d124      	bne.n	8007e50 <_ZN12WatchPointer12processEventEv+0x45c>
			{
				//Input -> Output
				GPIO_InitStruct.Pin = B_GPIO_Pin;
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	238f      	movs	r3, #143	; 0x8f
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	5ad3      	ldrh	r3, [r2, r3]
 8007e0e:	0019      	movs	r1, r3
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	2387      	movs	r3, #135	; 0x87
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	2388      	movs	r3, #136	; 0x88
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	2101      	movs	r1, #1
 8007e20:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	2389      	movs	r3, #137	; 0x89
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	2100      	movs	r1, #0
 8007e2a:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	238a      	movs	r3, #138	; 0x8a
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	2100      	movs	r1, #0
 8007e34:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	238e      	movs	r3, #142	; 0x8e
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	58d2      	ldr	r2, [r2, r3]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2187      	movs	r1, #135	; 0x87
 8007e42:	0089      	lsls	r1, r1, #2
 8007e44:	468c      	mov	ip, r1
 8007e46:	4463      	add	r3, ip
 8007e48:	0019      	movs	r1, r3
 8007e4a:	0010      	movs	r0, r2
 8007e4c:	f7fa fa64 	bl	8002318 <HAL_GPIO_Init>
			}
			if(_oldState == STATE_CLKWISE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a3c      	ldr	r2, [pc, #240]	; (8007f44 <_ZN12WatchPointer12processEventEv+0x550>)
 8007e54:	5c9b      	ldrb	r3, [r3, r2]
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d124      	bne.n	8007ea4 <_ZN12WatchPointer12processEventEv+0x4b0>
			{
				//Input -> Output
				GPIO_InitStruct.Pin = A_GPIO_Pin;
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	238d      	movs	r3, #141	; 0x8d
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	5ad3      	ldrh	r3, [r2, r3]
 8007e62:	0019      	movs	r1, r3
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	2387      	movs	r3, #135	; 0x87
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	2388      	movs	r3, #136	; 0x88
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	2101      	movs	r1, #1
 8007e74:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	2389      	movs	r3, #137	; 0x89
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	238a      	movs	r3, #138	; 0x8a
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	2100      	movs	r1, #0
 8007e88:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	238c      	movs	r3, #140	; 0x8c
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	58d2      	ldr	r2, [r2, r3]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2187      	movs	r1, #135	; 0x87
 8007e96:	0089      	lsls	r1, r1, #2
 8007e98:	468c      	mov	ip, r1
 8007e9a:	4463      	add	r3, ip
 8007e9c:	0019      	movs	r1, r3
 8007e9e:	0010      	movs	r0, r2
 8007ea0:	f7fa fa3a 	bl	8002318 <HAL_GPIO_Init>
			}
			if(_oldState == STATE_CLKWISE || _oldState == STATE_CNT_CLKWISE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a27      	ldr	r2, [pc, #156]	; (8007f44 <_ZN12WatchPointer12processEventEv+0x550>)
 8007ea8:	5c9b      	ldrb	r3, [r3, r2]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d004      	beq.n	8007eb8 <_ZN12WatchPointer12processEventEv+0x4c4>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a24      	ldr	r2, [pc, #144]	; (8007f44 <_ZN12WatchPointer12processEventEv+0x550>)
 8007eb2:	5c9b      	ldrb	r3, [r3, r2]
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d134      	bne.n	8007f22 <_ZN12WatchPointer12processEventEv+0x52e>
			{
				HAL_GPIO_WritePin(A_GPIO_Port, A_GPIO_Pin, GPIO_PIN_RESET);
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	238c      	movs	r3, #140	; 0x8c
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	58d0      	ldr	r0, [r2, r3]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	238d      	movs	r3, #141	; 0x8d
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	5ad3      	ldrh	r3, [r2, r3]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	0019      	movs	r1, r3
 8007ecc:	f7fa fbb9 	bl	8002642 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_GPIO_Pin, GPIO_PIN_RESET);
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	238e      	movs	r3, #142	; 0x8e
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	58d0      	ldr	r0, [r2, r3]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	238f      	movs	r3, #143	; 0x8f
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	5ad3      	ldrh	r3, [r2, r3]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	0019      	movs	r1, r3
 8007ee4:	f7fa fbad 	bl	8002642 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_RESET);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	2390      	movs	r3, #144	; 0x90
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	58d0      	ldr	r0, [r2, r3]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	2391      	movs	r3, #145	; 0x91
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	5ad3      	ldrh	r3, [r2, r3]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	0019      	movs	r1, r3
 8007efc:	f7fa fba1 	bl	8002642 <HAL_GPIO_WritePin>
				scheduleTimeout(StepTimeout, DELAY_OFF);	//14ms
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	228c      	movs	r2, #140	; 0x8c
 8007f04:	2101      	movs	r1, #1
 8007f06:	0018      	movs	r0, r3
 8007f08:	f7fd fa75 	bl	80053f6 <_ZN10XFBehavior15scheduleTimeoutEii>
			}

			break;
 8007f0c:	e009      	b.n	8007f22 <_ZN12WatchPointer12processEventEv+0x52e>
		default:
			break;
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	e008      	b.n	8007f24 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007f12:	46c0      	nop			; (mov r8, r8)
 8007f14:	e006      	b.n	8007f24 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	e004      	b.n	8007f24 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	e002      	b.n	8007f24 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007f1e:	46c0      	nop			; (mov r8, r8)
 8007f20:	e000      	b.n	8007f24 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007f22:	46c0      	nop			; (mov r8, r8)
		}
	}
	return eventStatus;
 8007f24:	230f      	movs	r3, #15
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	240c      	movs	r4, #12
 8007f2c:	193b      	adds	r3, r7, r4
 8007f2e:	0011      	movs	r1, r2
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7fd fa50 	bl	80053d6 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 8007f36:	193b      	adds	r3, r7, r4
 8007f38:	781b      	ldrb	r3, [r3, #0]
}
 8007f3a:	1c18      	adds	r0, r3, #0
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	b005      	add	sp, #20
 8007f40:	bd90      	pop	{r4, r7, pc}
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	00000219 	.word	0x00000219
 8007f48:	0000021a 	.word	0x0000021a

08007f4c <Factory_initialize>:
#include "xf/xf.h"
#include "factory.h"

void Factory_initialize()
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
    Factory::initialize();
 8007f50:	f000 f80a 	bl	8007f68 <_ZN7Factory10initializeEv>
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <Factory_build>:

void Factory_build()
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	af00      	add	r7, sp, #0
    Factory::build();
 8007f5e:	f000 f80e 	bl	8007f7e <_ZN7Factory5buildEv>
}
 8007f62:	46c0      	nop			; (mov r8, r8)
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <_ZN7Factory10initializeEv>:
Factory::Factory()
{}

// static
void Factory::initialize()
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
	Controller::getInstance()->intitialize();
 8007f6c:	f7fd fab0 	bl	80054d0 <_ZN10Controller11getInstanceEv>
 8007f70:	0003      	movs	r3, r0
 8007f72:	0018      	movs	r0, r3
 8007f74:	f7fd fac8 	bl	8005508 <_ZN10Controller11intitializeEv>
}
 8007f78:	46c0      	nop			; (mov r8, r8)
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <_ZN7Factory5buildEv>:

// static
void Factory::build()
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	af00      	add	r7, sp, #0
	Controller::getInstance()->start();
 8007f82:	f7fd faa5 	bl	80054d0 <_ZN10Controller11getInstanceEv>
 8007f86:	0003      	movs	r3, r0
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f7fd fac5 	bl	8005518 <_ZN10Controller5startEv>
}
 8007f8e:	46c0      	nop			; (mov r8, r8)
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_ZN7XFEventD1Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	4a03      	ldr	r2, [pc, #12]	; (8007fac <_ZN7XFEventD1Ev+0x18>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	b002      	add	sp, #8
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	0800c548 	.word	0x0800c548

08007fb0 <_ZN7XFEventD0Ev>:
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	0018      	movs	r0, r3
 8007fbc:	f7ff ffea 	bl	8007f94 <_ZN7XFEventD1Ev>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2110      	movs	r1, #16
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f003 f836 	bl	800b036 <_ZdlPvj>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	0018      	movs	r0, r3
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b002      	add	sp, #8
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <_ZNK7XFEvent18deleteAfterConsumeEv>:

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	0018      	movs	r0, r3
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b002      	add	sp, #8
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <_ZNK13XFCustomEvent18deleteAfterConsumeEv>:

    /**
     * @brief Tells the XF if the event should be deleted after processing.
     * @return True if the event should be deleted.
     */
    bool deleteAfterConsume() const override { return _bDeleteAfterConsume; }
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	7c1b      	ldrb	r3, [r3, #16]
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b002      	add	sp, #8
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <_ZN13XFCustomEventD1Ev>:
class XFCustomEvent : public XFEvent
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	4a05      	ldr	r2, [pc, #20]	; (800801c <_ZN13XFCustomEventD1Ev+0x20>)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	0018      	movs	r0, r3
 800800e:	f7ff ffc1 	bl	8007f94 <_ZN7XFEventD1Ev>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	0018      	movs	r0, r3
 8008016:	46bd      	mov	sp, r7
 8008018:	b002      	add	sp, #8
 800801a:	bd80      	pop	{r7, pc}
 800801c:	0800c534 	.word	0x0800c534

08008020 <_ZN13XFCustomEventD0Ev>:
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	0018      	movs	r0, r3
 800802c:	f7ff ffe6 	bl	8007ffc <_ZN13XFCustomEventD1Ev>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2114      	movs	r1, #20
 8008034:	0018      	movs	r0, r3
 8008036:	f002 fffe 	bl	800b036 <_ZdlPvj>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	0018      	movs	r0, r3
 800803e:	46bd      	mov	sp, r7
 8008040:	b002      	add	sp, #8
 8008042:	bd80      	pop	{r7, pc}

08008044 <_ZN8evCanIrqC1Ev>:
#include "events.h"
#include "evCanIrq.h"


evCanIrq::evCanIrq() :
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evCanIrqId)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	2102      	movs	r1, #2
 8008052:	0018      	movs	r0, r3
 8008054:	f000 fb66 	bl	8008724 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8008058:	4a03      	ldr	r2, [pc, #12]	; (8008068 <_ZN8evCanIrqC1Ev+0x24>)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	0018      	movs	r0, r3
 8008062:	46bd      	mov	sp, r7
 8008064:	b002      	add	sp, #8
 8008066:	bd80      	pop	{r7, pc}
 8008068:	0800c520 	.word	0x0800c520

0800806c <_ZN8evCanIrqD1Ev>:
#define EVCANIRQ_H_

#include "xf/customevent.h"
#include "events.h"

class evCanIrq : public XFCustomEvent
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	4a05      	ldr	r2, [pc, #20]	; (800808c <_ZN8evCanIrqD1Ev+0x20>)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	0018      	movs	r0, r3
 800807e:	f7ff ffbd 	bl	8007ffc <_ZN13XFCustomEventD1Ev>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	0018      	movs	r0, r3
 8008086:	46bd      	mov	sp, r7
 8008088:	b002      	add	sp, #8
 800808a:	bd80      	pop	{r7, pc}
 800808c:	0800c520 	.word	0x0800c520

08008090 <_ZN8evCanIrqD0Ev>:
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	0018      	movs	r0, r3
 800809c:	f7ff ffe6 	bl	800806c <_ZN8evCanIrqD1Ev>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2114      	movs	r1, #20
 80080a4:	0018      	movs	r0, r3
 80080a6:	f002 ffc6 	bl	800b036 <_ZdlPvj>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	0018      	movs	r0, r3
 80080ae:	46bd      	mov	sp, r7
 80080b0:	b002      	add	sp, #8
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <_ZN11evClockwiseC1Ev>:
#include "events.h"
#include "evClockwise.h"

evClockwise::evClockwise() :
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evClockwiseId)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	2103      	movs	r1, #3
 80080c2:	0018      	movs	r0, r3
 80080c4:	f000 fb2e 	bl	8008724 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80080c8:	4a03      	ldr	r2, [pc, #12]	; (80080d8 <_ZN11evClockwiseC1Ev+0x24>)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	0018      	movs	r0, r3
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b002      	add	sp, #8
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	0800c55c 	.word	0x0800c55c

080080dc <_ZN11evClockwiseD1Ev>:
#define EVCLOCKWISE_H_

#include "xf/customevent.h"
#include "events.h"

class evClockwise : public XFCustomEvent
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	4a05      	ldr	r2, [pc, #20]	; (80080fc <_ZN11evClockwiseD1Ev+0x20>)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	0018      	movs	r0, r3
 80080ee:	f7ff ff85 	bl	8007ffc <_ZN13XFCustomEventD1Ev>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	0018      	movs	r0, r3
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b002      	add	sp, #8
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	0800c55c 	.word	0x0800c55c

08008100 <_ZN11evClockwiseD0Ev>:
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	0018      	movs	r0, r3
 800810c:	f7ff ffe6 	bl	80080dc <_ZN11evClockwiseD1Ev>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2114      	movs	r1, #20
 8008114:	0018      	movs	r0, r3
 8008116:	f002 ff8e 	bl	800b036 <_ZdlPvj>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	0018      	movs	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	b002      	add	sp, #8
 8008122:	bd80      	pop	{r7, pc}

08008124 <_ZN18evCounterClockwiseC1Ev>:
#include "events.h"
#include "evCounterClockwise.h"

evCounterClockwise::evCounterClockwise() :
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evCounterClockwiseId)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	2104      	movs	r1, #4
 8008132:	0018      	movs	r0, r3
 8008134:	f000 faf6 	bl	8008724 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8008138:	4a03      	ldr	r2, [pc, #12]	; (8008148 <_ZN18evCounterClockwiseC1Ev+0x24>)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	0018      	movs	r0, r3
 8008142:	46bd      	mov	sp, r7
 8008144:	b002      	add	sp, #8
 8008146:	bd80      	pop	{r7, pc}
 8008148:	0800c570 	.word	0x0800c570

0800814c <_ZN18evCounterClockwiseD1Ev>:
#define EVCOUNTERCLOCKWISE_H_

#include "xf/customevent.h"
#include "events.h"

class evCounterClockwise : public XFCustomEvent
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	4a05      	ldr	r2, [pc, #20]	; (800816c <_ZN18evCounterClockwiseD1Ev+0x20>)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	0018      	movs	r0, r3
 800815e:	f7ff ff4d 	bl	8007ffc <_ZN13XFCustomEventD1Ev>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	0018      	movs	r0, r3
 8008166:	46bd      	mov	sp, r7
 8008168:	b002      	add	sp, #8
 800816a:	bd80      	pop	{r7, pc}
 800816c:	0800c570 	.word	0x0800c570

08008170 <_ZN18evCounterClockwiseD0Ev>:
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	0018      	movs	r0, r3
 800817c:	f7ff ffe6 	bl	800814c <_ZN18evCounterClockwiseD1Ev>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2114      	movs	r1, #20
 8008184:	0018      	movs	r0, r3
 8008186:	f002 ff56 	bl	800b036 <_ZdlPvj>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	0018      	movs	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	b002      	add	sp, #8
 8008192:	bd80      	pop	{r7, pc}

08008194 <_ZN6evDoneC1Ev>:
#include "events.h"
#include "evDone.h"

evDone::evDone() :
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evDoneId)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	2107      	movs	r1, #7
 80081a2:	0018      	movs	r0, r3
 80081a4:	f000 fabe 	bl	8008724 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80081a8:	4a03      	ldr	r2, [pc, #12]	; (80081b8 <_ZN6evDoneC1Ev+0x24>)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	0018      	movs	r0, r3
 80081b2:	46bd      	mov	sp, r7
 80081b4:	b002      	add	sp, #8
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	0800c584 	.word	0x0800c584

080081bc <_ZN6evDoneD1Ev>:
#define EVDONE_H_

#include "xf/customevent.h"
#include "events.h"

class evDone : public XFCustomEvent
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	4a05      	ldr	r2, [pc, #20]	; (80081dc <_ZN6evDoneD1Ev+0x20>)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	0018      	movs	r0, r3
 80081ce:	f7ff ff15 	bl	8007ffc <_ZN13XFCustomEventD1Ev>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	0018      	movs	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	b002      	add	sp, #8
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	0800c584 	.word	0x0800c584

080081e0 <_ZN6evDoneD0Ev>:
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	0018      	movs	r0, r3
 80081ec:	f7ff ffe6 	bl	80081bc <_ZN6evDoneD1Ev>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2114      	movs	r1, #20
 80081f4:	0018      	movs	r0, r3
 80081f6:	f002 ff1e 	bl	800b036 <_ZdlPvj>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	0018      	movs	r0, r3
 80081fe:	46bd      	mov	sp, r7
 8008200:	b002      	add	sp, #8
 8008202:	bd80      	pop	{r7, pc}

08008204 <_ZN13evFlagTriggerC1Ev>:
#include "events.h"
#include "evFlagTrigger.h"

evFlagTrigger::evFlagTrigger() :
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evFlagTriggerId)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	2105      	movs	r1, #5
 8008212:	0018      	movs	r0, r3
 8008214:	f000 fa86 	bl	8008724 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8008218:	4a03      	ldr	r2, [pc, #12]	; (8008228 <_ZN13evFlagTriggerC1Ev+0x24>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	0018      	movs	r0, r3
 8008222:	46bd      	mov	sp, r7
 8008224:	b002      	add	sp, #8
 8008226:	bd80      	pop	{r7, pc}
 8008228:	0800c598 	.word	0x0800c598

0800822c <_ZN13evFlagTriggerD1Ev>:
#define EVFLAGTRIGGER_H_

#include "xf/customevent.h"
#include "events.h"

class evFlagTrigger : public XFCustomEvent
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	4a05      	ldr	r2, [pc, #20]	; (800824c <_ZN13evFlagTriggerD1Ev+0x20>)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	0018      	movs	r0, r3
 800823e:	f7ff fedd 	bl	8007ffc <_ZN13XFCustomEventD1Ev>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	0018      	movs	r0, r3
 8008246:	46bd      	mov	sp, r7
 8008248:	b002      	add	sp, #8
 800824a:	bd80      	pop	{r7, pc}
 800824c:	0800c598 	.word	0x0800c598

08008250 <_ZN13evFlagTriggerD0Ev>:
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	0018      	movs	r0, r3
 800825c:	f7ff ffe6 	bl	800822c <_ZN13evFlagTriggerD1Ev>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2114      	movs	r1, #20
 8008264:	0018      	movs	r0, r3
 8008266:	f002 fee6 	bl	800b036 <_ZdlPvj>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	b002      	add	sp, #8
 8008272:	bd80      	pop	{r7, pc}

08008274 <_ZN10evGoToZeroC1Ev>:
 */

#include "events.h"
#include "evGoToZero.h"

evGoToZero::evGoToZero() :
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evGoToZeroId)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	2108      	movs	r1, #8
 8008282:	0018      	movs	r0, r3
 8008284:	f000 fa4e 	bl	8008724 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8008288:	4a03      	ldr	r2, [pc, #12]	; (8008298 <_ZN10evGoToZeroC1Ev+0x24>)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	0018      	movs	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	b002      	add	sp, #8
 8008296:	bd80      	pop	{r7, pc}
 8008298:	0800c5ac 	.word	0x0800c5ac

0800829c <_ZN10evGoToZeroD1Ev>:
#define EVGOTOZERO_H_

#include "xf/customevent.h"
#include "events.h"

class evGoToZero : public XFCustomEvent
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	4a05      	ldr	r2, [pc, #20]	; (80082bc <_ZN10evGoToZeroD1Ev+0x20>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7ff fea5 	bl	8007ffc <_ZN13XFCustomEventD1Ev>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	0018      	movs	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b002      	add	sp, #8
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	0800c5ac 	.word	0x0800c5ac

080082c0 <_ZN10evGoToZeroD0Ev>:
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	0018      	movs	r0, r3
 80082cc:	f7ff ffe6 	bl	800829c <_ZN10evGoToZeroD1Ev>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2114      	movs	r1, #20
 80082d4:	0018      	movs	r0, r3
 80082d6:	f002 feae 	bl	800b036 <_ZdlPvj>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	0018      	movs	r0, r3
 80082de:	46bd      	mov	sp, r7
 80082e0:	b002      	add	sp, #8
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <_ZN8evSpiIrqC1Ev>:
#include "events.h"
#include "evSpiIrq.h"


evSpiIrq::evSpiIrq() :
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evSpiIrqId)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	2101      	movs	r1, #1
 80082f2:	0018      	movs	r0, r3
 80082f4:	f000 fa16 	bl	8008724 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80082f8:	4a03      	ldr	r2, [pc, #12]	; (8008308 <_ZN8evSpiIrqC1Ev+0x24>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	0018      	movs	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	b002      	add	sp, #8
 8008306:	bd80      	pop	{r7, pc}
 8008308:	0800c5c0 	.word	0x0800c5c0

0800830c <_ZN8evSpiIrqD1Ev>:
#define EVSPIIRQ_H_

#include "xf/customevent.h"
#include "events.h"

class evSpiIrq : public XFCustomEvent
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	4a05      	ldr	r2, [pc, #20]	; (800832c <_ZN8evSpiIrqD1Ev+0x20>)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	0018      	movs	r0, r3
 800831e:	f7ff fe6d 	bl	8007ffc <_ZN13XFCustomEventD1Ev>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	0018      	movs	r0, r3
 8008326:	46bd      	mov	sp, r7
 8008328:	b002      	add	sp, #8
 800832a:	bd80      	pop	{r7, pc}
 800832c:	0800c5c0 	.word	0x0800c5c0

08008330 <_ZN8evSpiIrqD0Ev>:
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	0018      	movs	r0, r3
 800833c:	f7ff ffe6 	bl	800830c <_ZN8evSpiIrqD1Ev>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2114      	movs	r1, #20
 8008344:	0018      	movs	r0, r3
 8008346:	f002 fe76 	bl	800b036 <_ZdlPvj>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	0018      	movs	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	b002      	add	sp, #8
 8008352:	bd80      	pop	{r7, pc}

08008354 <_Z5inISRv>:

volatile int bInISR = 0;
volatile int bOMEnterCriticalRegionNested = 0;

int inISR()
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 8008358:	4b02      	ldr	r3, [pc, #8]	; (8008364 <_Z5inISRv+0x10>)
 800835a:	681b      	ldr	r3, [r3, #0]
}
 800835c:	0018      	movs	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	200000e8 	.word	0x200000e8

08008368 <_Z13enterCriticalv>:

void enterCritical()
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 800836c:	f7ff fff2 	bl	8008354 <_Z5inISRv>
 8008370:	0003      	movs	r3, r0
 8008372:	425a      	negs	r2, r3
 8008374:	4153      	adcs	r3, r2
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00c      	beq.n	8008396 <_Z13enterCriticalv+0x2e>
	{
		if (!bOMEnterCriticalRegionNested)
 800837c:	4b07      	ldr	r3, [pc, #28]	; (800839c <_Z13enterCriticalv+0x34>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	425a      	negs	r2, r3
 8008382:	4153      	adcs	r3, r2
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d000      	beq.n	800838c <_Z13enterCriticalv+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800838a:	b672      	cpsid	i
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 800838c:	4b03      	ldr	r3, [pc, #12]	; (800839c <_Z13enterCriticalv+0x34>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	4b02      	ldr	r3, [pc, #8]	; (800839c <_Z13enterCriticalv+0x34>)
 8008394:	601a      	str	r2, [r3, #0]
	}
}
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	200000ec 	.word	0x200000ec

080083a0 <_Z12exitCriticalv>:

void exitCritical()
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 80083a4:	f7ff ffd6 	bl	8008354 <_Z5inISRv>
 80083a8:	0003      	movs	r3, r0
 80083aa:	425a      	negs	r2, r3
 80083ac:	4153      	adcs	r3, r2
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00c      	beq.n	80083ce <_Z12exitCriticalv+0x2e>
	{
		bOMEnterCriticalRegionNested--;
 80083b4:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <_Z12exitCriticalv+0x34>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	1e5a      	subs	r2, r3, #1
 80083ba:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <_Z12exitCriticalv+0x34>)
 80083bc:	601a      	str	r2, [r3, #0]

		if (!bOMEnterCriticalRegionNested)
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <_Z12exitCriticalv+0x34>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	425a      	negs	r2, r3
 80083c4:	4153      	adcs	r3, r2
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d000      	beq.n	80083ce <_Z12exitCriticalv+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80083cc:	b662      	cpsie	i
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	200000ec 	.word	0x200000ec

080083d8 <_ZN7XFEvent11setBehaviorEPN9interface10XFReactiveE>:
    inline void setBehavior(interface::XFReactive * pBehavior) { _pBehavior = pBehavior; }
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	60da      	str	r2, [r3, #12]
 80083e8:	46c0      	nop			; (mov r8, r8)
 80083ea:	46bd      	mov	sp, r7
 80083ec:	b002      	add	sp, #8
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>:

	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
	{
		return (this->_status == eventStatus);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	425a      	negs	r2, r3
 8008406:	4153      	adcs	r3, r2
 8008408:	b2db      	uxtb	r3, r3
	}
 800840a:	0018      	movs	r0, r3
 800840c:	46bd      	mov	sp, r7
 800840e:	b002      	add	sp, #8
 8008410:	bd80      	pop	{r7, pc}

08008412 <_ZNK10XFBehavior16hasOwnDispatcherEv>:
    inline bool hasOwnDispatcher() const { return _hasOwnDispatcher; }	///< True if behavior has its own dispatcher.
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	7a1b      	ldrb	r3, [r3, #8]
 800841e:	0018      	movs	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	b002      	add	sp, #8
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <_ZN9interface10XFReactiveC1Ev>:

protected:
    virtual TerminateBehavior process(const XFEvent * pEvent) = 0;  ///< Called by the dispatcher to process an event.

protected:
    XFReactive() = default;
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	4a03      	ldr	r2, [pc, #12]	; (8008440 <_ZN9interface10XFReactiveC1Ev+0x18>)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0018      	movs	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	b002      	add	sp, #8
 800843e:	bd80      	pop	{r7, pc}
 8008440:	0800c5fc 	.word	0x0800c5fc

08008444 <_ZN9interface10XFReactiveD1Ev>:
    virtual ~XFReactive() = default;
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	4a03      	ldr	r2, [pc, #12]	; (800845c <_ZN9interface10XFReactiveD1Ev+0x18>)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	0018      	movs	r0, r3
 8008456:	46bd      	mov	sp, r7
 8008458:	b002      	add	sp, #8
 800845a:	bd80      	pop	{r7, pc}
 800845c:	0800c5fc 	.word	0x0800c5fc

08008460 <_ZN9interface10XFReactiveD0Ev>:
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	0018      	movs	r0, r3
 800846c:	f7ff ffea 	bl	8008444 <_ZN9interface10XFReactiveD1Ev>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2104      	movs	r1, #4
 8008474:	0018      	movs	r0, r3
 8008476:	f002 fdde 	bl	800b036 <_ZdlPvj>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	0018      	movs	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	b002      	add	sp, #8
 8008482:	bd80      	pop	{r7, pc}

08008484 <_ZN10XFBehaviorC1Eb>:
#include "xf/initialevent.h"
#include "xf/behavior.h"

using interface::XFResourceFactory;

XFBehavior::XFBehavior(bool ownDispatcher /* = false */) :
 8008484:	b590      	push	{r4, r7, lr}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	000a      	movs	r2, r1
 800848e:	1cfb      	adds	r3, r7, #3
 8008490:	701a      	strb	r2, [r3, #0]
    _pDispatcher(nullptr),
    _hasOwnDispatcher(ownDispatcher),
    deleteOnTerminate_(false),
    _pCurrentEvent(nullptr)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	0018      	movs	r0, r3
 8008496:	f7ff ffc7 	bl	8008428 <_ZN9interface10XFReactiveC1Ev>
 800849a:	4a21      	ldr	r2, [pc, #132]	; (8008520 <_ZN10XFBehaviorC1Eb+0x9c>)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	1cfa      	adds	r2, r7, #3
 80084aa:	7812      	ldrb	r2, [r2, #0]
 80084ac:	721a      	strb	r2, [r3, #8]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	725a      	strb	r2, [r3, #9]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	60da      	str	r2, [r3, #12]
{
    if (ownDispatcher)
 80084ba:	1cfb      	adds	r3, r7, #3
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00b      	beq.n	80084da <_ZN10XFBehaviorC1Eb+0x56>
    {
        _pDispatcher = XFResourceFactory::getInstance()->createDispatcher();
 80084c2:	f000 fc87 	bl	8008dd4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 80084c6:	0002      	movs	r2, r0
 80084c8:	6813      	ldr	r3, [r2, #0]
 80084ca:	3304      	adds	r3, #4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	0010      	movs	r0, r2
 80084d0:	4798      	blx	r3
 80084d2:	0002      	movs	r2, r0
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	605a      	str	r2, [r3, #4]
 80084d8:	e009      	b.n	80084ee <_ZN10XFBehaviorC1Eb+0x6a>
    }
    else
    {
        _pDispatcher = XFResourceFactory::getInstance()->getDefaultDispatcher();
 80084da:	f000 fc7b 	bl	8008dd4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 80084de:	0002      	movs	r2, r0
 80084e0:	6813      	ldr	r3, [r2, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	0010      	movs	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	0002      	movs	r2, r0
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	605a      	str	r2, [r3, #4]

    // Force hasOwnDispatcher attribute to false in case actual
    // dispatcher is the default dispatcher. This may happen
    // if in an IDF an other dispatcher is requested, but
    // only the default dispatcher is present.
    if (_pDispatcher == XFResourceFactory::getInstance()->getDefaultDispatcher())
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685c      	ldr	r4, [r3, #4]
 80084f2:	f000 fc6f 	bl	8008dd4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 80084f6:	0002      	movs	r2, r0
 80084f8:	6813      	ldr	r3, [r2, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	0010      	movs	r0, r2
 80084fe:	4798      	blx	r3
 8008500:	0003      	movs	r3, r0
 8008502:	1ae3      	subs	r3, r4, r3
 8008504:	425a      	negs	r2, r3
 8008506:	4153      	adcs	r3, r2
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <_ZN10XFBehaviorC1Eb+0x90>
    {
        _hasOwnDispatcher = false;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	721a      	strb	r2, [r3, #8]
    }
}
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	0018      	movs	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	b003      	add	sp, #12
 800851c:	bd90      	pop	{r4, r7, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	0800c5d4 	.word	0x0800c5d4

08008524 <_ZN10XFBehaviorD1Ev>:

XFBehavior::~XFBehavior()
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	4a05      	ldr	r2, [pc, #20]	; (8008544 <_ZN10XFBehaviorD1Ev+0x20>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	0018      	movs	r0, r3
 8008536:	f7ff ff85 	bl	8008444 <_ZN9interface10XFReactiveD1Ev>
{

}
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	0018      	movs	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	b002      	add	sp, #8
 8008542:	bd80      	pop	{r7, pc}
 8008544:	0800c5d4 	.word	0x0800c5d4

08008548 <_ZN10XFBehavior13startBehaviorEv>:

void XFBehavior::startBehavior()
{
 8008548:	b5b0      	push	{r4, r5, r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
    // Send initial event to state machine
    GEN(XFInitialEvent());
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	330c      	adds	r3, #12
 8008556:	681c      	ldr	r4, [r3, #0]
 8008558:	2010      	movs	r0, #16
 800855a:	f002 fd70 	bl	800b03e <_Znwj>
 800855e:	0003      	movs	r3, r0
 8008560:	001d      	movs	r5, r3
 8008562:	0028      	movs	r0, r5
 8008564:	f000 f8f8 	bl	8008758 <_ZN14XFInitialEventC1Ev>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	0029      	movs	r1, r5
 800856c:	0018      	movs	r0, r3
 800856e:	47a0      	blx	r4

    // Start dispatcher if behavior has its own dispatcher
    if (hasOwnDispatcher())
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	0018      	movs	r0, r3
 8008574:	f7ff ff4d 	bl	8008412 <_ZNK10XFBehavior16hasOwnDispatcherEv>
 8008578:	1e03      	subs	r3, r0, #0
 800857a:	d009      	beq.n	8008590 <_ZN10XFBehavior13startBehaviorEv+0x48>
    {
        getDispatcher()->start();
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	0018      	movs	r0, r3
 8008580:	f000 f86d 	bl	800865e <_ZN10XFBehavior13getDispatcherEv>
 8008584:	0002      	movs	r2, r0
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	330c      	adds	r3, #12
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	0010      	movs	r0, r2
 800858e:	4798      	blx	r3
    }
}
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	46bd      	mov	sp, r7
 8008594:	b002      	add	sp, #8
 8008596:	bdb0      	pop	{r4, r5, r7, pc}

08008598 <_ZN10XFBehavior9pushEventEP7XFEvent>:

void XFBehavior::pushEvent(XFEvent * pEvent)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
    // Set owner
    pEvent->setBehavior(this);
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	0011      	movs	r1, r2
 80085a8:	0018      	movs	r0, r3
 80085aa:	f7ff ff15 	bl	80083d8 <_ZN7XFEvent11setBehaviorEPN9interface10XFReactiveE>
    // Push to dispatchers event queue
    getDispatcher()->pushEvent(pEvent);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	0018      	movs	r0, r3
 80085b2:	f000 f854 	bl	800865e <_ZN10XFBehavior13getDispatcherEv>
 80085b6:	0002      	movs	r2, r0
 80085b8:	6813      	ldr	r3, [r2, #0]
 80085ba:	3314      	adds	r3, #20
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	0010      	movs	r0, r2
 80085c2:	4798      	blx	r3
}
 80085c4:	46c0      	nop			; (mov r8, r8)
 80085c6:	46bd      	mov	sp, r7
 80085c8:	b002      	add	sp, #8
 80085ca:	bd80      	pop	{r7, pc}

080085cc <_ZNK10XFBehavior17deleteOnTerminateEv>:

bool XFBehavior::deleteOnTerminate() const
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
    return deleteOnTerminate_;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	7a5b      	ldrb	r3, [r3, #9]
}
 80085d8:	0018      	movs	r0, r3
 80085da:	46bd      	mov	sp, r7
 80085dc:	b002      	add	sp, #8
 80085de:	bd80      	pop	{r7, pc}

080085e0 <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	000a      	movs	r2, r1
 80085ea:	1cfb      	adds	r3, r7, #3
 80085ec:	701a      	strb	r2, [r3, #0]
    deleteOnTerminate_ = deleteBehaviour;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	1cfa      	adds	r2, r7, #3
 80085f2:	7812      	ldrb	r2, [r2, #0]
 80085f4:	725a      	strb	r2, [r3, #9]
}
 80085f6:	46c0      	nop			; (mov r8, r8)
 80085f8:	46bd      	mov	sp, r7
 80085fa:	b002      	add	sp, #8
 80085fc:	bd80      	pop	{r7, pc}

080085fe <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent * pEvent)
{
 80085fe:	b590      	push	{r4, r7, lr}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
    XFEventStatus eventStatus;
 8008608:	240c      	movs	r4, #12
 800860a:	193b      	adds	r3, r7, r4
 800860c:	2100      	movs	r1, #0
 800860e:	0018      	movs	r0, r3
 8008610:	f7fc fee1 	bl	80053d6 <_ZN13XFEventStatusC1ENS_12eEventStatusE>

    setCurrentEvent(pEvent);
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	0011      	movs	r1, r2
 800861a:	0018      	movs	r0, r3
 800861c:	f000 f829 	bl	8008672 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>

    eventStatus = processEvent();
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	331c      	adds	r3, #28
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	0010      	movs	r0, r2
 800862c:	4798      	blx	r3
 800862e:	1c03      	adds	r3, r0, #0
 8008630:	1c1a      	adds	r2, r3, #0
 8008632:	193b      	adds	r3, r7, r4
 8008634:	701a      	strb	r2, [r3, #0]

    setCurrentEvent(nullptr);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2100      	movs	r1, #0
 800863a:	0018      	movs	r0, r3
 800863c:	f000 f819 	bl	8008672 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>

    return (eventStatus == XFEventStatus::Terminate);
 8008640:	210f      	movs	r1, #15
 8008642:	187b      	adds	r3, r7, r1
 8008644:	2208      	movs	r2, #8
 8008646:	701a      	strb	r2, [r3, #0]
 8008648:	187a      	adds	r2, r7, r1
 800864a:	193b      	adds	r3, r7, r4
 800864c:	0011      	movs	r1, r2
 800864e:	0018      	movs	r0, r3
 8008650:	f7ff fece 	bl	80083f0 <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>
 8008654:	0003      	movs	r3, r0
}
 8008656:	0018      	movs	r0, r3
 8008658:	46bd      	mov	sp, r7
 800865a:	b005      	add	sp, #20
 800865c:	bd90      	pop	{r4, r7, pc}

0800865e <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher * XFBehavior::getDispatcher()
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
    return _pDispatcher;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
}
 800866a:	0018      	movs	r0, r3
 800866c:	46bd      	mov	sp, r7
 800866e:	b002      	add	sp, #8
 8008670:	bd80      	pop	{r7, pc}

08008672 <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent * pEvent)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
    _pCurrentEvent = pEvent;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	60da      	str	r2, [r3, #12]
}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	46bd      	mov	sp, r7
 8008686:	b002      	add	sp, #8
 8008688:	bd80      	pop	{r7, pc}

0800868a <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent * XFBehavior::getCurrentEvent() const
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
    return _pCurrentEvent;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
}
 8008696:	0018      	movs	r0, r3
 8008698:	46bd      	mov	sp, r7
 800869a:	b002      	add	sp, #8
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout * XFBehavior::getCurrentTimeout()
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
    assert(getCurrentEvent()->getEventType() == XFEvent::Timeout);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	0018      	movs	r0, r3
 80086ac:	f7ff ffed 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 80086b0:	0003      	movs	r3, r0
 80086b2:	0018      	movs	r0, r3
 80086b4:	f7fc fe7a 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 80086b8:	0003      	movs	r3, r0
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d005      	beq.n	80086ca <_ZN10XFBehavior17getCurrentTimeoutEv+0x2a>
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <_ZN10XFBehavior17getCurrentTimeoutEv+0x3c>)
 80086c0:	4a07      	ldr	r2, [pc, #28]	; (80086e0 <_ZN10XFBehavior17getCurrentTimeoutEv+0x40>)
 80086c2:	4808      	ldr	r0, [pc, #32]	; (80086e4 <_ZN10XFBehavior17getCurrentTimeoutEv+0x44>)
 80086c4:	2165      	movs	r1, #101	; 0x65
 80086c6:	f002 fcf9 	bl	800b0bc <__assert_func>

    return static_cast<const XFTimeout *>(getCurrentEvent());
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	0018      	movs	r0, r3
 80086ce:	f7ff ffdc 	bl	800868a <_ZNK10XFBehavior15getCurrentEventEv>
 80086d2:	0003      	movs	r3, r0
}
 80086d4:	0018      	movs	r0, r3
 80086d6:	46bd      	mov	sp, r7
 80086d8:	b002      	add	sp, #8
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	0800c17c 	.word	0x0800c17c
 80086e0:	0800c618 	.word	0x0800c618
 80086e4:	0800c1b4 	.word	0x0800c1b4

080086e8 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>:
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) {}
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	607a      	str	r2, [r7, #4]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	200b      	movs	r0, #11
 80086f6:	183b      	adds	r3, r7, r0
 80086f8:	1c0a      	adds	r2, r1, #0
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	4a08      	ldr	r2, [pc, #32]	; (8008720 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE+0x38>)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	183a      	adds	r2, r7, r0
 8008706:	7812      	ldrb	r2, [r2, #0]
 8008708:	711a      	strb	r2, [r3, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	609a      	str	r2, [r3, #8]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	0018      	movs	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	b004      	add	sp, #16
 800871e:	bd80      	pop	{r7, pc}
 8008720:	0800c548 	.word	0x0800c548

08008724 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>:
#include "xf/customevent.h"

XFCustomEvent::XFCustomEvent(int id, interface::XFReactive * pBehavior)
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
    : XFEvent(XFEvent::Event, id, pBehavior),
      _bDeleteAfterConsume(true)
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	2103      	movs	r1, #3
 8008738:	f7ff ffd6 	bl	80086e8 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800873c:	4a05      	ldr	r2, [pc, #20]	; (8008754 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE+0x30>)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	741a      	strb	r2, [r3, #16]
{

}
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	0018      	movs	r0, r3
 800874c:	46bd      	mov	sp, r7
 800874e:	b004      	add	sp, #16
 8008750:	bd80      	pop	{r7, pc}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	0800c534 	.word	0x0800c534

08008758 <_ZN14XFInitialEventC1Ev>:
#include "xf/initialevent.h"

XFInitialEvent::XFInitialEvent()
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
    : XFEvent(XFEvent::Initial, 0, nullptr)
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	2300      	movs	r3, #0
 8008764:	2200      	movs	r2, #0
 8008766:	2101      	movs	r1, #1
 8008768:	f7ff ffbe 	bl	80086e8 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800876c:	4a03      	ldr	r2, [pc, #12]	; (800877c <_ZN14XFInitialEventC1Ev+0x24>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	601a      	str	r2, [r3, #0]
{
}
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	0018      	movs	r0, r3
 8008776:	46bd      	mov	sp, r7
 8008778:	b002      	add	sp, #8
 800877a:	bd80      	pop	{r7, pc}
 800877c:	0800c654 	.word	0x0800c654

08008780 <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:

bool XFInitialEvent::deleteAfterConsume() const
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
    return true;
 8008788:	2301      	movs	r3, #1
}
 800878a:	0018      	movs	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	b002      	add	sp, #8
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	4a05      	ldr	r2, [pc, #20]	; (80087b4 <_ZN14XFInitialEventD1Ev+0x20>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	0018      	movs	r0, r3
 80087a6:	f7ff fbf5 	bl	8007f94 <_ZN7XFEventD1Ev>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	0018      	movs	r0, r3
 80087ae:	46bd      	mov	sp, r7
 80087b0:	b002      	add	sp, #8
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	0800c654 	.word	0x0800c654

080087b8 <_ZN14XFInitialEventD0Ev>:
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	0018      	movs	r0, r3
 80087c4:	f7ff ffe6 	bl	8008794 <_ZN14XFInitialEventD1Ev>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2110      	movs	r1, #16
 80087cc:	0018      	movs	r0, r3
 80087ce:	f002 fc32 	bl	800b036 <_ZdlPvj>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	0018      	movs	r0, r3
 80087d6:	46bd      	mov	sp, r7
 80087d8:	b002      	add	sp, #8
 80087da:	bd80      	pop	{r7, pc}

080087dc <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>:
#include "xf/nulltransition.h"

XFNullTransition::XFNullTransition(interface::XFReactive * pBehavior)
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
 : XFEvent(XFEvent::NullTransition, 0, pBehavior)
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2200      	movs	r2, #0
 80087ec:	2102      	movs	r1, #2
 80087ee:	f7ff ff7b 	bl	80086e8 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 80087f2:	4a04      	ldr	r2, [pc, #16]	; (8008804 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE+0x28>)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	601a      	str	r2, [r3, #0]
{
}
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	0018      	movs	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	b002      	add	sp, #8
 8008800:	bd80      	pop	{r7, pc}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	0800c668 	.word	0x0800c668

08008808 <_ZNK16XFNullTransition18deleteAfterConsumeEv>:

bool XFNullTransition::deleteAfterConsume() const
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
    return true;
 8008810:	2301      	movs	r3, #1
}
 8008812:	0018      	movs	r0, r3
 8008814:	46bd      	mov	sp, r7
 8008816:	b002      	add	sp, #8
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <_ZN16XFNullTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * an other (without a trigger) a null transition must be pushed.
 */
class XFNullTransition : public XFEvent
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	4a05      	ldr	r2, [pc, #20]	; (800883c <_ZN16XFNullTransitionD1Ev+0x20>)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	0018      	movs	r0, r3
 800882e:	f7ff fbb1 	bl	8007f94 <_ZN7XFEventD1Ev>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	0018      	movs	r0, r3
 8008836:	46bd      	mov	sp, r7
 8008838:	b002      	add	sp, #8
 800883a:	bd80      	pop	{r7, pc}
 800883c:	0800c668 	.word	0x0800c668

08008840 <_ZN16XFNullTransitionD0Ev>:
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	0018      	movs	r0, r3
 800884c:	f7ff ffe6 	bl	800881c <_ZN16XFNullTransitionD1Ev>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2110      	movs	r1, #16
 8008854:	0018      	movs	r0, r3
 8008856:	f002 fbee 	bl	800b036 <_ZdlPvj>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	0018      	movs	r0, r3
 800885e:	46bd      	mov	sp, r7
 8008860:	b002      	add	sp, #8
 8008862:	bd80      	pop	{r7, pc}

08008864 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
#include "xf/timeout.h"

XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]
 : XFEvent(XFEvent::Timeout, id, pBehavior),
   _interval(interval),
   _relTicks(interval)
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	2104      	movs	r1, #4
 800887a:	f7ff ff35 	bl	80086e8 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800887e:	4a07      	ldr	r2, [pc, #28]	; (800889c <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x38>)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	611a      	str	r2, [r3, #16]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	615a      	str	r2, [r3, #20]
{
}
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	0018      	movs	r0, r3
 8008894:	46bd      	mov	sp, r7
 8008896:	b004      	add	sp, #16
 8008898:	bd80      	pop	{r7, pc}
 800889a:	46c0      	nop			; (mov r8, r8)
 800889c:	0800c67c 	.word	0x0800c67c

080088a0 <_ZNK9XFTimeouteqERKS_>:

bool XFTimeout::operator ==(const XFTimeout & timeout) const
{
 80088a0:	b590      	push	{r4, r7, lr}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
    // Check behavior and timeout id attributes, if there are equal
    return (_pBehavior == timeout._pBehavior && getId() == timeout.getId()) ? true : false;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d10d      	bne.n	80088d2 <_ZNK9XFTimeouteqERKS_+0x32>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	0018      	movs	r0, r3
 80088ba:	f7fc fd82 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 80088be:	0004      	movs	r4, r0
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	0018      	movs	r0, r3
 80088c4:	f7fc fd7d 	bl	80053c2 <_ZNK7XFEvent5getIdEv>
 80088c8:	0003      	movs	r3, r0
 80088ca:	429c      	cmp	r4, r3
 80088cc:	d101      	bne.n	80088d2 <_ZNK9XFTimeouteqERKS_+0x32>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <_ZNK9XFTimeouteqERKS_+0x34>
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	0018      	movs	r0, r3
 80088d6:	46bd      	mov	sp, r7
 80088d8:	b003      	add	sp, #12
 80088da:	bd90      	pop	{r4, r7, pc}

080088dc <_ZNK9XFTimeout18deleteAfterConsumeEv>:

bool XFTimeout::deleteAfterConsume() const
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
    return true;
 80088e4:	2301      	movs	r3, #1
}
 80088e6:	0018      	movs	r0, r3
 80088e8:	46bd      	mov	sp, r7
 80088ea:	b002      	add	sp, #8
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	4a05      	ldr	r2, [pc, #20]	; (8008910 <_ZN9XFTimeoutD1Ev+0x20>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	0018      	movs	r0, r3
 8008902:	f7ff fb47 	bl	8007f94 <_ZN7XFEventD1Ev>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	0018      	movs	r0, r3
 800890a:	46bd      	mov	sp, r7
 800890c:	b002      	add	sp, #8
 800890e:	bd80      	pop	{r7, pc}
 8008910:	0800c67c 	.word	0x0800c67c

08008914 <_ZN9XFTimeoutD0Ev>:
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	0018      	movs	r0, r3
 8008920:	f7ff ffe6 	bl	80088f0 <_ZN9XFTimeoutD1Ev>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2118      	movs	r1, #24
 8008928:	0018      	movs	r0, r3
 800892a:	f002 fb84 	bl	800b036 <_ZdlPvj>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	0018      	movs	r0, r3
 8008932:	46bd      	mov	sp, r7
 8008934:	b002      	add	sp, #8
 8008936:	bd80      	pop	{r7, pc}

08008938 <_ZNK7XFEvent11getBehaviorEv>:
    inline interface::XFReactive * getBehavior() const { return _pBehavior; }
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	0018      	movs	r0, r3
 8008946:	46bd      	mov	sp, r7
 8008948:	b002      	add	sp, #8
 800894a:	bd80      	pop	{r7, pc}

0800894c <_ZNK9interface12XFDispatcher9getThreadEv>:
     * @brief Returns pointer to thread executing the behavior.
     *
     * Within an IDF no threads are present and this method returns
     * always null.
     */
    virtual interface::XFThread * getThread() const { return nullptr; }
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	2300      	movs	r3, #0
 8008956:	0018      	movs	r0, r3
 8008958:	46bd      	mov	sp, r7
 800895a:	b002      	add	sp, #8
 800895c:	bd80      	pop	{r7, pc}

0800895e <_ZNK19XFDispatcherDefault8isActiveEv>:
{
public:
	XFDispatcherDefault();
	virtual  ~XFDispatcherDefault();

	virtual bool isActive() const { return false; }		///< Default dispatcher does not have a composite thread.
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	2300      	movs	r3, #0
 8008968:	0018      	movs	r0, r3
 800896a:	46bd      	mov	sp, r7
 800896c:	b002      	add	sp, #8
 800896e:	bd80      	pop	{r7, pc}

08008970 <_ZN9interface12XFDispatcherC1Ev>:
    XFDispatcher() = default;
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	4a03      	ldr	r2, [pc, #12]	; (8008988 <_ZN9interface12XFDispatcherC1Ev+0x18>)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	0018      	movs	r0, r3
 8008982:	46bd      	mov	sp, r7
 8008984:	b002      	add	sp, #8
 8008986:	bd80      	pop	{r7, pc}
 8008988:	0800c6c8 	.word	0x0800c6c8

0800898c <_ZN9interface12XFDispatcherD1Ev>:
    virtual ~XFDispatcher() = default;
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	4a03      	ldr	r2, [pc, #12]	; (80089a4 <_ZN9interface12XFDispatcherD1Ev+0x18>)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	0018      	movs	r0, r3
 800899e:	46bd      	mov	sp, r7
 80089a0:	b002      	add	sp, #8
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	0800c6c8 	.word	0x0800c6c8

080089a8 <_ZN9interface12XFDispatcherD0Ev>:
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	0018      	movs	r0, r3
 80089b4:	f7ff ffea 	bl	800898c <_ZN9interface12XFDispatcherD1Ev>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2104      	movs	r1, #4
 80089bc:	0018      	movs	r0, r3
 80089be:	f002 fb3a 	bl	800b036 <_ZdlPvj>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	0018      	movs	r0, r3
 80089c6:	46bd      	mov	sp, r7
 80089c8:	b002      	add	sp, #8
 80089ca:	bd80      	pop	{r7, pc}

080089cc <_ZN19XFDispatcherDefaultC1Ev>:
using interface::XFTimeoutManager;
using interface::XFResourceFactory;
using interface::XFReactive;
using interface::XFMutex;

XFDispatcherDefault::XFDispatcherDefault() :
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	_bExecuting(false),
	_pMutex(nullptr)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	0018      	movs	r0, r3
 80089d8:	f7ff ffca 	bl	8008970 <_ZN9interface12XFDispatcherC1Ev>
 80089dc:	4a10      	ldr	r2, [pc, #64]	; (8008a20 <_ZN19XFDispatcherDefaultC1Ev+0x54>)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	711a      	strb	r2, [r3, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3308      	adds	r3, #8
 80089ec:	0018      	movs	r0, r3
 80089ee:	f001 fb53 	bl	800a098 <_ZN19XFEventQueueDefaultC1Ev>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
{
	_pMutex = XFMutex::create();
 80089f8:	f002 fa5e 	bl	800aeb8 <_ZN9interface7XFMutex6createEv>
 80089fc:	0002      	movs	r2, r0
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38
	assert(_pMutex);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <_ZN19XFDispatcherDefaultC1Ev+0x4a>
 8008a0a:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <_ZN19XFDispatcherDefaultC1Ev+0x58>)
 8008a0c:	4a06      	ldr	r2, [pc, #24]	; (8008a28 <_ZN19XFDispatcherDefaultC1Ev+0x5c>)
 8008a0e:	4807      	ldr	r0, [pc, #28]	; (8008a2c <_ZN19XFDispatcherDefaultC1Ev+0x60>)
 8008a10:	2118      	movs	r1, #24
 8008a12:	f002 fb53 	bl	800b0bc <__assert_func>
}
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	0018      	movs	r0, r3
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	b002      	add	sp, #8
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	0800c690 	.word	0x0800c690
 8008a24:	0800c21c 	.word	0x0800c21c
 8008a28:	0800c6f8 	.word	0x0800c6f8
 8008a2c:	0800c224 	.word	0x0800c224

08008a30 <_ZN19XFDispatcherDefaultD1Ev>:

XFDispatcherDefault::~XFDispatcherDefault()
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	4a08      	ldr	r2, [pc, #32]	; (8008a5c <_ZN19XFDispatcherDefaultD1Ev+0x2c>)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3308      	adds	r3, #8
 8008a42:	0018      	movs	r0, r3
 8008a44:	f001 fb44 	bl	800a0d0 <_ZN19XFEventQueueDefaultD1Ev>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f7ff ff9e 	bl	800898c <_ZN9interface12XFDispatcherD1Ev>
{

}
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	0018      	movs	r0, r3
 8008a54:	46bd      	mov	sp, r7
 8008a56:	b002      	add	sp, #8
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	0800c690 	.word	0x0800c690

08008a60 <_ZN19XFDispatcherDefaultD0Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
}
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f7ff ffe0 	bl	8008a30 <_ZN19XFDispatcherDefaultD1Ev>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	213c      	movs	r1, #60	; 0x3c
 8008a74:	0018      	movs	r0, r3
 8008a76:	f002 fade 	bl	800b036 <_ZdlPvj>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	b002      	add	sp, #8
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <_ZN19XFDispatcherDefault5startEv>:

void XFDispatcherDefault::start()
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
        assert(_pMutex);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <_ZN19XFDispatcherDefault5startEv+0x1c>
 8008a94:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <_ZN19XFDispatcherDefault5startEv+0x2c>)
 8008a96:	4a07      	ldr	r2, [pc, #28]	; (8008ab4 <_ZN19XFDispatcherDefault5startEv+0x30>)
 8008a98:	4807      	ldr	r0, [pc, #28]	; (8008ab8 <_ZN19XFDispatcherDefault5startEv+0x34>)
 8008a9a:	2122      	movs	r1, #34	; 0x22
 8008a9c:	f002 fb0e 	bl	800b0bc <__assert_func>
	_bExecuting = true;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	711a      	strb	r2, [r3, #4]
}
 8008aa6:	46c0      	nop			; (mov r8, r8)
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	b002      	add	sp, #8
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	46c0      	nop			; (mov r8, r8)
 8008ab0:	0800c21c 	.word	0x0800c21c
 8008ab4:	0800c724 	.word	0x0800c724
 8008ab8:	0800c224 	.word	0x0800c224

08008abc <_ZN19XFDispatcherDefault4stopEv>:

void XFDispatcherDefault::stop()
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
	_bExecuting = false;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	711a      	strb	r2, [r3, #4]
}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	46bd      	mov	sp, r7
 8008ace:	b002      	add	sp, #8
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <_ZN19XFDispatcherDefault9pushEventEP7XFEvent>:

void XFDispatcherDefault::pushEvent(XFEvent * pEvent)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
	_pMutex->lock();
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	0010      	movs	r0, r2
 8008aec:	4798      	blx	r3
	{
#ifdef XF_TRACE_EVENT_PUSH_POP
	    Trace::out("Push event: 0x%x", pEvent);
#endif // XF_TRACE_EVENT_PUSH_POP
		_events.push(pEvent);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3308      	adds	r3, #8
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	0011      	movs	r1, r2
 8008af6:	0018      	movs	r0, r3
 8008af8:	f001 fb26 	bl	800a148 <_ZN19XFEventQueueDefault4pushEPK7XFEvent>
	}
	_pMutex->unlock();
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	330c      	adds	r3, #12
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	0010      	movs	r0, r2
 8008b0c:	4798      	blx	r3
}
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	46bd      	mov	sp, r7
 8008b12:	b002      	add	sp, #8
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <_ZN19XFDispatcherDefault15scheduleTimeoutEiiPN9interface10XFReactiveE>:

void XFDispatcherDefault::scheduleTimeout(int timeoutId, int interval, interface::XFReactive * pReactive)
{
 8008b16:	b590      	push	{r4, r7, lr}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
 8008b22:	603b      	str	r3, [r7, #0]
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 8008b24:	f000 fa2e 	bl	8008f84 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8008b28:	6803      	ldr	r3, [r0, #0]
 8008b2a:	3314      	adds	r3, #20
 8008b2c:	681c      	ldr	r4, [r3, #0]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	47a0      	blx	r4
}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	b005      	add	sp, #20
 8008b3c:	bd90      	pop	{r4, r7, pc}

08008b3e <_ZN19XFDispatcherDefault17unscheduleTimeoutEiPN9interface10XFReactiveE>:

void XFDispatcherDefault::unscheduleTimeout(int timeoutId, interface::XFReactive * pReactive)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	607a      	str	r2, [r7, #4]
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 8008b4a:	f000 fa1b 	bl	8008f84 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8008b4e:	6803      	ldr	r3, [r0, #0]
 8008b50:	3318      	adds	r3, #24
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	4798      	blx	r3
}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	b004      	add	sp, #16
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <_ZN19XFDispatcherDefault7executeEPKv>:

int XFDispatcherDefault::execute(const void * param /* = nullptr */)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
	(void)param;	// Parameter not used at the method

	while(_bExecuting)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	791b      	ldrb	r3, [r3, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d019      	beq.n	8008ba8 <_ZN19XFDispatcherDefault7executeEPKv+0x46>
	{
		while (_events.empty() && _bExecuting)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3308      	adds	r3, #8
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f001 fad7 	bl	800a12c <_ZNK19XFEventQueueDefault5emptyEv>
 8008b7e:	1e03      	subs	r3, r0, #0
 8008b80:	d005      	beq.n	8008b8e <_ZN19XFDispatcherDefault7executeEPKv+0x2c>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	791b      	ldrb	r3, [r3, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <_ZN19XFDispatcherDefault7executeEPKv+0x2c>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e000      	b.n	8008b90 <_ZN19XFDispatcherDefault7executeEPKv+0x2e>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <_ZN19XFDispatcherDefault7executeEPKv+0x36>
		{
			continue;	// Wait until something to do
 8008b94:	46c0      	nop			; (mov r8, r8)
		while (_events.empty() && _bExecuting)
 8008b96:	e7ed      	b.n	8008b74 <_ZN19XFDispatcherDefault7executeEPKv+0x12>
		}

		executeOnce();  // Dispatch next event
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3328      	adds	r3, #40	; 0x28
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	0010      	movs	r0, r2
 8008ba4:	4798      	blx	r3
	while(_bExecuting)
 8008ba6:	e7e1      	b.n	8008b6c <_ZN19XFDispatcherDefault7executeEPKv+0xa>
	}

	return 0;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	0018      	movs	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b002      	add	sp, #8
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <_ZN19XFDispatcherDefault11executeOnceEv>:

int XFDispatcherDefault::executeOnce()
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
    if (!_events.empty() and _bExecuting)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f001 fab4 	bl	800a12c <_ZNK19XFEventQueueDefault5emptyEv>
 8008bc4:	0003      	movs	r3, r0
 8008bc6:	001a      	movs	r2, r3
 8008bc8:	2301      	movs	r3, #1
 8008bca:	4053      	eors	r3, r2
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d005      	beq.n	8008bde <_ZN19XFDispatcherDefault11executeOnceEv+0x2c>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	791b      	ldrb	r3, [r3, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <_ZN19XFDispatcherDefault11executeOnceEv+0x2c>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e000      	b.n	8008be0 <_ZN19XFDispatcherDefault11executeOnceEv+0x2e>
 8008bde:	2300      	movs	r3, #0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d049      	beq.n	8008c78 <_ZN19XFDispatcherDefault11executeOnceEv+0xc6>
    {
        const XFEvent * pEvent;

        _pMutex->lock();
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	0010      	movs	r0, r2
 8008bf4:	4798      	blx	r3
        {
        	// Deque next event from queue
        	pEvent = _events.front(); _events.pop();
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f001 fabf 	bl	800a17e <_ZN19XFEventQueueDefault5frontEv>
 8008c00:	0003      	movs	r3, r0
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3308      	adds	r3, #8
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f001 fad3 	bl	800a1b4 <_ZN19XFEventQueueDefault3popEv>
#ifdef XF_TRACE_EVENT_PUSH_POP
        	Trace::out("Pop event:  0x%x", pEvent);
#endif // XF_TRACE_EVENT_PUSH_POP
    	}
    	_pMutex->unlock();
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	330c      	adds	r3, #12
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	0010      	movs	r0, r2
 8008c1e:	4798      	blx	r3

        if (pEvent)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d028      	beq.n	8008c78 <_ZN19XFDispatcherDefault11executeOnceEv+0xc6>
        {
            // Forward the event to the behavioral class
            dispatchEvent(pEvent);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	332c      	adds	r3, #44	; 0x2c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	0010      	movs	r0, r2
 8008c34:	4798      	blx	r3

            if (pEvent->getEventType() == XFEvent::Terminate)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f7fc fbb7 	bl	80053ac <_ZNK7XFEvent12getEventTypeEv>
 8008c3e:	0003      	movs	r3, r0
 8008c40:	3301      	adds	r3, #1
 8008c42:	425a      	negs	r2, r3
 8008c44:	4153      	adcs	r3, r2
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <_ZN19XFDispatcherDefault11executeOnceEv+0xa0>
            {
                // Exit the event loop
                _bExecuting = false;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	711a      	strb	r2, [r3, #4]
            }

            if (pEvent->deleteAfterConsume())
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	0010      	movs	r0, r2
 8008c5e:	4798      	blx	r3
 8008c60:	1e03      	subs	r3, r0, #0
 8008c62:	d009      	beq.n	8008c78 <_ZN19XFDispatcherDefault11executeOnceEv+0xc6>
            {
                // Remove the consumed event
                delete pEvent;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <_ZN19XFDispatcherDefault11executeOnceEv+0xc6>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	0010      	movs	r0, r2
 8008c76:	4798      	blx	r3
            }
        }
    }

    return _bExecuting;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	791b      	ldrb	r3, [r3, #4]
}
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b004      	add	sp, #16
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent>:

void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const
{
 8008c84:	b5b0      	push	{r4, r5, r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
    XFReactive::TerminateBehavior terminateBehavior;

	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	0018      	movs	r0, r3
 8008c92:	f7ff fe51 	bl	8008938 <_ZNK7XFEvent11getBehaviorEv>
 8008c96:	0002      	movs	r2, r0
 8008c98:	6813      	ldr	r3, [r2, #0]
 8008c9a:	3318      	adds	r3, #24
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	250f      	movs	r5, #15
 8008ca0:	197c      	adds	r4, r7, r5
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	0010      	movs	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	0003      	movs	r3, r0
 8008caa:	7023      	strb	r3, [r4, #0]

	// Check if behavior should be deleted
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 8008cac:	197b      	adds	r3, r7, r5
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00d      	beq.n	8008cd0 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x4c>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f7ff fe3e 	bl	8008938 <_ZNK7XFEvent11getBehaviorEv>
 8008cbc:	0002      	movs	r2, r0
 8008cbe:	6813      	ldr	r3, [r2, #0]
 8008cc0:	3310      	adds	r3, #16
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	0010      	movs	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	1e03      	subs	r3, r0, #0
 8008cca:	d001      	beq.n	8008cd0 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x4c>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e000      	b.n	8008cd2 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x4e>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00a      	beq.n	8008cec <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x68>
	{
		delete pEvent->getBehavior();
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	0018      	movs	r0, r3
 8008cda:	f7ff fe2d 	bl	8008938 <_ZNK7XFEvent11getBehaviorEv>
 8008cde:	1e03      	subs	r3, r0, #0
 8008ce0:	d004      	beq.n	8008cec <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x68>
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	3204      	adds	r2, #4
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	0018      	movs	r0, r3
 8008cea:	4790      	blx	r2
	}
}
 8008cec:	46c0      	nop			; (mov r8, r8)
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b004      	add	sp, #16
 8008cf2:	bdb0      	pop	{r4, r5, r7, pc}

08008cf4 <_ZN9interface17XFResourceFactoryD1Ev>:
     * @brief Returns a new mutex.
     * @return Pointer to new mutex.
     */
    virtual interface::XFMutex * createMutex() = 0;

    virtual ~XFResourceFactory() = default;
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	4a03      	ldr	r2, [pc, #12]	; (8008d0c <_ZN9interface17XFResourceFactoryD1Ev+0x18>)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	0018      	movs	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	b002      	add	sp, #8
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	0800c778 	.word	0x0800c778

08008d10 <_ZN9interface17XFResourceFactoryD0Ev>:
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	f7ff ffea 	bl	8008cf4 <_ZN9interface17XFResourceFactoryD1Ev>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2104      	movs	r1, #4
 8008d24:	0018      	movs	r0, r3
 8008d26:	f002 f986 	bl	800b036 <_ZdlPvj>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b002      	add	sp, #8
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <_ZN24XFResourceFactoryDefaultD1Ev>:
 * @brief Default implementation of the XF resource factory.
 */
class XFResourceFactoryDefault : public interface::XFResourceFactory
{
public:
	virtual ~XFResourceFactoryDefault() {}
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	4a08      	ldr	r2, [pc, #32]	; (8008d60 <_ZN24XFResourceFactoryDefaultD1Ev+0x2c>)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3304      	adds	r3, #4
 8008d46:	0018      	movs	r0, r3
 8008d48:	f7ff fe72 	bl	8008a30 <_ZN19XFDispatcherDefaultD1Ev>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	0018      	movs	r0, r3
 8008d50:	f7ff ffd0 	bl	8008cf4 <_ZN9interface17XFResourceFactoryD1Ev>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	0018      	movs	r0, r3
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	b002      	add	sp, #8
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	0800c758 	.word	0x0800c758

08008d64 <_ZN24XFResourceFactoryDefaultD0Ev>:
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7ff ffe0 	bl	8008d34 <_ZN24XFResourceFactoryDefaultD1Ev>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2140      	movs	r1, #64	; 0x40
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f002 f95c 	bl	800b036 <_ZdlPvj>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	0018      	movs	r0, r3
 8008d82:	46bd      	mov	sp, r7
 8008d84:	b002      	add	sp, #8
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <_ZN9interface17XFResourceFactoryC1Ev>:

protected:
    XFResourceFactory() = default;
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	4a03      	ldr	r2, [pc, #12]	; (8008da0 <_ZN9interface17XFResourceFactoryC1Ev+0x18>)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	0018      	movs	r0, r3
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	b002      	add	sp, #8
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	0800c778 	.word	0x0800c778

08008da4 <_ZN24XFResourceFactoryDefaultC1Ev>:
											   const char * threadName,                             
											   const uint32_t stackSize = 0);                       ///< Creates and returns a new thread.
	virtual interface::XFMutex * createMutex();                                                     ///< Creates and returns a new mutex.
	
protected:
	XFResourceFactoryDefault() {}
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	0018      	movs	r0, r3
 8008db0:	f7ff ffea 	bl	8008d88 <_ZN9interface17XFResourceFactoryC1Ev>
 8008db4:	4a06      	ldr	r2, [pc, #24]	; (8008dd0 <_ZN24XFResourceFactoryDefaultC1Ev+0x2c>)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7ff fe04 	bl	80089cc <_ZN19XFDispatcherDefaultC1Ev>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	b002      	add	sp, #8
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	0800c758 	.word	0x0800c758

08008dd4 <_ZN9interface17XFResourceFactory11getInstanceEv>:
#include "resourcefactory-default.h"
#include "mutex-default.h"

//static
interface::XFResourceFactory * interface::XFResourceFactory::getInstance()
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
	return XFResourceFactoryDefault::getInstance();
 8008dd8:	f000 f80e 	bl	8008df8 <_ZN24XFResourceFactoryDefault11getInstanceEv>
 8008ddc:	0003      	movs	r3, r0
}
 8008dde:	0018      	movs	r0, r3
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <__tcf_0>:

//static
interface::XFResourceFactory * XFResourceFactoryDefault::getInstance()
{
    static XFResourceFactoryDefault theResourceFactory;
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <__tcf_0+0x10>)
 8008dea:	0018      	movs	r0, r3
 8008dec:	f7ff ffa2 	bl	8008d34 <_ZN24XFResourceFactoryDefaultD1Ev>
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200000f0 	.word	0x200000f0

08008df8 <_ZN24XFResourceFactoryDefault11getInstanceEv>:
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
    static XFResourceFactoryDefault theResourceFactory;
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x2c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2201      	movs	r2, #1
 8008e02:	4013      	ands	r3, r2
 8008e04:	d10a      	bne.n	8008e1c <_ZN24XFResourceFactoryDefault11getInstanceEv+0x24>
 8008e06:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x30>)
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f7ff ffcb 	bl	8008da4 <_ZN24XFResourceFactoryDefaultC1Ev>
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x2c>)
 8008e10:	2201      	movs	r2, #1
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <_ZN24XFResourceFactoryDefault11getInstanceEv+0x34>)
 8008e16:	0018      	movs	r0, r3
 8008e18:	f002 f96e 	bl	800b0f8 <atexit>

	return &theResourceFactory;
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x30>)
}
 8008e1e:	0018      	movs	r0, r3
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20000130 	.word	0x20000130
 8008e28:	200000f0 	.word	0x200000f0
 8008e2c:	08008de5 	.word	0x08008de5

08008e30 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv>:

interface::XFDispatcher * XFResourceFactoryDefault::getDefaultDispatcher()
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	return &_mainDispatcher;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3304      	adds	r3, #4
}
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	b002      	add	sp, #8
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <_ZN24XFResourceFactoryDefault16createDispatcherEv>:

interface::XFDispatcher * XFResourceFactoryDefault::createDispatcher()
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
	// Default implementation cannot create new dispatcher. Return the default dispatcher
	return getDefaultDispatcher();
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	0010      	movs	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	0003      	movs	r3, r0
}
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	b002      	add	sp, #8
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <_ZN24XFResourceFactoryDefault12createThreadEPN9interface26XFThreadEntryPointProviderEMS1_FvPKvEPKcm>:

interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
												  	  	     interface::XFThread::EntryMethodBody entryMethod,
														     const char * threadName,
														     const uint32_t stackSize /* = 0 */)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	0039      	movs	r1, r7
 8008e6e:	600a      	str	r2, [r1, #0]
 8008e70:	604b      	str	r3, [r1, #4]
	// Default implementation cannot create threads (no underlying OS present)
	return nullptr;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	0018      	movs	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	b004      	add	sp, #16
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <__tcf_1>:

interface::XFMutex * XFResourceFactoryDefault::createMutex()
{
	static XFMutexDefault mutex;
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <__tcf_1+0x10>)
 8008e82:	0018      	movs	r0, r3
 8008e84:	f002 f866 	bl	800af54 <_ZN14XFMutexDefaultD1Ev>
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20000134 	.word	0x20000134

08008e90 <_ZN24XFResourceFactoryDefault11createMutexEv>:
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	static XFMutexDefault mutex;
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <_ZN24XFResourceFactoryDefault11createMutexEv+0x34>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	d10a      	bne.n	8008eb8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x28>
 8008ea2:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x38>)
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	f002 f843 	bl	800af30 <_ZN14XFMutexDefaultC1Ev>
 8008eaa:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <_ZN24XFResourceFactoryDefault11createMutexEv+0x34>)
 8008eac:	2201      	movs	r2, #1
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <_ZN24XFResourceFactoryDefault11createMutexEv+0x3c>)
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f002 f920 	bl	800b0f8 <atexit>

	return &mutex;
 8008eb8:	4b03      	ldr	r3, [pc, #12]	; (8008ec8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x38>)
}
 8008eba:	0018      	movs	r0, r3
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	b002      	add	sp, #8
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	46c0      	nop			; (mov r8, r8)
 8008ec4:	20000138 	.word	0x20000138
 8008ec8:	20000134 	.word	0x20000134
 8008ecc:	08008e7d 	.word	0x08008e7d

08008ed0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	0018      	movs	r0, r3
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	b002      	add	sp, #8
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <_ZN9interface16XFTimeoutManager10initializeEl>:

    /**
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
    {
        _tickInterval = tickInterval;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	605a      	str	r2, [r3, #4]
    }
 8008ef4:	46c0      	nop			; (mov r8, r8)
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b002      	add	sp, #8
 8008efa:	bd80      	pop	{r7, pc}

08008efc <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:

    /**
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
    {
        return _tickInterval;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
    }
 8008f08:	0018      	movs	r0, r3
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	b002      	add	sp, #8
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <_ZN9interface16XFTimeoutManagerC1Ev>:
     * belongs.
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
        _tickInterval(0)
 8008f18:	4a05      	ldr	r2, [pc, #20]	; (8008f30 <_ZN9interface16XFTimeoutManagerC1Ev+0x20>)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	605a      	str	r2, [r3, #4]
    {}
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	0018      	movs	r0, r3
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	b002      	add	sp, #8
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	46c0      	nop			; (mov r8, r8)
 8008f30:	0800c7c4 	.word	0x0800c7c4

08008f34 <_ZNK9XFTimeout11getRelTicksEv>:
    bool operator ==(const XFTimeout & timeout) const;

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { _relTicks = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return _relTicks; }                                            ///< Returns remaining ticks.
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	0018      	movs	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	b002      	add	sp, #8
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <_ZN9XFTimeout21substractFromRelTicksEi>:
    inline void substractFromRelTicks(int ticksToSubstract) { _relTicks -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695a      	ldr	r2, [r3, #20]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	1ad2      	subs	r2, r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	615a      	str	r2, [r3, #20]
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	46bd      	mov	sp, r7
 8008f62:	b002      	add	sp, #8
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <_ZN9XFTimeout13addToRelTicksEi>:
    inline void addToRelTicks(int ticksToAdd) { _relTicks += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	695a      	ldr	r2, [r3, #20]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	18d2      	adds	r2, r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	615a      	str	r2, [r3, #20]
 8008f7c:	46c0      	nop			; (mov r8, r8)
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	b002      	add	sp, #8
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
#include "timeoutmanager-default.h"

using interface::XFMutex;

interface::XFTimeoutManager * interface::XFTimeoutManager::getInstance()
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
    return XFTimeoutManagerDefault::getInstance();
 8008f88:	f000 f80e 	bl	8008fa8 <_ZN23XFTimeoutManagerDefault11getInstanceEv>
 8008f8c:	0003      	movs	r3, r0
}
 8008f8e:	0018      	movs	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <__tcf_0>:

interface::XFTimeoutManager * XFTimeoutManagerDefault::getInstance()
{
    static XFTimeoutManagerDefault timeoutManager;
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <__tcf_0+0x10>)
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f000 f87e 	bl	800909c <_ZN23XFTimeoutManagerDefaultD1Ev>
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	2000013c 	.word	0x2000013c

08008fa8 <_ZN23XFTimeoutManagerDefault11getInstanceEv>:
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
    static XFTimeoutManagerDefault timeoutManager;
 8008fac:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x2c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	d10a      	bne.n	8008fcc <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x24>
 8008fb6:	4b08      	ldr	r3, [pc, #32]	; (8008fd8 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x30>)
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f000 f83f 	bl	800903c <_ZN23XFTimeoutManagerDefaultC1Ev>
 8008fbe:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x2c>)
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x34>)
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	f002 f896 	bl	800b0f8 <atexit>
    return &timeoutManager;
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x30>)
}
 8008fce:	0018      	movs	r0, r3
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	20000154 	.word	0x20000154
 8008fd8:	2000013c 	.word	0x2000013c
 8008fdc:	08008f95 	.word	0x08008f95

08008fe0 <_ZN9interface16XFTimeoutManagerD1Ev>:
    virtual ~XFTimeoutManager() = default;
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	4a03      	ldr	r2, [pc, #12]	; (8008ff8 <_ZN9interface16XFTimeoutManagerD1Ev+0x18>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b002      	add	sp, #8
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	0800c7c4 	.word	0x0800c7c4

08008ffc <_ZN9interface16XFTimeoutManagerD0Ev>:
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	0018      	movs	r0, r3
 8009008:	f7ff ffea 	bl	8008fe0 <_ZN9interface16XFTimeoutManagerD1Ev>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2108      	movs	r1, #8
 8009010:	0018      	movs	r0, r3
 8009012:	f002 f810 	bl	800b036 <_ZdlPvj>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	0018      	movs	r0, r3
 800901a:	46bd      	mov	sp, r7
 800901c:	b002      	add	sp, #8
 800901e:	bd80      	pop	{r7, pc}

08009020 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	0018      	movs	r0, r3
 800902c:	f000 fb6b 	bl	8009706 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	0018      	movs	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	b002      	add	sp, #8
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <_ZN23XFTimeoutManagerDefaultC1Ev>:

XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
    _pMutex(nullptr)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	0018      	movs	r0, r3
 8009048:	f7ff ff62 	bl	8008f10 <_ZN9interface16XFTimeoutManagerC1Ev>
 800904c:	4a0f      	ldr	r2, [pc, #60]	; (800908c <_ZN23XFTimeoutManagerDefaultC1Ev+0x50>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3308      	adds	r3, #8
 8009056:	0018      	movs	r0, r3
 8009058:	f000 fb3b 	bl	80096d2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	615a      	str	r2, [r3, #20]
{
    _pMutex = XFMutex::create();
 8009062:	f001 ff29 	bl	800aeb8 <_ZN9interface7XFMutex6createEv>
 8009066:	0002      	movs	r2, r0
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	615a      	str	r2, [r3, #20]
    assert(_pMutex);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d105      	bne.n	8009080 <_ZN23XFTimeoutManagerDefaultC1Ev+0x44>
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <_ZN23XFTimeoutManagerDefaultC1Ev+0x54>)
 8009076:	4a07      	ldr	r2, [pc, #28]	; (8009094 <_ZN23XFTimeoutManagerDefaultC1Ev+0x58>)
 8009078:	4807      	ldr	r0, [pc, #28]	; (8009098 <_ZN23XFTimeoutManagerDefaultC1Ev+0x5c>)
 800907a:	211d      	movs	r1, #29
 800907c:	f002 f81e 	bl	800b0bc <__assert_func>
}
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	0018      	movs	r0, r3
 8009084:	46bd      	mov	sp, r7
 8009086:	b002      	add	sp, #8
 8009088:	bd80      	pop	{r7, pc}
 800908a:	46c0      	nop			; (mov r8, r8)
 800908c:	0800c798 	.word	0x0800c798
 8009090:	0800c29c 	.word	0x0800c29c
 8009094:	0800c7e8 	.word	0x0800c7e8
 8009098:	0800c2a4 	.word	0x0800c2a4

0800909c <_ZN23XFTimeoutManagerDefaultD1Ev>:

XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	4a08      	ldr	r2, [pc, #32]	; (80090c8 <_ZN23XFTimeoutManagerDefaultD1Ev+0x2c>)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3308      	adds	r3, #8
 80090ae:	0018      	movs	r0, r3
 80090b0:	f7ff ffb6 	bl	8009020 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	0018      	movs	r0, r3
 80090b8:	f7ff ff92 	bl	8008fe0 <_ZN9interface16XFTimeoutManagerD1Ev>
{
}
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	0018      	movs	r0, r3
 80090c0:	46bd      	mov	sp, r7
 80090c2:	b002      	add	sp, #8
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	0800c798 	.word	0x0800c798

080090cc <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
}
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	0018      	movs	r0, r3
 80090d8:	f7ff ffe0 	bl	800909c <_ZN23XFTimeoutManagerDefaultD1Ev>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2118      	movs	r1, #24
 80090e0:	0018      	movs	r0, r3
 80090e2:	f001 ffa8 	bl	800b036 <_ZdlPvj>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	0018      	movs	r0, r3
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b002      	add	sp, #8
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <_ZN23XFTimeoutManagerDefault5startEv>:

void XFTimeoutManagerDefault::start()
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
    // Check tickInterval. Set default value if not set
    if (_tickInterval == 0)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d102      	bne.n	8009106 <_ZN23XFTimeoutManagerDefault5startEv+0x16>
    {
        _tickInterval = 10;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	220a      	movs	r2, #10
 8009104:	605a      	str	r2, [r3, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(_tickInterval));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	0018      	movs	r0, r3
 800910c:	f001 ff64 	bl	800afd8 <XF_startTimeoutManagerTimer>
}
 8009110:	46c0      	nop			; (mov r8, r8)
 8009112:	46bd      	mov	sp, r7
 8009114:	b002      	add	sp, #8
 8009116:	bd80      	pop	{r7, pc}

08009118 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 8009126:	2018      	movs	r0, #24
 8009128:	f001 ff89 	bl	800b03e <_Znwj>
 800912c:	0003      	movs	r3, r0
 800912e:	001c      	movs	r4, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	68b9      	ldr	r1, [r7, #8]
 8009136:	0020      	movs	r0, r4
 8009138:	f7ff fb94 	bl	8008864 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
 800913c:	617c      	str	r4, [r7, #20]

    if (pTimeout)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d007      	beq.n	8009154 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE+0x3c>
    {
        addTimeout(pTimeout);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3320      	adds	r3, #32
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6979      	ldr	r1, [r7, #20]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	0010      	movs	r0, r2
 8009152:	4798      	blx	r3
    }
}
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	46bd      	mov	sp, r7
 8009158:	b007      	add	sp, #28
 800915a:	bd90      	pop	{r4, r7, pc}

0800915c <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::unscheduleTimeout(int32_t timeoutId, interface::XFReactive * pReactive)
{
 800915c:	b590      	push	{r4, r7, lr}
 800915e:	b091      	sub	sp, #68	; 0x44
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	2218      	movs	r2, #24
 800916e:	18b8      	adds	r0, r7, r2
 8009170:	2200      	movs	r2, #0
 8009172:	f7ff fb77 	bl	8008864 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    XFTimeout * pTimeout;

    _pMutex->lock();
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	695a      	ldr	r2, [r3, #20]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3308      	adds	r3, #8
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	0010      	movs	r0, r2
 8009186:	4798      	blx	r3
    {
        for (TimeoutList::iterator i = _timeouts.begin();
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3308      	adds	r3, #8
 800918c:	0018      	movs	r0, r3
 800918e:	f000 facb 	bl	8009728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009192:	0003      	movs	r3, r0
 8009194:	617b      	str	r3, [r7, #20]
             i != _timeouts.end(); /*Do not increment here!*/)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3308      	adds	r3, #8
 800919a:	0018      	movs	r0, r3
 800919c:	f000 fad5 	bl	800974a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80091a0:	0003      	movs	r3, r0
 80091a2:	633b      	str	r3, [r7, #48]	; 0x30
 80091a4:	2330      	movs	r3, #48	; 0x30
 80091a6:	18fa      	adds	r2, r7, r3
 80091a8:	2314      	movs	r3, #20
 80091aa:	18fb      	adds	r3, r7, r3
 80091ac:	0011      	movs	r1, r2
 80091ae:	0018      	movs	r0, r3
 80091b0:	f000 fadb 	bl	800976a <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 80091b4:	1e03      	subs	r3, r0, #0
 80091b6:	d05b      	beq.n	8009270 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x114>
        {
            pTimeout = *i;
 80091b8:	2314      	movs	r3, #20
 80091ba:	18fb      	adds	r3, r7, r3
 80091bc:	0018      	movs	r0, r3
 80091be:	f000 fae5 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80091c2:	0003      	movs	r3, r0
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c

            // Check if behavior and timeout id are equal
            if (*pTimeout == timeout)
 80091c8:	2318      	movs	r3, #24
 80091ca:	18fa      	adds	r2, r7, r3
 80091cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ce:	0011      	movs	r1, r2
 80091d0:	0018      	movs	r0, r3
 80091d2:	f7ff fb65 	bl	80088a0 <_ZNK9XFTimeouteqERKS_>
 80091d6:	1e03      	subs	r3, r0, #0
 80091d8:	d043      	beq.n	8009262 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x106>
            {
                TimeoutList::iterator next = i;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	613b      	str	r3, [r7, #16]

                // Check if remaining ticks can be given further
                if (++next != _timeouts.end())
 80091de:	2310      	movs	r3, #16
 80091e0:	18fb      	adds	r3, r7, r3
 80091e2:	0018      	movs	r0, r3
 80091e4:	f000 fae0 	bl	80097a8 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>
 80091e8:	0004      	movs	r4, r0
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3308      	adds	r3, #8
 80091ee:	0018      	movs	r0, r3
 80091f0:	f000 faab 	bl	800974a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80091f4:	0003      	movs	r3, r0
 80091f6:	637b      	str	r3, [r7, #52]	; 0x34
 80091f8:	2334      	movs	r3, #52	; 0x34
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	0019      	movs	r1, r3
 80091fe:	0020      	movs	r0, r4
 8009200:	f000 fab3 	bl	800976a <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 8009204:	1e03      	subs	r3, r0, #0
 8009206:	d00f      	beq.n	8009228 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0xcc>
                {
                    // Add (remaining) ticks to next timeout in list
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 8009208:	2310      	movs	r3, #16
 800920a:	18fb      	adds	r3, r7, r3
 800920c:	0018      	movs	r0, r3
 800920e:	f000 fabd 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009212:	0003      	movs	r3, r0
 8009214:	681c      	ldr	r4, [r3, #0]
 8009216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009218:	0018      	movs	r0, r3
 800921a:	f7ff fe8b 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 800921e:	0003      	movs	r3, r0
 8009220:	0019      	movs	r1, r3
 8009222:	0020      	movs	r0, r4
 8009224:	f7ff fe9f 	bl	8008f66 <_ZN9XFTimeout13addToRelTicksEi>
                }

                i = _timeouts.erase(i);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3308      	adds	r3, #8
 800922c:	001c      	movs	r4, r3
 800922e:	2314      	movs	r3, #20
 8009230:	18fa      	adds	r2, r7, r3
 8009232:	2338      	movs	r3, #56	; 0x38
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	0011      	movs	r1, r2
 8009238:	0018      	movs	r0, r3
 800923a:	f000 fac3 	bl	80097c4 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	0019      	movs	r1, r3
 8009242:	0020      	movs	r0, r4
 8009244:	f000 facc 	bl	80097e0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8009248:	0003      	movs	r3, r0
 800924a:	617b      	str	r3, [r7, #20]
                // Iterator now points to the next element

                delete pTimeout;
 800924c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0a1      	beq.n	8009196 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
 8009252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3304      	adds	r3, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800925c:	0010      	movs	r0, r2
 800925e:	4798      	blx	r3
 8009260:	e799      	b.n	8009196 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
            else
            {
                i++;
 8009262:	2314      	movs	r3, #20
 8009264:	18fb      	adds	r3, r7, r3
 8009266:	2100      	movs	r1, #0
 8009268:	0018      	movs	r0, r3
 800926a:	f000 fad5 	bl	8009818 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
        for (TimeoutList::iterator i = _timeouts.begin();
 800926e:	e792      	b.n	8009196 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
        }
    }
    _pMutex->unlock();
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	695a      	ldr	r2, [r3, #20]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	330c      	adds	r3, #12
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	0010      	movs	r0, r2
 8009280:	4798      	blx	r3
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8009282:	2318      	movs	r3, #24
 8009284:	18fb      	adds	r3, r7, r3
 8009286:	0018      	movs	r0, r3
 8009288:	f7ff fb32 	bl	80088f0 <_ZN9XFTimeoutD1Ev>
}
 800928c:	46c0      	nop			; (mov r8, r8)
 800928e:	46bd      	mov	sp, r7
 8009290:	b011      	add	sp, #68	; 0x44
 8009292:	bd90      	pop	{r4, r7, pc}

08009294 <_ZN23XFTimeoutManagerDefault4tickEv>:

void XFTimeoutManagerDefault::tick()
{
 8009294:	b5b0      	push	{r4, r5, r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
    assert(_tickInterval);      // Did you call start()?!
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <_ZN23XFTimeoutManagerDefault4tickEv+0x1c>
 80092a4:	4b67      	ldr	r3, [pc, #412]	; (8009444 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b0>)
 80092a6:	4a68      	ldr	r2, [pc, #416]	; (8009448 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b4>)
 80092a8:	4868      	ldr	r0, [pc, #416]	; (800944c <_ZN23XFTimeoutManagerDefault4tickEv+0x1b8>)
 80092aa:	2161      	movs	r1, #97	; 0x61
 80092ac:	f001 ff06 	bl	800b0bc <__assert_func>
    int32_t intervalToSubtract = _tickInterval;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	61fb      	str	r3, [r7, #28]

    while (!_timeouts.empty())
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3308      	adds	r3, #8
 80092ba:	0018      	movs	r0, r3
 80092bc:	f000 fabe 	bl	800983c <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 80092c0:	0003      	movs	r3, r0
 80092c2:	001a      	movs	r2, r3
 80092c4:	2301      	movs	r3, #1
 80092c6:	4053      	eors	r3, r2
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d100      	bne.n	80092d0 <_ZN23XFTimeoutManagerDefault4tickEv+0x3c>
 80092ce:	e0b4      	b.n	800943a <_ZN23XFTimeoutManagerDefault4tickEv+0x1a6>
    {
        _pMutex->lock();
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	695a      	ldr	r2, [r3, #20]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	0010      	movs	r0, r2
 80092e0:	4798      	blx	r3
        {
            XFTimeout * pFirstTimeout = _timeouts.front();
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3308      	adds	r3, #8
 80092e6:	0018      	movs	r0, r3
 80092e8:	f000 fab7 	bl	800985a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>
 80092ec:	0003      	movs	r3, r0
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	61bb      	str	r3, [r7, #24]

            // Subtract time elapsed
            pFirstTimeout->substractFromRelTicks(intervalToSubtract);
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	0011      	movs	r1, r2
 80092f8:	0018      	movs	r0, r3
 80092fa:	f7ff fe25 	bl	8008f48 <_ZN9XFTimeout21substractFromRelTicksEi>

            // From now on set it to zero.
            intervalToSubtract = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	61fb      	str	r3, [r7, #28]

            // Check timeout timed out
            if (pFirstTimeout->getRelTicks() <= 0)
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	0018      	movs	r0, r3
 8009306:	f7ff fe15 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 800930a:	0003      	movs	r3, r0
 800930c:	1e5a      	subs	r2, r3, #1
 800930e:	4313      	orrs	r3, r2
 8009310:	0fdb      	lsrs	r3, r3, #31
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d100      	bne.n	800931a <_ZN23XFTimeoutManagerDefault4tickEv+0x86>
 8009318:	e079      	b.n	800940e <_ZN23XFTimeoutManagerDefault4tickEv+0x17a>
            {
                // Check remaining ticks can be given further
                if (_timeouts.size() > 1)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3308      	adds	r3, #8
 800931e:	0018      	movs	r0, r3
 8009320:	f000 faaf 	bl	8009882 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 8009324:	0002      	movs	r2, r0
 8009326:	2301      	movs	r3, #1
 8009328:	4293      	cmp	r3, r2
 800932a:	419b      	sbcs	r3, r3
 800932c:	425b      	negs	r3, r3
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01b      	beq.n	800936c <_ZN23XFTimeoutManagerDefault4tickEv+0xd8>
                {
                    TimeoutList::iterator i = _timeouts.begin();
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3308      	adds	r3, #8
 8009338:	0018      	movs	r0, r3
 800933a:	f000 f9f5 	bl	8009728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800933e:	0003      	movs	r3, r0
 8009340:	60fb      	str	r3, [r7, #12]

                    // Add ticks overrun to next timeout
                    i++;
 8009342:	240c      	movs	r4, #12
 8009344:	193b      	adds	r3, r7, r4
 8009346:	2100      	movs	r1, #0
 8009348:	0018      	movs	r0, r3
 800934a:	f000 fa65 	bl	8009818 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    (*i)->substractFromRelTicks(pFirstTimeout->getRelTicks());
 800934e:	193b      	adds	r3, r7, r4
 8009350:	0018      	movs	r0, r3
 8009352:	f000 fa1b 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009356:	0003      	movs	r3, r0
 8009358:	681c      	ldr	r4, [r3, #0]
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	0018      	movs	r0, r3
 800935e:	f7ff fde9 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 8009362:	0003      	movs	r3, r0
 8009364:	0019      	movs	r1, r3
 8009366:	0020      	movs	r0, r4
 8009368:	f7ff fdee 	bl	8008f48 <_ZN9XFTimeout21substractFromRelTicksEi>
                }

                // Inject the timeout back to the behavioral class
                returnTimeout(pFirstTimeout);
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	0011      	movs	r1, r2
 8009372:	0018      	movs	r0, r3
 8009374:	f000 f999 	bl	80096aa <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>

                // Remove timeout
                _timeouts.pop_front();
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3308      	adds	r3, #8
 800937c:	0018      	movs	r0, r3
 800937e:	f000 fa8d 	bl	800989c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>

                // Check if timeouts with same timeout value are present
                for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3308      	adds	r3, #8
 8009386:	0018      	movs	r0, r3
 8009388:	f000 f9ce 	bl	8009728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800938c:	0003      	movs	r3, r0
 800938e:	60bb      	str	r3, [r7, #8]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3308      	adds	r3, #8
 8009394:	0018      	movs	r0, r3
 8009396:	f000 f9d8 	bl	800974a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800939a:	0003      	movs	r3, r0
 800939c:	613b      	str	r3, [r7, #16]
 800939e:	2310      	movs	r3, #16
 80093a0:	18fa      	adds	r2, r7, r3
 80093a2:	2308      	movs	r3, #8
 80093a4:	18fb      	adds	r3, r7, r3
 80093a6:	0011      	movs	r1, r2
 80093a8:	0018      	movs	r0, r3
 80093aa:	f000 f9de 	bl	800976a <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 80093ae:	1e03      	subs	r3, r0, #0
 80093b0:	d039      	beq.n	8009426 <_ZN23XFTimeoutManagerDefault4tickEv+0x192>
                {
                    if ((*it)->getRelTicks() == 0)
 80093b2:	2308      	movs	r3, #8
 80093b4:	18fb      	adds	r3, r7, r3
 80093b6:	0018      	movs	r0, r3
 80093b8:	f000 f9e8 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80093bc:	0003      	movs	r3, r0
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	0018      	movs	r0, r3
 80093c2:	f7ff fdb7 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 80093c6:	0003      	movs	r3, r0
 80093c8:	425a      	negs	r2, r3
 80093ca:	4153      	adcs	r3, r2
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d028      	beq.n	8009424 <_ZN23XFTimeoutManagerDefault4tickEv+0x190>
                    {
                        returnTimeout(*it);			// Return them true
 80093d2:	2508      	movs	r5, #8
 80093d4:	197b      	adds	r3, r7, r5
 80093d6:	0018      	movs	r0, r3
 80093d8:	f000 f9d8 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80093dc:	0003      	movs	r3, r0
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	0011      	movs	r1, r2
 80093e4:	0018      	movs	r0, r3
 80093e6:	f000 f960 	bl	80096aa <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                        it = _timeouts.erase(it);	// Remove timeout and adjust iterator to next element
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3308      	adds	r3, #8
 80093ee:	001c      	movs	r4, r3
 80093f0:	197a      	adds	r2, r7, r5
 80093f2:	2314      	movs	r3, #20
 80093f4:	18fb      	adds	r3, r7, r3
 80093f6:	0011      	movs	r1, r2
 80093f8:	0018      	movs	r0, r3
 80093fa:	f000 f9e3 	bl	80097c4 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	0019      	movs	r1, r3
 8009402:	0020      	movs	r0, r4
 8009404:	f000 f9ec 	bl	80097e0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8009408:	0003      	movs	r3, r0
 800940a:	60bb      	str	r3, [r7, #8]
                for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 800940c:	e7c0      	b.n	8009390 <_ZN23XFTimeoutManagerDefault4tickEv+0xfc>
                    }
                }
            }
            else
            {
                _pMutex->unlock();
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	330c      	adds	r3, #12
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	0010      	movs	r0, r2
 800941e:	4798      	blx	r3
                // Done. Exit while loop
                break;
 8009420:	46c0      	nop			; (mov r8, r8)
            }
        }
        _pMutex->unlock();
    }
}
 8009422:	e00a      	b.n	800943a <_ZN23XFTimeoutManagerDefault4tickEv+0x1a6>
                        break;
 8009424:	46c0      	nop			; (mov r8, r8)
        _pMutex->unlock();
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695a      	ldr	r2, [r3, #20]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	330c      	adds	r3, #12
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	0010      	movs	r0, r2
 8009436:	4798      	blx	r3
    while (!_timeouts.empty())
 8009438:	e73d      	b.n	80092b6 <_ZN23XFTimeoutManagerDefault4tickEv+0x22>
}
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	46bd      	mov	sp, r7
 800943e:	b008      	add	sp, #32
 8009440:	bdb0      	pop	{r4, r5, r7, pc}
 8009442:	46c0      	nop			; (mov r8, r8)
 8009444:	0800c320 	.word	0x0800c320
 8009448:	0800c81c 	.word	0x0800c81c
 800944c:	0800c2a4 	.word	0x0800c2a4

08009450 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::addTimeout(XFTimeout * pNewTimeout)
{
 8009450:	b5b0      	push	{r4, r5, r7, lr}
 8009452:	b08c      	sub	sp, #48	; 0x30
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
    if (!_timeouts.empty())
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3308      	adds	r3, #8
 800945e:	0018      	movs	r0, r3
 8009460:	f000 f9ec 	bl	800983c <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8009464:	0003      	movs	r3, r0
 8009466:	001a      	movs	r2, r3
 8009468:	2301      	movs	r3, #1
 800946a:	4053      	eors	r3, r2
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d100      	bne.n	8009474 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x24>
 8009472:	e10f      	b.n	8009694 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x244>
    {
        _pMutex->lock();
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	695a      	ldr	r2, [r3, #20]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	0010      	movs	r0, r2
 8009484:	4798      	blx	r3
        {
            // Insert timeout before timeout(s) triggering later
            TimeoutList::iterator i = _timeouts.begin();
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3308      	adds	r3, #8
 800948a:	0018      	movs	r0, r3
 800948c:	f000 f94c 	bl	8009728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009490:	0003      	movs	r3, r0
 8009492:	60bb      	str	r3, [r7, #8]

            unsigned int index = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	62fb      	str	r3, [r7, #44]	; 0x2c

            // Find the right place to insert new timeout
            while (i != _timeouts.end() &&
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3308      	adds	r3, #8
 800949c:	0018      	movs	r0, r3
 800949e:	f000 f954 	bl	800974a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80094a2:	0003      	movs	r3, r0
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	230c      	movs	r3, #12
 80094a8:	18fa      	adds	r2, r7, r3
 80094aa:	2308      	movs	r3, #8
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	0011      	movs	r1, r2
 80094b0:	0018      	movs	r0, r3
 80094b2:	f000 f95a 	bl	800976a <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 80094b6:	1e03      	subs	r3, r0, #0
 80094b8:	d013      	beq.n	80094e2 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 80094ba:	2308      	movs	r3, #8
 80094bc:	18fb      	adds	r3, r7, r3
 80094be:	0018      	movs	r0, r3
 80094c0:	f000 f964 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80094c4:	0003      	movs	r3, r0
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	0018      	movs	r0, r3
 80094ca:	f7ff fd33 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 80094ce:	0004      	movs	r4, r0
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	0018      	movs	r0, r3
 80094d4:	f7ff fd2e 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 80094d8:	0003      	movs	r3, r0
            while (i != _timeouts.end() &&
 80094da:	429c      	cmp	r4, r3
 80094dc:	da01      	bge.n	80094e2 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x94>
 80094e2:	2300      	movs	r3, #0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d018      	beq.n	800951a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0xca>
            {	// -> by: test4, test5
                pNewTimeout->substractFromRelTicks((*i)->getRelTicks());
 80094e8:	683c      	ldr	r4, [r7, #0]
 80094ea:	2508      	movs	r5, #8
 80094ec:	197b      	adds	r3, r7, r5
 80094ee:	0018      	movs	r0, r3
 80094f0:	f000 f94c 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80094f4:	0003      	movs	r3, r0
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7ff fd1b 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 80094fe:	0003      	movs	r3, r0
 8009500:	0019      	movs	r1, r3
 8009502:	0020      	movs	r0, r4
 8009504:	f7ff fd20 	bl	8008f48 <_ZN9XFTimeout21substractFromRelTicksEi>
                i++; index++;
 8009508:	197b      	adds	r3, r7, r5
 800950a:	2100      	movs	r1, #0
 800950c:	0018      	movs	r0, r3
 800950e:	f000 f983 	bl	8009818 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	3301      	adds	r3, #1
 8009516:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (i != _timeouts.end() &&
 8009518:	e7be      	b.n	8009498 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x48>
            }

            if (i != _timeouts.end())
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3308      	adds	r3, #8
 800951e:	0018      	movs	r0, r3
 8009520:	f000 f913 	bl	800974a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8009524:	0003      	movs	r3, r0
 8009526:	613b      	str	r3, [r7, #16]
 8009528:	2310      	movs	r3, #16
 800952a:	18fa      	adds	r2, r7, r3
 800952c:	2308      	movs	r3, #8
 800952e:	18fb      	adds	r3, r7, r3
 8009530:	0011      	movs	r1, r2
 8009532:	0018      	movs	r0, r3
 8009534:	f000 f919 	bl	800976a <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 8009538:	1e03      	subs	r3, r0, #0
 800953a:	d100      	bne.n	800953e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0xee>
 800953c:	e088      	b.n	8009650 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x200>
            {
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 800953e:	2308      	movs	r3, #8
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	0018      	movs	r0, r3
 8009544:	f000 f922 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009548:	0003      	movs	r3, r0
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	0018      	movs	r0, r3
 800954e:	f7ff fcf1 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 8009552:	0004      	movs	r4, r0
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	0018      	movs	r0, r3
 8009558:	f7ff fcec 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 800955c:	0003      	movs	r3, r0
 800955e:	1ae3      	subs	r3, r4, r3
 8009560:	1e5a      	subs	r2, r3, #1
 8009562:	4193      	sbcs	r3, r2
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d020      	beq.n	80095ac <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x15c>
                {	// -> by: test1, test4, test5
                    // Timeout are going to timeout at different times

                    // Insert new timeout before
                    _timeouts.insert(i, pNewTimeout);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	3308      	adds	r3, #8
 800956e:	001c      	movs	r4, r3
 8009570:	2508      	movs	r5, #8
 8009572:	197a      	adds	r2, r7, r5
 8009574:	2314      	movs	r3, #20
 8009576:	18fb      	adds	r3, r7, r3
 8009578:	0011      	movs	r1, r2
 800957a:	0018      	movs	r0, r3
 800957c:	f000 f922 	bl	80097c4 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8009580:	003a      	movs	r2, r7
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	0019      	movs	r1, r3
 8009586:	0020      	movs	r0, r4
 8009588:	f000 f99a 	bl	80098c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>

                    // Remove time from following timeout
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 800958c:	197b      	adds	r3, r7, r5
 800958e:	0018      	movs	r0, r3
 8009590:	f000 f8fc 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009594:	0003      	movs	r3, r0
 8009596:	681c      	ldr	r4, [r3, #0]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	0018      	movs	r0, r3
 800959c:	f7ff fcca 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 80095a0:	0003      	movs	r3, r0
 80095a2:	0019      	movs	r1, r3
 80095a4:	0020      	movs	r0, r4
 80095a6:	f7ff fccf 	bl	8008f48 <_ZN9XFTimeout21substractFromRelTicksEi>
 80095aa:	e069      	b.n	8009680 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x230>

                }
                else
                {	// -> by: test1, test5
                    const int32_t relTicks = (*i)->getRelTicks();
 80095ac:	2408      	movs	r4, #8
 80095ae:	193b      	adds	r3, r7, r4
 80095b0:	0018      	movs	r0, r3
 80095b2:	f000 f8eb 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80095b6:	0003      	movs	r3, r0
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	0018      	movs	r0, r3
 80095bc:	f7ff fcba 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 80095c0:	0003      	movs	r3, r0
 80095c2:	62bb      	str	r3, [r7, #40]	; 0x28
                    // Timeouts timeout at the same time. Put
                    // the new one behind the actual.
                    i++;
 80095c4:	193b      	adds	r3, r7, r4
 80095c6:	2100      	movs	r1, #0
 80095c8:	0018      	movs	r0, r3
 80095ca:	f000 f925 	bl	8009818 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>

                    // Check if even more timeouts with the same timeout
                    while(i != _timeouts.end() && (*i)->getRelTicks() == 0)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3308      	adds	r3, #8
 80095d2:	0018      	movs	r0, r3
 80095d4:	f000 f8b9 	bl	800974a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80095d8:	0003      	movs	r3, r0
 80095da:	61bb      	str	r3, [r7, #24]
 80095dc:	2318      	movs	r3, #24
 80095de:	18fa      	adds	r2, r7, r3
 80095e0:	2308      	movs	r3, #8
 80095e2:	18fb      	adds	r3, r7, r3
 80095e4:	0011      	movs	r1, r2
 80095e6:	0018      	movs	r0, r3
 80095e8:	f000 f8bf 	bl	800976a <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 80095ec:	1e03      	subs	r3, r0, #0
 80095ee:	d00d      	beq.n	800960c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1bc>
 80095f0:	2308      	movs	r3, #8
 80095f2:	18fb      	adds	r3, r7, r3
 80095f4:	0018      	movs	r0, r3
 80095f6:	f000 f8c9 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80095fa:	0003      	movs	r3, r0
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	0018      	movs	r0, r3
 8009600:	f7ff fc98 	bl	8008f34 <_ZNK9XFTimeout11getRelTicksEv>
 8009604:	1e03      	subs	r3, r0, #0
 8009606:	d101      	bne.n	800960c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1bc>
 8009608:	2301      	movs	r3, #1
 800960a:	e000      	b.n	800960e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1be>
 800960c:	2300      	movs	r3, #0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d006      	beq.n	8009620 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1d0>
                    {	// -> by: test5
                        i++;
 8009612:	2308      	movs	r3, #8
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	2100      	movs	r1, #0
 8009618:	0018      	movs	r0, r3
 800961a:	f000 f8fd 	bl	8009818 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    while(i != _timeouts.end() && (*i)->getRelTicks() == 0)
 800961e:	e7d6      	b.n	80095ce <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x17e>
                    }

                    // Insert new timeout behind actual
                    _timeouts.insert(i, pNewTimeout);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3308      	adds	r3, #8
 8009624:	001c      	movs	r4, r3
 8009626:	2308      	movs	r3, #8
 8009628:	18fa      	adds	r2, r7, r3
 800962a:	231c      	movs	r3, #28
 800962c:	18fb      	adds	r3, r7, r3
 800962e:	0011      	movs	r1, r2
 8009630:	0018      	movs	r0, r3
 8009632:	f000 f8c7 	bl	80097c4 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8009636:	003a      	movs	r2, r7
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	0019      	movs	r1, r3
 800963c:	0020      	movs	r0, r4
 800963e:	f000 f93f 	bl	80098c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    // Remove time from actual timeout
                    pNewTimeout->substractFromRelTicks(relTicks);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009646:	0011      	movs	r1, r2
 8009648:	0018      	movs	r0, r3
 800964a:	f7ff fc7d 	bl	8008f48 <_ZN9XFTimeout21substractFromRelTicksEi>
 800964e:	e017      	b.n	8009680 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x230>
                }
            }
            else
            {	// -> by: test4, test5
                // Add timeout at the end of the list
                _timeouts.insert(_timeouts.end(), pNewTimeout);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3308      	adds	r3, #8
 8009654:	001c      	movs	r4, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3308      	adds	r3, #8
 800965a:	0018      	movs	r0, r3
 800965c:	f000 f875 	bl	800974a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8009660:	0003      	movs	r3, r0
 8009662:	627b      	str	r3, [r7, #36]	; 0x24
 8009664:	2324      	movs	r3, #36	; 0x24
 8009666:	18fa      	adds	r2, r7, r3
 8009668:	2320      	movs	r3, #32
 800966a:	18fb      	adds	r3, r7, r3
 800966c:	0011      	movs	r1, r2
 800966e:	0018      	movs	r0, r3
 8009670:	f000 f8a8 	bl	80097c4 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8009674:	003a      	movs	r2, r7
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	0019      	movs	r1, r3
 800967a:	0020      	movs	r0, r4
 800967c:	f000 f920 	bl	80098c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
            }
        }
        _pMutex->unlock();
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	695a      	ldr	r2, [r3, #20]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	330c      	adds	r3, #12
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	0010      	movs	r0, r2
 8009690:	4798      	blx	r3
    }
    else
    {	// -> by: test1, test2, test3, test4, test5
        _timeouts.push_front(pNewTimeout);
    }
}
 8009692:	e006      	b.n	80096a2 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x252>
        _timeouts.push_front(pNewTimeout);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3308      	adds	r3, #8
 8009698:	003a      	movs	r2, r7
 800969a:	0011      	movs	r1, r2
 800969c:	0018      	movs	r0, r3
 800969e:	f000 f939 	bl	8009914 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	46bd      	mov	sp, r7
 80096a6:	b00c      	add	sp, #48	; 0x30
 80096a8:	bdb0      	pop	{r4, r5, r7, pc}

080096aa <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	0018      	movs	r0, r3
 80096b8:	f7ff f93e 	bl	8008938 <_ZNK7XFEvent11getBehaviorEv>
 80096bc:	0002      	movs	r2, r0
 80096be:	6813      	ldr	r3, [r2, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	0010      	movs	r0, r2
 80096c8:	4798      	blx	r3
}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	46bd      	mov	sp, r7
 80096ce:	b002      	add	sp, #8
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:
      list()
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	0018      	movs	r0, r3
 80096de:	f000 f92c 	bl	800993a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	0018      	movs	r0, r3
 80096e6:	46bd      	mov	sp, r7
 80096e8:	b002      	add	sp, #8
 80096ea:	bd80      	pop	{r7, pc}

080096ec <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
      struct _List_impl
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	0018      	movs	r0, r3
 80096f8:	f000 f930 	bl	800995c <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	0018      	movs	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	b002      	add	sp, #8
 8009704:	bd80      	pop	{r7, pc}

08009706 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	0018      	movs	r0, r3
 8009712:	f000 f930 	bl	8009976 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	0018      	movs	r0, r3
 800971a:	f7ff ffe7 	bl	80096ec <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	0018      	movs	r0, r3
 8009722:	46bd      	mov	sp, r7
 8009724:	b002      	add	sp, #8
 8009726:	bd80      	pop	{r7, pc}

08009728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	230c      	movs	r3, #12
 8009736:	18fb      	adds	r3, r7, r3
 8009738:	0011      	movs	r1, r2
 800973a:	0018      	movs	r0, r3
 800973c:	f000 f946 	bl	80099cc <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	0018      	movs	r0, r3
 8009744:	46bd      	mov	sp, r7
 8009746:	b004      	add	sp, #16
 8009748:	bd80      	pop	{r7, pc}

0800974a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	230c      	movs	r3, #12
 8009756:	18fb      	adds	r3, r7, r3
 8009758:	0011      	movs	r1, r2
 800975a:	0018      	movs	r0, r3
 800975c:	f000 f936 	bl	80099cc <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	0018      	movs	r0, r3
 8009764:	46bd      	mov	sp, r7
 8009766:	b004      	add	sp, #16
 8009768:	bd80      	pop	{r7, pc}

0800976a <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>:
      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	6039      	str	r1, [r7, #0]
      { return _M_node != __x._M_node; }
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	1e5a      	subs	r2, r3, #1
 8009780:	4193      	sbcs	r3, r2
 8009782:	b2db      	uxtb	r3, r3
 8009784:	0018      	movs	r0, r3
 8009786:	46bd      	mov	sp, r7
 8009788:	b002      	add	sp, #8
 800978a:	bd80      	pop	{r7, pc}

0800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	0018      	movs	r0, r3
 800979a:	f000 f924 	bl	80099e6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800979e:	0003      	movs	r3, r0
 80097a0:	0018      	movs	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	b002      	add	sp, #8
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	601a      	str	r2, [r3, #0]
	return *this;
 80097ba:	687b      	ldr	r3, [r7, #4]
      }
 80097bc:	0018      	movs	r0, r3
 80097be:	46bd      	mov	sp, r7
 80097c0:	b002      	add	sp, #8
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	0018      	movs	r0, r3
 80097da:	46bd      	mov	sp, r7
 80097dc:	b002      	add	sp, #8
 80097de:	bd80      	pop	{r7, pc}

080097e0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	230c      	movs	r3, #12
 80097f0:	18fb      	adds	r3, r7, r3
 80097f2:	0011      	movs	r1, r2
 80097f4:	0018      	movs	r0, r3
 80097f6:	f000 f8e9 	bl	80099cc <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 80097fa:	003b      	movs	r3, r7
 80097fc:	0018      	movs	r0, r3
 80097fe:	f000 f928 	bl	8009a52 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 8009802:	0002      	movs	r2, r0
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	0011      	movs	r1, r2
 8009808:	0018      	movs	r0, r3
 800980a:	f000 f8fa 	bl	8009a02 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 800980e:	68fb      	ldr	r3, [r7, #12]
    }
 8009810:	0018      	movs	r0, r3
 8009812:	46bd      	mov	sp, r7
 8009814:	b004      	add	sp, #16
 8009816:	bd80      	pop	{r7, pc}

08009818 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	601a      	str	r2, [r3, #0]
	return __tmp;
 8009832:	68fb      	ldr	r3, [r7, #12]
      }
 8009834:	0018      	movs	r0, r3
 8009836:	46bd      	mov	sp, r7
 8009838:	b004      	add	sp, #16
 800983a:	bd80      	pop	{r7, pc}

0800983c <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      bool
      empty() const _GLIBCXX_NOEXCEPT
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	425a      	negs	r2, r3
 800984e:	4153      	adcs	r3, r2
 8009850:	b2db      	uxtb	r3, r3
 8009852:	0018      	movs	r0, r3
 8009854:	46bd      	mov	sp, r7
 8009856:	b002      	add	sp, #8
 8009858:	bd80      	pop	{r7, pc}

0800985a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	0018      	movs	r0, r3
 8009866:	f7ff ff5f 	bl	8009728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800986a:	0003      	movs	r3, r0
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	230c      	movs	r3, #12
 8009870:	18fb      	adds	r3, r7, r3
 8009872:	0018      	movs	r0, r3
 8009874:	f7ff ff8a 	bl	800978c <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009878:	0003      	movs	r3, r0
 800987a:	0018      	movs	r0, r3
 800987c:	46bd      	mov	sp, r7
 800987e:	b004      	add	sp, #16
 8009880:	bd80      	pop	{r7, pc}

08009882 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
      { return this->_M_node_count(); }
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	0018      	movs	r0, r3
 800988e:	f000 f8f1 	bl	8009a74 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE13_M_node_countEv>
 8009892:	0003      	movs	r3, r0
 8009894:	0018      	movs	r0, r3
 8009896:	46bd      	mov	sp, r7
 8009898:	b002      	add	sp, #8
 800989a:	bd80      	pop	{r7, pc}

0800989c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7ff ff3e 	bl	8009728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80098ac:	0002      	movs	r2, r0
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	0011      	movs	r1, r2
 80098b2:	0018      	movs	r0, r3
 80098b4:	f000 f8a5 	bl	8009a02 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 80098b8:	46c0      	nop			; (mov r8, r8)
 80098ba:	46bd      	mov	sp, r7
 80098bc:	b002      	add	sp, #8
 80098be:	bd80      	pop	{r7, pc}

080098c0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	0011      	movs	r1, r2
 80098d2:	0018      	movs	r0, r3
 80098d4:	f000 f8e5 	bl	8009aa2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 80098d8:	0003      	movs	r3, r0
 80098da:	617b      	str	r3, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 80098dc:	697c      	ldr	r4, [r7, #20]
 80098de:	2308      	movs	r3, #8
 80098e0:	18fb      	adds	r3, r7, r3
 80098e2:	0018      	movs	r0, r3
 80098e4:	f000 f8b5 	bl	8009a52 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 80098e8:	0003      	movs	r3, r0
 80098ea:	0019      	movs	r1, r3
 80098ec:	0020      	movs	r0, r4
 80098ee:	f001 fbcf 	bl	800b090 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2101      	movs	r1, #1
 80098f6:	0018      	movs	r0, r3
 80098f8:	f000 f909 	bl	8009b0e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	2310      	movs	r3, #16
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	0011      	movs	r1, r2
 8009904:	0018      	movs	r0, r3
 8009906:	f000 f861 	bl	80099cc <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 800990a:	693b      	ldr	r3, [r7, #16]
    }
 800990c:	0018      	movs	r0, r3
 800990e:	46bd      	mov	sp, r7
 8009910:	b007      	add	sp, #28
 8009912:	bd90      	pop	{r4, r7, pc}

08009914 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	0018      	movs	r0, r3
 8009922:	f7ff ff01 	bl	8009728 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009926:	0001      	movs	r1, r0
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	0018      	movs	r0, r3
 800992e:	f000 f900 	bl	8009b32 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	46bd      	mov	sp, r7
 8009936:	b002      	add	sp, #8
 8009938:	bd80      	pop	{r7, pc}

0800993a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      _List_base()
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	0018      	movs	r0, r3
 8009946:	f000 f915 	bl	8009b74 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
      { _M_init(); }
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	0018      	movs	r0, r3
 800994e:	f000 f925 	bl	8009b9c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE7_M_initEv>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	0018      	movs	r0, r3
 8009956:	46bd      	mov	sp, r7
 8009958:	b002      	add	sp, #8
 800995a:	bd80      	pop	{r7, pc}

0800995c <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	0018      	movs	r0, r3
 8009968:	f000 f92b 	bl	8009bc2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	0018      	movs	r0, r3
 8009970:	46bd      	mov	sp, r7
 8009972:	b002      	add	sp, #8
 8009974:	bd80      	pop	{r7, pc}

08009976 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8009976:	b580      	push	{r7, lr}
 8009978:	b086      	sub	sp, #24
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	429a      	cmp	r2, r3
 800998a:	d01b      	beq.n	80099c4 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x4e>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	0018      	movs	r0, r3
 800999a:	f000 f824 	bl	80099e6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800999e:	0003      	movs	r3, r0
 80099a0:	60fb      	str	r3, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	0018      	movs	r0, r3
 80099a6:	f000 f915 	bl	8009bd4 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80099aa:	0002      	movs	r2, r0
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	0019      	movs	r1, r3
 80099b0:	0010      	movs	r0, r2
 80099b2:	f000 f918 	bl	8009be6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	0011      	movs	r1, r2
 80099bc:	0018      	movs	r0, r3
 80099be:	f000 f921 	bl	8009c04 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 80099c2:	e7df      	b.n	8009984 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0xe>
    }
 80099c4:	46c0      	nop			; (mov r8, r8)
 80099c6:	46bd      	mov	sp, r7
 80099c8:	b006      	add	sp, #24
 80099ca:	bd80      	pop	{r7, pc}

080099cc <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	0018      	movs	r0, r3
 80099e0:	46bd      	mov	sp, r7
 80099e2:	b002      	add	sp, #8
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	3308      	adds	r3, #8
 80099f2:	0018      	movs	r0, r3
 80099f4:	f000 f915 	bl	8009c22 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 80099f8:	0003      	movs	r3, r0
 80099fa:	0018      	movs	r0, r3
 80099fc:	46bd      	mov	sp, r7
 80099fe:	b002      	add	sp, #8
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8009a02:	b590      	push	{r4, r7, lr}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2101      	movs	r1, #1
 8009a10:	0018      	movs	r0, r3
 8009a12:	f000 f913 	bl	8009c3c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	0018      	movs	r0, r3
 8009a1a:	f001 fb40 	bl	800b09e <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	0018      	movs	r0, r3
 8009a26:	f000 f8d5 	bl	8009bd4 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8009a2a:	0004      	movs	r4, r0
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f7ff ffd9 	bl	80099e6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8009a34:	0003      	movs	r3, r0
 8009a36:	0019      	movs	r1, r3
 8009a38:	0020      	movs	r0, r4
 8009a3a:	f000 f8d4 	bl	8009be6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	0011      	movs	r1, r2
 8009a44:	0018      	movs	r0, r3
 8009a46:	f000 f8dd 	bl	8009c04 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 8009a4a:	46c0      	nop			; (mov r8, r8)
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	b005      	add	sp, #20
 8009a50:	bd90      	pop	{r4, r7, pc}

08009a52 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	230c      	movs	r3, #12
 8009a60:	18fb      	adds	r3, r7, r3
 8009a62:	0011      	movs	r1, r2
 8009a64:	0018      	movs	r0, r3
 8009a66:	f7ff ffb1 	bl	80099cc <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b004      	add	sp, #16
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE13_M_node_countEv>:
      size_t _M_node_count() const { return *_M_impl._M_node._M_valptr(); }
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f000 f8ee 	bl	8009c60 <_ZNKSt10_List_nodeIjE9_M_valptrEv>
 8009a84:	0003      	movs	r3, r0
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	0018      	movs	r0, r3
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	b002      	add	sp, #8
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	b002      	add	sp, #8
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009aa2:	b5b0      	push	{r4, r5, r7, lr}
 8009aa4:	b086      	sub	sp, #24
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f000 f8e4 	bl	8009c7c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 8009ab4:	0003      	movs	r3, r0
 8009ab6:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	0018      	movs	r0, r3
 8009abc:	f000 f88a 	bl	8009bd4 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8009ac0:	0003      	movs	r3, r0
 8009ac2:	613b      	str	r3, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	6939      	ldr	r1, [r7, #16]
 8009ac8:	2508      	movs	r5, #8
 8009aca:	197b      	adds	r3, r7, r5
 8009acc:	0018      	movs	r0, r3
 8009ace:	f000 f8e3 	bl	8009c98 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	0018      	movs	r0, r3
 8009ad6:	f7ff ff86 	bl	80099e6 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8009ada:	0004      	movs	r4, r0
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	0018      	movs	r0, r3
 8009ae0:	f7ff ffd6 	bl	8009a90 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009ae4:	0002      	movs	r2, r0
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	0021      	movs	r1, r4
 8009aea:	0018      	movs	r0, r3
 8009aec:	f000 f8fe 	bl	8009cec <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8009af0:	197b      	adds	r3, r7, r5
 8009af2:	2100      	movs	r1, #0
 8009af4:	0018      	movs	r0, r3
 8009af6:	f000 f90d 	bl	8009d14 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 8009afa:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8009afc:	197b      	adds	r3, r7, r5
 8009afe:	0018      	movs	r0, r3
 8009b00:	f000 f8df 	bl	8009cc2 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 8009b04:	0023      	movs	r3, r4
	}
 8009b06:	0018      	movs	r0, r3
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	b006      	add	sp, #24
 8009b0c:	bdb0      	pop	{r4, r5, r7, pc}

08009b0e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	f000 f907 	bl	8009d2e <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8009b20:	0003      	movs	r3, r0
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	683a      	ldr	r2, [r7, #0]
 8009b26:	188a      	adds	r2, r1, r2
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	b002      	add	sp, #8
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b086      	sub	sp, #24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	0018      	movs	r0, r3
 8009b42:	f7ff ffa5 	bl	8009a90 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009b46:	0002      	movs	r2, r0
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	0011      	movs	r1, r2
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	f7ff ffa8 	bl	8009aa2 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8009b52:	0003      	movs	r3, r0
 8009b54:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	0011      	movs	r1, r2
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f001 fa97 	bl	800b090 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2101      	movs	r1, #1
 8009b66:	0018      	movs	r0, r3
 8009b68:	f7ff ffd1 	bl	8009b0e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 8009b6c:	46c0      	nop			; (mov r8, r8)
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	b006      	add	sp, #24
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type(), _M_node()
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f000 f8e3 	bl	8009d4a <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	0018      	movs	r0, r3
 8009b88:	230c      	movs	r3, #12
 8009b8a:	001a      	movs	r2, r3
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	f001 fb1c 	bl	800b1ca <memset>
	{ }
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	0018      	movs	r0, r3
 8009b96:	46bd      	mov	sp, r7
 8009b98:	b002      	add	sp, #8
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	605a      	str	r2, [r3, #4]
	_M_set_size(0);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	f000 f8d5 	bl	8009d64 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_set_sizeEj>
      }
 8009bba:	46c0      	nop			; (mov r8, r8)
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	b002      	add	sp, #8
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	0018      	movs	r0, r3
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	b002      	add	sp, #8
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	0018      	movs	r0, r3
 8009be0:	46bd      	mov	sp, r7
 8009be2:	b002      	add	sp, #8
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	0011      	movs	r1, r2
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	f000 f8c4 	bl	8009d84 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
 8009bfc:	46c0      	nop			; (mov r8, r8)
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	b002      	add	sp, #8
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	2201      	movs	r2, #1
 8009c14:	0018      	movs	r0, r3
 8009c16:	f000 f8be 	bl	8009d96 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	b002      	add	sp, #8
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f000 f8c2 	bl	8009db6 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 8009c32:	0003      	movs	r3, r0
 8009c34:	0018      	movs	r0, r3
 8009c36:	46bd      	mov	sp, r7
 8009c38:	b002      	add	sp, #8
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f000 f870 	bl	8009d2e <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8009c4e:	0003      	movs	r3, r0
 8009c50:	6819      	ldr	r1, [r3, #0]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	1a8a      	subs	r2, r1, r2
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	46c0      	nop			; (mov r8, r8)
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	b002      	add	sp, #8
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <_ZNKSt10_List_nodeIjE9_M_valptrEv>:
      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f000 f8ab 	bl	8009dc8 <_ZNK9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>
 8009c72:	0003      	movs	r3, r0
 8009c74:	0018      	movs	r0, r3
 8009c76:	46bd      	mov	sp, r7
 8009c78:	b002      	add	sp, #8
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2101      	movs	r1, #1
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f000 f8aa 	bl	8009de2 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 8009c8e:	0003      	movs	r3, r0
 8009c90:	0018      	movs	r0, r3
 8009c92:	46bd      	mov	sp, r7
 8009c94:	b002      	add	sp, #8
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f000 f8ab 	bl	8009e02 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 8009cac:	0002      	movs	r2, r0
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	605a      	str	r2, [r3, #4]
      { }
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	b004      	add	sp, #16
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	0019      	movs	r1, r3
 8009cde:	f000 f85a 	bl	8009d96 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd80      	pop	{r7, pc}

08009cec <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	f7ff fec8 	bl	8009a90 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009d00:	0002      	movs	r2, r0
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	0018      	movs	r0, r3
 8009d08:	f000 f884 	bl	8009e14 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8009d0c:	46c0      	nop			; (mov r8, r8)
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b004      	add	sp, #16
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	605a      	str	r2, [r3, #4]
	return *this;
 8009d24:	687b      	ldr	r3, [r7, #4]
      }
 8009d26:	0018      	movs	r0, r3
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	b002      	add	sp, #8
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <_ZNSt10_List_nodeIjE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3308      	adds	r3, #8
 8009d3a:	0018      	movs	r0, r3
 8009d3c:	f000 f882 	bl	8009e44 <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>
 8009d40:	0003      	movs	r3, r0
 8009d42:	0018      	movs	r0, r3
 8009d44:	46bd      	mov	sp, r7
 8009d46:	b002      	add	sp, #8
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() throw() { }
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	0018      	movs	r0, r3
 8009d56:	f000 f882 	bl	8009e5e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b002      	add	sp, #8
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_set_sizeEj>:
      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	0018      	movs	r0, r3
 8009d72:	f7ff ffdc 	bl	8009d2e <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8009d76:	0003      	movs	r3, r0
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	46c0      	nop			; (mov r8, r8)
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	b002      	add	sp, #8
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	46c0      	nop			; (mov r8, r8)
 8009d90:	46bd      	mov	sp, r7
 8009d92:	b002      	add	sp, #8
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60f8      	str	r0, [r7, #12]
 8009d9e:	60b9      	str	r1, [r7, #8]
 8009da0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	0018      	movs	r0, r3
 8009daa:	f000 f861 	bl	8009e70 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 8009dae:	46c0      	nop			; (mov r8, r8)
 8009db0:	46bd      	mov	sp, r7
 8009db2:	b004      	add	sp, #16
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	b002      	add	sp, #8
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <_ZNK9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f000 f85a 	bl	8009e8c <_ZNK9__gnu_cxx16__aligned_membufIjE7_M_addrEv>
 8009dd8:	0003      	movs	r3, r0
 8009dda:	0018      	movs	r0, r3
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	b002      	add	sp, #8
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	0018      	movs	r0, r3
 8009df4:	f000 f853 	bl	8009e9e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 8009df8:	0003      	movs	r3, r0
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	b002      	add	sp, #8
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	b002      	add	sp, #8
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009e14:	b590      	push	{r4, r7, lr}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	0018      	movs	r0, r3
 8009e24:	f7ff fe34 	bl	8009a90 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009e28:	0003      	movs	r3, r0
 8009e2a:	681c      	ldr	r4, [r3, #0]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	0019      	movs	r1, r3
 8009e30:	2004      	movs	r0, #4
 8009e32:	f7ff f84d 	bl	8008ed0 <_ZnwjPv>
 8009e36:	1e03      	subs	r3, r0, #0
 8009e38:	d000      	beq.n	8009e3c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_+0x28>
 8009e3a:	601c      	str	r4, [r3, #0]
 8009e3c:	46c0      	nop			; (mov r8, r8)
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	b005      	add	sp, #20
 8009e42:	bd90      	pop	{r4, r7, pc}

08009e44 <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>:
      _M_ptr() noexcept
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f000 f846 	bl	8009ee0 <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>
 8009e54:	0003      	movs	r3, r0
 8009e56:	0018      	movs	r0, r3
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b002      	add	sp, #8
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	0018      	movs	r0, r3
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b002      	add	sp, #8
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f001 f8f6 	bl	800b070 <_ZdlPv>
      }
 8009e84:	46c0      	nop			; (mov r8, r8)
 8009e86:	46bd      	mov	sp, r7
 8009e88:	b004      	add	sp, #16
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <_ZNK9__gnu_cxx16__aligned_membufIjE7_M_addrEv>:
      _M_addr() const noexcept
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	0018      	movs	r0, r3
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	b002      	add	sp, #8
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	0018      	movs	r0, r3
 8009eae:	f000 f821 	bl	8009ef4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv>
 8009eb2:	0002      	movs	r2, r0
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	419b      	sbcs	r3, r3
 8009eba:	425b      	negs	r3, r3
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009ec2:	f001 f8f1 	bl	800b0a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	0013      	movs	r3, r2
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	189b      	adds	r3, r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f001 f8b4 	bl	800b03e <_Znwj>
 8009ed6:	0003      	movs	r3, r0
      }
 8009ed8:	0018      	movs	r0, r3
 8009eda:	46bd      	mov	sp, r7
 8009edc:	b004      	add	sp, #16
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>:
      _M_addr() noexcept
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	0018      	movs	r0, r3
 8009eec:	46bd      	mov	sp, r7
 8009eee:	b002      	add	sp, #8
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8009efc:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv+0x14>)
 8009efe:	0018      	movs	r0, r3
 8009f00:	46bd      	mov	sp, r7
 8009f02:	b002      	add	sp, #8
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	15555555 	.word	0x15555555

08009f0c <XF_initialize>:
using interface::XFTimeoutManager;

bool XF::_bInitialized = false;

void XF_initialize(int timeInterval)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
    XF::initialize(timeInterval);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	2100      	movs	r1, #0
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	f000 f80c 	bl	8009f38 <_ZN2XF10initializeEiiPPc>
}
 8009f20:	46c0      	nop			; (mov r8, r8)
 8009f22:	46bd      	mov	sp, r7
 8009f24:	b002      	add	sp, #8
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <XF_exec>:

void XF_exec()
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
    XF::exec();
 8009f2c:	f000 f824 	bl	8009f78 <_ZN2XF4execEv>
}
 8009f30:	46c0      	nop			; (mov r8, r8)
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <_ZN2XF10initializeEiiPPc>:
{
    XF::execOnce();
}

void XF::initialize(int timeInterval /* = 10 */, int argc /* = 0 */, char * argv[] /* = nullptr */)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
    if (!_bInitialized)
 8009f44:	4b0b      	ldr	r3, [pc, #44]	; (8009f74 <_ZN2XF10initializeEiiPPc+0x3c>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	4053      	eors	r3, r2
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00b      	beq.n	8009f6a <_ZN2XF10initializeEiiPPc+0x32>
    {
        // Create and initialize TimeoutManager
        XFTimeoutManager::getInstance()->initialize(timeInterval);
 8009f52:	f7ff f817 	bl	8008f84 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8009f56:	0002      	movs	r2, r0
 8009f58:	6813      	ldr	r3, [r2, #0]
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68f9      	ldr	r1, [r7, #12]
 8009f60:	0010      	movs	r0, r2
 8009f62:	4798      	blx	r3

        _bInitialized = true;
 8009f64:	4b03      	ldr	r3, [pc, #12]	; (8009f74 <_ZN2XF10initializeEiiPPc+0x3c>)
 8009f66:	2201      	movs	r2, #1
 8009f68:	701a      	strb	r2, [r3, #0]
    }
}
 8009f6a:	46c0      	nop			; (mov r8, r8)
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	b004      	add	sp, #16
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	20000158 	.word	0x20000158

08009f78 <_ZN2XF4execEv>:

int XF::exec()
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
	// Start timeout manager
	XFTimeoutManager::getInstance()->start();
 8009f7c:	f7ff f802 	bl	8008f84 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8009f80:	0002      	movs	r2, r0
 8009f82:	6813      	ldr	r3, [r2, #0]
 8009f84:	3310      	adds	r3, #16
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	0010      	movs	r0, r2
 8009f8a:	4798      	blx	r3

	// Start default dispatcher
	XFResourceFactory::getInstance()->getDefaultDispatcher()->start();
 8009f8c:	f7fe ff22 	bl	8008dd4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8009f90:	0002      	movs	r2, r0
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	0010      	movs	r0, r2
 8009f98:	4798      	blx	r3
 8009f9a:	0002      	movs	r2, r0
 8009f9c:	6813      	ldr	r3, [r2, #0]
 8009f9e:	330c      	adds	r3, #12
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	0010      	movs	r0, r2
 8009fa4:	4798      	blx	r3

	// In case default dispatcher does not have a thread executing it,
	// call it with this thread
	if (!XFResourceFactory::getInstance()->getDefaultDispatcher()->isActive())
 8009fa6:	f7fe ff15 	bl	8008dd4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8009faa:	0002      	movs	r2, r0
 8009fac:	6813      	ldr	r3, [r2, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	0010      	movs	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	0002      	movs	r2, r0
 8009fb6:	6813      	ldr	r3, [r2, #0]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	0010      	movs	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	0003      	movs	r3, r0
 8009fc2:	001a      	movs	r2, r3
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	4053      	eors	r3, r2
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00d      	beq.n	8009fea <_ZN2XF4execEv+0x72>
	{
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
 8009fce:	f7fe ff01 	bl	8008dd4 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8009fd2:	0002      	movs	r2, r0
 8009fd4:	6813      	ldr	r3, [r2, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	0010      	movs	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	0002      	movs	r2, r0
 8009fde:	6813      	ldr	r3, [r2, #0]
 8009fe0:	3324      	adds	r3, #36	; 0x24
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	0010      	movs	r0, r2
 8009fe8:	4798      	blx	r3
	}
    return 0;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	0018      	movs	r0, r3
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
	...

08009ff4 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a07      	ldr	r2, [pc, #28]	; (800a01c <_ZSt16__deque_buf_sizej+0x28>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d806      	bhi.n	800a012 <_ZSt16__deque_buf_sizej+0x1e>
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	2380      	movs	r3, #128	; 0x80
 800a008:	0098      	lsls	r0, r3, #2
 800a00a:	f7f6 f87d 	bl	8000108 <__udivsi3>
 800a00e:	0003      	movs	r3, r0
 800a010:	e000      	b.n	800a014 <_ZSt16__deque_buf_sizej+0x20>
 800a012:	2301      	movs	r3, #1
 800a014:	0018      	movs	r0, r3
 800a016:	46bd      	mov	sp, r7
 800a018:	b002      	add	sp, #8
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	000001ff 	.word	0x000001ff

0800a020 <_ZN9interface12XFEventQueueC1Ev>:
    virtual const XFEvent * front() = 0;			///< Returns pointer to next event to pop.
    virtual void pop() = 0;							///< Pops the next event from the queue.
    virtual bool pend() = 0;						///< Wait for the next event to arrive. Returns true if an event is in the queue.

public:
    XFEventQueue() = default;
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	4a03      	ldr	r2, [pc, #12]	; (800a038 <_ZN9interface12XFEventQueueC1Ev+0x18>)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	0018      	movs	r0, r3
 800a032:	46bd      	mov	sp, r7
 800a034:	b002      	add	sp, #8
 800a036:	bd80      	pop	{r7, pc}
 800a038:	0800c878 	.word	0x0800c878

0800a03c <_ZN9interface12XFEventQueueD1Ev>:
    virtual ~XFEventQueue() = default;
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	4a03      	ldr	r2, [pc, #12]	; (800a054 <_ZN9interface12XFEventQueueD1Ev+0x18>)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	0018      	movs	r0, r3
 800a04e:	46bd      	mov	sp, r7
 800a050:	b002      	add	sp, #8
 800a052:	bd80      	pop	{r7, pc}
 800a054:	0800c878 	.word	0x0800c878

0800a058 <_ZN9interface12XFEventQueueD0Ev>:
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	0018      	movs	r0, r3
 800a064:	f7ff ffea 	bl	800a03c <_ZN9interface12XFEventQueueD1Ev>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2104      	movs	r1, #4
 800a06c:	0018      	movs	r0, r3
 800a06e:	f000 ffe2 	bl	800b036 <_ZdlPvj>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	0018      	movs	r0, r3
 800a076:	46bd      	mov	sp, r7
 800a078:	b002      	add	sp, #8
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	0018      	movs	r0, r3
 800a088:	f000 f8c1 	bl	800a20e <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	0018      	movs	r0, r3
 800a090:	46bd      	mov	sp, r7
 800a092:	b002      	add	sp, #8
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <_ZN19XFEventQueueDefaultC1Ev>:
#if (USE_XF_EVENT_QUEUE_DEFAULT_IDF_IMPLEMENTATION != 0)

#include <assert.h>
#include "eventqueue-default.h"

XFEventQueueDefault::XFEventQueueDefault()
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f7ff ffbc 	bl	800a020 <_ZN9interface12XFEventQueueC1Ev>
 800a0a8:	4a08      	ldr	r2, [pc, #32]	; (800a0cc <_ZN19XFEventQueueDefaultC1Ev+0x34>)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	f000 ff3c 	bl	800af30 <_ZN14XFMutexDefaultC1Ev>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	0018      	movs	r0, r3
 800a0be:	f000 f899 	bl	800a1f4 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>
{

}
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b002      	add	sp, #8
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	0800c854 	.word	0x0800c854

0800a0d0 <_ZN19XFEventQueueDefaultD1Ev>:

XFEventQueueDefault::~XFEventQueueDefault()
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	4a0a      	ldr	r2, [pc, #40]	; (800a104 <_ZN19XFEventQueueDefaultD1Ev+0x34>)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7ff ffca 	bl	800a07c <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f000 ff31 	bl	800af54 <_ZN14XFMutexDefaultD1Ev>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f7ff ffa1 	bl	800a03c <_ZN9interface12XFEventQueueD1Ev>
{

}
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	46bd      	mov	sp, r7
 800a100:	b002      	add	sp, #8
 800a102:	bd80      	pop	{r7, pc}
 800a104:	0800c854 	.word	0x0800c854

0800a108 <_ZN19XFEventQueueDefaultD0Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
}
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	0018      	movs	r0, r3
 800a114:	f7ff ffdc 	bl	800a0d0 <_ZN19XFEventQueueDefaultD1Ev>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2130      	movs	r1, #48	; 0x30
 800a11c:	0018      	movs	r0, r3
 800a11e:	f000 ff8a 	bl	800b036 <_ZdlPvj>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	0018      	movs	r0, r3
 800a126:	46bd      	mov	sp, r7
 800a128:	b002      	add	sp, #8
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <_ZNK19XFEventQueueDefault5emptyEv>:

bool XFEventQueueDefault::empty() const
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
    return _queue.empty();
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3308      	adds	r3, #8
 800a138:	0018      	movs	r0, r3
 800a13a:	f000 f88d 	bl	800a258 <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>
 800a13e:	0003      	movs	r3, r0
}
 800a140:	0018      	movs	r0, r3
 800a142:	46bd      	mov	sp, r7
 800a144:	b002      	add	sp, #8
 800a146:	bd80      	pop	{r7, pc}

0800a148 <_ZN19XFEventQueueDefault4pushEPK7XFEvent>:

bool XFEventQueueDefault::push(const XFEvent * pEvent)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
    _mutex.lock();
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3304      	adds	r3, #4
 800a156:	0018      	movs	r0, r3
 800a158:	f000 ff20 	bl	800af9c <_ZN14XFMutexDefault4lockEv>
    {
        _queue.push(pEvent);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3308      	adds	r3, #8
 800a160:	003a      	movs	r2, r7
 800a162:	0011      	movs	r1, r2
 800a164:	0018      	movs	r0, r3
 800a166:	f000 f884 	bl	800a272 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>
    }
    _mutex.unlock();
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3304      	adds	r3, #4
 800a16e:	0018      	movs	r0, r3
 800a170:	f000 ff1e 	bl	800afb0 <_ZN14XFMutexDefault6unlockEv>

    return true;
 800a174:	2301      	movs	r3, #1
}
 800a176:	0018      	movs	r0, r3
 800a178:	46bd      	mov	sp, r7
 800a17a:	b002      	add	sp, #8
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <_ZN19XFEventQueueDefault5frontEv>:

const XFEvent * XFEventQueueDefault::front()
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
    const XFEvent * event;
    _mutex.lock();
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3304      	adds	r3, #4
 800a18a:	0018      	movs	r0, r3
 800a18c:	f000 ff06 	bl	800af9c <_ZN14XFMutexDefault4lockEv>
    {
        event =  _queue.front();
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3308      	adds	r3, #8
 800a194:	0018      	movs	r0, r3
 800a196:	f000 f87b 	bl	800a290 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>
 800a19a:	0003      	movs	r3, r0
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]
    }
    _mutex.unlock();
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f000 ff03 	bl	800afb0 <_ZN14XFMutexDefault6unlockEv>
    return event;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
}
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	b004      	add	sp, #16
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <_ZN19XFEventQueueDefault3popEv>:

void XFEventQueueDefault::pop()
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
    _mutex.lock();
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	0018      	movs	r0, r3
 800a1c2:	f000 feeb 	bl	800af9c <_ZN14XFMutexDefault4lockEv>
    {
        _queue.pop();
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f000 f86d 	bl	800a2aa <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>
    }
    _mutex.unlock();
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f000 feeb 	bl	800afb0 <_ZN14XFMutexDefault6unlockEv>
}
 800a1da:	46c0      	nop			; (mov r8, r8)
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	b002      	add	sp, #8
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <_ZN19XFEventQueueDefault4pendEv>:

bool XFEventQueueDefault::pend()
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	0018      	movs	r0, r3
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	b002      	add	sp, #8
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
	: c() { }
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	0018      	movs	r0, r3
 800a200:	f000 f85f 	bl	800a2c2 <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	0018      	movs	r0, r3
 800a208:	46bd      	mov	sp, r7
 800a20a:	b002      	add	sp, #8
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800a20e:	b5b0      	push	{r4, r5, r7, lr}
 800a210:	b08a      	sub	sp, #40	; 0x28
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800a216:	2408      	movs	r4, #8
 800a218:	193b      	adds	r3, r7, r4
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	0011      	movs	r1, r2
 800a21e:	0018      	movs	r0, r3
 800a220:	f000 f88b 	bl	800a33a <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 800a224:	2518      	movs	r5, #24
 800a226:	197b      	adds	r3, r7, r5
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	0011      	movs	r1, r2
 800a22c:	0018      	movs	r0, r3
 800a22e:	f000 f895 	bl	800a35c <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	0018      	movs	r0, r3
 800a236:	f000 f8a2 	bl	800a37e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 800a23a:	0003      	movs	r3, r0
 800a23c:	197a      	adds	r2, r7, r5
 800a23e:	1939      	adds	r1, r7, r4
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f8bf 	bl	800a3c4 <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	0018      	movs	r0, r3
 800a24a:	f000 f854 	bl	800a2f6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	0018      	movs	r0, r3
 800a252:	46bd      	mov	sp, r7
 800a254:	b00a      	add	sp, #40	; 0x28
 800a256:	bdb0      	pop	{r4, r5, r7, pc}

0800a258 <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      bool
      empty() const
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	0018      	movs	r0, r3
 800a264:	f000 f8b9 	bl	800a3da <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>
 800a268:	0003      	movs	r3, r0
 800a26a:	0018      	movs	r0, r3
 800a26c:	46bd      	mov	sp, r7
 800a26e:	b002      	add	sp, #8
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 800a272:	b580      	push	{r7, lr}
 800a274:	b082      	sub	sp, #8
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	0011      	movs	r1, r2
 800a282:	0018      	movs	r0, r3
 800a284:	f000 f8bb 	bl	800a3fe <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>
 800a288:	46c0      	nop			; (mov r8, r8)
 800a28a:	46bd      	mov	sp, r7
 800a28c:	b002      	add	sp, #8
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>:
      front()
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	return c.front();
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	0018      	movs	r0, r3
 800a29c:	f000 f8d2 	bl	800a444 <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>
 800a2a0:	0003      	movs	r3, r0
      }
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	b002      	add	sp, #8
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f000 f8d9 	bl	800a46c <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>
      }
 800a2ba:	46c0      	nop			; (mov r8, r8)
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	b002      	add	sp, #8
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>:
      deque() : _Base() { }
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	f000 f8ed 	bl	800a4ac <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	b002      	add	sp, #8
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f000 f8f2 	bl	800a4d0 <_ZNSaIPK7XFEventED1Ev>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	b002      	add	sp, #8
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d010      	beq.n	800a328 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800a30e:	1d1a      	adds	r2, r3, #4
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	0018      	movs	r0, r3
 800a314:	f000 f8e9 	bl	800a4ea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6819      	ldr	r1, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	0018      	movs	r0, r3
 800a324:	f000 f8fc 	bl	800a520 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>
    }
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	0018      	movs	r0, r3
 800a32c:	f7ff ffd6 	bl	800a2dc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	0018      	movs	r0, r3
 800a334:	46bd      	mov	sp, r7
 800a336:	b002      	add	sp, #8
 800a338:	bd80      	pop	{r7, pc}

0800a33a <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	3308      	adds	r3, #8
 800a348:	001a      	movs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	0011      	movs	r1, r2
 800a34e:	0018      	movs	r0, r3
 800a350:	f000 f81e 	bl	800a390 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	46bd      	mov	sp, r7
 800a358:	b002      	add	sp, #8
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	3318      	adds	r3, #24
 800a36a:	001a      	movs	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	0011      	movs	r1, r2
 800a370:	0018      	movs	r0, r3
 800a372:	f000 f80d 	bl	800a390 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	46bd      	mov	sp, r7
 800a37a:	b002      	add	sp, #8
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	0018      	movs	r0, r3
 800a38a:	46bd      	mov	sp, r7
 800a38c:	b002      	add	sp, #8
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	601a      	str	r2, [r3, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685a      	ldr	r2, [r3, #4]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	605a      	str	r2, [r3, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	609a      	str	r2, [r3, #8]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68da      	ldr	r2, [r3, #12]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	60da      	str	r2, [r3, #12]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	0018      	movs	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08c      	sub	sp, #48	; 0x30
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
 800a3d0:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	b00c      	add	sp, #48	; 0x30
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3318      	adds	r3, #24
 800a3e6:	001a      	movs	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	0019      	movs	r1, r3
 800a3ee:	0010      	movs	r0, r2
 800a3f0:	f000 f8b1 	bl	800a556 <_ZSteqIPK7XFEventRS2_PS2_EbRKSt15_Deque_iteratorIT_T0_T1_ESB_>
 800a3f4:	0003      	movs	r3, r0
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	b002      	add	sp, #8
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b082      	sub	sp, #8
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800a412:	429a      	cmp	r2, r3
 800a414:	d00c      	beq.n	800a430 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	0019      	movs	r1, r3
 800a420:	f000 f8b3 	bl	800a58a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	619a      	str	r2, [r3, #24]
      }
 800a42e:	e005      	b.n	800a43c <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x3e>
	  _M_push_back_aux(__x);
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	0011      	movs	r1, r2
 800a436:	0018      	movs	r0, r3
 800a438:	f000 f8bb 	bl	800a5b2 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
      }
 800a43c:	46c0      	nop			; (mov r8, r8)
 800a43e:	46bd      	mov	sp, r7
 800a440:	b002      	add	sp, #8
 800a442:	bd80      	pop	{r7, pc}

0800a444 <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 800a444:	b590      	push	{r4, r7, lr}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	return *begin();
 800a44c:	2408      	movs	r4, #8
 800a44e:	193b      	adds	r3, r7, r4
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	0011      	movs	r1, r2
 800a454:	0018      	movs	r0, r3
 800a456:	f7ff ff70 	bl	800a33a <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 800a45a:	193b      	adds	r3, r7, r4
 800a45c:	0018      	movs	r0, r3
 800a45e:	f000 f8da 	bl	800a616 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>
 800a462:	0003      	movs	r3, r0
      }
 800a464:	0018      	movs	r0, r3
 800a466:	46bd      	mov	sp, r7
 800a468:	b007      	add	sp, #28
 800a46a:	bd90      	pop	{r4, r7, pc}

0800a46c <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800a47e:	429a      	cmp	r2, r3
 800a480:	d00c      	beq.n	800a49c <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x30>
	    _Alloc_traits::destroy(this->_M_impl,
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	0019      	movs	r1, r3
 800a48a:	0010      	movs	r0, r2
 800a48c:	f000 f8cd 	bl	800a62a <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	1d1a      	adds	r2, r3, #4
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	609a      	str	r2, [r3, #8]
      }
 800a49a:	e003      	b.n	800a4a4 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x38>
	  _M_pop_front_aux();
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	0018      	movs	r0, r3
 800a4a0:	f000 f8d2 	bl	800a648 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
      }
 800a4a4:	46c0      	nop			; (mov r8, r8)
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	b002      	add	sp, #8
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>:
      _Deque_base()
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f000 f8ee 	bl	800a698 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2100      	movs	r1, #0
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f000 f906 	bl	800a6d2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	0018      	movs	r0, r3
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	b002      	add	sp, #8
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <_ZNSaIPK7XFEventED1Ev>:
      ~allocator() throw() { }
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	0018      	movs	r0, r3
 800a4dc:	f000 f961 	bl	800a7a2 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	b002      	add	sp, #8
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b086      	sub	sp, #24
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	617b      	str	r3, [r7, #20]
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d20a      	bcs.n	800a518 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x2e>
	_M_deallocate_node(*__n);
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	0011      	movs	r1, r2
 800a50a:	0018      	movs	r0, r3
 800a50c:	f000 f952 	bl	800a7b4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	3304      	adds	r3, #4
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	e7f0      	b.n	800a4fa <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x10>
    }
 800a518:	46c0      	nop			; (mov r8, r8)
 800a51a:	46bd      	mov	sp, r7
 800a51c:	b006      	add	sp, #24
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800a520:	b590      	push	{r4, r7, lr}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a52c:	2414      	movs	r4, #20
 800a52e:	193b      	adds	r3, r7, r4
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	0011      	movs	r1, r2
 800a534:	0018      	movs	r0, r3
 800a536:	f000 f950 	bl	800a7da <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	68b9      	ldr	r1, [r7, #8]
 800a53e:	193b      	adds	r3, r7, r4
 800a540:	0018      	movs	r0, r3
 800a542:	f000 f96a 	bl	800a81a <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a546:	193b      	adds	r3, r7, r4
 800a548:	0018      	movs	r0, r3
 800a54a:	f000 f959 	bl	800a800 <_ZNSaIPPK7XFEventED1Ev>
      }
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	46bd      	mov	sp, r7
 800a552:	b007      	add	sp, #28
 800a554:	bd90      	pop	{r4, r7, pc}

0800a556 <_ZSteqIPK7XFEventRS2_PS2_EbRKSt15_Deque_iteratorIT_T0_T1_ESB_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	425a      	negs	r2, r3
 800a56c:	4153      	adcs	r3, r2
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	0018      	movs	r0, r3
 800a572:	46bd      	mov	sp, r7
 800a574:	b002      	add	sp, #8
 800a576:	bd80      	pop	{r7, pc}

0800a578 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	0018      	movs	r0, r3
 800a584:	46bd      	mov	sp, r7
 800a586:	b002      	add	sp, #8
 800a588:	bd80      	pop	{r7, pc}

0800a58a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	0018      	movs	r0, r3
 800a59a:	f7ff ffed 	bl	800a578 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 800a59e:	0002      	movs	r2, r0
 800a5a0:	68b9      	ldr	r1, [r7, #8]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	f000 f948 	bl	800a83a <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	b004      	add	sp, #16
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800a5b2:	b5b0      	push	{r4, r5, r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2101      	movs	r1, #1
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f000 f952 	bl	800a86a <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	1d1c      	adds	r4, r3, #4
 800a5ce:	0010      	movs	r0, r2
 800a5d0:	f000 f968 	bl	800a8a4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 800a5d4:	0003      	movs	r3, r0
 800a5d6:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800a5d8:	687c      	ldr	r4, [r7, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	699d      	ldr	r5, [r3, #24]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f7ff ffc9 	bl	800a578 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 800a5e6:	0003      	movs	r3, r0
 800a5e8:	001a      	movs	r2, r3
 800a5ea:	0029      	movs	r1, r5
 800a5ec:	0020      	movs	r0, r4
 800a5ee:	f7ff ffcc 	bl	800a58a <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3318      	adds	r3, #24
 800a5f6:	001a      	movs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	0019      	movs	r1, r3
 800a600:	0010      	movs	r0, r2
 800a602:	f000 f961 	bl	800a8c8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69da      	ldr	r2, [r3, #28]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800a60e:	46c0      	nop			; (mov r8, r8)
 800a610:	46bd      	mov	sp, r7
 800a612:	b002      	add	sp, #8
 800a614:	bdb0      	pop	{r4, r5, r7, pc}

0800a616 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	0018      	movs	r0, r3
 800a624:	46bd      	mov	sp, r7
 800a626:	b002      	add	sp, #8
 800a628:	bd80      	pop	{r7, pc}

0800a62a <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	0011      	movs	r1, r2
 800a63a:	0018      	movs	r0, r3
 800a63c:	f000 f95d 	bl	800a8fa <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>
 800a640:	46c0      	nop			; (mov r8, r8)
 800a642:	46bd      	mov	sp, r7
 800a644:	b002      	add	sp, #8
 800a646:	bd80      	pop	{r7, pc}

0800a648 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	0018      	movs	r0, r3
 800a654:	f7ff fe93 	bl	800a37e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 800a658:	0002      	movs	r2, r0
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	0019      	movs	r1, r3
 800a660:	0010      	movs	r0, r2
 800a662:	f7ff ffe2 	bl	800a62a <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	0019      	movs	r1, r3
 800a66e:	0010      	movs	r0, r2
 800a670:	f000 f8a0 	bl	800a7b4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3308      	adds	r3, #8
 800a678:	001a      	movs	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	3304      	adds	r3, #4
 800a680:	0019      	movs	r1, r3
 800a682:	0010      	movs	r0, r2
 800a684:	f000 f920 	bl	800a8c8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	609a      	str	r2, [r3, #8]
    }
 800a690:	46c0      	nop			; (mov r8, r8)
 800a692:	46bd      	mov	sp, r7
 800a694:	b002      	add	sp, #8
 800a696:	bd80      	pop	{r7, pc}

0800a698 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>:
	_Deque_impl()
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	f000 f932 	bl	800a90c <_ZNSaIPK7XFEventEC1Ev>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	605a      	str	r2, [r3, #4]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	f000 f934 	bl	800a926 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3318      	adds	r3, #24
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	f000 f92f 	bl	800a926 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
	{ }
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	b002      	add	sp, #8
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800a6d2:	b590      	push	{r4, r7, lr}
 800a6d4:	b089      	sub	sp, #36	; 0x24
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 800a6dc:	2004      	movs	r0, #4
 800a6de:	f7ff fc89 	bl	8009ff4 <_ZSt16__deque_buf_sizej>
 800a6e2:	0003      	movs	r3, r0
 800a6e4:	0019      	movs	r1, r3
 800a6e6:	6838      	ldr	r0, [r7, #0]
 800a6e8:	f7f5 fd0e 	bl	8000108 <__udivsi3>
 800a6ec:	0003      	movs	r3, r0
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	61fb      	str	r3, [r7, #28]
					   size_t(__num_nodes + 2));
 800a6f2:	2308      	movs	r3, #8
 800a6f4:	60fb      	str	r3, [r7, #12]
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	3302      	adds	r3, #2
 800a6fa:	613b      	str	r3, [r7, #16]
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	18fa      	adds	r2, r7, r3
 800a700:	230c      	movs	r3, #12
 800a702:	18fb      	adds	r3, r7, r3
 800a704:	0011      	movs	r1, r2
 800a706:	0018      	movs	r0, r3
 800a708:	f000 f922 	bl	800a950 <_ZSt3maxIjERKT_S2_S2_>
 800a70c:	0003      	movs	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	0011      	movs	r1, r2
 800a71c:	0018      	movs	r0, r3
 800a71e:	f000 f929 	bl	800a974 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 800a722:	0002      	movs	r2, r0
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6859      	ldr	r1, [r3, #4]
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	1acb      	subs	r3, r1, r3
 800a734:	085b      	lsrs	r3, r3, #1
 800a736:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800a738:	18d3      	adds	r3, r2, r3
 800a73a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	18d3      	adds	r3, r2, r3
 800a744:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	69b9      	ldr	r1, [r7, #24]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	0018      	movs	r0, r3
 800a74e:	f000 f92d 	bl	800a9ac <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	3308      	adds	r3, #8
 800a756:	69ba      	ldr	r2, [r7, #24]
 800a758:	0011      	movs	r1, r2
 800a75a:	0018      	movs	r0, r3
 800a75c:	f000 f8b4 	bl	800a8c8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3318      	adds	r3, #24
 800a764:	001a      	movs	r2, r3
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	3b04      	subs	r3, #4
 800a76a:	0019      	movs	r1, r3
 800a76c:	0010      	movs	r0, r2
 800a76e:	f000 f8ab 	bl	800a8c8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800a77e:	2004      	movs	r0, #4
 800a780:	f7ff fc38 	bl	8009ff4 <_ZSt16__deque_buf_sizej>
 800a784:	0002      	movs	r2, r0
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	0011      	movs	r1, r2
 800a78a:	0018      	movs	r0, r3
 800a78c:	f7f5 fd42 	bl	8000214 <__aeabi_uidivmod>
 800a790:	000b      	movs	r3, r1
					+ __num_elements
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	619a      	str	r2, [r3, #24]
    }
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	46bd      	mov	sp, r7
 800a79e:	b009      	add	sp, #36	; 0x24
 800a7a0:	bd90      	pop	{r4, r7, pc}

0800a7a2 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	0018      	movs	r0, r3
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	b002      	add	sp, #8
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800a7b4:	b590      	push	{r4, r7, lr}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800a7be:	687c      	ldr	r4, [r7, #4]
 800a7c0:	2004      	movs	r0, #4
 800a7c2:	f7ff fc17 	bl	8009ff4 <_ZSt16__deque_buf_sizej>
 800a7c6:	0002      	movs	r2, r0
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	0019      	movs	r1, r3
 800a7cc:	0020      	movs	r0, r4
 800a7ce:	f000 f908 	bl	800a9e2 <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>
      }
 800a7d2:	46c0      	nop			; (mov r8, r8)
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	b003      	add	sp, #12
 800a7d8:	bd90      	pop	{r4, r7, pc}

0800a7da <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	f000 f90b 	bl	800aa02 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 800a7ec:	0002      	movs	r2, r0
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	0011      	movs	r1, r2
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	f000 f90e 	bl	800aa14 <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	b002      	add	sp, #8
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <_ZNSaIPPK7XFEventED1Ev>:
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	0018      	movs	r0, r3
 800a80c:	f000 f910 	bl	800aa30 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	0018      	movs	r0, r3
 800a814:	46bd      	mov	sp, r7
 800a816:	b002      	add	sp, #8
 800a818:	bd80      	pop	{r7, pc}

0800a81a <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	68b9      	ldr	r1, [r7, #8]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	0018      	movs	r0, r3
 800a82e:	f000 f908 	bl	800aa42 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>
 800a832:	46c0      	nop			; (mov r8, r8)
 800a834:	46bd      	mov	sp, r7
 800a836:	b004      	add	sp, #16
 800a838:	bd80      	pop	{r7, pc}

0800a83a <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800a83a:	b590      	push	{r4, r7, lr}
 800a83c:	b085      	sub	sp, #20
 800a83e:	af00      	add	r7, sp, #0
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	60b9      	str	r1, [r7, #8]
 800a844:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	0018      	movs	r0, r3
 800a84a:	f7ff fe95 	bl	800a578 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 800a84e:	0003      	movs	r3, r0
 800a850:	681c      	ldr	r4, [r3, #0]
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	0019      	movs	r1, r3
 800a856:	2004      	movs	r0, #4
 800a858:	f7fe fb3a 	bl	8008ed0 <_ZnwjPv>
 800a85c:	1e03      	subs	r3, r0, #0
 800a85e:	d000      	beq.n	800a862 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_+0x28>
 800a860:	601c      	str	r4, [r3, #0]
 800a862:	46c0      	nop			; (mov r8, r8)
 800a864:	46bd      	mov	sp, r7
 800a866:	b005      	add	sp, #20
 800a868:	bd90      	pop	{r4, r7, pc}

0800a86a <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6859      	ldr	r1, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	0018      	movs	r0, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	1ac3      	subs	r3, r0, r3
 800a888:	109b      	asrs	r3, r3, #2
 800a88a:	1acb      	subs	r3, r1, r3
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d905      	bls.n	800a89c <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj+0x32>
	  _M_reallocate_map(__nodes_to_add, false);
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	0018      	movs	r0, r3
 800a898:	f000 f8e2 	bl	800aa60 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
      }
 800a89c:	46c0      	nop			; (mov r8, r8)
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	b002      	add	sp, #8
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800a8ac:	687c      	ldr	r4, [r7, #4]
 800a8ae:	2004      	movs	r0, #4
 800a8b0:	f7ff fba0 	bl	8009ff4 <_ZSt16__deque_buf_sizej>
 800a8b4:	0003      	movs	r3, r0
 800a8b6:	0019      	movs	r1, r3
 800a8b8:	0020      	movs	r0, r4
 800a8ba:	f000 f973 	bl	800aba4 <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>
 800a8be:	0003      	movs	r3, r0
      }
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	b003      	add	sp, #12
 800a8c6:	bd90      	pop	{r4, r7, pc}

0800a8c8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800a8c8:	b590      	push	{r4, r7, lr}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685c      	ldr	r4, [r3, #4]
 800a8e4:	f000 f96e 	bl	800abc4 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 800a8e8:	0003      	movs	r3, r0
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	18e2      	adds	r2, r4, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	609a      	str	r2, [r3, #8]
      }
 800a8f2:	46c0      	nop			; (mov r8, r8)
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	b003      	add	sp, #12
 800a8f8:	bd90      	pop	{r4, r7, pc}

0800a8fa <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6039      	str	r1, [r7, #0]
 800a904:	46c0      	nop			; (mov r8, r8)
 800a906:	46bd      	mov	sp, r7
 800a908:	b002      	add	sp, #8
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <_ZNSaIPK7XFEventEC1Ev>:
      allocator() throw() { }
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	0018      	movs	r0, r3
 800a918:	f000 f95d 	bl	800abd6 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	0018      	movs	r0, r3
 800a920:	46bd      	mov	sp, r7
 800a922:	b002      	add	sp, #8
 800a924:	bd80      	pop	{r7, pc}

0800a926 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	605a      	str	r2, [r3, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	609a      	str	r2, [r3, #8]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	60da      	str	r2, [r3, #12]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	0018      	movs	r0, r3
 800a94a:	46bd      	mov	sp, r7
 800a94c:	b002      	add	sp, #8
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	429a      	cmp	r2, r3
 800a964:	d201      	bcs.n	800a96a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	e000      	b.n	800a96c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800a96a:	687b      	ldr	r3, [r7, #4]
    }
 800a96c:	0018      	movs	r0, r3
 800a96e:	46bd      	mov	sp, r7
 800a970:	b002      	add	sp, #8
 800a972:	bd80      	pop	{r7, pc}

0800a974 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800a974:	b5b0      	push	{r4, r5, r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a97e:	250c      	movs	r5, #12
 800a980:	197b      	adds	r3, r7, r5
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	0011      	movs	r1, r2
 800a986:	0018      	movs	r0, r3
 800a988:	f7ff ff27 	bl	800a7da <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	197b      	adds	r3, r7, r5
 800a990:	0011      	movs	r1, r2
 800a992:	0018      	movs	r0, r3
 800a994:	f000 f928 	bl	800abe8 <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>
 800a998:	0004      	movs	r4, r0
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a99a:	197b      	adds	r3, r7, r5
 800a99c:	0018      	movs	r0, r3
 800a99e:	f7ff ff2f 	bl	800a800 <_ZNSaIPPK7XFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800a9a2:	0023      	movs	r3, r4
      }
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	b004      	add	sp, #16
 800a9aa:	bdb0      	pop	{r4, r5, r7, pc}

0800a9ac <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	617b      	str	r3, [r7, #20]
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d20a      	bcs.n	800a9da <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x2e>
	    *__cur = this->_M_allocate_node();
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f7ff ff6c 	bl	800a8a4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 800a9cc:	0002      	movs	r2, r0
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	e7f0      	b.n	800a9bc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x10>
    }
 800a9da:	46c0      	nop			; (mov r8, r8)
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	b006      	add	sp, #24
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	68b9      	ldr	r1, [r7, #8]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	f000 f907 	bl	800ac08 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	b004      	add	sp, #16
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	b002      	add	sp, #8
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	0018      	movs	r0, r3
 800aa22:	f000 f8ff 	bl	800ac24 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	0018      	movs	r0, r3
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	b002      	add	sp, #8
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	0018      	movs	r0, r3
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	b002      	add	sp, #8
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b084      	sub	sp, #16
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	0018      	movs	r0, r3
 800aa52:	f000 fb0d 	bl	800b070 <_ZdlPv>
      }
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b004      	add	sp, #16
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b08b      	sub	sp, #44	; 0x2c
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	1dfb      	adds	r3, r7, #7
 800aa6c:	701a      	strb	r2, [r3, #0]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	001a      	movs	r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	109b      	asrs	r3, r3, #2
 800aa7c:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800aa7e:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	6a3a      	ldr	r2, [r7, #32]
 800aa84:	18d3      	adds	r3, r2, r3
 800aa86:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d92e      	bls.n	800aaf2 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x92>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	1acb      	subs	r3, r1, r3
 800aaa0:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800aaa2:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800aaa4:	1dfb      	adds	r3, r7, #7
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x52>
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	e000      	b.n	800aab4 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x54>
 800aab2:	2300      	movs	r3, #0
 800aab4:	185b      	adds	r3, r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800aab6:	18d3      	adds	r3, r2, r3
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d209      	bcs.n	800aad8 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x78>
	    std::copy(this->_M_impl._M_start._M_node,
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800aacc:	3304      	adds	r3, #4
 800aace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad0:	0019      	movs	r1, r3
 800aad2:	f000 f8b0 	bl	800ac36 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
 800aad6:	e04b      	b.n	800ab70 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x110>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800aae0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800aae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aae8:	18d3      	adds	r3, r2, r3
 800aaea:	001a      	movs	r2, r3
 800aaec:	f000 f8bd 	bl	800ac6a <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>
 800aaf0:	e03e      	b.n	800ab70 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x110>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	2208      	movs	r2, #8
 800aafc:	18ba      	adds	r2, r7, r2
 800aafe:	0011      	movs	r1, r2
 800ab00:	0018      	movs	r0, r3
 800ab02:	f7ff ff25 	bl	800a950 <_ZSt3maxIjERKT_S2_S2_>
 800ab06:	0003      	movs	r3, r0
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	18e3      	adds	r3, r4, r3
	  size_type __new_map_size = this->_M_impl._M_map_size
 800ab0c:	3302      	adds	r3, #2
 800ab0e:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	69ba      	ldr	r2, [r7, #24]
 800ab14:	0011      	movs	r1, r2
 800ab16:	0018      	movs	r0, r3
 800ab18:	f7ff ff2c 	bl	800a974 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 800ab1c:	0003      	movs	r3, r0
 800ab1e:	617b      	str	r3, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	085b      	lsrs	r3, r3, #1
 800ab28:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800ab2a:	1dfb      	adds	r3, r7, #7
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d002      	beq.n	800ab38 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xd8>
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	e000      	b.n	800ab3a <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xda>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	189b      	adds	r3, r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	18d3      	adds	r3, r2, r3
 800ab40:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab4e:	0019      	movs	r1, r3
 800ab50:	f000 f871 	bl	800ac36 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6819      	ldr	r1, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	001a      	movs	r2, r3
 800ab60:	f7ff fcde 	bl	800a520 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>

	  this->_M_impl._M_map = __new_map;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	697a      	ldr	r2, [r7, #20]
 800ab68:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	69ba      	ldr	r2, [r7, #24]
 800ab6e:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3308      	adds	r3, #8
 800ab74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab76:	0011      	movs	r1, r2
 800ab78:	0018      	movs	r0, r3
 800ab7a:	f7ff fea5 	bl	800a8c8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3318      	adds	r3, #24
 800ab82:	0018      	movs	r0, r3
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	4a06      	ldr	r2, [pc, #24]	; (800aba0 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x140>)
 800ab88:	4694      	mov	ip, r2
 800ab8a:	4463      	add	r3, ip
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab90:	18d3      	adds	r3, r2, r3
 800ab92:	0019      	movs	r1, r3
 800ab94:	f7ff fe98 	bl	800a8c8 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
    }
 800ab98:	46c0      	nop			; (mov r8, r8)
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	b00b      	add	sp, #44	; 0x2c
 800ab9e:	bd90      	pop	{r4, r7, pc}
 800aba0:	3fffffff 	.word	0x3fffffff

0800aba4 <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	0018      	movs	r0, r3
 800abb6:	f000 f872 	bl	800ac9e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>
 800abba:	0003      	movs	r3, r0
 800abbc:	0018      	movs	r0, r3
 800abbe:	46bd      	mov	sp, r7
 800abc0:	b002      	add	sp, #8
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800abc8:	2004      	movs	r0, #4
 800abca:	f7ff fa13 	bl	8009ff4 <_ZSt16__deque_buf_sizej>
 800abce:	0003      	movs	r3, r0
 800abd0:	0018      	movs	r0, r3
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b082      	sub	sp, #8
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	0018      	movs	r0, r3
 800abe2:	46bd      	mov	sp, r7
 800abe4:	b002      	add	sp, #8
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	0018      	movs	r0, r3
 800abfa:	f000 f86e 	bl	800acda <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>
 800abfe:	0003      	movs	r3, r0
 800ac00:	0018      	movs	r0, r3
 800ac02:	46bd      	mov	sp, r7
 800ac04:	b002      	add	sp, #8
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	0018      	movs	r0, r3
 800ac18:	f000 fa2a 	bl	800b070 <_ZdlPv>
      }
 800ac1c:	46c0      	nop			; (mov r8, r8)
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	b004      	add	sp, #16
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	0018      	movs	r0, r3
 800ac30:	46bd      	mov	sp, r7
 800ac32:	b002      	add	sp, #8
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800ac36:	b590      	push	{r4, r7, lr}
 800ac38:	b085      	sub	sp, #20
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	60f8      	str	r0, [r7, #12]
 800ac3e:	60b9      	str	r1, [r7, #8]
 800ac40:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	0018      	movs	r0, r3
 800ac46:	f000 f866 	bl	800ad16 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800ac4a:	0004      	movs	r4, r0
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	0018      	movs	r0, r3
 800ac50:	f000 f861 	bl	800ad16 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800ac54:	0001      	movs	r1, r0
	       __result));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	001a      	movs	r2, r3
 800ac5a:	0020      	movs	r0, r4
 800ac5c:	f000 f864 	bl	800ad28 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800ac60:	0003      	movs	r3, r0
    }
 800ac62:	0018      	movs	r0, r3
 800ac64:	46bd      	mov	sp, r7
 800ac66:	b005      	add	sp, #20
 800ac68:	bd90      	pop	{r4, r7, pc}

0800ac6a <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ac6a:	b590      	push	{r4, r7, lr}
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f000 f84c 	bl	800ad16 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800ac7e:	0004      	movs	r4, r0
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	0018      	movs	r0, r3
 800ac84:	f000 f847 	bl	800ad16 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800ac88:	0001      	movs	r1, r0
	       __result));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	001a      	movs	r2, r3
 800ac8e:	0020      	movs	r0, r4
 800ac90:	f000 f869 	bl	800ad66 <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800ac94:	0003      	movs	r3, r0
    }
 800ac96:	0018      	movs	r0, r3
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	b005      	add	sp, #20
 800ac9c:	bd90      	pop	{r4, r7, pc}

0800ac9e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	0018      	movs	r0, r3
 800acae:	f000 f879 	bl	800ada4 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>
 800acb2:	0002      	movs	r2, r0
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	419b      	sbcs	r3, r3
 800acba:	425b      	negs	r3, r3
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800acc2:	f000 f9f1 	bl	800b0a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	0018      	movs	r0, r3
 800accc:	f000 f9b7 	bl	800b03e <_Znwj>
 800acd0:	0003      	movs	r3, r0
      }
 800acd2:	0018      	movs	r0, r3
 800acd4:	46bd      	mov	sp, r7
 800acd6:	b004      	add	sp, #16
 800acd8:	bd80      	pop	{r7, pc}

0800acda <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	0018      	movs	r0, r3
 800acea:	f000 f867 	bl	800adbc <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE8max_sizeEv>
 800acee:	0002      	movs	r2, r0
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	419b      	sbcs	r3, r3
 800acf6:	425b      	negs	r3, r3
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800acfe:	f000 f9d3 	bl	800b0a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	0018      	movs	r0, r3
 800ad08:	f000 f999 	bl	800b03e <_Znwj>
 800ad0c:	0003      	movs	r3, r0
      }
 800ad0e:	0018      	movs	r0, r3
 800ad10:	46bd      	mov	sp, r7
 800ad12:	b004      	add	sp, #16
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b082      	sub	sp, #8
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	0018      	movs	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b002      	add	sp, #8
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ad28:	b5b0      	push	{r4, r5, r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	0018      	movs	r0, r3
 800ad38:	f000 f84c 	bl	800add4 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad3c:	0004      	movs	r4, r0
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	0018      	movs	r0, r3
 800ad42:	f000 f847 	bl	800add4 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad46:	0005      	movs	r5, r0
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	f000 f842 	bl	800add4 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad50:	0003      	movs	r3, r0
					     std::__niter_base(__result)));
 800ad52:	001a      	movs	r2, r3
 800ad54:	0029      	movs	r1, r5
 800ad56:	0020      	movs	r0, r4
 800ad58:	f000 f845 	bl	800ade6 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800ad5c:	0003      	movs	r3, r0
    }
 800ad5e:	0018      	movs	r0, r3
 800ad60:	46bd      	mov	sp, r7
 800ad62:	b004      	add	sp, #16
 800ad64:	bdb0      	pop	{r4, r5, r7, pc}

0800ad66 <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800ad66:	b5b0      	push	{r4, r5, r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	0018      	movs	r0, r3
 800ad76:	f000 f82d 	bl	800add4 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad7a:	0004      	movs	r4, r0
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f000 f828 	bl	800add4 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad84:	0005      	movs	r5, r0
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	0018      	movs	r0, r3
 800ad8a:	f000 f823 	bl	800add4 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad8e:	0003      	movs	r3, r0
		   std::__niter_base(__result)));
 800ad90:	001a      	movs	r2, r3
 800ad92:	0029      	movs	r1, r5
 800ad94:	0020      	movs	r0, r4
 800ad96:	f000 f83b 	bl	800ae10 <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800ad9a:	0003      	movs	r3, r0
    }
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b004      	add	sp, #16
 800ada2:	bdb0      	pop	{r4, r5, r7, pc}

0800ada4 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800adac:	4b02      	ldr	r3, [pc, #8]	; (800adb8 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv+0x14>)
 800adae:	0018      	movs	r0, r3
 800adb0:	46bd      	mov	sp, r7
 800adb2:	b002      	add	sp, #8
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	46c0      	nop			; (mov r8, r8)
 800adb8:	3fffffff 	.word	0x3fffffff

0800adbc <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800adc4:	4b02      	ldr	r3, [pc, #8]	; (800add0 <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE8max_sizeEv+0x14>)
 800adc6:	0018      	movs	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	b002      	add	sp, #8
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	46c0      	nop			; (mov r8, r8)
 800add0:	3fffffff 	.word	0x3fffffff

0800add4 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>:
    __niter_base(_Iterator __it)
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
    { return __it; }
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	0018      	movs	r0, r3
 800ade0:	46bd      	mov	sp, r7
 800ade2:	b002      	add	sp, #8
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b086      	sub	sp, #24
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800adf2:	2317      	movs	r3, #23
 800adf4:	18fb      	adds	r3, r7, r3
 800adf6:	2201      	movs	r2, #1
 800adf8:	701a      	strb	r2, [r3, #0]
	                      _Category>::__copy_m(__first, __last, __result);
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	68b9      	ldr	r1, [r7, #8]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	0018      	movs	r0, r3
 800ae02:	f000 f81a 	bl	800ae3a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>
 800ae06:	0003      	movs	r3, r0
    }
 800ae08:	0018      	movs	r0, r3
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	b006      	add	sp, #24
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 800ae1c:	2317      	movs	r3, #23
 800ae1e:	18fb      	adds	r3, r7, r3
 800ae20:	2201      	movs	r2, #1
 800ae22:	701a      	strb	r2, [r3, #0]
								 __result);
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	68b9      	ldr	r1, [r7, #8]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	0018      	movs	r0, r3
 800ae2c:	f000 f822 	bl	800ae74 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>
 800ae30:	0003      	movs	r3, r0
    }
 800ae32:	0018      	movs	r0, r3
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b006      	add	sp, #24
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b086      	sub	sp, #24
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	109b      	asrs	r3, r3, #2
 800ae4e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d006      	beq.n	800ae64 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	009a      	lsls	r2, r3, #2
 800ae5a:	68f9      	ldr	r1, [r7, #12]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	0018      	movs	r0, r3
 800ae60:	f000 f9a0 	bl	800b1a4 <memmove>
	  return __result + _Num;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	18d3      	adds	r3, r2, r3
	}
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	b006      	add	sp, #24
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	109b      	asrs	r3, r3, #2
 800ae88:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00a      	beq.n	800aea6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	425b      	negs	r3, r3
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	18d0      	adds	r0, r2, r3
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	009a      	lsls	r2, r3, #2
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	0019      	movs	r1, r3
 800aea2:	f000 f97f 	bl	800b1a4 <memmove>
	  return __result - _Num;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	425b      	negs	r3, r3
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	18d3      	adds	r3, r2, r3
	}
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	b006      	add	sp, #24
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <_ZN9interface7XFMutex6createEv>:

/**
 * @brief Implementation of interface::XFMutex::create method.
 */
interface::XFMutex * interface::XFMutex::create()
{
 800aeb8:	b5b0      	push	{r4, r5, r7, lr}
 800aeba:	af00      	add	r7, sp, #0
    return new XFMutexDefault;
 800aebc:	2004      	movs	r0, #4
 800aebe:	f000 f8be 	bl	800b03e <_Znwj>
 800aec2:	0003      	movs	r3, r0
 800aec4:	001c      	movs	r4, r3
 800aec6:	0020      	movs	r0, r4
 800aec8:	f000 f832 	bl	800af30 <_ZN14XFMutexDefaultC1Ev>
 800aecc:	0023      	movs	r3, r4
}
 800aece:	0018      	movs	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bdb0      	pop	{r4, r5, r7, pc}

0800aed4 <_ZN9interface7XFMutexC1Ev>:
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	4a03      	ldr	r2, [pc, #12]	; (800aeec <_ZN9interface7XFMutexC1Ev+0x18>)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	0018      	movs	r0, r3
 800aee6:	46bd      	mov	sp, r7
 800aee8:	b002      	add	sp, #8
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	0800c8b8 	.word	0x0800c8b8

0800aef0 <_ZN9interface7XFMutexD1Ev>:
    virtual ~XFMutex() = default;
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	4a03      	ldr	r2, [pc, #12]	; (800af08 <_ZN9interface7XFMutexD1Ev+0x18>)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	0018      	movs	r0, r3
 800af02:	46bd      	mov	sp, r7
 800af04:	b002      	add	sp, #8
 800af06:	bd80      	pop	{r7, pc}
 800af08:	0800c8b8 	.word	0x0800c8b8

0800af0c <_ZN9interface7XFMutexD0Ev>:
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	0018      	movs	r0, r3
 800af18:	f7ff ffea 	bl	800aef0 <_ZN9interface7XFMutexD1Ev>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2104      	movs	r1, #4
 800af20:	0018      	movs	r0, r3
 800af22:	f000 f888 	bl	800b036 <_ZdlPvj>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	0018      	movs	r0, r3
 800af2a:	46bd      	mov	sp, r7
 800af2c:	b002      	add	sp, #8
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_ZN14XFMutexDefaultC1Ev>:

XFMutexDefault::XFMutexDefault()
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	0018      	movs	r0, r3
 800af3c:	f7ff ffca 	bl	800aed4 <_ZN9interface7XFMutexC1Ev>
 800af40:	4a03      	ldr	r2, [pc, #12]	; (800af50 <_ZN14XFMutexDefaultC1Ev+0x20>)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]
{
}
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	0018      	movs	r0, r3
 800af4a:	46bd      	mov	sp, r7
 800af4c:	b002      	add	sp, #8
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	0800c89c 	.word	0x0800c89c

0800af54 <_ZN14XFMutexDefaultD1Ev>:

XFMutexDefault::~XFMutexDefault()
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	4a05      	ldr	r2, [pc, #20]	; (800af74 <_ZN14XFMutexDefaultD1Ev+0x20>)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	0018      	movs	r0, r3
 800af66:	f7ff ffc3 	bl	800aef0 <_ZN9interface7XFMutexD1Ev>
{
}
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	0018      	movs	r0, r3
 800af6e:	46bd      	mov	sp, r7
 800af70:	b002      	add	sp, #8
 800af72:	bd80      	pop	{r7, pc}
 800af74:	0800c89c 	.word	0x0800c89c

0800af78 <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
}
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	0018      	movs	r0, r3
 800af84:	f7ff ffe6 	bl	800af54 <_ZN14XFMutexDefaultD1Ev>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2104      	movs	r1, #4
 800af8c:	0018      	movs	r0, r3
 800af8e:	f000 f852 	bl	800b036 <_ZdlPvj>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	0018      	movs	r0, r3
 800af96:	46bd      	mov	sp, r7
 800af98:	b002      	add	sp, #8
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <_ZN14XFMutexDefault4lockEv>:

void XFMutexDefault::lock()
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	enterCritical();
 800afa4:	f7fd f9e0 	bl	8008368 <_Z13enterCriticalv>
}
 800afa8:	46c0      	nop			; (mov r8, r8)
 800afaa:	46bd      	mov	sp, r7
 800afac:	b002      	add	sp, #8
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <_ZN14XFMutexDefault6unlockEv>:


void XFMutexDefault::unlock()
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
	exitCritical();
 800afb8:	f7fd f9f2 	bl	80083a0 <_Z12exitCriticalv>
}
 800afbc:	46c0      	nop			; (mov r8, r8)
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b002      	add	sp, #8
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <_ZN14XFMutexDefault7tryLockEl>:

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
	return true;	// Always allow
 800afce:	2301      	movs	r3, #1
}
 800afd0:	0018      	movs	r0, r3
 800afd2:	46bd      	mov	sp, r7
 800afd4:	b002      	add	sp, #8
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <XF_startTimeoutManagerTimer>:
 * This means that changes in 'tickInterval' needs to be handled elsewhere
 * using the XF_tickIntervalInMilliseconds() function.
 */

void XF_startTimeoutManagerTimer(uint32_t tickInterval)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 800afe0:	46c0      	nop			; (mov r8, r8)
 800afe2:	46bd      	mov	sp, r7
 800afe4:	b002      	add	sp, #8
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
	bInISR = true;								// Tell critical section we are in an ISR
 800afec:	4b08      	ldr	r3, [pc, #32]	; (800b010 <XF_tick+0x28>)
 800afee:	2201      	movs	r2, #1
 800aff0:	601a      	str	r2, [r3, #0]
	XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 800aff2:	f7fd ffc7 	bl	8008f84 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800aff6:	0002      	movs	r2, r0
 800aff8:	6813      	ldr	r3, [r2, #0]
 800affa:	331c      	adds	r3, #28
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	0010      	movs	r0, r2
 800b000:	4798      	blx	r3
	bInISR = false;
 800b002:	4b03      	ldr	r3, [pc, #12]	; (800b010 <XF_tick+0x28>)
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
}
 800b008:	46c0      	nop			; (mov r8, r8)
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	46c0      	nop			; (mov r8, r8)
 800b010:	200000e8 	.word	0x200000e8

0800b014 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->getTickInterval();
 800b018:	f7fd ffb4 	bl	8008f84 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800b01c:	0002      	movs	r2, r0
 800b01e:	6813      	ldr	r3, [r2, #0]
 800b020:	330c      	adds	r3, #12
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	0010      	movs	r0, r2
 800b026:	4798      	blx	r3
 800b028:	0003      	movs	r3, r0
}
 800b02a:	0018      	movs	r0, r3
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <__cxa_pure_virtual>:
 800b030:	b510      	push	{r4, lr}
 800b032:	f000 f825 	bl	800b080 <_ZSt9terminatev>

0800b036 <_ZdlPvj>:
 800b036:	b510      	push	{r4, lr}
 800b038:	f000 f81a 	bl	800b070 <_ZdlPv>
 800b03c:	bd10      	pop	{r4, pc}

0800b03e <_Znwj>:
 800b03e:	b510      	push	{r4, lr}
 800b040:	1e04      	subs	r4, r0, #0
 800b042:	d100      	bne.n	800b046 <_Znwj+0x8>
 800b044:	3401      	adds	r4, #1
 800b046:	0020      	movs	r0, r4
 800b048:	f000 f898 	bl	800b17c <malloc>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d107      	bne.n	800b060 <_Znwj+0x22>
 800b050:	f000 f808 	bl	800b064 <_ZSt15get_new_handlerv>
 800b054:	2800      	cmp	r0, #0
 800b056:	d101      	bne.n	800b05c <_Znwj+0x1e>
 800b058:	f000 f829 	bl	800b0ae <abort>
 800b05c:	4780      	blx	r0
 800b05e:	e7f2      	b.n	800b046 <_Znwj+0x8>
 800b060:	bd10      	pop	{r4, pc}
	...

0800b064 <_ZSt15get_new_handlerv>:
 800b064:	4b01      	ldr	r3, [pc, #4]	; (800b06c <_ZSt15get_new_handlerv+0x8>)
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	4770      	bx	lr
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	2000015c 	.word	0x2000015c

0800b070 <_ZdlPv>:
 800b070:	b510      	push	{r4, lr}
 800b072:	f000 f88d 	bl	800b190 <free>
 800b076:	bd10      	pop	{r4, pc}

0800b078 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	4780      	blx	r0
 800b07c:	f000 f817 	bl	800b0ae <abort>

0800b080 <_ZSt9terminatev>:
 800b080:	4b02      	ldr	r3, [pc, #8]	; (800b08c <_ZSt9terminatev+0xc>)
 800b082:	b510      	push	{r4, lr}
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	f7ff fff7 	bl	800b078 <_ZN10__cxxabiv111__terminateEPFvvE>
 800b08a:	46c0      	nop			; (mov r8, r8)
 800b08c:	2000000c 	.word	0x2000000c

0800b090 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800b090:	684b      	ldr	r3, [r1, #4]
 800b092:	6001      	str	r1, [r0, #0]
 800b094:	6043      	str	r3, [r0, #4]
 800b096:	684b      	ldr	r3, [r1, #4]
 800b098:	6018      	str	r0, [r3, #0]
 800b09a:	6048      	str	r0, [r1, #4]
 800b09c:	4770      	bx	lr

0800b09e <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800b09e:	6803      	ldr	r3, [r0, #0]
 800b0a0:	6842      	ldr	r2, [r0, #4]
 800b0a2:	6013      	str	r3, [r2, #0]
 800b0a4:	605a      	str	r2, [r3, #4]
 800b0a6:	4770      	bx	lr

0800b0a8 <_ZSt17__throw_bad_allocv>:
 800b0a8:	b510      	push	{r4, lr}
 800b0aa:	f000 f800 	bl	800b0ae <abort>

0800b0ae <abort>:
 800b0ae:	b510      	push	{r4, lr}
 800b0b0:	2006      	movs	r0, #6
 800b0b2:	f000 fc2b 	bl	800b90c <raise>
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	f7f5 fee6 	bl	8000e88 <_exit>

0800b0bc <__assert_func>:
 800b0bc:	b530      	push	{r4, r5, lr}
 800b0be:	001c      	movs	r4, r3
 800b0c0:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <__assert_func+0x2c>)
 800b0c2:	0005      	movs	r5, r0
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	68d8      	ldr	r0, [r3, #12]
 800b0ca:	4b08      	ldr	r3, [pc, #32]	; (800b0ec <__assert_func+0x30>)
 800b0cc:	2a00      	cmp	r2, #0
 800b0ce:	d101      	bne.n	800b0d4 <__assert_func+0x18>
 800b0d0:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <__assert_func+0x34>)
 800b0d2:	001a      	movs	r2, r3
 800b0d4:	9202      	str	r2, [sp, #8]
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	9100      	str	r1, [sp, #0]
 800b0da:	002b      	movs	r3, r5
 800b0dc:	0022      	movs	r2, r4
 800b0de:	4905      	ldr	r1, [pc, #20]	; (800b0f4 <__assert_func+0x38>)
 800b0e0:	f000 f818 	bl	800b114 <fiprintf>
 800b0e4:	f7ff ffe3 	bl	800b0ae <abort>
 800b0e8:	20000010 	.word	0x20000010
 800b0ec:	0800c8cc 	.word	0x0800c8cc
 800b0f0:	0800c907 	.word	0x0800c907
 800b0f4:	0800c8d9 	.word	0x0800c8d9

0800b0f8 <atexit>:
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	b510      	push	{r4, lr}
 800b0fc:	0001      	movs	r1, r0
 800b0fe:	001a      	movs	r2, r3
 800b100:	0018      	movs	r0, r3
 800b102:	f000 fcef 	bl	800bae4 <__register_exitproc>
 800b106:	bd10      	pop	{r4, pc}

0800b108 <__errno>:
 800b108:	4b01      	ldr	r3, [pc, #4]	; (800b110 <__errno+0x8>)
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	4770      	bx	lr
 800b10e:	46c0      	nop			; (mov r8, r8)
 800b110:	20000010 	.word	0x20000010

0800b114 <fiprintf>:
 800b114:	b40e      	push	{r1, r2, r3}
 800b116:	b503      	push	{r0, r1, lr}
 800b118:	0001      	movs	r1, r0
 800b11a:	ab03      	add	r3, sp, #12
 800b11c:	4804      	ldr	r0, [pc, #16]	; (800b130 <fiprintf+0x1c>)
 800b11e:	cb04      	ldmia	r3!, {r2}
 800b120:	6800      	ldr	r0, [r0, #0]
 800b122:	9301      	str	r3, [sp, #4]
 800b124:	f000 f92a 	bl	800b37c <_vfiprintf_r>
 800b128:	b002      	add	sp, #8
 800b12a:	bc08      	pop	{r3}
 800b12c:	b003      	add	sp, #12
 800b12e:	4718      	bx	r3
 800b130:	20000010 	.word	0x20000010

0800b134 <__libc_init_array>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	2600      	movs	r6, #0
 800b138:	4d0c      	ldr	r5, [pc, #48]	; (800b16c <__libc_init_array+0x38>)
 800b13a:	4c0d      	ldr	r4, [pc, #52]	; (800b170 <__libc_init_array+0x3c>)
 800b13c:	1b64      	subs	r4, r4, r5
 800b13e:	10a4      	asrs	r4, r4, #2
 800b140:	42a6      	cmp	r6, r4
 800b142:	d109      	bne.n	800b158 <__libc_init_array+0x24>
 800b144:	2600      	movs	r6, #0
 800b146:	f000 fffb 	bl	800c140 <_init>
 800b14a:	4d0a      	ldr	r5, [pc, #40]	; (800b174 <__libc_init_array+0x40>)
 800b14c:	4c0a      	ldr	r4, [pc, #40]	; (800b178 <__libc_init_array+0x44>)
 800b14e:	1b64      	subs	r4, r4, r5
 800b150:	10a4      	asrs	r4, r4, #2
 800b152:	42a6      	cmp	r6, r4
 800b154:	d105      	bne.n	800b162 <__libc_init_array+0x2e>
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	00b3      	lsls	r3, r6, #2
 800b15a:	58eb      	ldr	r3, [r5, r3]
 800b15c:	4798      	blx	r3
 800b15e:	3601      	adds	r6, #1
 800b160:	e7ee      	b.n	800b140 <__libc_init_array+0xc>
 800b162:	00b3      	lsls	r3, r6, #2
 800b164:	58eb      	ldr	r3, [r5, r3]
 800b166:	4798      	blx	r3
 800b168:	3601      	adds	r6, #1
 800b16a:	e7f2      	b.n	800b152 <__libc_init_array+0x1e>
 800b16c:	0800c9a0 	.word	0x0800c9a0
 800b170:	0800c9a0 	.word	0x0800c9a0
 800b174:	0800c9a0 	.word	0x0800c9a0
 800b178:	0800c9a4 	.word	0x0800c9a4

0800b17c <malloc>:
 800b17c:	b510      	push	{r4, lr}
 800b17e:	4b03      	ldr	r3, [pc, #12]	; (800b18c <malloc+0x10>)
 800b180:	0001      	movs	r1, r0
 800b182:	6818      	ldr	r0, [r3, #0]
 800b184:	f000 f874 	bl	800b270 <_malloc_r>
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	46c0      	nop			; (mov r8, r8)
 800b18c:	20000010 	.word	0x20000010

0800b190 <free>:
 800b190:	b510      	push	{r4, lr}
 800b192:	4b03      	ldr	r3, [pc, #12]	; (800b1a0 <free+0x10>)
 800b194:	0001      	movs	r1, r0
 800b196:	6818      	ldr	r0, [r3, #0]
 800b198:	f000 f820 	bl	800b1dc <_free_r>
 800b19c:	bd10      	pop	{r4, pc}
 800b19e:	46c0      	nop			; (mov r8, r8)
 800b1a0:	20000010 	.word	0x20000010

0800b1a4 <memmove>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	4288      	cmp	r0, r1
 800b1a8:	d902      	bls.n	800b1b0 <memmove+0xc>
 800b1aa:	188b      	adds	r3, r1, r2
 800b1ac:	4298      	cmp	r0, r3
 800b1ae:	d303      	bcc.n	800b1b8 <memmove+0x14>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e007      	b.n	800b1c4 <memmove+0x20>
 800b1b4:	5c8b      	ldrb	r3, [r1, r2]
 800b1b6:	5483      	strb	r3, [r0, r2]
 800b1b8:	3a01      	subs	r2, #1
 800b1ba:	d2fb      	bcs.n	800b1b4 <memmove+0x10>
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	5ccc      	ldrb	r4, [r1, r3]
 800b1c0:	54c4      	strb	r4, [r0, r3]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d1fa      	bne.n	800b1be <memmove+0x1a>
 800b1c8:	e7f8      	b.n	800b1bc <memmove+0x18>

0800b1ca <memset>:
 800b1ca:	0003      	movs	r3, r0
 800b1cc:	1812      	adds	r2, r2, r0
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d100      	bne.n	800b1d4 <memset+0xa>
 800b1d2:	4770      	bx	lr
 800b1d4:	7019      	strb	r1, [r3, #0]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	e7f9      	b.n	800b1ce <memset+0x4>
	...

0800b1dc <_free_r>:
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	0005      	movs	r5, r0
 800b1e0:	2900      	cmp	r1, #0
 800b1e2:	d010      	beq.n	800b206 <_free_r+0x2a>
 800b1e4:	1f0c      	subs	r4, r1, #4
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da00      	bge.n	800b1ee <_free_r+0x12>
 800b1ec:	18e4      	adds	r4, r4, r3
 800b1ee:	0028      	movs	r0, r5
 800b1f0:	f000 fee5 	bl	800bfbe <__malloc_lock>
 800b1f4:	4a1d      	ldr	r2, [pc, #116]	; (800b26c <_free_r+0x90>)
 800b1f6:	6813      	ldr	r3, [r2, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d105      	bne.n	800b208 <_free_r+0x2c>
 800b1fc:	6063      	str	r3, [r4, #4]
 800b1fe:	6014      	str	r4, [r2, #0]
 800b200:	0028      	movs	r0, r5
 800b202:	f000 fedd 	bl	800bfc0 <__malloc_unlock>
 800b206:	bd70      	pop	{r4, r5, r6, pc}
 800b208:	42a3      	cmp	r3, r4
 800b20a:	d909      	bls.n	800b220 <_free_r+0x44>
 800b20c:	6821      	ldr	r1, [r4, #0]
 800b20e:	1860      	adds	r0, r4, r1
 800b210:	4283      	cmp	r3, r0
 800b212:	d1f3      	bne.n	800b1fc <_free_r+0x20>
 800b214:	6818      	ldr	r0, [r3, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	1841      	adds	r1, r0, r1
 800b21a:	6021      	str	r1, [r4, #0]
 800b21c:	e7ee      	b.n	800b1fc <_free_r+0x20>
 800b21e:	0013      	movs	r3, r2
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	2a00      	cmp	r2, #0
 800b224:	d001      	beq.n	800b22a <_free_r+0x4e>
 800b226:	42a2      	cmp	r2, r4
 800b228:	d9f9      	bls.n	800b21e <_free_r+0x42>
 800b22a:	6819      	ldr	r1, [r3, #0]
 800b22c:	1858      	adds	r0, r3, r1
 800b22e:	42a0      	cmp	r0, r4
 800b230:	d10b      	bne.n	800b24a <_free_r+0x6e>
 800b232:	6820      	ldr	r0, [r4, #0]
 800b234:	1809      	adds	r1, r1, r0
 800b236:	1858      	adds	r0, r3, r1
 800b238:	6019      	str	r1, [r3, #0]
 800b23a:	4282      	cmp	r2, r0
 800b23c:	d1e0      	bne.n	800b200 <_free_r+0x24>
 800b23e:	6810      	ldr	r0, [r2, #0]
 800b240:	6852      	ldr	r2, [r2, #4]
 800b242:	1841      	adds	r1, r0, r1
 800b244:	6019      	str	r1, [r3, #0]
 800b246:	605a      	str	r2, [r3, #4]
 800b248:	e7da      	b.n	800b200 <_free_r+0x24>
 800b24a:	42a0      	cmp	r0, r4
 800b24c:	d902      	bls.n	800b254 <_free_r+0x78>
 800b24e:	230c      	movs	r3, #12
 800b250:	602b      	str	r3, [r5, #0]
 800b252:	e7d5      	b.n	800b200 <_free_r+0x24>
 800b254:	6821      	ldr	r1, [r4, #0]
 800b256:	1860      	adds	r0, r4, r1
 800b258:	4282      	cmp	r2, r0
 800b25a:	d103      	bne.n	800b264 <_free_r+0x88>
 800b25c:	6810      	ldr	r0, [r2, #0]
 800b25e:	6852      	ldr	r2, [r2, #4]
 800b260:	1841      	adds	r1, r0, r1
 800b262:	6021      	str	r1, [r4, #0]
 800b264:	6062      	str	r2, [r4, #4]
 800b266:	605c      	str	r4, [r3, #4]
 800b268:	e7ca      	b.n	800b200 <_free_r+0x24>
 800b26a:	46c0      	nop			; (mov r8, r8)
 800b26c:	20000160 	.word	0x20000160

0800b270 <_malloc_r>:
 800b270:	2303      	movs	r3, #3
 800b272:	b570      	push	{r4, r5, r6, lr}
 800b274:	1ccd      	adds	r5, r1, #3
 800b276:	439d      	bics	r5, r3
 800b278:	3508      	adds	r5, #8
 800b27a:	0006      	movs	r6, r0
 800b27c:	2d0c      	cmp	r5, #12
 800b27e:	d21e      	bcs.n	800b2be <_malloc_r+0x4e>
 800b280:	250c      	movs	r5, #12
 800b282:	42a9      	cmp	r1, r5
 800b284:	d81d      	bhi.n	800b2c2 <_malloc_r+0x52>
 800b286:	0030      	movs	r0, r6
 800b288:	f000 fe99 	bl	800bfbe <__malloc_lock>
 800b28c:	4a25      	ldr	r2, [pc, #148]	; (800b324 <_malloc_r+0xb4>)
 800b28e:	6814      	ldr	r4, [r2, #0]
 800b290:	0021      	movs	r1, r4
 800b292:	2900      	cmp	r1, #0
 800b294:	d119      	bne.n	800b2ca <_malloc_r+0x5a>
 800b296:	4c24      	ldr	r4, [pc, #144]	; (800b328 <_malloc_r+0xb8>)
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d103      	bne.n	800b2a6 <_malloc_r+0x36>
 800b29e:	0030      	movs	r0, r6
 800b2a0:	f000 faf8 	bl	800b894 <_sbrk_r>
 800b2a4:	6020      	str	r0, [r4, #0]
 800b2a6:	0029      	movs	r1, r5
 800b2a8:	0030      	movs	r0, r6
 800b2aa:	f000 faf3 	bl	800b894 <_sbrk_r>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	d12b      	bne.n	800b30a <_malloc_r+0x9a>
 800b2b2:	230c      	movs	r3, #12
 800b2b4:	0030      	movs	r0, r6
 800b2b6:	6033      	str	r3, [r6, #0]
 800b2b8:	f000 fe82 	bl	800bfc0 <__malloc_unlock>
 800b2bc:	e003      	b.n	800b2c6 <_malloc_r+0x56>
 800b2be:	2d00      	cmp	r5, #0
 800b2c0:	dadf      	bge.n	800b282 <_malloc_r+0x12>
 800b2c2:	230c      	movs	r3, #12
 800b2c4:	6033      	str	r3, [r6, #0]
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ca:	680b      	ldr	r3, [r1, #0]
 800b2cc:	1b5b      	subs	r3, r3, r5
 800b2ce:	d419      	bmi.n	800b304 <_malloc_r+0x94>
 800b2d0:	2b0b      	cmp	r3, #11
 800b2d2:	d903      	bls.n	800b2dc <_malloc_r+0x6c>
 800b2d4:	600b      	str	r3, [r1, #0]
 800b2d6:	18cc      	adds	r4, r1, r3
 800b2d8:	6025      	str	r5, [r4, #0]
 800b2da:	e003      	b.n	800b2e4 <_malloc_r+0x74>
 800b2dc:	684b      	ldr	r3, [r1, #4]
 800b2de:	428c      	cmp	r4, r1
 800b2e0:	d10d      	bne.n	800b2fe <_malloc_r+0x8e>
 800b2e2:	6013      	str	r3, [r2, #0]
 800b2e4:	0030      	movs	r0, r6
 800b2e6:	f000 fe6b 	bl	800bfc0 <__malloc_unlock>
 800b2ea:	0020      	movs	r0, r4
 800b2ec:	2207      	movs	r2, #7
 800b2ee:	300b      	adds	r0, #11
 800b2f0:	1d23      	adds	r3, r4, #4
 800b2f2:	4390      	bics	r0, r2
 800b2f4:	1ac3      	subs	r3, r0, r3
 800b2f6:	d0e7      	beq.n	800b2c8 <_malloc_r+0x58>
 800b2f8:	425a      	negs	r2, r3
 800b2fa:	50e2      	str	r2, [r4, r3]
 800b2fc:	e7e4      	b.n	800b2c8 <_malloc_r+0x58>
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	000c      	movs	r4, r1
 800b302:	e7ef      	b.n	800b2e4 <_malloc_r+0x74>
 800b304:	000c      	movs	r4, r1
 800b306:	6849      	ldr	r1, [r1, #4]
 800b308:	e7c3      	b.n	800b292 <_malloc_r+0x22>
 800b30a:	2303      	movs	r3, #3
 800b30c:	1cc4      	adds	r4, r0, #3
 800b30e:	439c      	bics	r4, r3
 800b310:	42a0      	cmp	r0, r4
 800b312:	d0e1      	beq.n	800b2d8 <_malloc_r+0x68>
 800b314:	1a21      	subs	r1, r4, r0
 800b316:	0030      	movs	r0, r6
 800b318:	f000 fabc 	bl	800b894 <_sbrk_r>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d1db      	bne.n	800b2d8 <_malloc_r+0x68>
 800b320:	e7c7      	b.n	800b2b2 <_malloc_r+0x42>
 800b322:	46c0      	nop			; (mov r8, r8)
 800b324:	20000160 	.word	0x20000160
 800b328:	20000164 	.word	0x20000164

0800b32c <__sfputc_r>:
 800b32c:	6893      	ldr	r3, [r2, #8]
 800b32e:	b510      	push	{r4, lr}
 800b330:	3b01      	subs	r3, #1
 800b332:	6093      	str	r3, [r2, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	da04      	bge.n	800b342 <__sfputc_r+0x16>
 800b338:	6994      	ldr	r4, [r2, #24]
 800b33a:	42a3      	cmp	r3, r4
 800b33c:	db07      	blt.n	800b34e <__sfputc_r+0x22>
 800b33e:	290a      	cmp	r1, #10
 800b340:	d005      	beq.n	800b34e <__sfputc_r+0x22>
 800b342:	6813      	ldr	r3, [r2, #0]
 800b344:	1c58      	adds	r0, r3, #1
 800b346:	6010      	str	r0, [r2, #0]
 800b348:	7019      	strb	r1, [r3, #0]
 800b34a:	0008      	movs	r0, r1
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	f000 fafd 	bl	800b94c <__swbuf_r>
 800b352:	0001      	movs	r1, r0
 800b354:	e7f9      	b.n	800b34a <__sfputc_r+0x1e>

0800b356 <__sfputs_r>:
 800b356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b358:	0006      	movs	r6, r0
 800b35a:	000f      	movs	r7, r1
 800b35c:	0014      	movs	r4, r2
 800b35e:	18d5      	adds	r5, r2, r3
 800b360:	42ac      	cmp	r4, r5
 800b362:	d101      	bne.n	800b368 <__sfputs_r+0x12>
 800b364:	2000      	movs	r0, #0
 800b366:	e007      	b.n	800b378 <__sfputs_r+0x22>
 800b368:	7821      	ldrb	r1, [r4, #0]
 800b36a:	003a      	movs	r2, r7
 800b36c:	0030      	movs	r0, r6
 800b36e:	f7ff ffdd 	bl	800b32c <__sfputc_r>
 800b372:	3401      	adds	r4, #1
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d1f3      	bne.n	800b360 <__sfputs_r+0xa>
 800b378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b37c <_vfiprintf_r>:
 800b37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37e:	b0a1      	sub	sp, #132	; 0x84
 800b380:	9003      	str	r0, [sp, #12]
 800b382:	000f      	movs	r7, r1
 800b384:	0016      	movs	r6, r2
 800b386:	001d      	movs	r5, r3
 800b388:	2800      	cmp	r0, #0
 800b38a:	d005      	beq.n	800b398 <_vfiprintf_r+0x1c>
 800b38c:	6983      	ldr	r3, [r0, #24]
 800b38e:	9305      	str	r3, [sp, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <_vfiprintf_r+0x1c>
 800b394:	f000 fd08 	bl	800bda8 <__sinit>
 800b398:	4b7b      	ldr	r3, [pc, #492]	; (800b588 <_vfiprintf_r+0x20c>)
 800b39a:	429f      	cmp	r7, r3
 800b39c:	d15c      	bne.n	800b458 <_vfiprintf_r+0xdc>
 800b39e:	9b03      	ldr	r3, [sp, #12]
 800b3a0:	685f      	ldr	r7, [r3, #4]
 800b3a2:	89bb      	ldrh	r3, [r7, #12]
 800b3a4:	071b      	lsls	r3, r3, #28
 800b3a6:	d563      	bpl.n	800b470 <_vfiprintf_r+0xf4>
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d060      	beq.n	800b470 <_vfiprintf_r+0xf4>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	ac08      	add	r4, sp, #32
 800b3b2:	6163      	str	r3, [r4, #20]
 800b3b4:	3320      	adds	r3, #32
 800b3b6:	7663      	strb	r3, [r4, #25]
 800b3b8:	3310      	adds	r3, #16
 800b3ba:	76a3      	strb	r3, [r4, #26]
 800b3bc:	9507      	str	r5, [sp, #28]
 800b3be:	0035      	movs	r5, r6
 800b3c0:	782b      	ldrb	r3, [r5, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <_vfiprintf_r+0x4e>
 800b3c6:	2b25      	cmp	r3, #37	; 0x25
 800b3c8:	d15c      	bne.n	800b484 <_vfiprintf_r+0x108>
 800b3ca:	1bab      	subs	r3, r5, r6
 800b3cc:	9305      	str	r3, [sp, #20]
 800b3ce:	d00c      	beq.n	800b3ea <_vfiprintf_r+0x6e>
 800b3d0:	0032      	movs	r2, r6
 800b3d2:	0039      	movs	r1, r7
 800b3d4:	9803      	ldr	r0, [sp, #12]
 800b3d6:	f7ff ffbe 	bl	800b356 <__sfputs_r>
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	d100      	bne.n	800b3e0 <_vfiprintf_r+0x64>
 800b3de:	e0c4      	b.n	800b56a <_vfiprintf_r+0x1ee>
 800b3e0:	6962      	ldr	r2, [r4, #20]
 800b3e2:	9b05      	ldr	r3, [sp, #20]
 800b3e4:	4694      	mov	ip, r2
 800b3e6:	4463      	add	r3, ip
 800b3e8:	6163      	str	r3, [r4, #20]
 800b3ea:	782b      	ldrb	r3, [r5, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d100      	bne.n	800b3f2 <_vfiprintf_r+0x76>
 800b3f0:	e0bb      	b.n	800b56a <_vfiprintf_r+0x1ee>
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	4252      	negs	r2, r2
 800b3f8:	6062      	str	r2, [r4, #4]
 800b3fa:	a904      	add	r1, sp, #16
 800b3fc:	3254      	adds	r2, #84	; 0x54
 800b3fe:	1852      	adds	r2, r2, r1
 800b400:	1c6e      	adds	r6, r5, #1
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	60e3      	str	r3, [r4, #12]
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	7013      	strb	r3, [r2, #0]
 800b40a:	65a3      	str	r3, [r4, #88]	; 0x58
 800b40c:	7831      	ldrb	r1, [r6, #0]
 800b40e:	2205      	movs	r2, #5
 800b410:	485e      	ldr	r0, [pc, #376]	; (800b58c <_vfiprintf_r+0x210>)
 800b412:	f000 fdc9 	bl	800bfa8 <memchr>
 800b416:	1c75      	adds	r5, r6, #1
 800b418:	2800      	cmp	r0, #0
 800b41a:	d135      	bne.n	800b488 <_vfiprintf_r+0x10c>
 800b41c:	6822      	ldr	r2, [r4, #0]
 800b41e:	06d3      	lsls	r3, r2, #27
 800b420:	d504      	bpl.n	800b42c <_vfiprintf_r+0xb0>
 800b422:	2353      	movs	r3, #83	; 0x53
 800b424:	a904      	add	r1, sp, #16
 800b426:	185b      	adds	r3, r3, r1
 800b428:	2120      	movs	r1, #32
 800b42a:	7019      	strb	r1, [r3, #0]
 800b42c:	0713      	lsls	r3, r2, #28
 800b42e:	d504      	bpl.n	800b43a <_vfiprintf_r+0xbe>
 800b430:	2353      	movs	r3, #83	; 0x53
 800b432:	a904      	add	r1, sp, #16
 800b434:	185b      	adds	r3, r3, r1
 800b436:	212b      	movs	r1, #43	; 0x2b
 800b438:	7019      	strb	r1, [r3, #0]
 800b43a:	7833      	ldrb	r3, [r6, #0]
 800b43c:	2b2a      	cmp	r3, #42	; 0x2a
 800b43e:	d02c      	beq.n	800b49a <_vfiprintf_r+0x11e>
 800b440:	0035      	movs	r5, r6
 800b442:	2100      	movs	r1, #0
 800b444:	200a      	movs	r0, #10
 800b446:	68e3      	ldr	r3, [r4, #12]
 800b448:	782a      	ldrb	r2, [r5, #0]
 800b44a:	1c6e      	adds	r6, r5, #1
 800b44c:	3a30      	subs	r2, #48	; 0x30
 800b44e:	2a09      	cmp	r2, #9
 800b450:	d964      	bls.n	800b51c <_vfiprintf_r+0x1a0>
 800b452:	2900      	cmp	r1, #0
 800b454:	d02e      	beq.n	800b4b4 <_vfiprintf_r+0x138>
 800b456:	e026      	b.n	800b4a6 <_vfiprintf_r+0x12a>
 800b458:	4b4d      	ldr	r3, [pc, #308]	; (800b590 <_vfiprintf_r+0x214>)
 800b45a:	429f      	cmp	r7, r3
 800b45c:	d102      	bne.n	800b464 <_vfiprintf_r+0xe8>
 800b45e:	9b03      	ldr	r3, [sp, #12]
 800b460:	689f      	ldr	r7, [r3, #8]
 800b462:	e79e      	b.n	800b3a2 <_vfiprintf_r+0x26>
 800b464:	4b4b      	ldr	r3, [pc, #300]	; (800b594 <_vfiprintf_r+0x218>)
 800b466:	429f      	cmp	r7, r3
 800b468:	d19b      	bne.n	800b3a2 <_vfiprintf_r+0x26>
 800b46a:	9b03      	ldr	r3, [sp, #12]
 800b46c:	68df      	ldr	r7, [r3, #12]
 800b46e:	e798      	b.n	800b3a2 <_vfiprintf_r+0x26>
 800b470:	0039      	movs	r1, r7
 800b472:	9803      	ldr	r0, [sp, #12]
 800b474:	f000 fac0 	bl	800b9f8 <__swsetup_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d098      	beq.n	800b3ae <_vfiprintf_r+0x32>
 800b47c:	2001      	movs	r0, #1
 800b47e:	4240      	negs	r0, r0
 800b480:	b021      	add	sp, #132	; 0x84
 800b482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b484:	3501      	adds	r5, #1
 800b486:	e79b      	b.n	800b3c0 <_vfiprintf_r+0x44>
 800b488:	4b40      	ldr	r3, [pc, #256]	; (800b58c <_vfiprintf_r+0x210>)
 800b48a:	6822      	ldr	r2, [r4, #0]
 800b48c:	1ac0      	subs	r0, r0, r3
 800b48e:	2301      	movs	r3, #1
 800b490:	4083      	lsls	r3, r0
 800b492:	4313      	orrs	r3, r2
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	002e      	movs	r6, r5
 800b498:	e7b8      	b.n	800b40c <_vfiprintf_r+0x90>
 800b49a:	9b07      	ldr	r3, [sp, #28]
 800b49c:	1d19      	adds	r1, r3, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	9107      	str	r1, [sp, #28]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	db01      	blt.n	800b4aa <_vfiprintf_r+0x12e>
 800b4a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4a8:	e004      	b.n	800b4b4 <_vfiprintf_r+0x138>
 800b4aa:	425b      	negs	r3, r3
 800b4ac:	60e3      	str	r3, [r4, #12]
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	6023      	str	r3, [r4, #0]
 800b4b4:	782b      	ldrb	r3, [r5, #0]
 800b4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4b8:	d10a      	bne.n	800b4d0 <_vfiprintf_r+0x154>
 800b4ba:	786b      	ldrb	r3, [r5, #1]
 800b4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4be:	d135      	bne.n	800b52c <_vfiprintf_r+0x1b0>
 800b4c0:	9b07      	ldr	r3, [sp, #28]
 800b4c2:	3502      	adds	r5, #2
 800b4c4:	1d1a      	adds	r2, r3, #4
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	9207      	str	r2, [sp, #28]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	db2b      	blt.n	800b526 <_vfiprintf_r+0x1aa>
 800b4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b4d0:	4e31      	ldr	r6, [pc, #196]	; (800b598 <_vfiprintf_r+0x21c>)
 800b4d2:	7829      	ldrb	r1, [r5, #0]
 800b4d4:	2203      	movs	r2, #3
 800b4d6:	0030      	movs	r0, r6
 800b4d8:	f000 fd66 	bl	800bfa8 <memchr>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d006      	beq.n	800b4ee <_vfiprintf_r+0x172>
 800b4e0:	2340      	movs	r3, #64	; 0x40
 800b4e2:	1b80      	subs	r0, r0, r6
 800b4e4:	4083      	lsls	r3, r0
 800b4e6:	6822      	ldr	r2, [r4, #0]
 800b4e8:	3501      	adds	r5, #1
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	7829      	ldrb	r1, [r5, #0]
 800b4f0:	2206      	movs	r2, #6
 800b4f2:	482a      	ldr	r0, [pc, #168]	; (800b59c <_vfiprintf_r+0x220>)
 800b4f4:	1c6e      	adds	r6, r5, #1
 800b4f6:	7621      	strb	r1, [r4, #24]
 800b4f8:	f000 fd56 	bl	800bfa8 <memchr>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d03a      	beq.n	800b576 <_vfiprintf_r+0x1fa>
 800b500:	4b27      	ldr	r3, [pc, #156]	; (800b5a0 <_vfiprintf_r+0x224>)
 800b502:	2b00      	cmp	r3, #0
 800b504:	d125      	bne.n	800b552 <_vfiprintf_r+0x1d6>
 800b506:	2207      	movs	r2, #7
 800b508:	9b07      	ldr	r3, [sp, #28]
 800b50a:	3307      	adds	r3, #7
 800b50c:	4393      	bics	r3, r2
 800b50e:	3308      	adds	r3, #8
 800b510:	9307      	str	r3, [sp, #28]
 800b512:	6963      	ldr	r3, [r4, #20]
 800b514:	9a04      	ldr	r2, [sp, #16]
 800b516:	189b      	adds	r3, r3, r2
 800b518:	6163      	str	r3, [r4, #20]
 800b51a:	e750      	b.n	800b3be <_vfiprintf_r+0x42>
 800b51c:	4343      	muls	r3, r0
 800b51e:	2101      	movs	r1, #1
 800b520:	189b      	adds	r3, r3, r2
 800b522:	0035      	movs	r5, r6
 800b524:	e790      	b.n	800b448 <_vfiprintf_r+0xcc>
 800b526:	2301      	movs	r3, #1
 800b528:	425b      	negs	r3, r3
 800b52a:	e7d0      	b.n	800b4ce <_vfiprintf_r+0x152>
 800b52c:	2300      	movs	r3, #0
 800b52e:	200a      	movs	r0, #10
 800b530:	001a      	movs	r2, r3
 800b532:	3501      	adds	r5, #1
 800b534:	6063      	str	r3, [r4, #4]
 800b536:	7829      	ldrb	r1, [r5, #0]
 800b538:	1c6e      	adds	r6, r5, #1
 800b53a:	3930      	subs	r1, #48	; 0x30
 800b53c:	2909      	cmp	r1, #9
 800b53e:	d903      	bls.n	800b548 <_vfiprintf_r+0x1cc>
 800b540:	2b00      	cmp	r3, #0
 800b542:	d0c5      	beq.n	800b4d0 <_vfiprintf_r+0x154>
 800b544:	9209      	str	r2, [sp, #36]	; 0x24
 800b546:	e7c3      	b.n	800b4d0 <_vfiprintf_r+0x154>
 800b548:	4342      	muls	r2, r0
 800b54a:	2301      	movs	r3, #1
 800b54c:	1852      	adds	r2, r2, r1
 800b54e:	0035      	movs	r5, r6
 800b550:	e7f1      	b.n	800b536 <_vfiprintf_r+0x1ba>
 800b552:	ab07      	add	r3, sp, #28
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	003a      	movs	r2, r7
 800b558:	4b12      	ldr	r3, [pc, #72]	; (800b5a4 <_vfiprintf_r+0x228>)
 800b55a:	0021      	movs	r1, r4
 800b55c:	9803      	ldr	r0, [sp, #12]
 800b55e:	e000      	b.n	800b562 <_vfiprintf_r+0x1e6>
 800b560:	bf00      	nop
 800b562:	9004      	str	r0, [sp, #16]
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	3301      	adds	r3, #1
 800b568:	d1d3      	bne.n	800b512 <_vfiprintf_r+0x196>
 800b56a:	89bb      	ldrh	r3, [r7, #12]
 800b56c:	065b      	lsls	r3, r3, #25
 800b56e:	d500      	bpl.n	800b572 <_vfiprintf_r+0x1f6>
 800b570:	e784      	b.n	800b47c <_vfiprintf_r+0x100>
 800b572:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b574:	e784      	b.n	800b480 <_vfiprintf_r+0x104>
 800b576:	ab07      	add	r3, sp, #28
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	003a      	movs	r2, r7
 800b57c:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <_vfiprintf_r+0x228>)
 800b57e:	0021      	movs	r1, r4
 800b580:	9803      	ldr	r0, [sp, #12]
 800b582:	f000 f87f 	bl	800b684 <_printf_i>
 800b586:	e7ec      	b.n	800b562 <_vfiprintf_r+0x1e6>
 800b588:	0800c960 	.word	0x0800c960
 800b58c:	0800c90c 	.word	0x0800c90c
 800b590:	0800c980 	.word	0x0800c980
 800b594:	0800c940 	.word	0x0800c940
 800b598:	0800c912 	.word	0x0800c912
 800b59c:	0800c916 	.word	0x0800c916
 800b5a0:	00000000 	.word	0x00000000
 800b5a4:	0800b357 	.word	0x0800b357

0800b5a8 <_printf_common>:
 800b5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5aa:	0015      	movs	r5, r2
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	688a      	ldr	r2, [r1, #8]
 800b5b0:	690b      	ldr	r3, [r1, #16]
 800b5b2:	9000      	str	r0, [sp, #0]
 800b5b4:	000c      	movs	r4, r1
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	da00      	bge.n	800b5bc <_printf_common+0x14>
 800b5ba:	0013      	movs	r3, r2
 800b5bc:	0022      	movs	r2, r4
 800b5be:	602b      	str	r3, [r5, #0]
 800b5c0:	3243      	adds	r2, #67	; 0x43
 800b5c2:	7812      	ldrb	r2, [r2, #0]
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	d001      	beq.n	800b5cc <_printf_common+0x24>
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	069b      	lsls	r3, r3, #26
 800b5d0:	d502      	bpl.n	800b5d8 <_printf_common+0x30>
 800b5d2:	682b      	ldr	r3, [r5, #0]
 800b5d4:	3302      	adds	r3, #2
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	2706      	movs	r7, #6
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	401f      	ands	r7, r3
 800b5de:	d027      	beq.n	800b630 <_printf_common+0x88>
 800b5e0:	0023      	movs	r3, r4
 800b5e2:	3343      	adds	r3, #67	; 0x43
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	1e5a      	subs	r2, r3, #1
 800b5e8:	4193      	sbcs	r3, r2
 800b5ea:	6822      	ldr	r2, [r4, #0]
 800b5ec:	0692      	lsls	r2, r2, #26
 800b5ee:	d430      	bmi.n	800b652 <_printf_common+0xaa>
 800b5f0:	0022      	movs	r2, r4
 800b5f2:	9901      	ldr	r1, [sp, #4]
 800b5f4:	3243      	adds	r2, #67	; 0x43
 800b5f6:	9800      	ldr	r0, [sp, #0]
 800b5f8:	9e08      	ldr	r6, [sp, #32]
 800b5fa:	47b0      	blx	r6
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d025      	beq.n	800b64c <_printf_common+0xa4>
 800b600:	2306      	movs	r3, #6
 800b602:	6820      	ldr	r0, [r4, #0]
 800b604:	682a      	ldr	r2, [r5, #0]
 800b606:	68e1      	ldr	r1, [r4, #12]
 800b608:	4003      	ands	r3, r0
 800b60a:	2500      	movs	r5, #0
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	d103      	bne.n	800b618 <_printf_common+0x70>
 800b610:	1a8d      	subs	r5, r1, r2
 800b612:	43eb      	mvns	r3, r5
 800b614:	17db      	asrs	r3, r3, #31
 800b616:	401d      	ands	r5, r3
 800b618:	68a3      	ldr	r3, [r4, #8]
 800b61a:	6922      	ldr	r2, [r4, #16]
 800b61c:	4293      	cmp	r3, r2
 800b61e:	dd01      	ble.n	800b624 <_printf_common+0x7c>
 800b620:	1a9b      	subs	r3, r3, r2
 800b622:	18ed      	adds	r5, r5, r3
 800b624:	2700      	movs	r7, #0
 800b626:	42bd      	cmp	r5, r7
 800b628:	d120      	bne.n	800b66c <_printf_common+0xc4>
 800b62a:	2000      	movs	r0, #0
 800b62c:	e010      	b.n	800b650 <_printf_common+0xa8>
 800b62e:	3701      	adds	r7, #1
 800b630:	68e3      	ldr	r3, [r4, #12]
 800b632:	682a      	ldr	r2, [r5, #0]
 800b634:	1a9b      	subs	r3, r3, r2
 800b636:	42bb      	cmp	r3, r7
 800b638:	ddd2      	ble.n	800b5e0 <_printf_common+0x38>
 800b63a:	0022      	movs	r2, r4
 800b63c:	2301      	movs	r3, #1
 800b63e:	3219      	adds	r2, #25
 800b640:	9901      	ldr	r1, [sp, #4]
 800b642:	9800      	ldr	r0, [sp, #0]
 800b644:	9e08      	ldr	r6, [sp, #32]
 800b646:	47b0      	blx	r6
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d1f0      	bne.n	800b62e <_printf_common+0x86>
 800b64c:	2001      	movs	r0, #1
 800b64e:	4240      	negs	r0, r0
 800b650:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b652:	2030      	movs	r0, #48	; 0x30
 800b654:	18e1      	adds	r1, r4, r3
 800b656:	3143      	adds	r1, #67	; 0x43
 800b658:	7008      	strb	r0, [r1, #0]
 800b65a:	0021      	movs	r1, r4
 800b65c:	1c5a      	adds	r2, r3, #1
 800b65e:	3145      	adds	r1, #69	; 0x45
 800b660:	7809      	ldrb	r1, [r1, #0]
 800b662:	18a2      	adds	r2, r4, r2
 800b664:	3243      	adds	r2, #67	; 0x43
 800b666:	3302      	adds	r3, #2
 800b668:	7011      	strb	r1, [r2, #0]
 800b66a:	e7c1      	b.n	800b5f0 <_printf_common+0x48>
 800b66c:	0022      	movs	r2, r4
 800b66e:	2301      	movs	r3, #1
 800b670:	321a      	adds	r2, #26
 800b672:	9901      	ldr	r1, [sp, #4]
 800b674:	9800      	ldr	r0, [sp, #0]
 800b676:	9e08      	ldr	r6, [sp, #32]
 800b678:	47b0      	blx	r6
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	d0e6      	beq.n	800b64c <_printf_common+0xa4>
 800b67e:	3701      	adds	r7, #1
 800b680:	e7d1      	b.n	800b626 <_printf_common+0x7e>
	...

0800b684 <_printf_i>:
 800b684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b686:	b089      	sub	sp, #36	; 0x24
 800b688:	9204      	str	r2, [sp, #16]
 800b68a:	000a      	movs	r2, r1
 800b68c:	3243      	adds	r2, #67	; 0x43
 800b68e:	9305      	str	r3, [sp, #20]
 800b690:	9003      	str	r0, [sp, #12]
 800b692:	9202      	str	r2, [sp, #8]
 800b694:	7e0a      	ldrb	r2, [r1, #24]
 800b696:	000c      	movs	r4, r1
 800b698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b69a:	2a6e      	cmp	r2, #110	; 0x6e
 800b69c:	d100      	bne.n	800b6a0 <_printf_i+0x1c>
 800b69e:	e086      	b.n	800b7ae <_printf_i+0x12a>
 800b6a0:	d81f      	bhi.n	800b6e2 <_printf_i+0x5e>
 800b6a2:	2a63      	cmp	r2, #99	; 0x63
 800b6a4:	d033      	beq.n	800b70e <_printf_i+0x8a>
 800b6a6:	d808      	bhi.n	800b6ba <_printf_i+0x36>
 800b6a8:	2a00      	cmp	r2, #0
 800b6aa:	d100      	bne.n	800b6ae <_printf_i+0x2a>
 800b6ac:	e08c      	b.n	800b7c8 <_printf_i+0x144>
 800b6ae:	2a58      	cmp	r2, #88	; 0x58
 800b6b0:	d04d      	beq.n	800b74e <_printf_i+0xca>
 800b6b2:	0025      	movs	r5, r4
 800b6b4:	3542      	adds	r5, #66	; 0x42
 800b6b6:	702a      	strb	r2, [r5, #0]
 800b6b8:	e030      	b.n	800b71c <_printf_i+0x98>
 800b6ba:	2a64      	cmp	r2, #100	; 0x64
 800b6bc:	d001      	beq.n	800b6c2 <_printf_i+0x3e>
 800b6be:	2a69      	cmp	r2, #105	; 0x69
 800b6c0:	d1f7      	bne.n	800b6b2 <_printf_i+0x2e>
 800b6c2:	6819      	ldr	r1, [r3, #0]
 800b6c4:	6825      	ldr	r5, [r4, #0]
 800b6c6:	1d0a      	adds	r2, r1, #4
 800b6c8:	0628      	lsls	r0, r5, #24
 800b6ca:	d529      	bpl.n	800b720 <_printf_i+0x9c>
 800b6cc:	6808      	ldr	r0, [r1, #0]
 800b6ce:	601a      	str	r2, [r3, #0]
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	da03      	bge.n	800b6dc <_printf_i+0x58>
 800b6d4:	232d      	movs	r3, #45	; 0x2d
 800b6d6:	9a02      	ldr	r2, [sp, #8]
 800b6d8:	4240      	negs	r0, r0
 800b6da:	7013      	strb	r3, [r2, #0]
 800b6dc:	4e6b      	ldr	r6, [pc, #428]	; (800b88c <_printf_i+0x208>)
 800b6de:	270a      	movs	r7, #10
 800b6e0:	e04f      	b.n	800b782 <_printf_i+0xfe>
 800b6e2:	2a73      	cmp	r2, #115	; 0x73
 800b6e4:	d074      	beq.n	800b7d0 <_printf_i+0x14c>
 800b6e6:	d808      	bhi.n	800b6fa <_printf_i+0x76>
 800b6e8:	2a6f      	cmp	r2, #111	; 0x6f
 800b6ea:	d01f      	beq.n	800b72c <_printf_i+0xa8>
 800b6ec:	2a70      	cmp	r2, #112	; 0x70
 800b6ee:	d1e0      	bne.n	800b6b2 <_printf_i+0x2e>
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	6809      	ldr	r1, [r1, #0]
 800b6f4:	430a      	orrs	r2, r1
 800b6f6:	6022      	str	r2, [r4, #0]
 800b6f8:	e003      	b.n	800b702 <_printf_i+0x7e>
 800b6fa:	2a75      	cmp	r2, #117	; 0x75
 800b6fc:	d016      	beq.n	800b72c <_printf_i+0xa8>
 800b6fe:	2a78      	cmp	r2, #120	; 0x78
 800b700:	d1d7      	bne.n	800b6b2 <_printf_i+0x2e>
 800b702:	0022      	movs	r2, r4
 800b704:	2178      	movs	r1, #120	; 0x78
 800b706:	3245      	adds	r2, #69	; 0x45
 800b708:	7011      	strb	r1, [r2, #0]
 800b70a:	4e61      	ldr	r6, [pc, #388]	; (800b890 <_printf_i+0x20c>)
 800b70c:	e022      	b.n	800b754 <_printf_i+0xd0>
 800b70e:	0025      	movs	r5, r4
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	3542      	adds	r5, #66	; 0x42
 800b714:	1d11      	adds	r1, r2, #4
 800b716:	6019      	str	r1, [r3, #0]
 800b718:	6813      	ldr	r3, [r2, #0]
 800b71a:	702b      	strb	r3, [r5, #0]
 800b71c:	2301      	movs	r3, #1
 800b71e:	e065      	b.n	800b7ec <_printf_i+0x168>
 800b720:	6808      	ldr	r0, [r1, #0]
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	0669      	lsls	r1, r5, #25
 800b726:	d5d3      	bpl.n	800b6d0 <_printf_i+0x4c>
 800b728:	b200      	sxth	r0, r0
 800b72a:	e7d1      	b.n	800b6d0 <_printf_i+0x4c>
 800b72c:	6819      	ldr	r1, [r3, #0]
 800b72e:	6825      	ldr	r5, [r4, #0]
 800b730:	1d08      	adds	r0, r1, #4
 800b732:	6018      	str	r0, [r3, #0]
 800b734:	6808      	ldr	r0, [r1, #0]
 800b736:	062e      	lsls	r6, r5, #24
 800b738:	d505      	bpl.n	800b746 <_printf_i+0xc2>
 800b73a:	4e54      	ldr	r6, [pc, #336]	; (800b88c <_printf_i+0x208>)
 800b73c:	2708      	movs	r7, #8
 800b73e:	2a6f      	cmp	r2, #111	; 0x6f
 800b740:	d01b      	beq.n	800b77a <_printf_i+0xf6>
 800b742:	270a      	movs	r7, #10
 800b744:	e019      	b.n	800b77a <_printf_i+0xf6>
 800b746:	066d      	lsls	r5, r5, #25
 800b748:	d5f7      	bpl.n	800b73a <_printf_i+0xb6>
 800b74a:	b280      	uxth	r0, r0
 800b74c:	e7f5      	b.n	800b73a <_printf_i+0xb6>
 800b74e:	3145      	adds	r1, #69	; 0x45
 800b750:	4e4e      	ldr	r6, [pc, #312]	; (800b88c <_printf_i+0x208>)
 800b752:	700a      	strb	r2, [r1, #0]
 800b754:	6818      	ldr	r0, [r3, #0]
 800b756:	6822      	ldr	r2, [r4, #0]
 800b758:	1d01      	adds	r1, r0, #4
 800b75a:	6800      	ldr	r0, [r0, #0]
 800b75c:	6019      	str	r1, [r3, #0]
 800b75e:	0615      	lsls	r5, r2, #24
 800b760:	d521      	bpl.n	800b7a6 <_printf_i+0x122>
 800b762:	07d3      	lsls	r3, r2, #31
 800b764:	d502      	bpl.n	800b76c <_printf_i+0xe8>
 800b766:	2320      	movs	r3, #32
 800b768:	431a      	orrs	r2, r3
 800b76a:	6022      	str	r2, [r4, #0]
 800b76c:	2710      	movs	r7, #16
 800b76e:	2800      	cmp	r0, #0
 800b770:	d103      	bne.n	800b77a <_printf_i+0xf6>
 800b772:	2320      	movs	r3, #32
 800b774:	6822      	ldr	r2, [r4, #0]
 800b776:	439a      	bics	r2, r3
 800b778:	6022      	str	r2, [r4, #0]
 800b77a:	0023      	movs	r3, r4
 800b77c:	2200      	movs	r2, #0
 800b77e:	3343      	adds	r3, #67	; 0x43
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	6863      	ldr	r3, [r4, #4]
 800b784:	60a3      	str	r3, [r4, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	db58      	blt.n	800b83c <_printf_i+0x1b8>
 800b78a:	2204      	movs	r2, #4
 800b78c:	6821      	ldr	r1, [r4, #0]
 800b78e:	4391      	bics	r1, r2
 800b790:	6021      	str	r1, [r4, #0]
 800b792:	2800      	cmp	r0, #0
 800b794:	d154      	bne.n	800b840 <_printf_i+0x1bc>
 800b796:	9d02      	ldr	r5, [sp, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d05a      	beq.n	800b852 <_printf_i+0x1ce>
 800b79c:	0025      	movs	r5, r4
 800b79e:	7833      	ldrb	r3, [r6, #0]
 800b7a0:	3542      	adds	r5, #66	; 0x42
 800b7a2:	702b      	strb	r3, [r5, #0]
 800b7a4:	e055      	b.n	800b852 <_printf_i+0x1ce>
 800b7a6:	0655      	lsls	r5, r2, #25
 800b7a8:	d5db      	bpl.n	800b762 <_printf_i+0xde>
 800b7aa:	b280      	uxth	r0, r0
 800b7ac:	e7d9      	b.n	800b762 <_printf_i+0xde>
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	680d      	ldr	r5, [r1, #0]
 800b7b2:	1d10      	adds	r0, r2, #4
 800b7b4:	6949      	ldr	r1, [r1, #20]
 800b7b6:	6018      	str	r0, [r3, #0]
 800b7b8:	6813      	ldr	r3, [r2, #0]
 800b7ba:	062e      	lsls	r6, r5, #24
 800b7bc:	d501      	bpl.n	800b7c2 <_printf_i+0x13e>
 800b7be:	6019      	str	r1, [r3, #0]
 800b7c0:	e002      	b.n	800b7c8 <_printf_i+0x144>
 800b7c2:	066d      	lsls	r5, r5, #25
 800b7c4:	d5fb      	bpl.n	800b7be <_printf_i+0x13a>
 800b7c6:	8019      	strh	r1, [r3, #0]
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	9d02      	ldr	r5, [sp, #8]
 800b7cc:	6123      	str	r3, [r4, #16]
 800b7ce:	e04f      	b.n	800b870 <_printf_i+0x1ec>
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	1d11      	adds	r1, r2, #4
 800b7d4:	6019      	str	r1, [r3, #0]
 800b7d6:	6815      	ldr	r5, [r2, #0]
 800b7d8:	2100      	movs	r1, #0
 800b7da:	6862      	ldr	r2, [r4, #4]
 800b7dc:	0028      	movs	r0, r5
 800b7de:	f000 fbe3 	bl	800bfa8 <memchr>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d001      	beq.n	800b7ea <_printf_i+0x166>
 800b7e6:	1b40      	subs	r0, r0, r5
 800b7e8:	6060      	str	r0, [r4, #4]
 800b7ea:	6863      	ldr	r3, [r4, #4]
 800b7ec:	6123      	str	r3, [r4, #16]
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	9a02      	ldr	r2, [sp, #8]
 800b7f2:	7013      	strb	r3, [r2, #0]
 800b7f4:	e03c      	b.n	800b870 <_printf_i+0x1ec>
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	002a      	movs	r2, r5
 800b7fa:	9904      	ldr	r1, [sp, #16]
 800b7fc:	9803      	ldr	r0, [sp, #12]
 800b7fe:	9d05      	ldr	r5, [sp, #20]
 800b800:	47a8      	blx	r5
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	d03e      	beq.n	800b884 <_printf_i+0x200>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	079b      	lsls	r3, r3, #30
 800b80a:	d415      	bmi.n	800b838 <_printf_i+0x1b4>
 800b80c:	9b07      	ldr	r3, [sp, #28]
 800b80e:	68e0      	ldr	r0, [r4, #12]
 800b810:	4298      	cmp	r0, r3
 800b812:	da39      	bge.n	800b888 <_printf_i+0x204>
 800b814:	0018      	movs	r0, r3
 800b816:	e037      	b.n	800b888 <_printf_i+0x204>
 800b818:	0022      	movs	r2, r4
 800b81a:	2301      	movs	r3, #1
 800b81c:	3219      	adds	r2, #25
 800b81e:	9904      	ldr	r1, [sp, #16]
 800b820:	9803      	ldr	r0, [sp, #12]
 800b822:	9e05      	ldr	r6, [sp, #20]
 800b824:	47b0      	blx	r6
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	d02c      	beq.n	800b884 <_printf_i+0x200>
 800b82a:	3501      	adds	r5, #1
 800b82c:	68e3      	ldr	r3, [r4, #12]
 800b82e:	9a07      	ldr	r2, [sp, #28]
 800b830:	1a9b      	subs	r3, r3, r2
 800b832:	42ab      	cmp	r3, r5
 800b834:	dcf0      	bgt.n	800b818 <_printf_i+0x194>
 800b836:	e7e9      	b.n	800b80c <_printf_i+0x188>
 800b838:	2500      	movs	r5, #0
 800b83a:	e7f7      	b.n	800b82c <_printf_i+0x1a8>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d0ad      	beq.n	800b79c <_printf_i+0x118>
 800b840:	9d02      	ldr	r5, [sp, #8]
 800b842:	0039      	movs	r1, r7
 800b844:	f7f4 fce6 	bl	8000214 <__aeabi_uidivmod>
 800b848:	5c73      	ldrb	r3, [r6, r1]
 800b84a:	3d01      	subs	r5, #1
 800b84c:	702b      	strb	r3, [r5, #0]
 800b84e:	2800      	cmp	r0, #0
 800b850:	d1f7      	bne.n	800b842 <_printf_i+0x1be>
 800b852:	2f08      	cmp	r7, #8
 800b854:	d109      	bne.n	800b86a <_printf_i+0x1e6>
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	07db      	lsls	r3, r3, #31
 800b85a:	d506      	bpl.n	800b86a <_printf_i+0x1e6>
 800b85c:	6863      	ldr	r3, [r4, #4]
 800b85e:	6922      	ldr	r2, [r4, #16]
 800b860:	4293      	cmp	r3, r2
 800b862:	dc02      	bgt.n	800b86a <_printf_i+0x1e6>
 800b864:	2330      	movs	r3, #48	; 0x30
 800b866:	3d01      	subs	r5, #1
 800b868:	702b      	strb	r3, [r5, #0]
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	1b5b      	subs	r3, r3, r5
 800b86e:	6123      	str	r3, [r4, #16]
 800b870:	9b05      	ldr	r3, [sp, #20]
 800b872:	aa07      	add	r2, sp, #28
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	0021      	movs	r1, r4
 800b878:	9b04      	ldr	r3, [sp, #16]
 800b87a:	9803      	ldr	r0, [sp, #12]
 800b87c:	f7ff fe94 	bl	800b5a8 <_printf_common>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d1b8      	bne.n	800b7f6 <_printf_i+0x172>
 800b884:	2001      	movs	r0, #1
 800b886:	4240      	negs	r0, r0
 800b888:	b009      	add	sp, #36	; 0x24
 800b88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b88c:	0800c91d 	.word	0x0800c91d
 800b890:	0800c92e 	.word	0x0800c92e

0800b894 <_sbrk_r>:
 800b894:	2300      	movs	r3, #0
 800b896:	b570      	push	{r4, r5, r6, lr}
 800b898:	4c06      	ldr	r4, [pc, #24]	; (800b8b4 <_sbrk_r+0x20>)
 800b89a:	0005      	movs	r5, r0
 800b89c:	0008      	movs	r0, r1
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	f7f5 fb64 	bl	8000f6c <_sbrk>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d103      	bne.n	800b8b0 <_sbrk_r+0x1c>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d000      	beq.n	800b8b0 <_sbrk_r+0x1c>
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	46c0      	nop			; (mov r8, r8)
 800b8b4:	200003e8 	.word	0x200003e8

0800b8b8 <_raise_r>:
 800b8b8:	b570      	push	{r4, r5, r6, lr}
 800b8ba:	0004      	movs	r4, r0
 800b8bc:	000d      	movs	r5, r1
 800b8be:	291f      	cmp	r1, #31
 800b8c0:	d904      	bls.n	800b8cc <_raise_r+0x14>
 800b8c2:	2316      	movs	r3, #22
 800b8c4:	6003      	str	r3, [r0, #0]
 800b8c6:	2001      	movs	r0, #1
 800b8c8:	4240      	negs	r0, r0
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d004      	beq.n	800b8dc <_raise_r+0x24>
 800b8d2:	008a      	lsls	r2, r1, #2
 800b8d4:	189b      	adds	r3, r3, r2
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	2a00      	cmp	r2, #0
 800b8da:	d108      	bne.n	800b8ee <_raise_r+0x36>
 800b8dc:	0020      	movs	r0, r4
 800b8de:	f000 f831 	bl	800b944 <_getpid_r>
 800b8e2:	002a      	movs	r2, r5
 800b8e4:	0001      	movs	r1, r0
 800b8e6:	0020      	movs	r0, r4
 800b8e8:	f000 f81a 	bl	800b920 <_kill_r>
 800b8ec:	e7ed      	b.n	800b8ca <_raise_r+0x12>
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	2a01      	cmp	r2, #1
 800b8f2:	d0ea      	beq.n	800b8ca <_raise_r+0x12>
 800b8f4:	1c51      	adds	r1, r2, #1
 800b8f6:	d103      	bne.n	800b900 <_raise_r+0x48>
 800b8f8:	2316      	movs	r3, #22
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	e7e4      	b.n	800b8ca <_raise_r+0x12>
 800b900:	2400      	movs	r4, #0
 800b902:	0028      	movs	r0, r5
 800b904:	601c      	str	r4, [r3, #0]
 800b906:	4790      	blx	r2
 800b908:	0020      	movs	r0, r4
 800b90a:	e7de      	b.n	800b8ca <_raise_r+0x12>

0800b90c <raise>:
 800b90c:	b510      	push	{r4, lr}
 800b90e:	4b03      	ldr	r3, [pc, #12]	; (800b91c <raise+0x10>)
 800b910:	0001      	movs	r1, r0
 800b912:	6818      	ldr	r0, [r3, #0]
 800b914:	f7ff ffd0 	bl	800b8b8 <_raise_r>
 800b918:	bd10      	pop	{r4, pc}
 800b91a:	46c0      	nop			; (mov r8, r8)
 800b91c:	20000010 	.word	0x20000010

0800b920 <_kill_r>:
 800b920:	2300      	movs	r3, #0
 800b922:	b570      	push	{r4, r5, r6, lr}
 800b924:	4c06      	ldr	r4, [pc, #24]	; (800b940 <_kill_r+0x20>)
 800b926:	0005      	movs	r5, r0
 800b928:	0008      	movs	r0, r1
 800b92a:	0011      	movs	r1, r2
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	f7f5 fa9b 	bl	8000e68 <_kill>
 800b932:	1c43      	adds	r3, r0, #1
 800b934:	d103      	bne.n	800b93e <_kill_r+0x1e>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d000      	beq.n	800b93e <_kill_r+0x1e>
 800b93c:	602b      	str	r3, [r5, #0]
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	200003e8 	.word	0x200003e8

0800b944 <_getpid_r>:
 800b944:	b510      	push	{r4, lr}
 800b946:	f7f5 fa89 	bl	8000e5c <_getpid>
 800b94a:	bd10      	pop	{r4, pc}

0800b94c <__swbuf_r>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	0005      	movs	r5, r0
 800b950:	000e      	movs	r6, r1
 800b952:	0014      	movs	r4, r2
 800b954:	2800      	cmp	r0, #0
 800b956:	d004      	beq.n	800b962 <__swbuf_r+0x16>
 800b958:	6983      	ldr	r3, [r0, #24]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <__swbuf_r+0x16>
 800b95e:	f000 fa23 	bl	800bda8 <__sinit>
 800b962:	4b22      	ldr	r3, [pc, #136]	; (800b9ec <__swbuf_r+0xa0>)
 800b964:	429c      	cmp	r4, r3
 800b966:	d12d      	bne.n	800b9c4 <__swbuf_r+0x78>
 800b968:	686c      	ldr	r4, [r5, #4]
 800b96a:	69a3      	ldr	r3, [r4, #24]
 800b96c:	60a3      	str	r3, [r4, #8]
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	071b      	lsls	r3, r3, #28
 800b972:	d531      	bpl.n	800b9d8 <__swbuf_r+0x8c>
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d02e      	beq.n	800b9d8 <__swbuf_r+0x8c>
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	6922      	ldr	r2, [r4, #16]
 800b97e:	b2f7      	uxtb	r7, r6
 800b980:	1a98      	subs	r0, r3, r2
 800b982:	6963      	ldr	r3, [r4, #20]
 800b984:	b2f6      	uxtb	r6, r6
 800b986:	4283      	cmp	r3, r0
 800b988:	dc05      	bgt.n	800b996 <__swbuf_r+0x4a>
 800b98a:	0021      	movs	r1, r4
 800b98c:	0028      	movs	r0, r5
 800b98e:	f000 f99d 	bl	800bccc <_fflush_r>
 800b992:	2800      	cmp	r0, #0
 800b994:	d126      	bne.n	800b9e4 <__swbuf_r+0x98>
 800b996:	68a3      	ldr	r3, [r4, #8]
 800b998:	3001      	adds	r0, #1
 800b99a:	3b01      	subs	r3, #1
 800b99c:	60a3      	str	r3, [r4, #8]
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	6022      	str	r2, [r4, #0]
 800b9a4:	701f      	strb	r7, [r3, #0]
 800b9a6:	6963      	ldr	r3, [r4, #20]
 800b9a8:	4283      	cmp	r3, r0
 800b9aa:	d004      	beq.n	800b9b6 <__swbuf_r+0x6a>
 800b9ac:	89a3      	ldrh	r3, [r4, #12]
 800b9ae:	07db      	lsls	r3, r3, #31
 800b9b0:	d51a      	bpl.n	800b9e8 <__swbuf_r+0x9c>
 800b9b2:	2e0a      	cmp	r6, #10
 800b9b4:	d118      	bne.n	800b9e8 <__swbuf_r+0x9c>
 800b9b6:	0021      	movs	r1, r4
 800b9b8:	0028      	movs	r0, r5
 800b9ba:	f000 f987 	bl	800bccc <_fflush_r>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d012      	beq.n	800b9e8 <__swbuf_r+0x9c>
 800b9c2:	e00f      	b.n	800b9e4 <__swbuf_r+0x98>
 800b9c4:	4b0a      	ldr	r3, [pc, #40]	; (800b9f0 <__swbuf_r+0xa4>)
 800b9c6:	429c      	cmp	r4, r3
 800b9c8:	d101      	bne.n	800b9ce <__swbuf_r+0x82>
 800b9ca:	68ac      	ldr	r4, [r5, #8]
 800b9cc:	e7cd      	b.n	800b96a <__swbuf_r+0x1e>
 800b9ce:	4b09      	ldr	r3, [pc, #36]	; (800b9f4 <__swbuf_r+0xa8>)
 800b9d0:	429c      	cmp	r4, r3
 800b9d2:	d1ca      	bne.n	800b96a <__swbuf_r+0x1e>
 800b9d4:	68ec      	ldr	r4, [r5, #12]
 800b9d6:	e7c8      	b.n	800b96a <__swbuf_r+0x1e>
 800b9d8:	0021      	movs	r1, r4
 800b9da:	0028      	movs	r0, r5
 800b9dc:	f000 f80c 	bl	800b9f8 <__swsetup_r>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d0ca      	beq.n	800b97a <__swbuf_r+0x2e>
 800b9e4:	2601      	movs	r6, #1
 800b9e6:	4276      	negs	r6, r6
 800b9e8:	0030      	movs	r0, r6
 800b9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ec:	0800c960 	.word	0x0800c960
 800b9f0:	0800c980 	.word	0x0800c980
 800b9f4:	0800c940 	.word	0x0800c940

0800b9f8 <__swsetup_r>:
 800b9f8:	4b36      	ldr	r3, [pc, #216]	; (800bad4 <__swsetup_r+0xdc>)
 800b9fa:	b570      	push	{r4, r5, r6, lr}
 800b9fc:	681d      	ldr	r5, [r3, #0]
 800b9fe:	0006      	movs	r6, r0
 800ba00:	000c      	movs	r4, r1
 800ba02:	2d00      	cmp	r5, #0
 800ba04:	d005      	beq.n	800ba12 <__swsetup_r+0x1a>
 800ba06:	69ab      	ldr	r3, [r5, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d102      	bne.n	800ba12 <__swsetup_r+0x1a>
 800ba0c:	0028      	movs	r0, r5
 800ba0e:	f000 f9cb 	bl	800bda8 <__sinit>
 800ba12:	4b31      	ldr	r3, [pc, #196]	; (800bad8 <__swsetup_r+0xe0>)
 800ba14:	429c      	cmp	r4, r3
 800ba16:	d10f      	bne.n	800ba38 <__swsetup_r+0x40>
 800ba18:	686c      	ldr	r4, [r5, #4]
 800ba1a:	230c      	movs	r3, #12
 800ba1c:	5ee2      	ldrsh	r2, [r4, r3]
 800ba1e:	b293      	uxth	r3, r2
 800ba20:	0719      	lsls	r1, r3, #28
 800ba22:	d42d      	bmi.n	800ba80 <__swsetup_r+0x88>
 800ba24:	06d9      	lsls	r1, r3, #27
 800ba26:	d411      	bmi.n	800ba4c <__swsetup_r+0x54>
 800ba28:	2309      	movs	r3, #9
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	6033      	str	r3, [r6, #0]
 800ba2e:	3337      	adds	r3, #55	; 0x37
 800ba30:	4313      	orrs	r3, r2
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	4240      	negs	r0, r0
 800ba36:	bd70      	pop	{r4, r5, r6, pc}
 800ba38:	4b28      	ldr	r3, [pc, #160]	; (800badc <__swsetup_r+0xe4>)
 800ba3a:	429c      	cmp	r4, r3
 800ba3c:	d101      	bne.n	800ba42 <__swsetup_r+0x4a>
 800ba3e:	68ac      	ldr	r4, [r5, #8]
 800ba40:	e7eb      	b.n	800ba1a <__swsetup_r+0x22>
 800ba42:	4b27      	ldr	r3, [pc, #156]	; (800bae0 <__swsetup_r+0xe8>)
 800ba44:	429c      	cmp	r4, r3
 800ba46:	d1e8      	bne.n	800ba1a <__swsetup_r+0x22>
 800ba48:	68ec      	ldr	r4, [r5, #12]
 800ba4a:	e7e6      	b.n	800ba1a <__swsetup_r+0x22>
 800ba4c:	075b      	lsls	r3, r3, #29
 800ba4e:	d513      	bpl.n	800ba78 <__swsetup_r+0x80>
 800ba50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba52:	2900      	cmp	r1, #0
 800ba54:	d008      	beq.n	800ba68 <__swsetup_r+0x70>
 800ba56:	0023      	movs	r3, r4
 800ba58:	3344      	adds	r3, #68	; 0x44
 800ba5a:	4299      	cmp	r1, r3
 800ba5c:	d002      	beq.n	800ba64 <__swsetup_r+0x6c>
 800ba5e:	0030      	movs	r0, r6
 800ba60:	f7ff fbbc 	bl	800b1dc <_free_r>
 800ba64:	2300      	movs	r3, #0
 800ba66:	6363      	str	r3, [r4, #52]	; 0x34
 800ba68:	2224      	movs	r2, #36	; 0x24
 800ba6a:	89a3      	ldrh	r3, [r4, #12]
 800ba6c:	4393      	bics	r3, r2
 800ba6e:	81a3      	strh	r3, [r4, #12]
 800ba70:	2300      	movs	r3, #0
 800ba72:	6063      	str	r3, [r4, #4]
 800ba74:	6923      	ldr	r3, [r4, #16]
 800ba76:	6023      	str	r3, [r4, #0]
 800ba78:	2308      	movs	r3, #8
 800ba7a:	89a2      	ldrh	r2, [r4, #12]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	81a3      	strh	r3, [r4, #12]
 800ba80:	6923      	ldr	r3, [r4, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10b      	bne.n	800ba9e <__swsetup_r+0xa6>
 800ba86:	21a0      	movs	r1, #160	; 0xa0
 800ba88:	2280      	movs	r2, #128	; 0x80
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	0089      	lsls	r1, r1, #2
 800ba8e:	0092      	lsls	r2, r2, #2
 800ba90:	400b      	ands	r3, r1
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d003      	beq.n	800ba9e <__swsetup_r+0xa6>
 800ba96:	0021      	movs	r1, r4
 800ba98:	0030      	movs	r0, r6
 800ba9a:	f000 fa41 	bl	800bf20 <__smakebuf_r>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	89a2      	ldrh	r2, [r4, #12]
 800baa2:	4013      	ands	r3, r2
 800baa4:	d011      	beq.n	800baca <__swsetup_r+0xd2>
 800baa6:	2300      	movs	r3, #0
 800baa8:	60a3      	str	r3, [r4, #8]
 800baaa:	6963      	ldr	r3, [r4, #20]
 800baac:	425b      	negs	r3, r3
 800baae:	61a3      	str	r3, [r4, #24]
 800bab0:	2000      	movs	r0, #0
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	4283      	cmp	r3, r0
 800bab6:	d1be      	bne.n	800ba36 <__swsetup_r+0x3e>
 800bab8:	230c      	movs	r3, #12
 800baba:	5ee2      	ldrsh	r2, [r4, r3]
 800babc:	0613      	lsls	r3, r2, #24
 800babe:	d5ba      	bpl.n	800ba36 <__swsetup_r+0x3e>
 800bac0:	2340      	movs	r3, #64	; 0x40
 800bac2:	4313      	orrs	r3, r2
 800bac4:	81a3      	strh	r3, [r4, #12]
 800bac6:	3801      	subs	r0, #1
 800bac8:	e7b5      	b.n	800ba36 <__swsetup_r+0x3e>
 800baca:	0792      	lsls	r2, r2, #30
 800bacc:	d400      	bmi.n	800bad0 <__swsetup_r+0xd8>
 800bace:	6963      	ldr	r3, [r4, #20]
 800bad0:	60a3      	str	r3, [r4, #8]
 800bad2:	e7ed      	b.n	800bab0 <__swsetup_r+0xb8>
 800bad4:	20000010 	.word	0x20000010
 800bad8:	0800c960 	.word	0x0800c960
 800badc:	0800c980 	.word	0x0800c980
 800bae0:	0800c940 	.word	0x0800c940

0800bae4 <__register_exitproc>:
 800bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bae6:	4d30      	ldr	r5, [pc, #192]	; (800bba8 <__register_exitproc+0xc4>)
 800bae8:	b085      	sub	sp, #20
 800baea:	682c      	ldr	r4, [r5, #0]
 800baec:	0006      	movs	r6, r0
 800baee:	9101      	str	r1, [sp, #4]
 800baf0:	0017      	movs	r7, r2
 800baf2:	9302      	str	r3, [sp, #8]
 800baf4:	2c00      	cmp	r4, #0
 800baf6:	d10a      	bne.n	800bb0e <__register_exitproc+0x2a>
 800baf8:	4b2c      	ldr	r3, [pc, #176]	; (800bbac <__register_exitproc+0xc8>)
 800bafa:	4a2d      	ldr	r2, [pc, #180]	; (800bbb0 <__register_exitproc+0xcc>)
 800bafc:	602b      	str	r3, [r5, #0]
 800bafe:	001c      	movs	r4, r3
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	d004      	beq.n	800bb0e <__register_exitproc+0x2a>
 800bb04:	0019      	movs	r1, r3
 800bb06:	6812      	ldr	r2, [r2, #0]
 800bb08:	3188      	adds	r1, #136	; 0x88
 800bb0a:	9203      	str	r2, [sp, #12]
 800bb0c:	600a      	str	r2, [r1, #0]
 800bb0e:	6863      	ldr	r3, [r4, #4]
 800bb10:	2b1f      	cmp	r3, #31
 800bb12:	dd3d      	ble.n	800bb90 <__register_exitproc+0xac>
 800bb14:	4b27      	ldr	r3, [pc, #156]	; (800bbb4 <__register_exitproc+0xd0>)
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d103      	bne.n	800bb22 <__register_exitproc+0x3e>
 800bb1a:	2001      	movs	r0, #1
 800bb1c:	4240      	negs	r0, r0
 800bb1e:	b005      	add	sp, #20
 800bb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb22:	208c      	movs	r0, #140	; 0x8c
 800bb24:	f7ff fb2a 	bl	800b17c <malloc>
 800bb28:	1e04      	subs	r4, r0, #0
 800bb2a:	d0f6      	beq.n	800bb1a <__register_exitproc+0x36>
 800bb2c:	682a      	ldr	r2, [r5, #0]
 800bb2e:	2300      	movs	r3, #0
 800bb30:	6002      	str	r2, [r0, #0]
 800bb32:	0002      	movs	r2, r0
 800bb34:	3288      	adds	r2, #136	; 0x88
 800bb36:	6043      	str	r3, [r0, #4]
 800bb38:	6028      	str	r0, [r5, #0]
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	429e      	cmp	r6, r3
 800bb3e:	d01e      	beq.n	800bb7e <__register_exitproc+0x9a>
 800bb40:	2084      	movs	r0, #132	; 0x84
 800bb42:	0040      	lsls	r0, r0, #1
 800bb44:	f7ff fb1a 	bl	800b17c <malloc>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d0e6      	beq.n	800bb1a <__register_exitproc+0x36>
 800bb4c:	0003      	movs	r3, r0
 800bb4e:	2200      	movs	r2, #0
 800bb50:	33fc      	adds	r3, #252	; 0xfc
 800bb52:	605a      	str	r2, [r3, #4]
 800bb54:	609a      	str	r2, [r3, #8]
 800bb56:	0023      	movs	r3, r4
 800bb58:	3388      	adds	r3, #136	; 0x88
 800bb5a:	6018      	str	r0, [r3, #0]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	6861      	ldr	r1, [r4, #4]
 800bb60:	408a      	lsls	r2, r1
 800bb62:	008b      	lsls	r3, r1, #2
 800bb64:	18c3      	adds	r3, r0, r3
 800bb66:	c380      	stmia	r3!, {r7}
 800bb68:	30fc      	adds	r0, #252	; 0xfc
 800bb6a:	6841      	ldr	r1, [r0, #4]
 800bb6c:	4311      	orrs	r1, r2
 800bb6e:	6041      	str	r1, [r0, #4]
 800bb70:	9902      	ldr	r1, [sp, #8]
 800bb72:	67d9      	str	r1, [r3, #124]	; 0x7c
 800bb74:	2e02      	cmp	r6, #2
 800bb76:	d102      	bne.n	800bb7e <__register_exitproc+0x9a>
 800bb78:	6883      	ldr	r3, [r0, #8]
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	6082      	str	r2, [r0, #8]
 800bb7e:	6863      	ldr	r3, [r4, #4]
 800bb80:	2000      	movs	r0, #0
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	6062      	str	r2, [r4, #4]
 800bb86:	3302      	adds	r3, #2
 800bb88:	9a01      	ldr	r2, [sp, #4]
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	511a      	str	r2, [r3, r4]
 800bb8e:	e7c6      	b.n	800bb1e <__register_exitproc+0x3a>
 800bb90:	2e00      	cmp	r6, #0
 800bb92:	d0f4      	beq.n	800bb7e <__register_exitproc+0x9a>
 800bb94:	0023      	movs	r3, r4
 800bb96:	3388      	adds	r3, #136	; 0x88
 800bb98:	6818      	ldr	r0, [r3, #0]
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d1de      	bne.n	800bb5c <__register_exitproc+0x78>
 800bb9e:	4b05      	ldr	r3, [pc, #20]	; (800bbb4 <__register_exitproc+0xd0>)
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0ba      	beq.n	800bb1a <__register_exitproc+0x36>
 800bba4:	e7cc      	b.n	800bb40 <__register_exitproc+0x5c>
 800bba6:	46c0      	nop			; (mov r8, r8)
 800bba8:	200001f4 	.word	0x200001f4
 800bbac:	20000168 	.word	0x20000168
 800bbb0:	00000000 	.word	0x00000000
 800bbb4:	0800b17d 	.word	0x0800b17d

0800bbb8 <__sflush_r>:
 800bbb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbba:	898a      	ldrh	r2, [r1, #12]
 800bbbc:	0005      	movs	r5, r0
 800bbbe:	000c      	movs	r4, r1
 800bbc0:	0713      	lsls	r3, r2, #28
 800bbc2:	d460      	bmi.n	800bc86 <__sflush_r+0xce>
 800bbc4:	684b      	ldr	r3, [r1, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	dc04      	bgt.n	800bbd4 <__sflush_r+0x1c>
 800bbca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	dc01      	bgt.n	800bbd4 <__sflush_r+0x1c>
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbd4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bbd6:	2f00      	cmp	r7, #0
 800bbd8:	d0fa      	beq.n	800bbd0 <__sflush_r+0x18>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	682e      	ldr	r6, [r5, #0]
 800bbde:	602b      	str	r3, [r5, #0]
 800bbe0:	2380      	movs	r3, #128	; 0x80
 800bbe2:	015b      	lsls	r3, r3, #5
 800bbe4:	6a21      	ldr	r1, [r4, #32]
 800bbe6:	401a      	ands	r2, r3
 800bbe8:	d034      	beq.n	800bc54 <__sflush_r+0x9c>
 800bbea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	075b      	lsls	r3, r3, #29
 800bbf0:	d506      	bpl.n	800bc00 <__sflush_r+0x48>
 800bbf2:	6863      	ldr	r3, [r4, #4]
 800bbf4:	1ac0      	subs	r0, r0, r3
 800bbf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <__sflush_r+0x48>
 800bbfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbfe:	1ac0      	subs	r0, r0, r3
 800bc00:	0002      	movs	r2, r0
 800bc02:	6a21      	ldr	r1, [r4, #32]
 800bc04:	2300      	movs	r3, #0
 800bc06:	0028      	movs	r0, r5
 800bc08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bc0a:	47b8      	blx	r7
 800bc0c:	89a1      	ldrh	r1, [r4, #12]
 800bc0e:	1c43      	adds	r3, r0, #1
 800bc10:	d106      	bne.n	800bc20 <__sflush_r+0x68>
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	2b1d      	cmp	r3, #29
 800bc16:	d830      	bhi.n	800bc7a <__sflush_r+0xc2>
 800bc18:	4a2b      	ldr	r2, [pc, #172]	; (800bcc8 <__sflush_r+0x110>)
 800bc1a:	40da      	lsrs	r2, r3
 800bc1c:	07d3      	lsls	r3, r2, #31
 800bc1e:	d52c      	bpl.n	800bc7a <__sflush_r+0xc2>
 800bc20:	2300      	movs	r3, #0
 800bc22:	6063      	str	r3, [r4, #4]
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	6023      	str	r3, [r4, #0]
 800bc28:	04cb      	lsls	r3, r1, #19
 800bc2a:	d505      	bpl.n	800bc38 <__sflush_r+0x80>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <__sflush_r+0x7e>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d100      	bne.n	800bc38 <__sflush_r+0x80>
 800bc36:	6560      	str	r0, [r4, #84]	; 0x54
 800bc38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc3a:	602e      	str	r6, [r5, #0]
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	d0c7      	beq.n	800bbd0 <__sflush_r+0x18>
 800bc40:	0023      	movs	r3, r4
 800bc42:	3344      	adds	r3, #68	; 0x44
 800bc44:	4299      	cmp	r1, r3
 800bc46:	d002      	beq.n	800bc4e <__sflush_r+0x96>
 800bc48:	0028      	movs	r0, r5
 800bc4a:	f7ff fac7 	bl	800b1dc <_free_r>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	6360      	str	r0, [r4, #52]	; 0x34
 800bc52:	e7be      	b.n	800bbd2 <__sflush_r+0x1a>
 800bc54:	2301      	movs	r3, #1
 800bc56:	0028      	movs	r0, r5
 800bc58:	47b8      	blx	r7
 800bc5a:	1c43      	adds	r3, r0, #1
 800bc5c:	d1c6      	bne.n	800bbec <__sflush_r+0x34>
 800bc5e:	682b      	ldr	r3, [r5, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d0c3      	beq.n	800bbec <__sflush_r+0x34>
 800bc64:	2b1d      	cmp	r3, #29
 800bc66:	d001      	beq.n	800bc6c <__sflush_r+0xb4>
 800bc68:	2b16      	cmp	r3, #22
 800bc6a:	d101      	bne.n	800bc70 <__sflush_r+0xb8>
 800bc6c:	602e      	str	r6, [r5, #0]
 800bc6e:	e7af      	b.n	800bbd0 <__sflush_r+0x18>
 800bc70:	2340      	movs	r3, #64	; 0x40
 800bc72:	89a2      	ldrh	r2, [r4, #12]
 800bc74:	4313      	orrs	r3, r2
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	e7ab      	b.n	800bbd2 <__sflush_r+0x1a>
 800bc7a:	2340      	movs	r3, #64	; 0x40
 800bc7c:	430b      	orrs	r3, r1
 800bc7e:	2001      	movs	r0, #1
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	4240      	negs	r0, r0
 800bc84:	e7a5      	b.n	800bbd2 <__sflush_r+0x1a>
 800bc86:	690f      	ldr	r7, [r1, #16]
 800bc88:	2f00      	cmp	r7, #0
 800bc8a:	d0a1      	beq.n	800bbd0 <__sflush_r+0x18>
 800bc8c:	680b      	ldr	r3, [r1, #0]
 800bc8e:	600f      	str	r7, [r1, #0]
 800bc90:	1bdb      	subs	r3, r3, r7
 800bc92:	9301      	str	r3, [sp, #4]
 800bc94:	2300      	movs	r3, #0
 800bc96:	0792      	lsls	r2, r2, #30
 800bc98:	d100      	bne.n	800bc9c <__sflush_r+0xe4>
 800bc9a:	694b      	ldr	r3, [r1, #20]
 800bc9c:	60a3      	str	r3, [r4, #8]
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dc00      	bgt.n	800bca6 <__sflush_r+0xee>
 800bca4:	e794      	b.n	800bbd0 <__sflush_r+0x18>
 800bca6:	9b01      	ldr	r3, [sp, #4]
 800bca8:	003a      	movs	r2, r7
 800bcaa:	6a21      	ldr	r1, [r4, #32]
 800bcac:	0028      	movs	r0, r5
 800bcae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcb0:	47b0      	blx	r6
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	dc03      	bgt.n	800bcbe <__sflush_r+0x106>
 800bcb6:	2340      	movs	r3, #64	; 0x40
 800bcb8:	89a2      	ldrh	r2, [r4, #12]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	e7df      	b.n	800bc7e <__sflush_r+0xc6>
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	183f      	adds	r7, r7, r0
 800bcc2:	1a1b      	subs	r3, r3, r0
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	e7ea      	b.n	800bc9e <__sflush_r+0xe6>
 800bcc8:	20400001 	.word	0x20400001

0800bccc <_fflush_r>:
 800bccc:	690b      	ldr	r3, [r1, #16]
 800bcce:	b570      	push	{r4, r5, r6, lr}
 800bcd0:	0005      	movs	r5, r0
 800bcd2:	000c      	movs	r4, r1
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <_fflush_r+0x10>
 800bcd8:	2000      	movs	r0, #0
 800bcda:	bd70      	pop	{r4, r5, r6, pc}
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d004      	beq.n	800bcea <_fflush_r+0x1e>
 800bce0:	6983      	ldr	r3, [r0, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d101      	bne.n	800bcea <_fflush_r+0x1e>
 800bce6:	f000 f85f 	bl	800bda8 <__sinit>
 800bcea:	4b0b      	ldr	r3, [pc, #44]	; (800bd18 <_fflush_r+0x4c>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	d109      	bne.n	800bd04 <_fflush_r+0x38>
 800bcf0:	686c      	ldr	r4, [r5, #4]
 800bcf2:	220c      	movs	r2, #12
 800bcf4:	5ea3      	ldrsh	r3, [r4, r2]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0ee      	beq.n	800bcd8 <_fflush_r+0xc>
 800bcfa:	0021      	movs	r1, r4
 800bcfc:	0028      	movs	r0, r5
 800bcfe:	f7ff ff5b 	bl	800bbb8 <__sflush_r>
 800bd02:	e7ea      	b.n	800bcda <_fflush_r+0xe>
 800bd04:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <_fflush_r+0x50>)
 800bd06:	429c      	cmp	r4, r3
 800bd08:	d101      	bne.n	800bd0e <_fflush_r+0x42>
 800bd0a:	68ac      	ldr	r4, [r5, #8]
 800bd0c:	e7f1      	b.n	800bcf2 <_fflush_r+0x26>
 800bd0e:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <_fflush_r+0x54>)
 800bd10:	429c      	cmp	r4, r3
 800bd12:	d1ee      	bne.n	800bcf2 <_fflush_r+0x26>
 800bd14:	68ec      	ldr	r4, [r5, #12]
 800bd16:	e7ec      	b.n	800bcf2 <_fflush_r+0x26>
 800bd18:	0800c960 	.word	0x0800c960
 800bd1c:	0800c980 	.word	0x0800c980
 800bd20:	0800c940 	.word	0x0800c940

0800bd24 <std>:
 800bd24:	2300      	movs	r3, #0
 800bd26:	b510      	push	{r4, lr}
 800bd28:	0004      	movs	r4, r0
 800bd2a:	6003      	str	r3, [r0, #0]
 800bd2c:	6043      	str	r3, [r0, #4]
 800bd2e:	6083      	str	r3, [r0, #8]
 800bd30:	8181      	strh	r1, [r0, #12]
 800bd32:	6643      	str	r3, [r0, #100]	; 0x64
 800bd34:	81c2      	strh	r2, [r0, #14]
 800bd36:	6103      	str	r3, [r0, #16]
 800bd38:	6143      	str	r3, [r0, #20]
 800bd3a:	6183      	str	r3, [r0, #24]
 800bd3c:	0019      	movs	r1, r3
 800bd3e:	2208      	movs	r2, #8
 800bd40:	305c      	adds	r0, #92	; 0x5c
 800bd42:	f7ff fa42 	bl	800b1ca <memset>
 800bd46:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <std+0x38>)
 800bd48:	6224      	str	r4, [r4, #32]
 800bd4a:	6263      	str	r3, [r4, #36]	; 0x24
 800bd4c:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <std+0x3c>)
 800bd4e:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd50:	4b04      	ldr	r3, [pc, #16]	; (800bd64 <std+0x40>)
 800bd52:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd54:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <std+0x44>)
 800bd56:	6323      	str	r3, [r4, #48]	; 0x30
 800bd58:	bd10      	pop	{r4, pc}
 800bd5a:	46c0      	nop			; (mov r8, r8)
 800bd5c:	0800bfc5 	.word	0x0800bfc5
 800bd60:	0800bfed 	.word	0x0800bfed
 800bd64:	0800c025 	.word	0x0800c025
 800bd68:	0800c051 	.word	0x0800c051

0800bd6c <_cleanup_r>:
 800bd6c:	b510      	push	{r4, lr}
 800bd6e:	4902      	ldr	r1, [pc, #8]	; (800bd78 <_cleanup_r+0xc>)
 800bd70:	f000 f88c 	bl	800be8c <_fwalk_reent>
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	46c0      	nop			; (mov r8, r8)
 800bd78:	0800bccd 	.word	0x0800bccd

0800bd7c <__sfmoreglue>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	2568      	movs	r5, #104	; 0x68
 800bd80:	1e4a      	subs	r2, r1, #1
 800bd82:	4355      	muls	r5, r2
 800bd84:	000e      	movs	r6, r1
 800bd86:	0029      	movs	r1, r5
 800bd88:	3174      	adds	r1, #116	; 0x74
 800bd8a:	f7ff fa71 	bl	800b270 <_malloc_r>
 800bd8e:	1e04      	subs	r4, r0, #0
 800bd90:	d008      	beq.n	800bda4 <__sfmoreglue+0x28>
 800bd92:	2100      	movs	r1, #0
 800bd94:	002a      	movs	r2, r5
 800bd96:	6001      	str	r1, [r0, #0]
 800bd98:	6046      	str	r6, [r0, #4]
 800bd9a:	300c      	adds	r0, #12
 800bd9c:	60a0      	str	r0, [r4, #8]
 800bd9e:	3268      	adds	r2, #104	; 0x68
 800bda0:	f7ff fa13 	bl	800b1ca <memset>
 800bda4:	0020      	movs	r0, r4
 800bda6:	bd70      	pop	{r4, r5, r6, pc}

0800bda8 <__sinit>:
 800bda8:	6983      	ldr	r3, [r0, #24]
 800bdaa:	b513      	push	{r0, r1, r4, lr}
 800bdac:	0004      	movs	r4, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d128      	bne.n	800be04 <__sinit+0x5c>
 800bdb2:	6483      	str	r3, [r0, #72]	; 0x48
 800bdb4:	64c3      	str	r3, [r0, #76]	; 0x4c
 800bdb6:	6503      	str	r3, [r0, #80]	; 0x50
 800bdb8:	4b13      	ldr	r3, [pc, #76]	; (800be08 <__sinit+0x60>)
 800bdba:	4a14      	ldr	r2, [pc, #80]	; (800be0c <__sinit+0x64>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6282      	str	r2, [r0, #40]	; 0x28
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	4298      	cmp	r0, r3
 800bdc4:	d101      	bne.n	800bdca <__sinit+0x22>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	6183      	str	r3, [r0, #24]
 800bdca:	0020      	movs	r0, r4
 800bdcc:	f000 f820 	bl	800be10 <__sfp>
 800bdd0:	6060      	str	r0, [r4, #4]
 800bdd2:	0020      	movs	r0, r4
 800bdd4:	f000 f81c 	bl	800be10 <__sfp>
 800bdd8:	60a0      	str	r0, [r4, #8]
 800bdda:	0020      	movs	r0, r4
 800bddc:	f000 f818 	bl	800be10 <__sfp>
 800bde0:	2200      	movs	r2, #0
 800bde2:	60e0      	str	r0, [r4, #12]
 800bde4:	2104      	movs	r1, #4
 800bde6:	6860      	ldr	r0, [r4, #4]
 800bde8:	f7ff ff9c 	bl	800bd24 <std>
 800bdec:	2201      	movs	r2, #1
 800bdee:	2109      	movs	r1, #9
 800bdf0:	68a0      	ldr	r0, [r4, #8]
 800bdf2:	f7ff ff97 	bl	800bd24 <std>
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	2112      	movs	r1, #18
 800bdfa:	68e0      	ldr	r0, [r4, #12]
 800bdfc:	f7ff ff92 	bl	800bd24 <std>
 800be00:	2301      	movs	r3, #1
 800be02:	61a3      	str	r3, [r4, #24]
 800be04:	bd13      	pop	{r0, r1, r4, pc}
 800be06:	46c0      	nop			; (mov r8, r8)
 800be08:	0800c908 	.word	0x0800c908
 800be0c:	0800bd6d 	.word	0x0800bd6d

0800be10 <__sfp>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	4b1c      	ldr	r3, [pc, #112]	; (800be84 <__sfp+0x74>)
 800be14:	0007      	movs	r7, r0
 800be16:	681e      	ldr	r6, [r3, #0]
 800be18:	69b3      	ldr	r3, [r6, #24]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d102      	bne.n	800be24 <__sfp+0x14>
 800be1e:	0030      	movs	r0, r6
 800be20:	f7ff ffc2 	bl	800bda8 <__sinit>
 800be24:	3648      	adds	r6, #72	; 0x48
 800be26:	68b4      	ldr	r4, [r6, #8]
 800be28:	6873      	ldr	r3, [r6, #4]
 800be2a:	3b01      	subs	r3, #1
 800be2c:	d504      	bpl.n	800be38 <__sfp+0x28>
 800be2e:	6833      	ldr	r3, [r6, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <__sfp+0x34>
 800be34:	6836      	ldr	r6, [r6, #0]
 800be36:	e7f6      	b.n	800be26 <__sfp+0x16>
 800be38:	220c      	movs	r2, #12
 800be3a:	5ea5      	ldrsh	r5, [r4, r2]
 800be3c:	2d00      	cmp	r5, #0
 800be3e:	d00d      	beq.n	800be5c <__sfp+0x4c>
 800be40:	3468      	adds	r4, #104	; 0x68
 800be42:	e7f2      	b.n	800be2a <__sfp+0x1a>
 800be44:	2104      	movs	r1, #4
 800be46:	0038      	movs	r0, r7
 800be48:	f7ff ff98 	bl	800bd7c <__sfmoreglue>
 800be4c:	6030      	str	r0, [r6, #0]
 800be4e:	2800      	cmp	r0, #0
 800be50:	d1f0      	bne.n	800be34 <__sfp+0x24>
 800be52:	230c      	movs	r3, #12
 800be54:	0004      	movs	r4, r0
 800be56:	603b      	str	r3, [r7, #0]
 800be58:	0020      	movs	r0, r4
 800be5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5c:	0020      	movs	r0, r4
 800be5e:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <__sfp+0x78>)
 800be60:	6665      	str	r5, [r4, #100]	; 0x64
 800be62:	6025      	str	r5, [r4, #0]
 800be64:	6065      	str	r5, [r4, #4]
 800be66:	60a5      	str	r5, [r4, #8]
 800be68:	60e3      	str	r3, [r4, #12]
 800be6a:	6125      	str	r5, [r4, #16]
 800be6c:	6165      	str	r5, [r4, #20]
 800be6e:	61a5      	str	r5, [r4, #24]
 800be70:	2208      	movs	r2, #8
 800be72:	0029      	movs	r1, r5
 800be74:	305c      	adds	r0, #92	; 0x5c
 800be76:	f7ff f9a8 	bl	800b1ca <memset>
 800be7a:	6365      	str	r5, [r4, #52]	; 0x34
 800be7c:	63a5      	str	r5, [r4, #56]	; 0x38
 800be7e:	64a5      	str	r5, [r4, #72]	; 0x48
 800be80:	64e5      	str	r5, [r4, #76]	; 0x4c
 800be82:	e7e9      	b.n	800be58 <__sfp+0x48>
 800be84:	0800c908 	.word	0x0800c908
 800be88:	ffff0001 	.word	0xffff0001

0800be8c <_fwalk_reent>:
 800be8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be8e:	0004      	movs	r4, r0
 800be90:	0007      	movs	r7, r0
 800be92:	2600      	movs	r6, #0
 800be94:	9101      	str	r1, [sp, #4]
 800be96:	3448      	adds	r4, #72	; 0x48
 800be98:	2c00      	cmp	r4, #0
 800be9a:	d101      	bne.n	800bea0 <_fwalk_reent+0x14>
 800be9c:	0030      	movs	r0, r6
 800be9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bea0:	6863      	ldr	r3, [r4, #4]
 800bea2:	68a5      	ldr	r5, [r4, #8]
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	9b00      	ldr	r3, [sp, #0]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	d501      	bpl.n	800beb2 <_fwalk_reent+0x26>
 800beae:	6824      	ldr	r4, [r4, #0]
 800beb0:	e7f2      	b.n	800be98 <_fwalk_reent+0xc>
 800beb2:	89ab      	ldrh	r3, [r5, #12]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d908      	bls.n	800beca <_fwalk_reent+0x3e>
 800beb8:	220e      	movs	r2, #14
 800beba:	5eab      	ldrsh	r3, [r5, r2]
 800bebc:	3301      	adds	r3, #1
 800bebe:	d004      	beq.n	800beca <_fwalk_reent+0x3e>
 800bec0:	0029      	movs	r1, r5
 800bec2:	0038      	movs	r0, r7
 800bec4:	9b01      	ldr	r3, [sp, #4]
 800bec6:	4798      	blx	r3
 800bec8:	4306      	orrs	r6, r0
 800beca:	3568      	adds	r5, #104	; 0x68
 800becc:	e7eb      	b.n	800bea6 <_fwalk_reent+0x1a>
	...

0800bed0 <__swhatbuf_r>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	000e      	movs	r6, r1
 800bed4:	001d      	movs	r5, r3
 800bed6:	230e      	movs	r3, #14
 800bed8:	5ec9      	ldrsh	r1, [r1, r3]
 800beda:	b096      	sub	sp, #88	; 0x58
 800bedc:	0014      	movs	r4, r2
 800bede:	2900      	cmp	r1, #0
 800bee0:	da07      	bge.n	800bef2 <__swhatbuf_r+0x22>
 800bee2:	2300      	movs	r3, #0
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	89b3      	ldrh	r3, [r6, #12]
 800bee8:	061b      	lsls	r3, r3, #24
 800beea:	d411      	bmi.n	800bf10 <__swhatbuf_r+0x40>
 800beec:	2380      	movs	r3, #128	; 0x80
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	e00f      	b.n	800bf12 <__swhatbuf_r+0x42>
 800bef2:	466a      	mov	r2, sp
 800bef4:	f000 f8d8 	bl	800c0a8 <_fstat_r>
 800bef8:	2800      	cmp	r0, #0
 800befa:	dbf2      	blt.n	800bee2 <__swhatbuf_r+0x12>
 800befc:	22f0      	movs	r2, #240	; 0xf0
 800befe:	9b01      	ldr	r3, [sp, #4]
 800bf00:	0212      	lsls	r2, r2, #8
 800bf02:	4013      	ands	r3, r2
 800bf04:	4a05      	ldr	r2, [pc, #20]	; (800bf1c <__swhatbuf_r+0x4c>)
 800bf06:	189b      	adds	r3, r3, r2
 800bf08:	425a      	negs	r2, r3
 800bf0a:	4153      	adcs	r3, r2
 800bf0c:	602b      	str	r3, [r5, #0]
 800bf0e:	e7ed      	b.n	800beec <__swhatbuf_r+0x1c>
 800bf10:	2340      	movs	r3, #64	; 0x40
 800bf12:	2000      	movs	r0, #0
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	b016      	add	sp, #88	; 0x58
 800bf18:	bd70      	pop	{r4, r5, r6, pc}
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	ffffe000 	.word	0xffffe000

0800bf20 <__smakebuf_r>:
 800bf20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf22:	2602      	movs	r6, #2
 800bf24:	898b      	ldrh	r3, [r1, #12]
 800bf26:	0005      	movs	r5, r0
 800bf28:	000c      	movs	r4, r1
 800bf2a:	4233      	tst	r3, r6
 800bf2c:	d006      	beq.n	800bf3c <__smakebuf_r+0x1c>
 800bf2e:	0023      	movs	r3, r4
 800bf30:	3347      	adds	r3, #71	; 0x47
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	6123      	str	r3, [r4, #16]
 800bf36:	2301      	movs	r3, #1
 800bf38:	6163      	str	r3, [r4, #20]
 800bf3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bf3c:	ab01      	add	r3, sp, #4
 800bf3e:	466a      	mov	r2, sp
 800bf40:	f7ff ffc6 	bl	800bed0 <__swhatbuf_r>
 800bf44:	9900      	ldr	r1, [sp, #0]
 800bf46:	0007      	movs	r7, r0
 800bf48:	0028      	movs	r0, r5
 800bf4a:	f7ff f991 	bl	800b270 <_malloc_r>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d108      	bne.n	800bf64 <__smakebuf_r+0x44>
 800bf52:	220c      	movs	r2, #12
 800bf54:	5ea3      	ldrsh	r3, [r4, r2]
 800bf56:	059a      	lsls	r2, r3, #22
 800bf58:	d4ef      	bmi.n	800bf3a <__smakebuf_r+0x1a>
 800bf5a:	2203      	movs	r2, #3
 800bf5c:	4393      	bics	r3, r2
 800bf5e:	431e      	orrs	r6, r3
 800bf60:	81a6      	strh	r6, [r4, #12]
 800bf62:	e7e4      	b.n	800bf2e <__smakebuf_r+0xe>
 800bf64:	4b0f      	ldr	r3, [pc, #60]	; (800bfa4 <__smakebuf_r+0x84>)
 800bf66:	62ab      	str	r3, [r5, #40]	; 0x28
 800bf68:	2380      	movs	r3, #128	; 0x80
 800bf6a:	89a2      	ldrh	r2, [r4, #12]
 800bf6c:	6020      	str	r0, [r4, #0]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	81a3      	strh	r3, [r4, #12]
 800bf72:	9b00      	ldr	r3, [sp, #0]
 800bf74:	6120      	str	r0, [r4, #16]
 800bf76:	6163      	str	r3, [r4, #20]
 800bf78:	9b01      	ldr	r3, [sp, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00d      	beq.n	800bf9a <__smakebuf_r+0x7a>
 800bf7e:	230e      	movs	r3, #14
 800bf80:	5ee1      	ldrsh	r1, [r4, r3]
 800bf82:	0028      	movs	r0, r5
 800bf84:	f000 f8a2 	bl	800c0cc <_isatty_r>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d006      	beq.n	800bf9a <__smakebuf_r+0x7a>
 800bf8c:	2203      	movs	r2, #3
 800bf8e:	89a3      	ldrh	r3, [r4, #12]
 800bf90:	4393      	bics	r3, r2
 800bf92:	001a      	movs	r2, r3
 800bf94:	2301      	movs	r3, #1
 800bf96:	4313      	orrs	r3, r2
 800bf98:	81a3      	strh	r3, [r4, #12]
 800bf9a:	89a0      	ldrh	r0, [r4, #12]
 800bf9c:	4338      	orrs	r0, r7
 800bf9e:	81a0      	strh	r0, [r4, #12]
 800bfa0:	e7cb      	b.n	800bf3a <__smakebuf_r+0x1a>
 800bfa2:	46c0      	nop			; (mov r8, r8)
 800bfa4:	0800bd6d 	.word	0x0800bd6d

0800bfa8 <memchr>:
 800bfa8:	b2c9      	uxtb	r1, r1
 800bfaa:	1882      	adds	r2, r0, r2
 800bfac:	4290      	cmp	r0, r2
 800bfae:	d101      	bne.n	800bfb4 <memchr+0xc>
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	4770      	bx	lr
 800bfb4:	7803      	ldrb	r3, [r0, #0]
 800bfb6:	428b      	cmp	r3, r1
 800bfb8:	d0fb      	beq.n	800bfb2 <memchr+0xa>
 800bfba:	3001      	adds	r0, #1
 800bfbc:	e7f6      	b.n	800bfac <memchr+0x4>

0800bfbe <__malloc_lock>:
 800bfbe:	4770      	bx	lr

0800bfc0 <__malloc_unlock>:
 800bfc0:	4770      	bx	lr
	...

0800bfc4 <__sread>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	000c      	movs	r4, r1
 800bfc8:	250e      	movs	r5, #14
 800bfca:	5f49      	ldrsh	r1, [r1, r5]
 800bfcc:	f000 f8a4 	bl	800c118 <_read_r>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	db03      	blt.n	800bfdc <__sread+0x18>
 800bfd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bfd6:	181b      	adds	r3, r3, r0
 800bfd8:	6563      	str	r3, [r4, #84]	; 0x54
 800bfda:	bd70      	pop	{r4, r5, r6, pc}
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	4a02      	ldr	r2, [pc, #8]	; (800bfe8 <__sread+0x24>)
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	81a3      	strh	r3, [r4, #12]
 800bfe4:	e7f9      	b.n	800bfda <__sread+0x16>
 800bfe6:	46c0      	nop			; (mov r8, r8)
 800bfe8:	ffffefff 	.word	0xffffefff

0800bfec <__swrite>:
 800bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfee:	001f      	movs	r7, r3
 800bff0:	898b      	ldrh	r3, [r1, #12]
 800bff2:	0005      	movs	r5, r0
 800bff4:	000c      	movs	r4, r1
 800bff6:	0016      	movs	r6, r2
 800bff8:	05db      	lsls	r3, r3, #23
 800bffa:	d505      	bpl.n	800c008 <__swrite+0x1c>
 800bffc:	230e      	movs	r3, #14
 800bffe:	5ec9      	ldrsh	r1, [r1, r3]
 800c000:	2200      	movs	r2, #0
 800c002:	2302      	movs	r3, #2
 800c004:	f000 f874 	bl	800c0f0 <_lseek_r>
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	4a05      	ldr	r2, [pc, #20]	; (800c020 <__swrite+0x34>)
 800c00c:	0028      	movs	r0, r5
 800c00e:	4013      	ands	r3, r2
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	0032      	movs	r2, r6
 800c014:	230e      	movs	r3, #14
 800c016:	5ee1      	ldrsh	r1, [r4, r3]
 800c018:	003b      	movs	r3, r7
 800c01a:	f000 f81f 	bl	800c05c <_write_r>
 800c01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c020:	ffffefff 	.word	0xffffefff

0800c024 <__sseek>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	000c      	movs	r4, r1
 800c028:	250e      	movs	r5, #14
 800c02a:	5f49      	ldrsh	r1, [r1, r5]
 800c02c:	f000 f860 	bl	800c0f0 <_lseek_r>
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	1c42      	adds	r2, r0, #1
 800c034:	d103      	bne.n	800c03e <__sseek+0x1a>
 800c036:	4a05      	ldr	r2, [pc, #20]	; (800c04c <__sseek+0x28>)
 800c038:	4013      	ands	r3, r2
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	bd70      	pop	{r4, r5, r6, pc}
 800c03e:	2280      	movs	r2, #128	; 0x80
 800c040:	0152      	lsls	r2, r2, #5
 800c042:	4313      	orrs	r3, r2
 800c044:	81a3      	strh	r3, [r4, #12]
 800c046:	6560      	str	r0, [r4, #84]	; 0x54
 800c048:	e7f8      	b.n	800c03c <__sseek+0x18>
 800c04a:	46c0      	nop			; (mov r8, r8)
 800c04c:	ffffefff 	.word	0xffffefff

0800c050 <__sclose>:
 800c050:	b510      	push	{r4, lr}
 800c052:	230e      	movs	r3, #14
 800c054:	5ec9      	ldrsh	r1, [r1, r3]
 800c056:	f000 f815 	bl	800c084 <_close_r>
 800c05a:	bd10      	pop	{r4, pc}

0800c05c <_write_r>:
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	0005      	movs	r5, r0
 800c060:	0008      	movs	r0, r1
 800c062:	0011      	movs	r1, r2
 800c064:	2200      	movs	r2, #0
 800c066:	4c06      	ldr	r4, [pc, #24]	; (800c080 <_write_r+0x24>)
 800c068:	6022      	str	r2, [r4, #0]
 800c06a:	001a      	movs	r2, r3
 800c06c:	f7f4 ff35 	bl	8000eda <_write>
 800c070:	1c43      	adds	r3, r0, #1
 800c072:	d103      	bne.n	800c07c <_write_r+0x20>
 800c074:	6823      	ldr	r3, [r4, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d000      	beq.n	800c07c <_write_r+0x20>
 800c07a:	602b      	str	r3, [r5, #0]
 800c07c:	bd70      	pop	{r4, r5, r6, pc}
 800c07e:	46c0      	nop			; (mov r8, r8)
 800c080:	200003e8 	.word	0x200003e8

0800c084 <_close_r>:
 800c084:	2300      	movs	r3, #0
 800c086:	b570      	push	{r4, r5, r6, lr}
 800c088:	4c06      	ldr	r4, [pc, #24]	; (800c0a4 <_close_r+0x20>)
 800c08a:	0005      	movs	r5, r0
 800c08c:	0008      	movs	r0, r1
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	f7f4 ff3f 	bl	8000f12 <_close>
 800c094:	1c43      	adds	r3, r0, #1
 800c096:	d103      	bne.n	800c0a0 <_close_r+0x1c>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d000      	beq.n	800c0a0 <_close_r+0x1c>
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	bd70      	pop	{r4, r5, r6, pc}
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	200003e8 	.word	0x200003e8

0800c0a8 <_fstat_r>:
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	b570      	push	{r4, r5, r6, lr}
 800c0ac:	4c06      	ldr	r4, [pc, #24]	; (800c0c8 <_fstat_r+0x20>)
 800c0ae:	0005      	movs	r5, r0
 800c0b0:	0008      	movs	r0, r1
 800c0b2:	0011      	movs	r1, r2
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	f7f4 ff36 	bl	8000f26 <_fstat>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d103      	bne.n	800c0c6 <_fstat_r+0x1e>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d000      	beq.n	800c0c6 <_fstat_r+0x1e>
 800c0c4:	602b      	str	r3, [r5, #0]
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}
 800c0c8:	200003e8 	.word	0x200003e8

0800c0cc <_isatty_r>:
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	b570      	push	{r4, r5, r6, lr}
 800c0d0:	4c06      	ldr	r4, [pc, #24]	; (800c0ec <_isatty_r+0x20>)
 800c0d2:	0005      	movs	r5, r0
 800c0d4:	0008      	movs	r0, r1
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	f7f4 ff33 	bl	8000f42 <_isatty>
 800c0dc:	1c43      	adds	r3, r0, #1
 800c0de:	d103      	bne.n	800c0e8 <_isatty_r+0x1c>
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d000      	beq.n	800c0e8 <_isatty_r+0x1c>
 800c0e6:	602b      	str	r3, [r5, #0]
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ea:	46c0      	nop			; (mov r8, r8)
 800c0ec:	200003e8 	.word	0x200003e8

0800c0f0 <_lseek_r>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	0005      	movs	r5, r0
 800c0f4:	0008      	movs	r0, r1
 800c0f6:	0011      	movs	r1, r2
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	4c06      	ldr	r4, [pc, #24]	; (800c114 <_lseek_r+0x24>)
 800c0fc:	6022      	str	r2, [r4, #0]
 800c0fe:	001a      	movs	r2, r3
 800c100:	f7f4 ff28 	bl	8000f54 <_lseek>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d103      	bne.n	800c110 <_lseek_r+0x20>
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d000      	beq.n	800c110 <_lseek_r+0x20>
 800c10e:	602b      	str	r3, [r5, #0]
 800c110:	bd70      	pop	{r4, r5, r6, pc}
 800c112:	46c0      	nop			; (mov r8, r8)
 800c114:	200003e8 	.word	0x200003e8

0800c118 <_read_r>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	0005      	movs	r5, r0
 800c11c:	0008      	movs	r0, r1
 800c11e:	0011      	movs	r1, r2
 800c120:	2200      	movs	r2, #0
 800c122:	4c06      	ldr	r4, [pc, #24]	; (800c13c <_read_r+0x24>)
 800c124:	6022      	str	r2, [r4, #0]
 800c126:	001a      	movs	r2, r3
 800c128:	f7f4 feba 	bl	8000ea0 <_read>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d103      	bne.n	800c138 <_read_r+0x20>
 800c130:	6823      	ldr	r3, [r4, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d000      	beq.n	800c138 <_read_r+0x20>
 800c136:	602b      	str	r3, [r5, #0]
 800c138:	bd70      	pop	{r4, r5, r6, pc}
 800c13a:	46c0      	nop			; (mov r8, r8)
 800c13c:	200003e8 	.word	0x200003e8

0800c140 <_init>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	46c0      	nop			; (mov r8, r8)
 800c144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c146:	bc08      	pop	{r3}
 800c148:	469e      	mov	lr, r3
 800c14a:	4770      	bx	lr

0800c14c <_fini>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	46c0      	nop			; (mov r8, r8)
 800c150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c152:	bc08      	pop	{r3}
 800c154:	469e      	mov	lr, r3
 800c156:	4770      	bx	lr
