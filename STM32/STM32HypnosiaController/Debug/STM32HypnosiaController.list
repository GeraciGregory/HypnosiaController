
STM32HypnosiaController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c054  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  0800c114  0800c114  0001c114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c95c  0800c95c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800c95c  0800c95c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c95c  0800c95c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c95c  0800c95c  0001c95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c960  0800c960  0001c960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000074  0800c9d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  0800c9d8  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ad6e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009ac7  00000000  00000000  0005ae0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f30  00000000  00000000  000648d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cb8  00000000  00000000  00066808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a05  00000000  00000000  000684c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026fd6  00000000  00000000  00089ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ab0a  00000000  00000000  000b0e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b9a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b84  00000000  00000000  0014ba20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c0fc 	.word	0x0800c0fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800c0fc 	.word	0x0800c0fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_SPI_RxCpltCallback>:
#include "app/Controller.h"
#include "stm32f0xx_it.h"
extern CAN_RxHeaderTypeDef myRxMessage;

extern "C" void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	4a07      	ldr	r2, [pc, #28]	; (8000420 <HAL_SPI_RxCpltCallback+0x2c>)
 8000402:	0019      	movs	r1, r3
 8000404:	0010      	movs	r0, r2
 8000406:	f002 f92f 	bl	8002668 <HAL_GPIO_TogglePin>
	Controller::getInstance()->onIrqSPI();
 800040a:	f005 f857 	bl	80054bc <_ZN10Controller11getInstanceEv>
 800040e:	0003      	movs	r3, r0
 8000410:	0018      	movs	r0, r3
 8000412:	f005 f886 	bl	8005522 <_ZN10Controller8onIrqSPIEv>
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	48001400 	.word	0x48001400

08000424 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern "C" void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	//Controller::getInstance()->readCANItFrame();
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	4a07      	ldr	r2, [pc, #28]	; (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000432:	0019      	movs	r1, r3
 8000434:	0010      	movs	r0, r2
 8000436:	f002 f917 	bl	8002668 <HAL_GPIO_TogglePin>
	Controller::getInstance()->onIrqCAN();
 800043a:	f005 f83f 	bl	80054bc <_ZN10Controller11getInstanceEv>
 800043e:	0003      	movs	r3, r0
 8000440:	0018      	movs	r0, r3
 8000442:	f005 f887 	bl	8005554 <_ZN10Controller8onIrqCANEv>
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	48001400 	.word	0x48001400

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fdda 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f84a 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f000 fa18 	bl	8000894 <MX_GPIO_Init>
  MX_DMA_Init();
 8000464:	f000 f9f8 	bl	8000858 <MX_DMA_Init>
  MX_CAN_Init();
 8000468:	f000 f8a4 	bl	80005b4 <MX_CAN_Init>
  MX_SPI1_Init();
 800046c:	f000 f8da 	bl	8000624 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000470:	f000 f9c2 	bl	80007f8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000474:	f000 f910 	bl	8000698 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <main+0x98>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  filterConfig.FilterIdHigh = 14;
 800047e:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <main+0x98>)
 8000480:	220e      	movs	r2, #14
 8000482:	601a      	str	r2, [r3, #0]
  filterConfig.FilterIdLow = 0;
 8000484:	4b19      	ldr	r3, [pc, #100]	; (80004ec <main+0x98>)
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  filterConfig.FilterMaskIdHigh = 0;
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <main+0x98>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  filterConfig.FilterMaskIdLow = 0;
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <main+0x98>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <main+0x98>)
 8000498:	2201      	movs	r2, #1
 800049a:	61da      	str	r2, [r3, #28]
  filterConfig.FilterActivation = ENABLE;
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <main+0x98>)
 800049e:	2201      	movs	r2, #1
 80004a0:	621a      	str	r2, [r3, #32]
  if(HAL_CAN_ConfigFilter(&hcan, &filterConfig) != HAL_OK)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <main+0x98>)
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <main+0x9c>)
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 ff01 	bl	80012b0 <HAL_CAN_ConfigFilter>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <main+0x62>
  {
	  Error_Handler();
 80004b2:	f000 fb13 	bl	8000adc <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan) != HAL_OK)  //Start CAN
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <main+0x9c>)
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 ffeb 	bl	8001494 <HAL_CAN_Start>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <main+0x72>
  {
	  Error_Handler();
 80004c2:	f000 fb0b 	bl	8000adc <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)//Enable CAN interrupt
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <main+0x9c>)
 80004c8:	2102      	movs	r1, #2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fa23 	bl	8001916 <HAL_CAN_ActivateNotification>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <main+0x84>
  {
	  Error_Handler();
 80004d4:	f000 fb02 	bl	8000adc <Error_Handler>
  }
  XF_initialize(10);
 80004d8:	200a      	movs	r0, #10
 80004da:	f009 fcf5 	bl	8009ec8 <XF_initialize>
  Factory_initialize();
 80004de:	f007 fd13 	bl	8007f08 <Factory_initialize>
  Factory_build();
 80004e2:	f007 fd18 	bl	8007f16 <Factory_build>
  XF_exec();
 80004e6:	f009 fcfd 	bl	8009ee4 <XF_exec>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <main+0x96>
 80004ec:	200001f8 	.word	0x200001f8
 80004f0:	20000220 	.word	0x20000220

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b099      	sub	sp, #100	; 0x64
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	242c      	movs	r4, #44	; 0x2c
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2334      	movs	r3, #52	; 0x34
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f00a fe3e 	bl	800b186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050a:	231c      	movs	r3, #28
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	0018      	movs	r0, r3
 8000510:	2310      	movs	r3, #16
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f00a fe36 	bl	800b186 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051a:	003b      	movs	r3, r7
 800051c:	0018      	movs	r0, r3
 800051e:	231c      	movs	r3, #28
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f00a fe2f 	bl	800b186 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000528:	0021      	movs	r1, r4
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2201      	movs	r2, #1
 8000534:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2202      	movs	r2, #2
 800053a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	0252      	lsls	r2, r2, #9
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	02d2      	lsls	r2, r2, #11
 800054a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	187b      	adds	r3, r7, r1
 8000554:	0018      	movs	r0, r3
 8000556:	f002 f8a3 	bl	80026a0 <HAL_RCC_OscConfig>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800055e:	f000 fabd 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	211c      	movs	r1, #28
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2207      	movs	r2, #7
 8000568:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2202      	movs	r2, #2
 800056e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2101      	movs	r1, #1
 8000580:	0018      	movs	r0, r3
 8000582:	f002 fc13 	bl	8002dac <HAL_RCC_ClockConfig>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058a:	f000 faa7 	bl	8000adc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800058e:	003b      	movs	r3, r7
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000594:	003b      	movs	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059a:	003b      	movs	r3, r7
 800059c:	0018      	movs	r0, r3
 800059e:	f002 fd7f 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 80005a2:	1e03      	subs	r3, r0, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005a6:	f000 fa99 	bl	8000adc <Error_Handler>
  }
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b019      	add	sp, #100	; 0x64
 80005b0:	bd90      	pop	{r4, r7, pc}
	...

080005b4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_CAN_Init+0x68>)
 80005ba:	4a19      	ldr	r2, [pc, #100]	; (8000620 <MX_CAN_Init+0x6c>)
 80005bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_CAN_Init+0x68>)
 80005c0:	2203      	movs	r2, #3
 80005c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_CAN_Init+0x68>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_CAN_Init+0x68>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_CAN_Init+0x68>)
 80005d2:	22c0      	movs	r2, #192	; 0xc0
 80005d4:	0312      	lsls	r2, r2, #12
 80005d6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_CAN_Init+0x68>)
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	0352      	lsls	r2, r2, #13
 80005de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_CAN_Init+0x68>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MX_CAN_Init+0x68>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_CAN_Init+0x68>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_CAN_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_CAN_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <MX_CAN_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_CAN_Init+0x68>)
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fd54 	bl	80010b4 <HAL_CAN_Init>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000610:	f000 fa64 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000220 	.word	0x20000220
 8000620:	40006400 	.word	0x40006400

08000624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_SPI1_Init+0x6c>)
 800062a:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <MX_SPI1_Init+0x70>)
 800062c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_SPI1_Init+0x6c>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_SPI1_Init+0x6c>)
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	00d2      	lsls	r2, r2, #3
 800063a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_SPI1_Init+0x6c>)
 800063e:	22e0      	movs	r2, #224	; 0xe0
 8000640:	00d2      	lsls	r2, r2, #3
 8000642:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_SPI1_Init+0x6c>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_SPI1_Init+0x6c>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_SPI1_Init+0x6c>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_SPI1_Init+0x6c>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_SPI1_Init+0x6c>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_SPI1_Init+0x6c>)
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_SPI1_Init+0x6c>)
 800066a:	2207      	movs	r2, #7
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_SPI1_Init+0x6c>)
 8000670:	2200      	movs	r2, #0
 8000672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_SPI1_Init+0x6c>)
 8000676:	2200      	movs	r2, #0
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <MX_SPI1_Init+0x6c>)
 800067c:	0018      	movs	r0, r3
 800067e:	f002 fe0f 	bl	80032a0 <HAL_SPI_Init>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000686:	f000 fa29 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000033c 	.word	0x2000033c
 8000694:	40013000 	.word	0x40013000

08000698 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	; 0x58
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	2348      	movs	r3, #72	; 0x48
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	0018      	movs	r0, r3
 80006a4:	2310      	movs	r3, #16
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f00a fd6c 	bl	800b186 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ae:	2340      	movs	r3, #64	; 0x40
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	0018      	movs	r0, r3
 80006b4:	2308      	movs	r3, #8
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f00a fd64 	bl	800b186 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006be:	2324      	movs	r3, #36	; 0x24
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	0018      	movs	r0, r3
 80006c4:	231c      	movs	r3, #28
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f00a fd5c 	bl	800b186 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	0018      	movs	r0, r3
 80006d2:	2320      	movs	r3, #32
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f00a fd55 	bl	800b186 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006dc:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <MX_TIM1_Init+0x158>)
 80006de:	4a45      	ldr	r2, [pc, #276]	; (80007f4 <MX_TIM1_Init+0x15c>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006e2:	4b43      	ldr	r3, [pc, #268]	; (80007f0 <MX_TIM1_Init+0x158>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b41      	ldr	r3, [pc, #260]	; (80007f0 <MX_TIM1_Init+0x158>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80006ee:	4b40      	ldr	r3, [pc, #256]	; (80007f0 <MX_TIM1_Init+0x158>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <MX_TIM1_Init+0x158>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006fa:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <MX_TIM1_Init+0x158>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000700:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <MX_TIM1_Init+0x158>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000706:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <MX_TIM1_Init+0x158>)
 8000708:	0018      	movs	r0, r3
 800070a:	f003 fcd7 	bl	80040bc <HAL_TIM_Base_Init>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000712:	f000 f9e3 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000716:	2148      	movs	r1, #72	; 0x48
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0152      	lsls	r2, r2, #5
 800071e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000720:	187a      	adds	r2, r7, r1
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <MX_TIM1_Init+0x158>)
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f003 fd76 	bl	8004218 <HAL_TIM_ConfigClockSource>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000730:	f000 f9d4 	bl	8000adc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000734:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_TIM1_Init+0x158>)
 8000736:	0018      	movs	r0, r3
 8000738:	f003 fcec 	bl	8004114 <HAL_TIM_OC_Init>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000740:	f000 f9cc 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000752:	187a      	adds	r2, r7, r1
 8000754:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_TIM1_Init+0x158>)
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f004 f931 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000762:	f000 f9bb 	bl	8000adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000766:	2124      	movs	r1, #36	; 0x24
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	1879      	adds	r1, r7, r1
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_TIM1_Init+0x158>)
 8000796:	2200      	movs	r2, #0
 8000798:	0018      	movs	r0, r3
 800079a:	f003 fcef 	bl	800417c <HAL_TIM_OC_ConfigChannel>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80007a2:	f000 f99b 	bl	8000adc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	0192      	lsls	r2, r2, #6
 80007ca:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d2:	1d3a      	adds	r2, r7, #4
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_TIM1_Init+0x158>)
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f004 f94f 	bl	8004a7c <HAL_TIMEx_ConfigBreakDeadTime>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80007e2:	f000 f97b 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b016      	add	sp, #88	; 0x58
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200002fc 	.word	0x200002fc
 80007f4:	40012c00 	.word	0x40012c00

080007f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART1_UART_Init+0x58>)
 80007fe:	4a15      	ldr	r2, [pc, #84]	; (8000854 <MX_USART1_UART_Init+0x5c>)
 8000800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000804:	2296      	movs	r2, #150	; 0x96
 8000806:	0212      	lsls	r2, r2, #8
 8000808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART1_UART_Init+0x58>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MX_USART1_UART_Init+0x58>)
 800083c:	0018      	movs	r0, r3
 800083e:	f004 f97b 	bl	8004b38 <HAL_UART_Init>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000846:	f000 f949 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000027c 	.word	0x2000027c
 8000854:	40013800 	.word	0x40013800

08000858 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_DMA_Init+0x38>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_DMA_Init+0x38>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_DMA_Init+0x38>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	200a      	movs	r0, #10
 800087c:	f001 fb32 	bl	8001ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000880:	200a      	movs	r0, #10
 8000882:	f001 fb44 	bl	8001f0e <HAL_NVIC_EnableIRQ>

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08d      	sub	sp, #52	; 0x34
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	241c      	movs	r4, #28
 800089c:	193b      	adds	r3, r7, r4
 800089e:	0018      	movs	r0, r3
 80008a0:	2314      	movs	r3, #20
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f00a fc6e 	bl	800b186 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	4b81      	ldr	r3, [pc, #516]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	4b80      	ldr	r3, [pc, #512]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0389      	lsls	r1, r1, #14
 80008b4:	430a      	orrs	r2, r1
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	4b7d      	ldr	r3, [pc, #500]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008ba:	695a      	ldr	r2, [r3, #20]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	039b      	lsls	r3, r3, #14
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	4b7a      	ldr	r3, [pc, #488]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	4b79      	ldr	r3, [pc, #484]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	03c9      	lsls	r1, r1, #15
 80008d0:	430a      	orrs	r2, r1
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	4b76      	ldr	r3, [pc, #472]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008d6:	695a      	ldr	r2, [r3, #20]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	03db      	lsls	r3, r3, #15
 80008dc:	4013      	ands	r3, r2
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b73      	ldr	r3, [pc, #460]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008e4:	695a      	ldr	r2, [r3, #20]
 80008e6:	4b72      	ldr	r3, [pc, #456]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	0289      	lsls	r1, r1, #10
 80008ec:	430a      	orrs	r2, r1
 80008ee:	615a      	str	r2, [r3, #20]
 80008f0:	4b6f      	ldr	r3, [pc, #444]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 80008f2:	695a      	ldr	r2, [r3, #20]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	029b      	lsls	r3, r3, #10
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	4b6b      	ldr	r3, [pc, #428]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	02c9      	lsls	r1, r1, #11
 8000908:	430a      	orrs	r2, r1
 800090a:	615a      	str	r2, [r3, #20]
 800090c:	4b68      	ldr	r3, [pc, #416]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 800090e:	695a      	ldr	r2, [r3, #20]
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	02db      	lsls	r3, r3, #11
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 800091c:	695a      	ldr	r2, [r3, #20]
 800091e:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0349      	lsls	r1, r1, #13
 8000924:	430a      	orrs	r2, r1
 8000926:	615a      	str	r2, [r3, #20]
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 800092a:	695a      	ldr	r2, [r3, #20]
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	035b      	lsls	r3, r3, #13
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b5e      	ldr	r3, [pc, #376]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	4b5d      	ldr	r3, [pc, #372]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0309      	lsls	r1, r1, #12
 8000940:	430a      	orrs	r2, r1
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	4b5a      	ldr	r3, [pc, #360]	; (8000ab0 <MX_GPIO_Init+0x21c>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	031b      	lsls	r3, r3, #12
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_1_Pin|M5_Am_Pin|M5_Bm_Pin, GPIO_PIN_RESET);
 8000952:	4958      	ldr	r1, [pc, #352]	; (8000ab4 <MX_GPIO_Init+0x220>)
 8000954:	4b58      	ldr	r3, [pc, #352]	; (8000ab8 <MX_GPIO_Init+0x224>)
 8000956:	2200      	movs	r2, #0
 8000958:	0018      	movs	r0, r3
 800095a:	f001 fe68 	bl	800262e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M5_Cm_Pin|M5_Ah_Pin|M5_Bh_Pin|M5_Ch_Pin 
 800095e:	4957      	ldr	r1, [pc, #348]	; (8000abc <MX_GPIO_Init+0x228>)
 8000960:	2390      	movs	r3, #144	; 0x90
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	2200      	movs	r2, #0
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fe61 	bl	800262e <HAL_GPIO_WritePin>
                          |M3_Am_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M4_Am_Pin|M1_Bh_Pin|M1_Ch_Pin|STBY_Pin 
 800096c:	4954      	ldr	r1, [pc, #336]	; (8000ac0 <MX_GPIO_Init+0x22c>)
 800096e:	4b55      	ldr	r3, [pc, #340]	; (8000ac4 <MX_GPIO_Init+0x230>)
 8000970:	2200      	movs	r2, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fe5b 	bl	800262e <HAL_GPIO_WritePin>
                          |M2_Am_Pin|M2_Bm_Pin|M2_Cm_Pin|TP3_Pin 
                          |TP2_Pin|TP1_Pin|M6_Am_Pin|M6_Bm_Pin 
                          |M6_Cm_Pin|M6_Ah_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M4_Bm_Pin|M4_Cm_Pin|M4_Ah_Pin|M4_Bh_Pin 
 8000978:	4953      	ldr	r1, [pc, #332]	; (8000ac8 <MX_GPIO_Init+0x234>)
 800097a:	4b54      	ldr	r3, [pc, #336]	; (8000acc <MX_GPIO_Init+0x238>)
 800097c:	2200      	movs	r2, #0
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fe55 	bl	800262e <HAL_GPIO_WritePin>
                          |M4_Ch_Pin|M1_Am_Pin|M1_Bm_Pin|M1_Cm_Pin 
                          |M1_Ah_Pin|M6_Bh_Pin|M6_Ch_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M2_Ah_Pin|M2_Bh_Pin|M2_Ch_Pin|M3_Bh_Pin 
 8000984:	4952      	ldr	r1, [pc, #328]	; (8000ad0 <MX_GPIO_Init+0x23c>)
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000988:	2200      	movs	r2, #0
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fe4f 	bl	800262e <HAL_GPIO_WritePin>
                          |M3_Ch_Pin|TP8_Pin|TP7_Pin|TP6_Pin 
                          |TP5_Pin|TP4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M3_Bm_Pin|M3_Cm_Pin|M3_Ah_Pin, GPIO_PIN_RESET);
 8000990:	23e0      	movs	r3, #224	; 0xe0
 8000992:	015b      	lsls	r3, r3, #5
 8000994:	4850      	ldr	r0, [pc, #320]	; (8000ad8 <MX_GPIO_Init+0x244>)
 8000996:	2200      	movs	r2, #0
 8000998:	0019      	movs	r1, r3
 800099a:	f001 fe48 	bl	800262e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_0_Pin SW_1_Pin SW_2_Pin SW_3_Pin 
                           SW_4_Pin */
  GPIO_InitStruct.Pin = SW_0_Pin|SW_1_Pin|SW_2_Pin|SW_3_Pin 
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	227c      	movs	r2, #124	; 0x7c
 80009a2:	601a      	str	r2, [r3, #0]
                          |SW_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2202      	movs	r2, #2
 80009ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	4a46      	ldr	r2, [pc, #280]	; (8000acc <MX_GPIO_Init+0x238>)
 80009b4:	0019      	movs	r1, r3
 80009b6:	0010      	movs	r0, r2
 80009b8:	f001 fca4 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin M5_Am_Pin M5_Bm_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|M5_Am_Pin|M5_Bm_Pin;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	4a3d      	ldr	r2, [pc, #244]	; (8000ab4 <MX_GPIO_Init+0x220>)
 80009c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2201      	movs	r2, #1
 80009c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <MX_GPIO_Init+0x224>)
 80009d8:	0019      	movs	r1, r3
 80009da:	0010      	movs	r0, r2
 80009dc:	f001 fc92 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : M5_Cm_Pin M5_Ah_Pin M5_Bh_Pin M5_Ch_Pin 
                           M3_Am_Pin */
  GPIO_InitStruct.Pin = M5_Cm_Pin|M5_Ah_Pin|M5_Bh_Pin|M5_Ch_Pin 
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	4a36      	ldr	r2, [pc, #216]	; (8000abc <MX_GPIO_Init+0x228>)
 80009e4:	601a      	str	r2, [r3, #0]
                          |M3_Am_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2201      	movs	r2, #1
 80009ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	193a      	adds	r2, r7, r4
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	0011      	movs	r1, r2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 fc7f 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_Am_Pin M1_Bh_Pin M1_Ch_Pin STBY_Pin 
                           M2_Am_Pin M2_Bm_Pin M2_Cm_Pin TP3_Pin 
                           TP2_Pin TP1_Pin M6_Am_Pin M6_Bm_Pin 
                           M6_Cm_Pin M6_Ah_Pin */
  GPIO_InitStruct.Pin = M4_Am_Pin|M1_Bh_Pin|M1_Ch_Pin|STBY_Pin 
 8000a06:	0021      	movs	r1, r4
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0x22c>)
 8000a0c:	601a      	str	r2, [r3, #0]
                          |M2_Am_Pin|M2_Bm_Pin|M2_Cm_Pin|TP3_Pin 
                          |TP2_Pin|TP1_Pin|M6_Am_Pin|M6_Bm_Pin 
                          |M6_Cm_Pin|M6_Ah_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2201      	movs	r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	000c      	movs	r4, r1
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0x230>)
 8000a26:	0019      	movs	r1, r3
 8000a28:	0010      	movs	r0, r2
 8000a2a:	f001 fc6b 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_Bm_Pin M4_Cm_Pin M4_Ah_Pin M4_Bh_Pin 
                           M4_Ch_Pin M1_Am_Pin M1_Bm_Pin M1_Cm_Pin 
                           M1_Ah_Pin M6_Bh_Pin M6_Ch_Pin */
  GPIO_InitStruct.Pin = M4_Bm_Pin|M4_Cm_Pin|M4_Ah_Pin|M4_Bh_Pin 
 8000a2e:	0021      	movs	r1, r4
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <MX_GPIO_Init+0x234>)
 8000a34:	601a      	str	r2, [r3, #0]
                          |M4_Ch_Pin|M1_Am_Pin|M1_Bm_Pin|M1_Cm_Pin 
                          |M1_Ah_Pin|M6_Bh_Pin|M6_Ch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a48:	000c      	movs	r4, r1
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <MX_GPIO_Init+0x238>)
 8000a4e:	0019      	movs	r1, r3
 8000a50:	0010      	movs	r0, r2
 8000a52:	f001 fc57 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_Ah_Pin M2_Bh_Pin M2_Ch_Pin M3_Bh_Pin 
                           M3_Ch_Pin TP8_Pin TP7_Pin TP6_Pin 
                           TP5_Pin TP4_Pin */
  GPIO_InitStruct.Pin = M2_Ah_Pin|M2_Bh_Pin|M2_Ch_Pin|M3_Bh_Pin 
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <MX_GPIO_Init+0x23c>)
 8000a5c:	601a      	str	r2, [r3, #0]
                          |M3_Ch_Pin|TP8_Pin|TP7_Pin|TP6_Pin 
                          |TP5_Pin|TP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2201      	movs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a70:	000c      	movs	r4, r1
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000a76:	0019      	movs	r1, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f001 fc43 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_Bm_Pin M3_Cm_Pin M3_Ah_Pin */
  GPIO_InitStruct.Pin = M3_Bm_Pin|M3_Cm_Pin|M3_Ah_Pin;
 8000a7e:	0021      	movs	r1, r4
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	22e0      	movs	r2, #224	; 0xe0
 8000a84:	0152      	lsls	r2, r2, #5
 8000a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <MX_GPIO_Init+0x244>)
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	f001 fc2f 	bl	8002304 <HAL_GPIO_Init>

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b00d      	add	sp, #52	; 0x34
 8000aac:	bd90      	pop	{r4, r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	0000040c 	.word	0x0000040c
 8000ab8:	48001400 	.word	0x48001400
 8000abc:	0000800f 	.word	0x0000800f
 8000ac0:	0000fffc 	.word	0x0000fffc
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	0000ff83 	.word	0x0000ff83
 8000acc:	48001000 	.word	0x48001000
 8000ad0:	000007fb 	.word	0x000007fb
 8000ad4:	48000c00 	.word	0x48000c00
 8000ad8:	48000800 	.word	0x48000800

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x44>)
 8000af0:	699a      	ldr	r2, [r3, #24]
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_MspInit+0x44>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	430a      	orrs	r2, r1
 8000af8:	619a      	str	r2, [r3, #24]
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_MspInit+0x44>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	2201      	movs	r2, #1
 8000b00:	4013      	ands	r3, r2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x44>)
 8000b08:	69da      	ldr	r2, [r3, #28]
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_MspInit+0x44>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0549      	lsls	r1, r1, #21
 8000b10:	430a      	orrs	r2, r1
 8000b12:	61da      	str	r2, [r3, #28]
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_MspInit+0x44>)
 8000b16:	69da      	ldr	r2, [r3, #28]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	055b      	lsls	r3, r3, #21
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	2314      	movs	r3, #20
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	2314      	movs	r3, #20
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f00a fb1f 	bl	800b186 <memset>
  if(hcan->Instance==CAN)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <HAL_CAN_MspInit+0xa4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d13b      	bne.n	8000bca <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <HAL_CAN_MspInit+0xa8>)
 8000b54:	69da      	ldr	r2, [r3, #28]
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_CAN_MspInit+0xa8>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	0489      	lsls	r1, r1, #18
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	61da      	str	r2, [r3, #28]
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_CAN_MspInit+0xa8>)
 8000b62:	69da      	ldr	r2, [r3, #28]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	049b      	lsls	r3, r3, #18
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_CAN_MspInit+0xa8>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_CAN_MspInit+0xa8>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0289      	lsls	r1, r1, #10
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_CAN_MspInit+0xa8>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	029b      	lsls	r3, r3, #10
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b8a:	2114      	movs	r1, #20
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	22c0      	movs	r2, #192	; 0xc0
 8000b90:	0152      	lsls	r2, r2, #5
 8000b92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2202      	movs	r2, #2
 8000b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2204      	movs	r2, #4
 8000baa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	187a      	adds	r2, r7, r1
 8000bae:	2390      	movs	r3, #144	; 0x90
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 fba5 	bl	8002304 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	201e      	movs	r0, #30
 8000bc0:	f001 f990 	bl	8001ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000bc4:	201e      	movs	r0, #30
 8000bc6:	f001 f9a2 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b00a      	add	sp, #40	; 0x28
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40006400 	.word	0x40006400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	2314      	movs	r3, #20
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	0018      	movs	r0, r3
 8000bea:	2314      	movs	r3, #20
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f00a fac9 	bl	800b186 <memset>
  if(hspi->Instance==SPI1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a33      	ldr	r2, [pc, #204]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d160      	bne.n	8000cc0 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfe:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <HAL_SPI_MspInit+0xf0>)
 8000c00:	699a      	ldr	r2, [r3, #24]
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <HAL_SPI_MspInit+0xf0>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	0149      	lsls	r1, r1, #5
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	619a      	str	r2, [r3, #24]
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <HAL_SPI_MspInit+0xf0>)
 8000c0e:	699a      	ldr	r2, [r3, #24]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	015b      	lsls	r3, r3, #5
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <HAL_SPI_MspInit+0xf0>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <HAL_SPI_MspInit+0xf0>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0289      	lsls	r1, r1, #10
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <HAL_SPI_MspInit+0xf0>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	029b      	lsls	r3, r3, #10
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c36:	2114      	movs	r1, #20
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	22f0      	movs	r2, #240	; 0xf0
 8000c3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2202      	movs	r2, #2
 8000c42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	187a      	adds	r2, r7, r1
 8000c58:	2390      	movs	r3, #144	; 0x90
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f001 fb50 	bl	8002304 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <HAL_SPI_MspInit+0xf8>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f001 f956 	bl	8001f48 <HAL_DMA_Init>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8000ca0:	f7ff ff1c 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000ca8:	659a      	str	r2, [r3, #88]	; 0x58
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2019      	movs	r0, #25
 8000cb6:	f001 f915 	bl	8001ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f001 f927 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b00a      	add	sp, #40	; 0x28
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013000 	.word	0x40013000
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	200003a0 	.word	0x200003a0
 8000cd4:	4002001c 	.word	0x4002001c

08000cd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_TIM_Base_MspInit+0x38>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d10d      	bne.n	8000d06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_TIM_Base_MspInit+0x3c>)
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	0109      	lsls	r1, r1, #4
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	619a      	str	r2, [r3, #24]
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_TIM_Base_MspInit+0x3c>)
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b004      	add	sp, #16
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40012c00 	.word	0x40012c00
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	2314      	movs	r3, #20
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	0018      	movs	r0, r3
 8000d26:	2314      	movs	r3, #20
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f00a fa2b 	bl	800b186 <memset>
  if(huart->Instance==USART1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d133      	bne.n	8000da2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0x98>)
 8000d3c:	699a      	ldr	r2, [r3, #24]
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_UART_MspInit+0x98>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	01c9      	lsls	r1, r1, #7
 8000d44:	430a      	orrs	r2, r1
 8000d46:	619a      	str	r2, [r3, #24]
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0x98>)
 8000d4a:	699a      	ldr	r2, [r3, #24]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	01db      	lsls	r3, r3, #7
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_UART_MspInit+0x98>)
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0x98>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	0289      	lsls	r1, r1, #10
 8000d60:	430a      	orrs	r2, r1
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_UART_MspInit+0x98>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d72:	2114      	movs	r1, #20
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	22c0      	movs	r2, #192	; 0xc0
 8000d78:	00d2      	lsls	r2, r2, #3
 8000d7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2202      	movs	r2, #2
 8000d80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2201      	movs	r2, #1
 8000d92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	187a      	adds	r2, r7, r1
 8000d96:	2390      	movs	r3, #144	; 0x90
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f001 fab1 	bl	8002304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b00a      	add	sp, #40	; 0x28
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40013800 	.word	0x40013800
 8000db0:	40021000 	.word	0x40021000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if (PORT_IDF_STM32CUBE != 0)
	if ((HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000ddc:	f000 f960 	bl	80010a0 <HAL_GetTick>
 8000de0:	0004      	movs	r4, r0
 8000de2:	f00a f8f5 	bl	800afd0 <XF_tickIntervalInMilliseconds>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff fa12 	bl	8000214 <__aeabi_uidivmod>
 8000df0:	1e0b      	subs	r3, r1, #0
 8000df2:	d101      	bne.n	8000df8 <SysTick_Handler+0x20>
	{
		XF_tick();
 8000df4:	f00a f8d6 	bl	800afa4 <XF_tick>
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f001 f992 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	200003a0 	.word	0x200003a0

08000e18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <SPI1_IRQHandler+0x14>)
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f002 fdc0 	bl	80039a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	2000033c 	.word	0x2000033c

08000e30 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <CEC_CAN_IRQHandler+0x14>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 fd97 	bl	800196a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	20000220 	.word	0x20000220

08000e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	return 1;
 8000e4c:	2301      	movs	r3, #1
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_kill>:

int _kill(int pid, int sig)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e5e:	f00a f931 	bl	800b0c4 <__errno>
 8000e62:	0003      	movs	r3, r0
 8000e64:	2216      	movs	r2, #22
 8000e66:	601a      	str	r2, [r3, #0]
	return -1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_exit>:

void _exit (int status)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	425a      	negs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff ffe5 	bl	8000e54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e8a:	e7fe      	b.n	8000e8a <_exit+0x16>

08000e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e00a      	b.n	8000eb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e9e:	e000      	b.n	8000ea2 <_read+0x16>
 8000ea0:	bf00      	nop
 8000ea2:	0001      	movs	r1, r0
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	b2ca      	uxtb	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dbf0      	blt.n	8000e9e <_read+0x12>
	}

return len;
 8000ebc:	687b      	ldr	r3, [r7, #4]
}
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b006      	add	sp, #24
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e009      	b.n	8000eec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	60ba      	str	r2, [r7, #8]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	e000      	b.n	8000ee6 <_write+0x20>
 8000ee4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf1      	blt.n	8000ed8 <_write+0x12>
	}
	return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b006      	add	sp, #24
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_close>:

int _close(int file)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return -1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	425b      	negs	r3, r3
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	0192      	lsls	r2, r2, #6
 8000f22:	605a      	str	r2, [r3, #4]
	return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_isatty>:

int _isatty(int file)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	return 1;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b004      	add	sp, #16
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x50>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x16>
		heap_end = &end;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <_sbrk+0x50>)
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <_sbrk+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <_sbrk+0x50>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <_sbrk+0x50>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	18d3      	adds	r3, r2, r3
 8000f7c:	466a      	mov	r2, sp
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d907      	bls.n	8000f92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f82:	f00a f89f 	bl	800b0c4 <__errno>
 8000f86:	0003      	movs	r3, r0
 8000f88:	220c      	movs	r2, #12
 8000f8a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	425b      	negs	r3, r3
 8000f90:	e006      	b.n	8000fa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <_sbrk+0x50>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	18d2      	adds	r2, r2, r3
 8000f9a:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <_sbrk+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000090 	.word	0x20000090
 8000fac:	200003f0 	.word	0x200003f0

08000fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fbe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd8:	4c0b      	ldr	r4, [pc, #44]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fe6:	f7ff ffe3 	bl	8000fb0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fea:	f00a f881 	bl	800b0f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fa31 	bl	8000454 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   r0, =_estack
 8000ff4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001000:	0800c964 	.word	0x0800c964
  ldr r2, =_sbss
 8001004:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001008:	200003ec 	.word	0x200003ec

0800100c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_COMP_IRQHandler>
	...

08001010 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <HAL_Init+0x24>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_Init+0x24>)
 800101a:	2110      	movs	r1, #16
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001020:	2000      	movs	r0, #0
 8001022:	f000 f809 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001026:	f7ff fd5f 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_InitTick+0x5c>)
 8001042:	681c      	ldr	r4, [r3, #0]
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_InitTick+0x60>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	0019      	movs	r1, r3
 800104a:	23fa      	movs	r3, #250	; 0xfa
 800104c:	0098      	lsls	r0, r3, #2
 800104e:	f7ff f85b 	bl	8000108 <__udivsi3>
 8001052:	0003      	movs	r3, r0
 8001054:	0019      	movs	r1, r3
 8001056:	0020      	movs	r0, r4
 8001058:	f7ff f856 	bl	8000108 <__udivsi3>
 800105c:	0003      	movs	r3, r0
 800105e:	0018      	movs	r0, r3
 8001060:	f000 ff65 	bl	8001f2e <HAL_SYSTICK_Config>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d001      	beq.n	800106c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e00f      	b.n	800108c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80b      	bhi.n	800108a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	2301      	movs	r3, #1
 8001076:	425b      	negs	r3, r3
 8001078:	2200      	movs	r2, #0
 800107a:	0018      	movs	r0, r3
 800107c:	f000 ff32 	bl	8001ee4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_InitTick+0x64>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b003      	add	sp, #12
 8001092:	bd90      	pop	{r4, r7, pc}
 8001094:	20000000 	.word	0x20000000
 8001098:	20000008 	.word	0x20000008
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	200003e4 	.word	0x200003e4

080010b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e0f0      	b.n	80012a8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2220      	movs	r2, #32
 80010ca:	5c9b      	ldrb	r3, [r3, r2]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d103      	bne.n	80010da <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fd2b 	bl	8000b30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2102      	movs	r1, #2
 80010e6:	438a      	bics	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ea:	f7ff ffd9 	bl	80010a0 <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f2:	e013      	b.n	800111c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f4:	f7ff ffd4 	bl	80010a0 <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b0a      	cmp	r3, #10
 8001100:	d90c      	bls.n	800111c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	0292      	lsls	r2, r2, #10
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2220      	movs	r2, #32
 8001114:	2105      	movs	r1, #5
 8001116:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0c5      	b.n	80012a8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d1e5      	bne.n	80010f4 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2101      	movs	r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001138:	f7ff ffb2 	bl	80010a0 <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001140:	e013      	b.n	800116a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001142:	f7ff ffad 	bl	80010a0 <HAL_GetTick>
 8001146:	0002      	movs	r2, r0
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b0a      	cmp	r3, #10
 800114e:	d90c      	bls.n	800116a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	0292      	lsls	r2, r2, #10
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2220      	movs	r2, #32
 8001162:	2105      	movs	r1, #5
 8001164:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e09e      	b.n	80012a8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	4013      	ands	r3, r2
 8001174:	d0e5      	beq.n	8001142 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7e1b      	ldrb	r3, [r3, #24]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	438a      	bics	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e5b      	ldrb	r3, [r3, #25]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d108      	bne.n	80011ba <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2140      	movs	r1, #64	; 0x40
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e007      	b.n	80011ca <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2140      	movs	r1, #64	; 0x40
 80011c6:	438a      	bics	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7e9b      	ldrb	r3, [r3, #26]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2120      	movs	r1, #32
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2120      	movs	r1, #32
 80011f0:	438a      	bics	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7edb      	ldrb	r3, [r3, #27]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2110      	movs	r1, #16
 8001208:	438a      	bics	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2110      	movs	r1, #16
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7f1b      	ldrb	r3, [r3, #28]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2108      	movs	r1, #8
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2108      	movs	r1, #8
 8001244:	438a      	bics	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7f5b      	ldrb	r3, [r3, #29]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2104      	movs	r1, #4
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2104      	movs	r1, #4
 800126e:	438a      	bics	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	431a      	orrs	r2, r3
 8001288:	0011      	movs	r1, r2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2220      	movs	r2, #32
 80012a2:	2101      	movs	r1, #1
 80012a4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b004      	add	sp, #16
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c0:	2013      	movs	r0, #19
 80012c2:	183b      	adds	r3, r7, r0
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	2120      	movs	r1, #32
 80012c8:	5c52      	ldrb	r2, [r2, r1]
 80012ca:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80012cc:	183b      	adds	r3, r7, r0
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_CAN_ConfigFilter+0x30>
 80012d4:	2313      	movs	r3, #19
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d000      	beq.n	80012e0 <HAL_CAN_ConfigFilter+0x30>
 80012de:	e0cd      	b.n	800147c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	58d3      	ldr	r3, [r2, r3]
 80012e8:	2201      	movs	r2, #1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	0011      	movs	r1, r2
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	221f      	movs	r2, #31
 80012fc:	4013      	ands	r3, r2
 80012fe:	2201      	movs	r2, #1
 8001300:	409a      	lsls	r2, r3
 8001302:	0013      	movs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	2387      	movs	r3, #135	; 0x87
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	58d3      	ldr	r3, [r2, r3]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	43d2      	mvns	r2, r2
 8001312:	401a      	ands	r2, r3
 8001314:	0011      	movs	r1, r2
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	2387      	movs	r3, #135	; 0x87
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d129      	bne.n	800137a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	2383      	movs	r3, #131	; 0x83
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	58d3      	ldr	r3, [r2, r3]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	43d2      	mvns	r2, r2
 8001332:	401a      	ands	r2, r3
 8001334:	0011      	movs	r1, r2
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	2383      	movs	r3, #131	; 0x83
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001350:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3248      	adds	r2, #72	; 0x48
 8001356:	00d2      	lsls	r2, r2, #3
 8001358:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800136e:	6979      	ldr	r1, [r7, #20]
 8001370:	3348      	adds	r3, #72	; 0x48
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	18cb      	adds	r3, r1, r3
 8001376:	3304      	adds	r3, #4
 8001378:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d128      	bne.n	80013d4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	2383      	movs	r3, #131	; 0x83
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	58d2      	ldr	r2, [r2, r3]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	431a      	orrs	r2, r3
 800138e:	0011      	movs	r1, r2
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	2383      	movs	r3, #131	; 0x83
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013aa:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3248      	adds	r2, #72	; 0x48
 80013b0:	00d2      	lsls	r2, r2, #3
 80013b2:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c8:	6979      	ldr	r1, [r7, #20]
 80013ca:	3348      	adds	r3, #72	; 0x48
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	18cb      	adds	r3, r1, r3
 80013d0:	3304      	adds	r3, #4
 80013d2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10c      	bne.n	80013f6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	2381      	movs	r3, #129	; 0x81
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	58d3      	ldr	r3, [r2, r3]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	43d2      	mvns	r2, r2
 80013e8:	401a      	ands	r2, r3
 80013ea:	0011      	movs	r1, r2
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	2381      	movs	r3, #129	; 0x81
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	50d1      	str	r1, [r2, r3]
 80013f4:	e00a      	b.n	800140c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	2381      	movs	r3, #129	; 0x81
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	58d2      	ldr	r2, [r2, r3]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	431a      	orrs	r2, r3
 8001402:	0011      	movs	r1, r2
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	2381      	movs	r3, #129	; 0x81
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10c      	bne.n	800142e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	2385      	movs	r3, #133	; 0x85
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	58d3      	ldr	r3, [r2, r3]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	43d2      	mvns	r2, r2
 8001420:	401a      	ands	r2, r3
 8001422:	0011      	movs	r1, r2
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	2385      	movs	r3, #133	; 0x85
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	50d1      	str	r1, [r2, r3]
 800142c:	e00a      	b.n	8001444 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	2385      	movs	r3, #133	; 0x85
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	58d2      	ldr	r2, [r2, r3]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	431a      	orrs	r2, r3
 800143a:	0011      	movs	r1, r2
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	2385      	movs	r3, #133	; 0x85
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d10a      	bne.n	8001462 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	2387      	movs	r3, #135	; 0x87
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	58d2      	ldr	r2, [r2, r3]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	431a      	orrs	r2, r3
 8001458:	0011      	movs	r1, r2
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	2387      	movs	r3, #135	; 0x87
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	58d3      	ldr	r3, [r2, r3]
 800146a:	2201      	movs	r2, #1
 800146c:	4393      	bics	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e007      	b.n	800148c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	02d2      	lsls	r2, r2, #11
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
  }
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b006      	add	sp, #24
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2220      	movs	r2, #32
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d12f      	bne.n	8001508 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	2102      	movs	r1, #2
 80014ae:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2101      	movs	r1, #1
 80014bc:	438a      	bics	r2, r1
 80014be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff fdee 	bl	80010a0 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014c8:	e013      	b.n	80014f2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ca:	f7ff fde9 	bl	80010a0 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b0a      	cmp	r3, #10
 80014d6:	d90c      	bls.n	80014f2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	0292      	lsls	r2, r2, #10
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2220      	movs	r2, #32
 80014ea:	2105      	movs	r1, #5
 80014ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e012      	b.n	8001518 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	4013      	ands	r3, r2
 80014fc:	d1e5      	bne.n	80014ca <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	e007      	b.n	8001518 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	0312      	lsls	r2, r2, #12
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
  }
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800152e:	201f      	movs	r0, #31
 8001530:	183b      	adds	r3, r7, r0
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	2120      	movs	r1, #32
 8001536:	5c52      	ldrb	r2, [r2, r1]
 8001538:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001542:	183b      	adds	r3, r7, r0
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d005      	beq.n	8001556 <HAL_CAN_AddTxMessage+0x36>
 800154a:	231f      	movs	r3, #31
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d000      	beq.n	8001556 <HAL_CAN_AddTxMessage+0x36>
 8001554:	e0b7      	b.n	80016c6 <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	04db      	lsls	r3, r3, #19
 800155c:	4013      	ands	r3, r2
 800155e:	d10a      	bne.n	8001576 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	051b      	lsls	r3, r3, #20
 8001566:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001568:	d105      	bne.n	8001576 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	055b      	lsls	r3, r3, #21
 8001570:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001572:	d100      	bne.n	8001576 <HAL_CAN_AddTxMessage+0x56>
 8001574:	e09e      	b.n	80016b4 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	0e1b      	lsrs	r3, r3, #24
 800157a:	2203      	movs	r2, #3
 800157c:	4013      	ands	r3, r2
 800157e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d908      	bls.n	8001598 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	431a      	orrs	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e09e      	b.n	80016d6 <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001598:	2201      	movs	r2, #1
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	409a      	lsls	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10c      	bne.n	80015c4 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4311      	orrs	r1, r2
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	3218      	adds	r2, #24
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	50d1      	str	r1, [r2, r3]
 80015c2:	e00f      	b.n	80015e4 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ce:	431a      	orrs	r2, r3
 80015d0:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80015da:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	3218      	adds	r2, #24
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3318      	adds	r3, #24
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	18cb      	adds	r3, r1, r3
 80015f4:	3304      	adds	r3, #4
 80015f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	7d1b      	ldrb	r3, [r3, #20]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d112      	bne.n	8001626 <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3318      	adds	r3, #24
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	18d3      	adds	r3, r2, r3
 800160c:	3304      	adds	r3, #4
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3318      	adds	r3, #24
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	18cb      	adds	r3, r1, r3
 8001622:	3304      	adds	r3, #4
 8001624:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3307      	adds	r3, #7
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	061a      	lsls	r2, r3, #24
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3306      	adds	r3, #6
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3305      	adds	r3, #5
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	0019      	movs	r1, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	6979      	ldr	r1, [r7, #20]
 8001652:	23c6      	movs	r3, #198	; 0xc6
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	0109      	lsls	r1, r1, #4
 8001658:	1841      	adds	r1, r0, r1
 800165a:	18cb      	adds	r3, r1, r3
 800165c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3303      	adds	r3, #3
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	061a      	lsls	r2, r3, #24
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3302      	adds	r3, #2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3301      	adds	r3, #1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	0019      	movs	r1, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	6979      	ldr	r1, [r7, #20]
 8001688:	23c4      	movs	r3, #196	; 0xc4
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	0109      	lsls	r1, r1, #4
 800168e:	1841      	adds	r1, r0, r1
 8001690:	18cb      	adds	r3, r1, r3
 8001692:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	3218      	adds	r2, #24
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	58d2      	ldr	r2, [r2, r3]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	4311      	orrs	r1, r2
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	3218      	adds	r2, #24
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e010      	b.n	80016d6 <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	2280      	movs	r2, #128	; 0x80
 80016ba:	0392      	lsls	r2, r2, #14
 80016bc:	431a      	orrs	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e007      	b.n	80016d6 <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	02d2      	lsls	r2, r2, #11
 80016ce:	431a      	orrs	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
  }
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b008      	add	sp, #32
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ec:	2017      	movs	r0, #23
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	2120      	movs	r1, #32
 80016f4:	5c52      	ldrb	r2, [r2, r1]
 80016f6:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d005      	beq.n	800170c <HAL_CAN_GetRxMessage+0x2e>
 8001700:	2317      	movs	r3, #23
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d000      	beq.n	800170c <HAL_CAN_GetRxMessage+0x2e>
 800170a:	e0f8      	b.n	80018fe <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10e      	bne.n	8001730 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2203      	movs	r2, #3
 800171a:	4013      	ands	r3, r2
 800171c:	d117      	bne.n	800174e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	0392      	lsls	r2, r2, #14
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0ee      	b.n	800190e <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2203      	movs	r2, #3
 8001738:	4013      	ands	r3, r2
 800173a:	d108      	bne.n	800174e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	0392      	lsls	r2, r2, #14
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0df      	b.n	800190e <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	321b      	adds	r2, #27
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	58d3      	ldr	r3, [r2, r3]
 800175a:	2204      	movs	r2, #4
 800175c:	401a      	ands	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10b      	bne.n	8001782 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	321b      	adds	r2, #27
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	58d3      	ldr	r3, [r2, r3]
 8001776:	0d5b      	lsrs	r3, r3, #21
 8001778:	055b      	lsls	r3, r3, #21
 800177a:	0d5a      	lsrs	r2, r3, #21
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e00a      	b.n	8001798 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	321b      	adds	r2, #27
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	58d3      	ldr	r3, [r2, r3]
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	321b      	adds	r2, #27
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	58d3      	ldr	r3, [r2, r3]
 80017a4:	2202      	movs	r2, #2
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	331b      	adds	r3, #27
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	18d3      	adds	r3, r2, r3
 80017b8:	3304      	adds	r3, #4
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	220f      	movs	r2, #15
 80017be:	401a      	ands	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	331b      	adds	r3, #27
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	3304      	adds	r3, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	401a      	ands	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	331b      	adds	r3, #27
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	18d3      	adds	r3, r2, r3
 80017ea:	3304      	adds	r3, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0c1b      	lsrs	r3, r3, #16
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	0c1a      	lsrs	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	23dc      	movs	r3, #220	; 0xdc
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	188a      	adds	r2, r1, r2
 8001806:	18d3      	adds	r3, r2, r3
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	23dc      	movs	r3, #220	; 0xdc
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	188a      	adds	r2, r1, r2
 800181e:	18d3      	adds	r3, r2, r3
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0a1a      	lsrs	r2, r3, #8
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	23dc      	movs	r3, #220	; 0xdc
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	188a      	adds	r2, r1, r2
 800183a:	18d3      	adds	r3, r2, r3
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0c1a      	lsrs	r2, r3, #16
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	3302      	adds	r3, #2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6819      	ldr	r1, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	23dc      	movs	r3, #220	; 0xdc
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	188a      	adds	r2, r1, r2
 8001856:	18d3      	adds	r3, r2, r3
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0e1a      	lsrs	r2, r3, #24
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	3303      	adds	r3, #3
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	23de      	movs	r3, #222	; 0xde
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	188a      	adds	r2, r1, r2
 8001872:	18d3      	adds	r3, r2, r3
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3304      	adds	r3, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	23de      	movs	r3, #222	; 0xde
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	188a      	adds	r2, r1, r2
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0a1a      	lsrs	r2, r3, #8
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	3305      	adds	r3, #5
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	23de      	movs	r3, #222	; 0xde
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	188a      	adds	r2, r1, r2
 80018a8:	18d3      	adds	r3, r2, r3
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0c1a      	lsrs	r2, r3, #16
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3306      	adds	r3, #6
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	23de      	movs	r3, #222	; 0xde
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	188a      	adds	r2, r1, r2
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0e1a      	lsrs	r2, r3, #24
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	3307      	adds	r3, #7
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d108      	bne.n	80018ea <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2120      	movs	r1, #32
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	e007      	b.n	80018fa <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2120      	movs	r1, #32
 80018f6:	430a      	orrs	r2, r1
 80018f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e007      	b.n	800190e <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	02d2      	lsls	r2, r2, #11
 8001906:	431a      	orrs	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
  }
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b006      	add	sp, #24
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001920:	200f      	movs	r0, #15
 8001922:	183b      	adds	r3, r7, r0
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	2120      	movs	r1, #32
 8001928:	5c52      	ldrb	r2, [r2, r1]
 800192a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800192c:	183b      	adds	r3, r7, r0
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d004      	beq.n	800193e <HAL_CAN_ActivateNotification+0x28>
 8001934:	230f      	movs	r3, #15
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d109      	bne.n	8001952 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6959      	ldr	r1, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e007      	b.n	8001962 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	02d2      	lsls	r2, r2, #11
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
  }
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b08a      	sub	sp, #40	; 0x28
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4013      	ands	r3, r2
 80019ac:	d100      	bne.n	80019b0 <HAL_CAN_IRQHandler+0x46>
 80019ae:	e084      	b.n	8001aba <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d024      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d004      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 f97e 	bl	8001ccc <HAL_CAN_TxMailbox0CompleteCallback>
 80019d0:	e017      	b.n	8001a02 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2204      	movs	r2, #4
 80019d6:	4013      	ands	r3, r2
 80019d8:	d005      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	4313      	orrs	r3, r2
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	e00d      	b.n	8001a02 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2208      	movs	r2, #8
 80019ea:	4013      	ands	r3, r2
 80019ec:	d005      	beq.n	80019fa <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0152      	lsls	r2, r2, #5
 80019f4:	4313      	orrs	r3, r2
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e003      	b.n	8001a02 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 f97d 	bl	8001cfc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d028      	beq.n	8001a5e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	0052      	lsls	r2, r2, #1
 8001a14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d004      	beq.n	8001a2a <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 f95a 	bl	8001cdc <HAL_CAN_TxMailbox1CompleteCallback>
 8001a28:	e019      	b.n	8001a5e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4013      	ands	r3, r2
 8001a32:	d005      	beq.n	8001a40 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	0192      	lsls	r2, r2, #6
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e00e      	b.n	8001a5e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4013      	ands	r3, r2
 8001a48:	d005      	beq.n	8001a56 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	01d2      	lsls	r2, r2, #7
 8001a50:	4313      	orrs	r3, r2
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	e003      	b.n	8001a5e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f000 f957 	bl	8001d0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	025b      	lsls	r3, r3, #9
 8001a64:	4013      	ands	r3, r2
 8001a66:	d028      	beq.n	8001aba <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	0252      	lsls	r2, r2, #9
 8001a70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	029b      	lsls	r3, r3, #10
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d004      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 f934 	bl	8001cec <HAL_CAN_TxMailbox2CompleteCallback>
 8001a84:	e019      	b.n	8001aba <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	02db      	lsls	r3, r3, #11
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d005      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	0212      	lsls	r2, r2, #8
 8001a96:	4313      	orrs	r3, r2
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	e00e      	b.n	8001aba <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	031b      	lsls	r3, r3, #12
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d005      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	0252      	lsls	r2, r2, #9
 8001aac:	4313      	orrs	r3, r2
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	e003      	b.n	8001aba <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f931 	bl	8001d1c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	2208      	movs	r2, #8
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d00c      	beq.n	8001adc <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d008      	beq.n	8001adc <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2210      	movs	r2, #16
 8001ada:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d00b      	beq.n	8001afc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d007      	beq.n	8001afc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2208      	movs	r2, #8
 8001af2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f918 	bl	8001d2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	2202      	movs	r2, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7fe fc86 	bl	8000424 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	2240      	movs	r2, #64	; 0x40
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d00c      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2210      	movs	r2, #16
 8001b24:	4013      	ands	r3, r2
 8001b26:	d008      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	00d2      	lsls	r2, r2, #3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2210      	movs	r2, #16
 8001b38:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d00b      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2208      	movs	r2, #8
 8001b46:	4013      	ands	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2208      	movs	r2, #8
 8001b50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 f8f9 	bl	8001d4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d009      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 f8e3 	bl	8001d3c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b76:	6a3a      	ldr	r2, [r7, #32]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d00b      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2210      	movs	r2, #16
 8001b84:	4013      	ands	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 f8e2 	bl	8001d5c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b98:	6a3a      	ldr	r2, [r7, #32]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	025b      	lsls	r3, r3, #9
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d00b      	beq.n	8001bba <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d007      	beq.n	8001bba <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2208      	movs	r2, #8
 8001bb0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 f8d9 	bl	8001d6c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bba:	6a3a      	ldr	r2, [r7, #32]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <HAL_CAN_IRQHandler+0x25c>
 8001bc4:	e071      	b.n	8001caa <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <HAL_CAN_IRQHandler+0x266>
 8001bce:	e068      	b.n	8001ca2 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001be0:	d003      	beq.n	8001bea <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	2201      	movs	r2, #1
 8001be6:	4313      	orrs	r3, r2
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bea:	6a3a      	ldr	r2, [r7, #32]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bfa:	d003      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4313      	orrs	r3, r2
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2204      	movs	r2, #4
 8001c12:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c14:	d003      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	2204      	movs	r2, #4
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c1e:	6a3a      	ldr	r2, [r7, #32]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d03c      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2270      	movs	r2, #112	; 0x70
 8001c2c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c2e:	d038      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2270      	movs	r2, #112	; 0x70
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b30      	cmp	r3, #48	; 0x30
 8001c38:	d016      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x2fe>
 8001c3a:	d804      	bhi.n	8001c46 <HAL_CAN_IRQHandler+0x2dc>
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d009      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x2ea>
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d00c      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c44:	e025      	b.n	8001c92 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001c46:	2b50      	cmp	r3, #80	; 0x50
 8001c48:	d018      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x312>
 8001c4a:	2b60      	cmp	r3, #96	; 0x60
 8001c4c:	d01b      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x31c>
 8001c4e:	2b40      	cmp	r3, #64	; 0x40
 8001c50:	d00f      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x308>
            break;
 8001c52:	e01e      	b.n	8001c92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	2208      	movs	r2, #8
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c5c:	e019      	b.n	8001c92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	2210      	movs	r2, #16
 8001c62:	4313      	orrs	r3, r2
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c66:	e014      	b.n	8001c92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c70:	e00f      	b.n	8001c92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	4313      	orrs	r3, r2
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c7a:	e00a      	b.n	8001c92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	4313      	orrs	r3, r2
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c84:	e005      	b.n	8001c92 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	0052      	lsls	r2, r2, #1
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c90:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2170      	movs	r1, #112	; 0x70
 8001c9e:	438a      	bics	r2, r1
 8001ca0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 f85c 	bl	8001d7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b00a      	add	sp, #40	; 0x28
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b002      	add	sp, #8
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	0002      	movs	r2, r0
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9e:	d809      	bhi.n	8001db4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	001a      	movs	r2, r3
 8001da6:	231f      	movs	r3, #31
 8001da8:	401a      	ands	r2, r3
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <__NVIC_EnableIRQ+0x30>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	4091      	lsls	r1, r2
 8001db0:	000a      	movs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
  }
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd4:	d828      	bhi.n	8001e28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd6:	4a2f      	ldr	r2, [pc, #188]	; (8001e94 <__NVIC_SetPriority+0xd4>)
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	33c0      	adds	r3, #192	; 0xc0
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	589b      	ldr	r3, [r3, r2]
 8001de6:	1dfa      	adds	r2, r7, #7
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	0011      	movs	r1, r2
 8001dec:	2203      	movs	r2, #3
 8001dee:	400a      	ands	r2, r1
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	21ff      	movs	r1, #255	; 0xff
 8001df4:	4091      	lsls	r1, r2
 8001df6:	000a      	movs	r2, r1
 8001df8:	43d2      	mvns	r2, r2
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	22ff      	movs	r2, #255	; 0xff
 8001e04:	401a      	ands	r2, r3
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	4003      	ands	r3, r0
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e14:	481f      	ldr	r0, [pc, #124]	; (8001e94 <__NVIC_SetPriority+0xd4>)
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	33c0      	adds	r3, #192	; 0xc0
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e26:	e031      	b.n	8001e8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <__NVIC_SetPriority+0xd8>)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	0019      	movs	r1, r3
 8001e30:	230f      	movs	r3, #15
 8001e32:	400b      	ands	r3, r1
 8001e34:	3b08      	subs	r3, #8
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3306      	adds	r3, #6
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	18d3      	adds	r3, r2, r3
 8001e3e:	3304      	adds	r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1dfa      	adds	r2, r7, #7
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	0011      	movs	r1, r2
 8001e48:	2203      	movs	r2, #3
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	00d2      	lsls	r2, r2, #3
 8001e4e:	21ff      	movs	r1, #255	; 0xff
 8001e50:	4091      	lsls	r1, r2
 8001e52:	000a      	movs	r2, r1
 8001e54:	43d2      	mvns	r2, r2
 8001e56:	401a      	ands	r2, r3
 8001e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	22ff      	movs	r2, #255	; 0xff
 8001e60:	401a      	ands	r2, r3
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	0018      	movs	r0, r3
 8001e68:	2303      	movs	r3, #3
 8001e6a:	4003      	ands	r3, r0
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e70:	4809      	ldr	r0, [pc, #36]	; (8001e98 <__NVIC_SetPriority+0xd8>)
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	001c      	movs	r4, r3
 8001e78:	230f      	movs	r3, #15
 8001e7a:	4023      	ands	r3, r4
 8001e7c:	3b08      	subs	r3, #8
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	430a      	orrs	r2, r1
 8001e82:	3306      	adds	r3, #6
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	18c3      	adds	r3, r0, r3
 8001e88:	3304      	adds	r3, #4
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b003      	add	sp, #12
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	; (8001edc <SysTick_Config+0x40>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e010      	b.n	8001ed4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <SysTick_Config+0x44>)
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	425b      	negs	r3, r3
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff ff7d 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <SysTick_Config+0x44>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SysTick_Config+0x44>)
 8001ece:	2207      	movs	r2, #7
 8001ed0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	00ffffff 	.word	0x00ffffff
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	210f      	movs	r1, #15
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	1c02      	adds	r2, r0, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	0011      	movs	r1, r2
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	0002      	movs	r2, r0
 8001f16:	1dfb      	adds	r3, r7, #7
 8001f18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff ff33 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff ffaf 	bl	8001e9c <SysTick_Config>
 8001f3e:	0003      	movs	r3, r0
}
 8001f40:	0018      	movs	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e036      	b.n	8001fcc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	2102      	movs	r1, #2
 8001f64:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_DMA_Init+0x8c>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 f98c 	bl	80022cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2221      	movs	r2, #33	; 0x21
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}  
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b004      	add	sp, #16
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	ffffc00f 	.word	0xffffc00f

08001fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2317      	movs	r3, #23
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	5c9b      	ldrb	r3, [r3, r2]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_DMA_Start_IT+0x24>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e04f      	b.n	800209c <HAL_DMA_Start_IT+0xc4>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	2101      	movs	r1, #1
 8002002:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2221      	movs	r2, #33	; 0x21
 8002008:	5c9b      	ldrb	r3, [r3, r2]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d13a      	bne.n	8002086 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2221      	movs	r2, #33	; 0x21
 8002014:	2102      	movs	r1, #2
 8002016:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	438a      	bics	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f91d 	bl	8002274 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	210e      	movs	r1, #14
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e00f      	b.n	8002074 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	210a      	movs	r1, #10
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2104      	movs	r1, #4
 8002070:	438a      	bics	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2101      	movs	r1, #1
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	e007      	b.n	8002096 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	2100      	movs	r1, #0
 800208c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800208e:	2317      	movs	r3, #23
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002096:	2317      	movs	r3, #23
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	781b      	ldrb	r3, [r3, #0]
} 
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b006      	add	sp, #24
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	230f      	movs	r3, #15
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2221      	movs	r2, #33	; 0x21
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d007      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2204      	movs	r2, #4
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020c6:	230f      	movs	r3, #15
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e028      	b.n	8002122 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	210e      	movs	r1, #14
 80020dc:	438a      	bics	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2101      	movs	r1, #1
 80020ec:	438a      	bics	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	2101      	movs	r1, #1
 80020fa:	4091      	lsls	r1, r2
 80020fc:	000a      	movs	r2, r1
 80020fe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2221      	movs	r2, #33	; 0x21
 8002104:	2101      	movs	r1, #1
 8002106:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	0010      	movs	r0, r2
 8002120:	4798      	blx	r3
    } 
  }
  return status;
 8002122:	230f      	movs	r3, #15
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	781b      	ldrb	r3, [r3, #0]
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b004      	add	sp, #16
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2204      	movs	r2, #4
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4013      	ands	r3, r2
 8002156:	d024      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x72>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2204      	movs	r2, #4
 800215c:	4013      	ands	r3, r2
 800215e:	d020      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2220      	movs	r2, #32
 8002168:	4013      	ands	r3, r2
 800216a:	d107      	bne.n	800217c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2104      	movs	r1, #4
 8002178:	438a      	bics	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	2104      	movs	r1, #4
 8002186:	4091      	lsls	r1, r2
 8002188:	000a      	movs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d100      	bne.n	8002196 <HAL_DMA_IRQHandler+0x66>
 8002194:	e06a      	b.n	800226c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	0010      	movs	r0, r2
 800219e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80021a0:	e064      	b.n	800226c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2202      	movs	r2, #2
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_DMA_IRQHandler+0xda>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d027      	beq.n	800220a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2220      	movs	r2, #32
 80021c2:	4013      	ands	r3, r2
 80021c4:	d10b      	bne.n	80021de <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	210a      	movs	r1, #10
 80021d2:	438a      	bics	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2221      	movs	r2, #33	; 0x21
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	2102      	movs	r1, #2
 80021e8:	4091      	lsls	r1, r2
 80021ea:	000a      	movs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	2100      	movs	r1, #0
 80021f4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d036      	beq.n	800226c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	0010      	movs	r0, r2
 8002206:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002208:	e030      	b.n	800226c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2208      	movs	r2, #8
 8002210:	409a      	lsls	r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	d028      	beq.n	800226c <HAL_DMA_IRQHandler+0x13c>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2208      	movs	r2, #8
 800221e:	4013      	ands	r3, r2
 8002220:	d024      	beq.n	800226c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	210e      	movs	r1, #14
 800222e:	438a      	bics	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2101      	movs	r1, #1
 800223c:	4091      	lsls	r1, r2
 800223e:	000a      	movs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2221      	movs	r2, #33	; 0x21
 800224c:	2101      	movs	r1, #1
 800224e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	2100      	movs	r1, #0
 8002256:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	0010      	movs	r0, r2
 8002268:	4798      	blx	r3
    }
   }
}  
 800226a:	e7ff      	b.n	800226c <HAL_DMA_IRQHandler+0x13c>
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	b004      	add	sp, #16
 8002272:	bd80      	pop	{r7, pc}

08002274 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	2101      	movs	r1, #1
 800228c:	4091      	lsls	r1, r2
 800228e:	000a      	movs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d108      	bne.n	80022b4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022b2:	e007      	b.n	80022c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b004      	add	sp, #16
 80022ca:	bd80      	pop	{r7, pc}

080022cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <DMA_CalcBaseAndBitshift+0x30>)
 80022da:	4694      	mov	ip, r2
 80022dc:	4463      	add	r3, ip
 80022de:	2114      	movs	r1, #20
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fd ff11 	bl	8000108 <__udivsi3>
 80022e6:	0003      	movs	r3, r0
 80022e8:	009a      	lsls	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <DMA_CalcBaseAndBitshift+0x34>)
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	bffdfff8 	.word	0xbffdfff8
 8002300:	40020000 	.word	0x40020000

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	e155      	b.n	80025c0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4091      	lsls	r1, r2
 800231e:	000a      	movs	r2, r1
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d100      	bne.n	800232c <HAL_GPIO_Init+0x28>
 800232a:	e146      	b.n	80025ba <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x38>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	58d3      	ldr	r3, [r2, r3]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2207      	movs	r2, #7
 800234e:	4013      	ands	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	409a      	lsls	r2, r3
 8002356:	0013      	movs	r3, r2
 8002358:	43da      	mvns	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2107      	movs	r1, #7
 8002368:	400b      	ands	r3, r1
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	409a      	lsls	r2, r3
 800236e:	0013      	movs	r3, r2
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	6939      	ldr	r1, [r7, #16]
 8002382:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	409a      	lsls	r2, r3
 8002392:	0013      	movs	r3, r2
 8002394:	43da      	mvns	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2203      	movs	r2, #3
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	409a      	lsls	r2, r3
 80023aa:	0013      	movs	r3, r2
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d00b      	beq.n	80023d8 <HAL_GPIO_Init+0xd4>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d007      	beq.n	80023d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023cc:	2b11      	cmp	r3, #17
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d130      	bne.n	800243a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	409a      	lsls	r2, r3
 80023e6:	0013      	movs	r3, r2
 80023e8:	43da      	mvns	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	409a      	lsls	r2, r3
 80023fa:	0013      	movs	r3, r2
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800240e:	2201      	movs	r2, #1
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
 8002414:	0013      	movs	r3, r2
 8002416:	43da      	mvns	r2, r3
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	2201      	movs	r2, #1
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
 800242c:	0013      	movs	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	409a      	lsls	r2, r3
 8002448:	0013      	movs	r3, r2
 800244a:	43da      	mvns	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	409a      	lsls	r2, r3
 800245c:	0013      	movs	r3, r2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	055b      	lsls	r3, r3, #21
 8002472:	4013      	ands	r3, r2
 8002474:	d100      	bne.n	8002478 <HAL_GPIO_Init+0x174>
 8002476:	e0a0      	b.n	80025ba <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002478:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <HAL_GPIO_Init+0x2d4>)
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	4b56      	ldr	r3, [pc, #344]	; (80025d8 <HAL_GPIO_Init+0x2d4>)
 800247e:	2101      	movs	r1, #1
 8002480:	430a      	orrs	r2, r1
 8002482:	619a      	str	r2, [r3, #24]
 8002484:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_GPIO_Init+0x2d4>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002490:	4a52      	ldr	r2, [pc, #328]	; (80025dc <HAL_GPIO_Init+0x2d8>)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	589b      	ldr	r3, [r3, r2]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4013      	ands	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	409a      	lsls	r2, r3
 80024aa:	0013      	movs	r3, r2
 80024ac:	43da      	mvns	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	2390      	movs	r3, #144	; 0x90
 80024b8:	05db      	lsls	r3, r3, #23
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d019      	beq.n	80024f2 <HAL_GPIO_Init+0x1ee>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a47      	ldr	r2, [pc, #284]	; (80025e0 <HAL_GPIO_Init+0x2dc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0x1ea>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a46      	ldr	r2, [pc, #280]	; (80025e4 <HAL_GPIO_Init+0x2e0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00d      	beq.n	80024ea <HAL_GPIO_Init+0x1e6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_GPIO_Init+0x2e4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_GPIO_Init+0x1e2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a44      	ldr	r2, [pc, #272]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_GPIO_Init+0x1de>
 80024de:	2304      	movs	r3, #4
 80024e0:	e008      	b.n	80024f4 <HAL_GPIO_Init+0x1f0>
 80024e2:	2305      	movs	r3, #5
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x1f0>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e004      	b.n	80024f4 <HAL_GPIO_Init+0x1f0>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_Init+0x1f0>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_GPIO_Init+0x1f0>
 80024f2:	2300      	movs	r3, #0
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	2103      	movs	r1, #3
 80024f8:	400a      	ands	r2, r1
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	4093      	lsls	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002504:	4935      	ldr	r1, [pc, #212]	; (80025dc <HAL_GPIO_Init+0x2d8>)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002512:	4b37      	ldr	r3, [pc, #220]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	43da      	mvns	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	025b      	lsls	r3, r3, #9
 800252a:	4013      	ands	r3, r2
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800253c:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43da      	mvns	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	4013      	ands	r3, r2
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002566:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43da      	mvns	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	035b      	lsls	r3, r3, #13
 800257e:	4013      	ands	r3, r2
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002590:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	43da      	mvns	r2, r3
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	039b      	lsls	r3, r3, #14
 80025a8:	4013      	ands	r3, r2
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	40da      	lsrs	r2, r3
 80025c8:	1e13      	subs	r3, r2, #0
 80025ca:	d000      	beq.n	80025ce <HAL_GPIO_Init+0x2ca>
 80025cc:	e6a2      	b.n	8002314 <HAL_GPIO_Init+0x10>
  } 
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b006      	add	sp, #24
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010000 	.word	0x40010000
 80025e0:	48000400 	.word	0x48000400
 80025e4:	48000800 	.word	0x48000800
 80025e8:	48000c00 	.word	0x48000c00
 80025ec:	48001000 	.word	0x48001000
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	000a      	movs	r2, r1
 80025fe:	1cbb      	adds	r3, r7, #2
 8002600:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	1cba      	adds	r2, r7, #2
 8002608:	8812      	ldrh	r2, [r2, #0]
 800260a:	4013      	ands	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800260e:	230f      	movs	r3, #15
 8002610:	18fb      	adds	r3, r7, r3
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e003      	b.n	8002620 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002618:	230f      	movs	r3, #15
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002620:	230f      	movs	r3, #15
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	781b      	ldrb	r3, [r3, #0]
  }
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b004      	add	sp, #16
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	0008      	movs	r0, r1
 8002638:	0011      	movs	r1, r2
 800263a:	1cbb      	adds	r3, r7, #2
 800263c:	1c02      	adds	r2, r0, #0
 800263e:	801a      	strh	r2, [r3, #0]
 8002640:	1c7b      	adds	r3, r7, #1
 8002642:	1c0a      	adds	r2, r1, #0
 8002644:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002646:	1c7b      	adds	r3, r7, #1
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264e:	1cbb      	adds	r3, r7, #2
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002656:	e003      	b.n	8002660 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002658:	1cbb      	adds	r3, r7, #2
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	000a      	movs	r2, r1
 8002672:	1cbb      	adds	r3, r7, #2
 8002674:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	1cba      	adds	r2, r7, #2
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	4013      	ands	r3, r2
 8002680:	d005      	beq.n	800268e <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002682:	1cbb      	adds	r3, r7, #2
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	041a      	lsls	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268e:	1cbb      	adds	r3, r7, #2
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	619a      	str	r2, [r3, #24]
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f000 fb76 	bl	8002da0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	d100      	bne.n	80026c0 <HAL_RCC_OscConfig+0x20>
 80026be:	e08e      	b.n	80027de <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026c0:	4bc5      	ldr	r3, [pc, #788]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	220c      	movs	r2, #12
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d00e      	beq.n	80026ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026cc:	4bc2      	ldr	r3, [pc, #776]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	220c      	movs	r2, #12
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d117      	bne.n	8002708 <HAL_RCC_OscConfig+0x68>
 80026d8:	4bbf      	ldr	r3, [pc, #764]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	23c0      	movs	r3, #192	; 0xc0
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	401a      	ands	r2, r3
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	025b      	lsls	r3, r3, #9
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d10e      	bne.n	8002708 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ea:	4bbb      	ldr	r3, [pc, #748]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	4013      	ands	r3, r2
 80026f4:	d100      	bne.n	80026f8 <HAL_RCC_OscConfig+0x58>
 80026f6:	e071      	b.n	80027dc <HAL_RCC_OscConfig+0x13c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d000      	beq.n	8002702 <HAL_RCC_OscConfig+0x62>
 8002700:	e06c      	b.n	80027dc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	f000 fb4c 	bl	8002da0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x80>
 8002710:	4bb1      	ldr	r3, [pc, #708]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4bb0      	ldr	r3, [pc, #704]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	0249      	lsls	r1, r1, #9
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e02f      	b.n	8002780 <HAL_RCC_OscConfig+0xe0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0xa2>
 8002728:	4bab      	ldr	r3, [pc, #684]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4baa      	ldr	r3, [pc, #680]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800272e:	49ab      	ldr	r1, [pc, #684]	; (80029dc <HAL_RCC_OscConfig+0x33c>)
 8002730:	400a      	ands	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	4ba8      	ldr	r3, [pc, #672]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4ba7      	ldr	r3, [pc, #668]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800273a:	49a9      	ldr	r1, [pc, #676]	; (80029e0 <HAL_RCC_OscConfig+0x340>)
 800273c:	400a      	ands	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e01e      	b.n	8002780 <HAL_RCC_OscConfig+0xe0>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d10e      	bne.n	8002768 <HAL_RCC_OscConfig+0xc8>
 800274a:	4ba3      	ldr	r3, [pc, #652]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4ba2      	ldr	r3, [pc, #648]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	02c9      	lsls	r1, r1, #11
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	4b9f      	ldr	r3, [pc, #636]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b9e      	ldr	r3, [pc, #632]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	0249      	lsls	r1, r1, #9
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0xe0>
 8002768:	4b9b      	ldr	r3, [pc, #620]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b9a      	ldr	r3, [pc, #616]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800276e:	499b      	ldr	r1, [pc, #620]	; (80029dc <HAL_RCC_OscConfig+0x33c>)
 8002770:	400a      	ands	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	4b98      	ldr	r3, [pc, #608]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b97      	ldr	r3, [pc, #604]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800277a:	4999      	ldr	r1, [pc, #612]	; (80029e0 <HAL_RCC_OscConfig+0x340>)
 800277c:	400a      	ands	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d014      	beq.n	80027b2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe fc8a 	bl	80010a0 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002792:	f7fe fc85 	bl	80010a0 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	; 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e2fd      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	4b8c      	ldr	r3, [pc, #560]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	029b      	lsls	r3, r3, #10
 80027ac:	4013      	ands	r3, r2
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0xf2>
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe fc75 	bl	80010a0 <HAL_GetTick>
 80027b6:	0003      	movs	r3, r0
 80027b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027bc:	f7fe fc70 	bl	80010a0 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e2e8      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	029b      	lsls	r3, r3, #10
 80027d6:	4013      	ands	r3, r2
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x11c>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2202      	movs	r2, #2
 80027e4:	4013      	ands	r3, r2
 80027e6:	d100      	bne.n	80027ea <HAL_RCC_OscConfig+0x14a>
 80027e8:	e06c      	b.n	80028c4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027ea:	4b7b      	ldr	r3, [pc, #492]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	220c      	movs	r2, #12
 80027f0:	4013      	ands	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027f4:	4b78      	ldr	r3, [pc, #480]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	220c      	movs	r2, #12
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d11f      	bne.n	8002840 <HAL_RCC_OscConfig+0x1a0>
 8002800:	4b75      	ldr	r3, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	23c0      	movs	r3, #192	; 0xc0
 8002806:	025b      	lsls	r3, r3, #9
 8002808:	401a      	ands	r2, r3
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	429a      	cmp	r2, r3
 8002810:	d116      	bne.n	8002840 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	4b71      	ldr	r3, [pc, #452]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x188>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e2bb      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b6b      	ldr	r3, [pc, #428]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	22f8      	movs	r2, #248	; 0xf8
 800282e:	4393      	bics	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00da      	lsls	r2, r3, #3
 8002838:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	e041      	b.n	80028c4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d024      	beq.n	8002892 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002848:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b62      	ldr	r3, [pc, #392]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800284e:	2101      	movs	r1, #1
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fc24 	bl	80010a0 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fc1f 	bl	80010a0 <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e297      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d0f1      	beq.n	800285e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	22f8      	movs	r2, #248	; 0xf8
 8002880:	4393      	bics	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	00da      	lsls	r2, r3, #3
 800288a:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e018      	b.n	80028c4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002892:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002898:	2101      	movs	r1, #1
 800289a:	438a      	bics	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe fbff 	bl	80010a0 <HAL_GetTick>
 80028a2:	0003      	movs	r3, r0
 80028a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fbfa 	bl	80010a0 <HAL_GetTick>
 80028ac:	0002      	movs	r2, r0
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e272      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	d1f1      	bne.n	80028a8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2208      	movs	r2, #8
 80028ca:	4013      	ands	r3, r2
 80028cc:	d036      	beq.n	800293c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d019      	beq.n	800290a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d6:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80028d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028da:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80028dc:	2101      	movs	r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fbdd 	bl	80010a0 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ec:	f7fe fbd8 	bl	80010a0 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e250      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	d0f1      	beq.n	80028ec <HAL_RCC_OscConfig+0x24c>
 8002908:	e018      	b.n	800293c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290a:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800290c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290e:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002910:	2101      	movs	r1, #1
 8002912:	438a      	bics	r2, r1
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fbc3 	bl	80010a0 <HAL_GetTick>
 800291a:	0003      	movs	r3, r0
 800291c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe fbbe 	bl	80010a0 <HAL_GetTick>
 8002924:	0002      	movs	r2, r0
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e236      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002932:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	2202      	movs	r2, #2
 8002938:	4013      	ands	r3, r2
 800293a:	d1f1      	bne.n	8002920 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2204      	movs	r2, #4
 8002942:	4013      	ands	r3, r2
 8002944:	d100      	bne.n	8002948 <HAL_RCC_OscConfig+0x2a8>
 8002946:	e0b5      	b.n	8002ab4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002948:	231f      	movs	r3, #31
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002952:	69da      	ldr	r2, [r3, #28]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	055b      	lsls	r3, r3, #21
 8002958:	4013      	ands	r3, r2
 800295a:	d111      	bne.n	8002980 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	0549      	lsls	r1, r1, #21
 8002966:	430a      	orrs	r2, r1
 8002968:	61da      	str	r2, [r3, #28]
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	055b      	lsls	r3, r3, #21
 8002972:	4013      	ands	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002978:	231f      	movs	r3, #31
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_RCC_OscConfig+0x344>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4013      	ands	r3, r2
 800298a:	d11a      	bne.n	80029c2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_RCC_OscConfig+0x344>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_RCC_OscConfig+0x344>)
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	0049      	lsls	r1, r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7fe fb81 	bl	80010a0 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fb7c 	bl	80010a0 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1f4      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_OscConfig+0x344>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10e      	bne.n	80029e8 <HAL_RCC_OscConfig+0x348>
 80029ca:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_RCC_OscConfig+0x338>)
 80029d0:	2101      	movs	r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	621a      	str	r2, [r3, #32]
 80029d6:	e035      	b.n	8002a44 <HAL_RCC_OscConfig+0x3a4>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	fffeffff 	.word	0xfffeffff
 80029e0:	fffbffff 	.word	0xfffbffff
 80029e4:	40007000 	.word	0x40007000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x36a>
 80029f0:	4bca      	ldr	r3, [pc, #808]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	4bc9      	ldr	r3, [pc, #804]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 80029f6:	2101      	movs	r1, #1
 80029f8:	438a      	bics	r2, r1
 80029fa:	621a      	str	r2, [r3, #32]
 80029fc:	4bc7      	ldr	r3, [pc, #796]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	4bc6      	ldr	r3, [pc, #792]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a02:	2104      	movs	r1, #4
 8002a04:	438a      	bics	r2, r1
 8002a06:	621a      	str	r2, [r3, #32]
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x3a4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x38c>
 8002a12:	4bc2      	ldr	r3, [pc, #776]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	4bc1      	ldr	r3, [pc, #772]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a18:	2104      	movs	r1, #4
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	621a      	str	r2, [r3, #32]
 8002a1e:	4bbf      	ldr	r3, [pc, #764]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	4bbe      	ldr	r3, [pc, #760]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	621a      	str	r2, [r3, #32]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0x3a4>
 8002a2c:	4bbb      	ldr	r3, [pc, #748]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	4bba      	ldr	r3, [pc, #744]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	621a      	str	r2, [r3, #32]
 8002a38:	4bb8      	ldr	r3, [pc, #736]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	4bb7      	ldr	r3, [pc, #732]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a3e:	2104      	movs	r1, #4
 8002a40:	438a      	bics	r2, r1
 8002a42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d014      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fb28 	bl	80010a0 <HAL_GetTick>
 8002a50:	0003      	movs	r3, r0
 8002a52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	e009      	b.n	8002a6a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fb23 	bl	80010a0 <HAL_GetTick>
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	4aaf      	ldr	r2, [pc, #700]	; (8002d20 <HAL_RCC_OscConfig+0x680>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e19a      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	4bac      	ldr	r3, [pc, #688]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x3b6>
 8002a74:	e013      	b.n	8002a9e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fb13 	bl	80010a0 <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7e:	e009      	b.n	8002a94 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fb0e 	bl	80010a0 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	4aa5      	ldr	r2, [pc, #660]	; (8002d20 <HAL_RCC_OscConfig+0x680>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e185      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	4ba1      	ldr	r3, [pc, #644]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a9e:	231f      	movs	r3, #31
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b9c      	ldr	r3, [pc, #624]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	4b9b      	ldr	r3, [pc, #620]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002aae:	499d      	ldr	r1, [pc, #628]	; (8002d24 <HAL_RCC_OscConfig+0x684>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d12a      	bne.n	8002b1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ac6:	4b95      	ldr	r3, [pc, #596]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aca:	4b94      	ldr	r3, [pc, #592]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002acc:	2104      	movs	r1, #4
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ad2:	4b92      	ldr	r3, [pc, #584]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad6:	4b91      	ldr	r3, [pc, #580]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002ad8:	2101      	movs	r1, #1
 8002ada:	430a      	orrs	r2, r1
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fadf 	bl	80010a0 <HAL_GetTick>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ae8:	f7fe fada 	bl	80010a0 <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e152      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	2202      	movs	r2, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	d0f1      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b04:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	22f8      	movs	r2, #248	; 0xf8
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	00da      	lsls	r2, r3, #3
 8002b14:	4b81      	ldr	r3, [pc, #516]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
 8002b1a:	e034      	b.n	8002b86 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	3305      	adds	r3, #5
 8002b22:	d111      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b24:	4b7d      	ldr	r3, [pc, #500]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b28:	4b7c      	ldr	r3, [pc, #496]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	438a      	bics	r2, r1
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b30:	4b7a      	ldr	r3, [pc, #488]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	22f8      	movs	r2, #248	; 0xf8
 8002b36:	4393      	bics	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	00da      	lsls	r2, r3, #3
 8002b40:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b42:	430a      	orrs	r2, r1
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34
 8002b46:	e01e      	b.n	8002b86 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b48:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b4c:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	2104      	movs	r1, #4
 8002b50:	430a      	orrs	r2, r1
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b54:	4b71      	ldr	r3, [pc, #452]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b58:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe fa9e 	bl	80010a0 <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b6a:	f7fe fa99 	bl	80010a0 <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e111      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b7c:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d1f1      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d05c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b90:	4b62      	ldr	r3, [pc, #392]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	220c      	movs	r2, #12
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d00e      	beq.n	8002bba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b9c:	4b5f      	ldr	r3, [pc, #380]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	220c      	movs	r2, #12
 8002ba2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d114      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002ba8:	4b5c      	ldr	r3, [pc, #368]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	23c0      	movs	r3, #192	; 0xc0
 8002bae:	025b      	lsls	r3, r3, #9
 8002bb0:	401a      	ands	r2, r3
 8002bb2:	23c0      	movs	r3, #192	; 0xc0
 8002bb4:	025b      	lsls	r3, r3, #9
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002bba:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	025b      	lsls	r3, r3, #9
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d040      	beq.n	8002c48 <HAL_RCC_OscConfig+0x5a8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d03c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0e6      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002bda:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bde:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	0249      	lsls	r1, r1, #9
 8002be4:	430a      	orrs	r2, r1
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fa5a 	bl	80010a0 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf2:	f7fe fa55 	bl	80010a0 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e0cd      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c04:	4b45      	ldr	r3, [pc, #276]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	025b      	lsls	r3, r3, #9
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x552>
 8002c10:	e01b      	b.n	8002c4a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c12:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002c18:	4943      	ldr	r1, [pc, #268]	; (8002d28 <HAL_RCC_OscConfig+0x688>)
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fa3f 	bl	80010a0 <HAL_GetTick>
 8002c22:	0003      	movs	r3, r0
 8002c24:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c28:	f7fe fa3a 	bl	80010a0 <HAL_GetTick>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0b2      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	025b      	lsls	r3, r3, #9
 8002c42:	4013      	ands	r3, r2
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x588>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c48:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d100      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5b4>
 8002c52:	e0a4      	b.n	8002d9e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c54:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	220c      	movs	r2, #12
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d100      	bne.n	8002c62 <HAL_RCC_OscConfig+0x5c2>
 8002c60:	e078      	b.n	8002d54 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d14c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002c70:	492e      	ldr	r1, [pc, #184]	; (8002d2c <HAL_RCC_OscConfig+0x68c>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe fa13 	bl	80010a0 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fa0e 	bl	80010a0 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e086      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	049b      	lsls	r3, r3, #18
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_RCC_OscConfig+0x690>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	0449      	lsls	r1, r1, #17
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe f9e1 	bl	80010a0 <HAL_GetTick>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe f9dc 	bl	80010a0 <HAL_GetTick>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e054      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	049b      	lsls	r3, r3, #18
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x644>
 8002d02:	e04c      	b.n	8002d9e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_RCC_OscConfig+0x67c>)
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <HAL_RCC_OscConfig+0x68c>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f9c6 	bl	80010a0 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d18:	e015      	b.n	8002d46 <HAL_RCC_OscConfig+0x6a6>
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	00001388 	.word	0x00001388
 8002d24:	efffffff 	.word	0xefffffff
 8002d28:	fffeffff 	.word	0xfffeffff
 8002d2c:	feffffff 	.word	0xfeffffff
 8002d30:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe f9b4 	bl	80010a0 <HAL_GetTick>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e02c      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_RCC_OscConfig+0x708>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	049b      	lsls	r3, r3, #18
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x694>
 8002d52:	e024      	b.n	8002d9e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e01f      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_RCC_OscConfig+0x708>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_RCC_OscConfig+0x708>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	23c0      	movs	r3, #192	; 0xc0
 8002d70:	025b      	lsls	r3, r3, #9
 8002d72:	401a      	ands	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d10e      	bne.n	8002d9a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	220f      	movs	r2, #15
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	23f0      	movs	r3, #240	; 0xf0
 8002d8e:	039b      	lsls	r3, r3, #14
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b008      	add	sp, #32
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000

08002dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0bf      	b.n	8002f40 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCC_ClockConfig+0x19c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d911      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <HAL_RCC_ClockConfig+0x19c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_ClockConfig+0x19c>)
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de0:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCC_ClockConfig+0x19c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0a6      	b.n	8002f40 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2202      	movs	r2, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d015      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2204      	movs	r2, #4
 8002e02:	4013      	ands	r3, r2
 8002e04:	d006      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e06:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e0c:	21e0      	movs	r1, #224	; 0xe0
 8002e0e:	00c9      	lsls	r1, r1, #3
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	22f0      	movs	r2, #240	; 0xf0
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d04c      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b44      	ldr	r3, [pc, #272]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	029b      	lsls	r3, r3, #10
 8002e42:	4013      	ands	r3, r2
 8002e44:	d120      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07a      	b.n	8002f40 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	049b      	lsls	r3, r3, #18
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d114      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06e      	b.n	8002f40 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	025b      	lsls	r3, r3, #9
 8002e72:	4013      	ands	r3, r2
 8002e74:	d108      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e062      	b.n	8002f40 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e05b      	b.n	8002f40 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e88:	4b30      	ldr	r3, [pc, #192]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4393      	bics	r3, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe f900 	bl	80010a0 <HAL_GetTick>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea4:	e009      	b.n	8002eba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea6:	f7fe f8fb 	bl	80010a0 <HAL_GetTick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <HAL_RCC_ClockConfig+0x1a4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e042      	b.n	8002f40 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1ec      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCC_ClockConfig+0x19c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d211      	bcs.n	8002efe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_ClockConfig+0x19c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_RCC_ClockConfig+0x19c>)
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_RCC_ClockConfig+0x19c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e020      	b.n	8002f40 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2204      	movs	r2, #4
 8002f04:	4013      	ands	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <HAL_RCC_ClockConfig+0x1a8>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f1c:	f000 f820 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002f20:	0001      	movs	r1, r0
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x1a0>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	220f      	movs	r2, #15
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x1ac>)
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	000a      	movs	r2, r1
 8002f32:	40da      	lsrs	r2, r3
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1b0>)
 8002f36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fe f87d 	bl	8001038 <HAL_InitTick>
  
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b004      	add	sp, #16
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	00001388 	.word	0x00001388
 8002f54:	fffff8ff 	.word	0xfffff8ff
 8002f58:	0800c2ec 	.word	0x0800c2ec
 8002f5c:	20000000 	.word	0x20000000

08002f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b08f      	sub	sp, #60	; 0x3c
 8002f64:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f66:	2314      	movs	r3, #20
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	4a37      	ldr	r2, [pc, #220]	; (8003048 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002f6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f6e:	c313      	stmia	r3!, {r0, r1, r4}
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	4a35      	ldr	r2, [pc, #212]	; (800304c <HAL_RCC_GetSysClockFreq+0xec>)
 8002f78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f7a:	c313      	stmia	r3!, {r0, r1, r4}
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f84:	2300      	movs	r3, #0
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f88:	2300      	movs	r3, #0
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f94:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	220c      	movs	r2, #12
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d006      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x52>
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	d043      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0xd0>
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d144      	bne.n	8003036 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fac:	4b29      	ldr	r3, [pc, #164]	; (8003054 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fb0:	e044      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	0c9b      	lsrs	r3, r3, #18
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2214      	movs	r2, #20
 8002fbc:	18ba      	adds	r2, r7, r2
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fc2:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	220f      	movs	r2, #15
 8002fc8:	4013      	ands	r3, r2
 8002fca:	1d3a      	adds	r2, r7, #4
 8002fcc:	5cd3      	ldrb	r3, [r2, r3]
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd2:	23c0      	movs	r3, #192	; 0xc0
 8002fd4:	025b      	lsls	r3, r3, #9
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	025b      	lsls	r3, r3, #9
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe2:	481c      	ldr	r0, [pc, #112]	; (8003054 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fe4:	f7fd f890 	bl	8000108 <__udivsi3>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	001a      	movs	r2, r3
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	4353      	muls	r3, r2
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff2:	e01a      	b.n	800302a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff6:	23c0      	movs	r3, #192	; 0xc0
 8002ff8:	025b      	lsls	r3, r3, #9
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	23c0      	movs	r3, #192	; 0xc0
 8002ffe:	025b      	lsls	r3, r3, #9
 8003000:	429a      	cmp	r2, r3
 8003002:	d109      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003006:	4814      	ldr	r0, [pc, #80]	; (8003058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003008:	f7fd f87e 	bl	8000108 <__udivsi3>
 800300c:	0003      	movs	r3, r0
 800300e:	001a      	movs	r2, r3
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	4353      	muls	r3, r2
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
 8003016:	e008      	b.n	800302a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800301a:	4810      	ldr	r0, [pc, #64]	; (800305c <HAL_RCC_GetSysClockFreq+0xfc>)
 800301c:	f7fd f874 	bl	8000108 <__udivsi3>
 8003020:	0003      	movs	r3, r0
 8003022:	001a      	movs	r2, r3
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	4353      	muls	r3, r2
 8003028:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800302a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800302e:	e005      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003032:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003034:	e002      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800303a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b00f      	add	sp, #60	; 0x3c
 8003044:	bd90      	pop	{r4, r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	0800c114 	.word	0x0800c114
 800304c:	0800c124 	.word	0x0800c124
 8003050:	40021000 	.word	0x40021000
 8003054:	00f42400 	.word	0x00f42400
 8003058:	02dc6c00 	.word	0x02dc6c00
 800305c:	007a1200 	.word	0x007a1200

08003060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003064:	4b02      	ldr	r3, [pc, #8]	; (8003070 <HAL_RCC_GetHCLKFreq+0x10>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	20000000 	.word	0x20000000

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003078:	f7ff fff2 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 800307c:	0001      	movs	r1, r0
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	2207      	movs	r2, #7
 8003086:	4013      	ands	r3, r2
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <HAL_RCC_GetPCLK1Freq+0x28>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	40d9      	lsrs	r1, r3
 800308e:	000b      	movs	r3, r1
}    
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	40021000 	.word	0x40021000
 800309c:	0800c2fc 	.word	0x0800c2fc

080030a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	025b      	lsls	r3, r3, #9
 80030b8:	4013      	ands	r3, r2
 80030ba:	d100      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80030bc:	e08f      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2317      	movs	r3, #23
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	055b      	lsls	r3, r3, #21
 80030ce:	4013      	ands	r3, r2
 80030d0:	d111      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	4b6c      	ldr	r3, [pc, #432]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	4b6b      	ldr	r3, [pc, #428]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	0549      	lsls	r1, r1, #21
 80030dc:	430a      	orrs	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	055b      	lsls	r3, r3, #21
 80030e8:	4013      	ands	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2317      	movs	r3, #23
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b64      	ldr	r3, [pc, #400]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	d11a      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b61      	ldr	r3, [pc, #388]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4b60      	ldr	r3, [pc, #384]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0049      	lsls	r1, r1, #1
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003110:	f7fd ffc6 	bl	80010a0 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003118:	e008      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fd ffc1 	bl	80010a0 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b64      	cmp	r3, #100	; 0x64
 8003126:	d901      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0a6      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4013      	ands	r3, r2
 8003136:	d0f0      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003138:	4b52      	ldr	r3, [pc, #328]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	23c0      	movs	r3, #192	; 0xc0
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d034      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	23c0      	movs	r3, #192	; 0xc0
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4013      	ands	r3, r2
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	429a      	cmp	r2, r3
 8003158:	d02c      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315a:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a4b      	ldr	r2, [pc, #300]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003164:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	0249      	lsls	r1, r1, #9
 800316e:	430a      	orrs	r2, r1
 8003170:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003172:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	4b43      	ldr	r3, [pc, #268]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003178:	4945      	ldr	r1, [pc, #276]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800317a:	400a      	ands	r2, r1
 800317c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	4013      	ands	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fd ff88 	bl	80010a0 <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	e009      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fd ff83 	bl	80010a0 <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e067      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	2202      	movs	r2, #2
 80031b0:	4013      	ands	r3, r2
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031c4:	430a      	orrs	r2, r1
 80031c6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c8:	2317      	movs	r3, #23
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031d8:	492f      	ldr	r1, [pc, #188]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031da:	400a      	ands	r2, r1
 80031dc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	4013      	ands	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	2203      	movs	r2, #3
 80031ee:	4393      	bics	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80031f8:	430a      	orrs	r2, r1
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2202      	movs	r2, #2
 8003202:	4013      	ands	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a24      	ldr	r2, [pc, #144]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800320c:	4013      	ands	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003216:	430a      	orrs	r2, r1
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2220      	movs	r2, #32
 8003220:	4013      	ands	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003224:	4b17      	ldr	r3, [pc, #92]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	2210      	movs	r2, #16
 800322a:	4393      	bics	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003234:	430a      	orrs	r2, r1
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	029b      	lsls	r3, r3, #10
 8003240:	4013      	ands	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	4393      	bics	r3, r2
 800324c:	0019      	movs	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003254:	430a      	orrs	r2, r1
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4013      	ands	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	2240      	movs	r2, #64	; 0x40
 800326a:	4393      	bics	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003274:	430a      	orrs	r2, r1
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b006      	add	sp, #24
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
 800328c:	fffffcff 	.word	0xfffffcff
 8003290:	fffeffff 	.word	0xfffeffff
 8003294:	00001388 	.word	0x00001388
 8003298:	efffffff 	.word	0xefffffff
 800329c:	fffcffff 	.word	0xfffcffff

080032a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e08a      	b.n	80033c8 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	225d      	movs	r2, #93	; 0x5d
 80032bc:	5c9b      	ldrb	r3, [r3, r2]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	225c      	movs	r2, #92	; 0x5c
 80032c8:	2100      	movs	r1, #0
 80032ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7fd fc84 	bl	8000bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	225d      	movs	r2, #93	; 0x5d
 80032d8:	2102      	movs	r1, #2
 80032da:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2140      	movs	r1, #64	; 0x40
 80032e8:	438a      	bics	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	23e0      	movs	r3, #224	; 0xe0
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d902      	bls.n	80032fe <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e002      	b.n	8003304 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	015b      	lsls	r3, r3, #5
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	23f0      	movs	r3, #240	; 0xf0
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	429a      	cmp	r2, r3
 800330e:	d008      	beq.n	8003322 <HAL_SPI_Init+0x82>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	23e0      	movs	r3, #224	; 0xe0
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	429a      	cmp	r2, r3
 800331a:	d002      	beq.n	8003322 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10c      	bne.n	8003344 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	23e0      	movs	r3, #224	; 0xe0
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	429a      	cmp	r2, r3
 8003334:	d903      	bls.n	800333e <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
 800333c:	e002      	b.n	8003344 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6999      	ldr	r1, [r3, #24]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	400b      	ands	r3, r1
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	431a      	orrs	r2, r3
 8003372:	0011      	movs	r1, r2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	2204      	movs	r2, #4
 8003388:	401a      	ands	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	431a      	orrs	r2, r3
 800339c:	0011      	movs	r1, r2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4907      	ldr	r1, [pc, #28]	; (80033d0 <HAL_SPI_Init+0x130>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	225d      	movs	r2, #93	; 0x5d
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	fffff7ff 	.word	0xfffff7ff

080033d4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	1dbb      	adds	r3, r7, #6
 80033e0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033e2:	2317      	movs	r3, #23
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d112      	bne.n	8003418 <HAL_SPI_Receive_DMA+0x44>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	2382      	movs	r3, #130	; 0x82
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d10c      	bne.n	8003418 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	225d      	movs	r2, #93	; 0x5d
 8003402:	2104      	movs	r1, #4
 8003404:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003406:	1dbb      	adds	r3, r7, #6
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f916 	bl	8003640 <HAL_SPI_TransmitReceive_DMA>
 8003414:	0003      	movs	r3, r0
 8003416:	e103      	b.n	8003620 <HAL_SPI_Receive_DMA+0x24c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	225c      	movs	r2, #92	; 0x5c
 800341c:	5c9b      	ldrb	r3, [r3, r2]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_SPI_Receive_DMA+0x52>
 8003422:	2302      	movs	r3, #2
 8003424:	e0fc      	b.n	8003620 <HAL_SPI_Receive_DMA+0x24c>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	225c      	movs	r2, #92	; 0x5c
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	225d      	movs	r2, #93	; 0x5d
 8003432:	5c9b      	ldrb	r3, [r3, r2]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d004      	beq.n	8003444 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800343a:	2317      	movs	r3, #23
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	2202      	movs	r2, #2
 8003440:	701a      	strb	r2, [r3, #0]
    goto error;
 8003442:	e0e6      	b.n	8003612 <HAL_SPI_Receive_DMA+0x23e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_SPI_Receive_DMA+0x7e>
 800344a:	1dbb      	adds	r3, r7, #6
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8003452:	2317      	movs	r3, #23
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]
    goto error;
 800345a:	e0da      	b.n	8003612 <HAL_SPI_Receive_DMA+0x23e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	225d      	movs	r2, #93	; 0x5d
 8003460:	2104      	movs	r1, #4
 8003462:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1dba      	adds	r2, r7, #6
 8003474:	2144      	movs	r1, #68	; 0x44
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1dba      	adds	r2, r7, #6
 800347e:	2146      	movs	r1, #70	; 0x46
 8003480:	8812      	ldrh	r2, [r2, #0]
 8003482:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d107      	bne.n	80034b8 <HAL_SPI_Receive_DMA+0xe4>
  {
    SPI_1LINE_RX(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	495d      	ldr	r1, [pc, #372]	; (8003628 <HAL_SPI_Receive_DMA+0x254>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
    errorcode = HAL_ERROR;
    goto error;
  }
#endif

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	495a      	ldr	r1, [pc, #360]	; (800362c <HAL_SPI_Receive_DMA+0x258>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	23e0      	movs	r3, #224	; 0xe0
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d908      	bls.n	80034e6 <HAL_SPI_Receive_DMA+0x112>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4954      	ldr	r1, [pc, #336]	; (8003630 <HAL_SPI_Receive_DMA+0x25c>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	e045      	b.n	8003572 <HAL_SPI_Receive_DMA+0x19e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	0149      	lsls	r1, r1, #5
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	429a      	cmp	r2, r3
 8003504:	d135      	bne.n	8003572 <HAL_SPI_Receive_DMA+0x19e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4947      	ldr	r1, [pc, #284]	; (8003630 <HAL_SPI_Receive_DMA+0x25c>)
 8003512:	400a      	ands	r2, r1
 8003514:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2246      	movs	r2, #70	; 0x46
 800351a:	5a9b      	ldrh	r3, [r3, r2]
 800351c:	b29b      	uxth	r3, r3
 800351e:	001a      	movs	r2, r3
 8003520:	2301      	movs	r3, #1
 8003522:	4013      	ands	r3, r2
 8003524:	d111      	bne.n	800354a <HAL_SPI_Receive_DMA+0x176>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	493e      	ldr	r1, [pc, #248]	; (800362c <HAL_SPI_Receive_DMA+0x258>)
 8003532:	400a      	ands	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2246      	movs	r2, #70	; 0x46
 800353a:	5a9b      	ldrh	r3, [r3, r2]
 800353c:	b29b      	uxth	r3, r3
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	b299      	uxth	r1, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2246      	movs	r2, #70	; 0x46
 8003546:	5299      	strh	r1, [r3, r2]
 8003548:	e013      	b.n	8003572 <HAL_SPI_Receive_DMA+0x19e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	0189      	lsls	r1, r1, #6
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2246      	movs	r2, #70	; 0x46
 8003560:	5a9b      	ldrh	r3, [r3, r2]
 8003562:	b29b      	uxth	r3, r3
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	b29b      	uxth	r3, r3
 8003568:	3301      	adds	r3, #1
 800356a:	b299      	uxth	r1, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2246      	movs	r2, #70	; 0x46
 8003570:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	4a2f      	ldr	r2, [pc, #188]	; (8003634 <HAL_SPI_Receive_DMA+0x260>)
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	4a2e      	ldr	r2, [pc, #184]	; (8003638 <HAL_SPI_Receive_DMA+0x264>)
 8003580:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	4a2d      	ldr	r2, [pc, #180]	; (800363c <HAL_SPI_Receive_DMA+0x268>)
 8003588:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	2200      	movs	r2, #0
 8003590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	0019      	movs	r1, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2246      	movs	r2, #70	; 0x46
 80035a8:	5a9b      	ldrh	r3, [r3, r2]
 80035aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80035ac:	0022      	movs	r2, r4
 80035ae:	f7fe fd13 	bl	8001fd8 <HAL_DMA_Start_IT>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d00e      	beq.n	80035d4 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	2210      	movs	r2, #16
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80035c2:	2317      	movs	r3, #23
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	225d      	movs	r2, #93	; 0x5d
 80035ce:	2101      	movs	r1, #1
 80035d0:	5499      	strb	r1, [r3, r2]
    goto error;
 80035d2:	e01e      	b.n	8003612 <HAL_SPI_Receive_DMA+0x23e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2240      	movs	r2, #64	; 0x40
 80035dc:	4013      	ands	r3, r2
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d007      	beq.n	80035f2 <HAL_SPI_Receive_DMA+0x21e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2140      	movs	r1, #64	; 0x40
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2120      	movs	r1, #32
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2101      	movs	r1, #1
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	225c      	movs	r2, #92	; 0x5c
 8003616:	2100      	movs	r1, #0
 8003618:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800361a:	2317      	movs	r3, #23
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	781b      	ldrb	r3, [r3, #0]
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	b007      	add	sp, #28
 8003626:	bd90      	pop	{r4, r7, pc}
 8003628:	ffffbfff 	.word	0xffffbfff
 800362c:	ffffdfff 	.word	0xffffdfff
 8003630:	ffffefff 	.word	0xffffefff
 8003634:	08003d01 	.word	0x08003d01
 8003638:	08003be1 	.word	0x08003be1
 800363c:	08003d3d 	.word	0x08003d3d

08003640 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	001a      	movs	r2, r3
 800364e:	1cbb      	adds	r3, r7, #2
 8003650:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003652:	2317      	movs	r3, #23
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	225c      	movs	r2, #92	; 0x5c
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_SPI_TransmitReceive_DMA+0x28>
 8003664:	2302      	movs	r3, #2
 8003666:	e186      	b.n	8003976 <HAL_SPI_TransmitReceive_DMA+0x336>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	225c      	movs	r2, #92	; 0x5c
 800366c:	2101      	movs	r1, #1
 800366e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003670:	2016      	movs	r0, #22
 8003672:	183b      	adds	r3, r7, r0
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	215d      	movs	r1, #93	; 0x5d
 8003678:	5c52      	ldrb	r2, [r2, r1]
 800367a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003682:	183b      	adds	r3, r7, r0
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d012      	beq.n	80036b0 <HAL_SPI_TransmitReceive_DMA+0x70>
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	2382      	movs	r3, #130	; 0x82
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	429a      	cmp	r2, r3
 8003692:	d108      	bne.n	80036a6 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <HAL_SPI_TransmitReceive_DMA+0x66>
 800369c:	2316      	movs	r3, #22
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d004      	beq.n	80036b0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80036a6:	2317      	movs	r3, #23
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	2202      	movs	r2, #2
 80036ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80036ae:	e15b      	b.n	8003968 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d006      	beq.n	80036c4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80036bc:	1cbb      	adds	r3, r7, #2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80036c4:	2317      	movs	r3, #23
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80036cc:	e14c      	b.n	8003968 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	225d      	movs	r2, #93	; 0x5d
 80036d2:	5c9b      	ldrb	r3, [r3, r2]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d003      	beq.n	80036e2 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	225d      	movs	r2, #93	; 0x5d
 80036de:	2105      	movs	r1, #5
 80036e0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1cba      	adds	r2, r7, #2
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1cba      	adds	r2, r7, #2
 80036fa:	8812      	ldrh	r2, [r2, #0]
 80036fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1cba      	adds	r2, r7, #2
 8003708:	2144      	movs	r1, #68	; 0x44
 800370a:	8812      	ldrh	r2, [r2, #0]
 800370c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1cba      	adds	r2, r7, #2
 8003712:	2146      	movs	r1, #70	; 0x46
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	651a      	str	r2, [r3, #80]	; 0x50
    goto error;
  }
#endif

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4994      	ldr	r1, [pc, #592]	; (8003980 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8003730:	400a      	ands	r2, r1
 8003732:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	23e0      	movs	r3, #224	; 0xe0
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	429a      	cmp	r2, r3
 800373e:	d908      	bls.n	8003752 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	498e      	ldr	r1, [pc, #568]	; (8003984 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800374c:	400a      	ands	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	e074      	b.n	800383c <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	0149      	lsls	r1, r1, #5
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	429a      	cmp	r2, r3
 8003770:	d127      	bne.n	80037c2 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003776:	001a      	movs	r2, r3
 8003778:	2301      	movs	r3, #1
 800377a:	4013      	ands	r3, r2
 800377c:	d10f      	bne.n	800379e <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	497f      	ldr	r1, [pc, #508]	; (8003988 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800378a:	400a      	ands	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800379c:	e011      	b.n	80037c2 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	01c9      	lsls	r1, r1, #7
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d135      	bne.n	800383c <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	496a      	ldr	r1, [pc, #424]	; (8003984 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80037dc:	400a      	ands	r2, r1
 80037de:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2246      	movs	r2, #70	; 0x46
 80037e4:	5a9b      	ldrh	r3, [r3, r2]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	001a      	movs	r2, r3
 80037ea:	2301      	movs	r3, #1
 80037ec:	4013      	ands	r3, r2
 80037ee:	d111      	bne.n	8003814 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4964      	ldr	r1, [pc, #400]	; (800398c <HAL_SPI_TransmitReceive_DMA+0x34c>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2246      	movs	r2, #70	; 0x46
 8003804:	5a9b      	ldrh	r3, [r3, r2]
 8003806:	b29b      	uxth	r3, r3
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	b299      	uxth	r1, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2246      	movs	r2, #70	; 0x46
 8003810:	5299      	strh	r1, [r3, r2]
 8003812:	e013      	b.n	800383c <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	0189      	lsls	r1, r1, #6
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2246      	movs	r2, #70	; 0x46
 800382a:	5a9b      	ldrh	r3, [r3, r2]
 800382c:	b29b      	uxth	r3, r3
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	b29b      	uxth	r3, r3
 8003832:	3301      	adds	r3, #1
 8003834:	b299      	uxth	r1, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2246      	movs	r2, #70	; 0x46
 800383a:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	225d      	movs	r2, #93	; 0x5d
 8003840:	5c9b      	ldrb	r3, [r3, r2]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b04      	cmp	r3, #4
 8003846:	d108      	bne.n	800385a <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	4a50      	ldr	r2, [pc, #320]	; (8003990 <HAL_SPI_TransmitReceive_DMA+0x350>)
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
 8003858:	e007      	b.n	800386a <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8003860:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	4a4d      	ldr	r2, [pc, #308]	; (800399c <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8003870:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	2200      	movs	r2, #0
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	0019      	movs	r1, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2246      	movs	r2, #70	; 0x46
 8003890:	5a9b      	ldrh	r3, [r3, r2]
 8003892:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003894:	0022      	movs	r2, r4
 8003896:	f7fe fb9f 	bl	8001fd8 <HAL_DMA_Start_IT>
 800389a:	1e03      	subs	r3, r0, #0
 800389c:	d00e      	beq.n	80038bc <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a2:	2210      	movs	r2, #16
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80038aa:	2317      	movs	r3, #23
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	225d      	movs	r2, #93	; 0x5d
 80038b6:	2101      	movs	r1, #1
 80038b8:	5499      	strb	r1, [r3, r2]
    goto error;
 80038ba:	e055      	b.n	8003968 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2101      	movs	r1, #1
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2200      	movs	r2, #0
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	2200      	movs	r2, #0
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	2200      	movs	r2, #0
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	0019      	movs	r1, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	330c      	adds	r3, #12
 80038fc:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003904:	f7fe fb68 	bl	8001fd8 <HAL_DMA_Start_IT>
 8003908:	1e03      	subs	r3, r0, #0
 800390a:	d00e      	beq.n	800392a <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003910:	2210      	movs	r2, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003918:	2317      	movs	r3, #23
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	225d      	movs	r2, #93	; 0x5d
 8003924:	2101      	movs	r1, #1
 8003926:	5499      	strb	r1, [r3, r2]
    goto error;
 8003928:	e01e      	b.n	8003968 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	4013      	ands	r3, r2
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d007      	beq.n	8003948 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2120      	movs	r1, #32
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2102      	movs	r1, #2
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	225c      	movs	r2, #92	; 0x5c
 800396c:	2100      	movs	r1, #0
 800396e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003970:	2317      	movs	r3, #23
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	781b      	ldrb	r3, [r3, #0]
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b007      	add	sp, #28
 800397c:	bd90      	pop	{r4, r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	ffff9fff 	.word	0xffff9fff
 8003984:	ffffefff 	.word	0xffffefff
 8003988:	ffffbfff 	.word	0xffffbfff
 800398c:	ffffdfff 	.word	0xffffdfff
 8003990:	08003d01 	.word	0x08003d01
 8003994:	08003be1 	.word	0x08003be1
 8003998:	08003d1f 	.word	0x08003d1f
 800399c:	08003c6b 	.word	0x08003c6b
 80039a0:	08003d3d 	.word	0x08003d3d

080039a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	001a      	movs	r2, r3
 80039c2:	2301      	movs	r3, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	d10f      	bne.n	80039e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2201      	movs	r2, #1
 80039cc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039ce:	d00b      	beq.n	80039e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	001a      	movs	r2, r3
 80039d6:	2301      	movs	r3, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d005      	beq.n	80039e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	0010      	movs	r0, r2
 80039e4:	4798      	blx	r3
    return;
 80039e6:	e0d6      	b.n	8003b96 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	001a      	movs	r2, r3
 80039ee:	2301      	movs	r3, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	d00b      	beq.n	8003a0c <HAL_SPI_IRQHandler+0x68>
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	09db      	lsrs	r3, r3, #7
 80039f8:	001a      	movs	r2, r3
 80039fa:	2301      	movs	r3, #1
 80039fc:	4013      	ands	r3, r2
 80039fe:	d005      	beq.n	8003a0c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	0010      	movs	r0, r2
 8003a08:	4798      	blx	r3
    return;
 8003a0a:	e0c4      	b.n	8003b96 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	001a      	movs	r2, r3
 8003a12:	2301      	movs	r3, #1
 8003a14:	4013      	ands	r3, r2
 8003a16:	d10c      	bne.n	8003a32 <HAL_SPI_IRQHandler+0x8e>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	099b      	lsrs	r3, r3, #6
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4013      	ands	r3, r2
 8003a22:	d106      	bne.n	8003a32 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	001a      	movs	r2, r3
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d100      	bne.n	8003a32 <HAL_SPI_IRQHandler+0x8e>
 8003a30:	e0b1      	b.n	8003b96 <HAL_SPI_IRQHandler+0x1f2>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	001a      	movs	r2, r3
 8003a38:	2301      	movs	r3, #1
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d100      	bne.n	8003a40 <HAL_SPI_IRQHandler+0x9c>
 8003a3e:	e0aa      	b.n	8003b96 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	001a      	movs	r2, r3
 8003a46:	2301      	movs	r3, #1
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d023      	beq.n	8003a94 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	225d      	movs	r2, #93	; 0x5d
 8003a50:	5c9b      	ldrb	r3, [r3, r2]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d011      	beq.n	8003a7c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	e00b      	b.n	8003a94 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
        return;
 8003a92:	e080      	b.n	8003b96 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	001a      	movs	r2, r3
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d014      	beq.n	8003aca <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	438a      	bics	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	001a      	movs	r2, r3
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d00c      	beq.n	8003af0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	2208      	movs	r2, #8
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d04d      	beq.n	8003b94 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	21e0      	movs	r1, #224	; 0xe0
 8003b04:	438a      	bics	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	225d      	movs	r2, #93	; 0x5d
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2202      	movs	r2, #2
 8003b14:	4013      	ands	r3, r2
 8003b16:	d103      	bne.n	8003b20 <HAL_SPI_IRQHandler+0x17c>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d032      	beq.n	8003b86 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d010      	beq.n	8003b5a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_SPI_IRQHandler+0x1f8>)
 8003b3e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7fe faad 	bl	80020a4 <HAL_DMA_Abort_IT>
 8003b4a:	1e03      	subs	r3, r0, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	2240      	movs	r2, #64	; 0x40
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d016      	beq.n	8003b90 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <HAL_SPI_IRQHandler+0x1f8>)
 8003b68:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fe fa98 	bl	80020a4 <HAL_DMA_Abort_IT>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d00b      	beq.n	8003b90 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7c:	2240      	movs	r2, #64	; 0x40
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003b84:	e004      	b.n	8003b90 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f821 	bl	8003bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b8e:	e000      	b.n	8003b92 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003b90:	46c0      	nop			; (mov r8, r8)
    return;
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46c0      	nop			; (mov r8, r8)
  }
}
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b008      	add	sp, #32
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	08003d7f 	.word	0x08003d7f

08003ba0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bee:	f7fd fa57 	bl	80010a0 <HAL_GetTick>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d02b      	beq.n	8003c5c <SPI_DMAReceiveCplt+0x7c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2120      	movs	r1, #32
 8003c10:	438a      	bics	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2103      	movs	r1, #3
 8003c20:	438a      	bics	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2164      	movs	r1, #100	; 0x64
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f000 f9a2 	bl	8003f74 <SPI_EndRxTransaction>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d002      	beq.n	8003c3a <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2246      	movs	r2, #70	; 0x46
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	225d      	movs	r2, #93	; 0x5d
 8003c46:	2101      	movs	r1, #1
 8003c48:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <SPI_DMAReceiveCplt+0x7c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f7ff ffbb 	bl	8003bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003c5a:	e003      	b.n	8003c64 <SPI_DMAReceiveCplt+0x84>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7fc fbc8 	bl	80003f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b004      	add	sp, #16
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c78:	f7fd fa12 	bl	80010a0 <HAL_GetTick>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2220      	movs	r2, #32
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d031      	beq.n	8003cf2 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2120      	movs	r1, #32
 8003c9a:	438a      	bics	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2164      	movs	r1, #100	; 0x64
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 f9c3 	bl	8004030 <SPI_EndRxTxTransaction>
 8003caa:	1e03      	subs	r3, r0, #0
 8003cac:	d005      	beq.n	8003cba <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2103      	movs	r1, #3
 8003cc6:	438a      	bics	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2246      	movs	r2, #70	; 0x46
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	225d      	movs	r2, #93	; 0x5d
 8003cdc:	2101      	movs	r1, #1
 8003cde:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff ff70 	bl	8003bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003cf0:	e003      	b.n	8003cfa <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff ff53 	bl	8003ba0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b004      	add	sp, #16
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7ff ff4d 	bl	8003bb0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b004      	add	sp, #16
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff ff46 	bl	8003bc0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b004      	add	sp, #16
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2103      	movs	r1, #3
 8003d56:	438a      	bics	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	2210      	movs	r2, #16
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	225d      	movs	r2, #93	; 0x5d
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff ff2d 	bl	8003bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2246      	movs	r2, #70	; 0x46
 8003d90:	2100      	movs	r1, #0
 8003d92:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7ff ff17 	bl	8003bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	1dfb      	adds	r3, r7, #7
 8003dba:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dbc:	e050      	b.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	d04d      	beq.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003dc4:	f7fd f96c 	bl	80010a0 <HAL_GetTick>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d902      	bls.n	8003dda <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d142      	bne.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	21e0      	movs	r1, #224	; 0xe0
 8003de6:	438a      	bics	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	2382      	movs	r3, #130	; 0x82
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d113      	bne.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0x72>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d005      	beq.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d107      	bne.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	438a      	bics	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d110      	bne.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4914      	ldr	r1, [pc, #80]	; (8003e88 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2180      	movs	r1, #128	; 0x80
 8003e46:	0189      	lsls	r1, r1, #6
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	225d      	movs	r2, #93	; 0x5d
 8003e50:	2101      	movs	r1, #1
 8003e52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	225c      	movs	r2, #92	; 0x5c
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e00f      	b.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	425a      	negs	r2, r3
 8003e70:	4153      	adcs	r3, r2
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	001a      	movs	r2, r3
 8003e76:	1dfb      	adds	r3, r7, #7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d19f      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b004      	add	sp, #16
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	ffffdfff 	.word	0xffffdfff

08003e8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e9a:	e05c      	b.n	8003f56 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	23c0      	movs	r3, #192	; 0xc0
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d106      	bne.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0x28>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	d04d      	beq.n	8003f56 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003eba:	f7fd f8f1 	bl	80010a0 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d902      	bls.n	8003ed0 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d142      	bne.n	8003f56 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	21e0      	movs	r1, #224	; 0xe0
 8003edc:	438a      	bics	r2, r1
 8003ede:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	2382      	movs	r3, #130	; 0x82
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d113      	bne.n	8003f14 <SPI_WaitFifoStateUntilTimeout+0x88>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d005      	beq.n	8003f04 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d107      	bne.n	8003f14 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2140      	movs	r1, #64	; 0x40
 8003f10:	438a      	bics	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	019b      	lsls	r3, r3, #6
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d110      	bne.n	8003f42 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4911      	ldr	r1, [pc, #68]	; (8003f70 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2180      	movs	r1, #128	; 0x80
 8003f3c:	0189      	lsls	r1, r1, #6
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	225d      	movs	r2, #93	; 0x5d
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	225c      	movs	r2, #92	; 0x5c
 8003f4e:	2100      	movs	r1, #0
 8003f50:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e008      	b.n	8003f68 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d19a      	bne.n	8003e9c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b004      	add	sp, #16
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	ffffdfff 	.word	0xffffdfff

08003f74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	2382      	movs	r3, #130	; 0x82
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d113      	bne.n	8003fb4 <SPI_EndRxTransaction+0x40>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d005      	beq.n	8003fa4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d107      	bne.n	8003fb4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2140      	movs	r1, #64	; 0x40
 8003fb0:	438a      	bics	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	f7ff fef3 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8003fc6:	1e03      	subs	r3, r0, #0
 8003fc8:	d007      	beq.n	8003fda <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fce:	2220      	movs	r2, #32
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e026      	b.n	8004028 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	2382      	movs	r3, #130	; 0x82
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d11f      	bne.n	8004026 <SPI_EndRxTransaction+0xb2>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d005      	beq.n	8003ffe <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d113      	bne.n	8004026 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	23c0      	movs	r3, #192	; 0xc0
 8004002:	00d9      	lsls	r1, r3, #3
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	0013      	movs	r3, r2
 800400c:	2200      	movs	r2, #0
 800400e:	f7ff ff3d 	bl	8003e8c <SPI_WaitFifoStateUntilTimeout>
 8004012:	1e03      	subs	r3, r0, #0
 8004014:	d007      	beq.n	8004026 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	2220      	movs	r2, #32
 800401c:	431a      	orrs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e000      	b.n	8004028 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b004      	add	sp, #16
 800402e:	bd80      	pop	{r7, pc}

08004030 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	23c0      	movs	r3, #192	; 0xc0
 8004040:	0159      	lsls	r1, r3, #5
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	0013      	movs	r3, r2
 800404a:	2200      	movs	r2, #0
 800404c:	f7ff ff1e 	bl	8003e8c <SPI_WaitFifoStateUntilTimeout>
 8004050:	1e03      	subs	r3, r0, #0
 8004052:	d007      	beq.n	8004064 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004058:	2220      	movs	r2, #32
 800405a:	431a      	orrs	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e027      	b.n	80040b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	0013      	movs	r3, r2
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	f7ff fe9b 	bl	8003dac <SPI_WaitFlagStateUntilTimeout>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d007      	beq.n	800408a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407e:	2220      	movs	r2, #32
 8004080:	431a      	orrs	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e014      	b.n	80040b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	23c0      	movs	r3, #192	; 0xc0
 800408e:	00d9      	lsls	r1, r3, #3
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	0013      	movs	r3, r2
 8004098:	2200      	movs	r2, #0
 800409a:	f7ff fef7 	bl	8003e8c <SPI_WaitFifoStateUntilTimeout>
 800409e:	1e03      	subs	r3, r0, #0
 80040a0:	d007      	beq.n	80040b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a6:	2220      	movs	r2, #32
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e000      	b.n	80040b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	0018      	movs	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b004      	add	sp, #16
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e01e      	b.n	800410c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	223d      	movs	r2, #61	; 0x3d
 80040d2:	5c9b      	ldrb	r3, [r3, r2]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	223c      	movs	r2, #60	; 0x3c
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fc fdf7 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	223d      	movs	r2, #61	; 0x3d
 80040ee:	2102      	movs	r1, #2
 80040f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	0019      	movs	r1, r3
 80040fc:	0010      	movs	r0, r2
 80040fe:	f000 f949 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	223d      	movs	r2, #61	; 0x3d
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e01e      	b.n	8004164 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	223d      	movs	r2, #61	; 0x3d
 800412a:	5c9b      	ldrb	r3, [r3, r2]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d107      	bne.n	8004142 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	223c      	movs	r2, #60	; 0x3c
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0018      	movs	r0, r3
 800413e:	f000 f815 	bl	800416c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	223d      	movs	r2, #61	; 0x3d
 8004146:	2102      	movs	r1, #2
 8004148:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	0019      	movs	r1, r3
 8004154:	0010      	movs	r0, r2
 8004156:	f000 f91d 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	223d      	movs	r2, #61	; 0x3d
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b002      	add	sp, #8
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	223c      	movs	r2, #60	; 0x3c
 800418c:	5c9b      	ldrb	r3, [r3, r2]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004192:	2302      	movs	r3, #2
 8004194:	e03c      	b.n	8004210 <HAL_TIM_OC_ConfigChannel+0x94>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	223c      	movs	r2, #60	; 0x3c
 800419a:	2101      	movs	r1, #1
 800419c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	223d      	movs	r2, #61	; 0x3d
 80041a2:	2102      	movs	r1, #2
 80041a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d010      	beq.n	80041ce <HAL_TIM_OC_ConfigChannel+0x52>
 80041ac:	d802      	bhi.n	80041b4 <HAL_TIM_OC_ConfigChannel+0x38>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 80041b2:	e024      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d012      	beq.n	80041de <HAL_TIM_OC_ConfigChannel+0x62>
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d018      	beq.n	80041ee <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 80041bc:	e01f      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 f964 	bl	8004494 <TIM_OC1_SetConfig>
      break;
 80041cc:	e017      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	0011      	movs	r1, r2
 80041d6:	0018      	movs	r0, r3
 80041d8:	f000 f9e4 	bl	80045a4 <TIM_OC2_SetConfig>
      break;
 80041dc:	e00f      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	0011      	movs	r1, r2
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fa60 	bl	80046ac <TIM_OC3_SetConfig>
      break;
 80041ec:	e007      	b.n	80041fe <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	0011      	movs	r1, r2
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 fade 	bl	80047b8 <TIM_OC4_SetConfig>
      break;
 80041fc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	223d      	movs	r2, #61	; 0x3d
 8004202:	2101      	movs	r1, #1
 8004204:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	223c      	movs	r2, #60	; 0x3c
 800420a:	2100      	movs	r1, #0
 800420c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b004      	add	sp, #16
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	223c      	movs	r2, #60	; 0x3c
 8004226:	5c9b      	ldrb	r3, [r3, r2]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIM_ConfigClockSource+0x18>
 800422c:	2302      	movs	r3, #2
 800422e:	e0ab      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x170>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	223c      	movs	r2, #60	; 0x3c
 8004234:	2101      	movs	r1, #1
 8004236:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	223d      	movs	r2, #61	; 0x3d
 800423c:	2102      	movs	r1, #2
 800423e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2277      	movs	r2, #119	; 0x77
 800424c:	4393      	bics	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a4f      	ldr	r2, [pc, #316]	; (8004390 <HAL_TIM_ConfigClockSource+0x178>)
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d100      	bne.n	800426a <HAL_TIM_ConfigClockSource+0x52>
 8004268:	e06b      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x12a>
 800426a:	d80e      	bhi.n	800428a <HAL_TIM_ConfigClockSource+0x72>
 800426c:	2b10      	cmp	r3, #16
 800426e:	d100      	bne.n	8004272 <HAL_TIM_ConfigClockSource+0x5a>
 8004270:	e077      	b.n	8004362 <HAL_TIM_ConfigClockSource+0x14a>
 8004272:	d803      	bhi.n	800427c <HAL_TIM_ConfigClockSource+0x64>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d100      	bne.n	800427a <HAL_TIM_ConfigClockSource+0x62>
 8004278:	e073      	b.n	8004362 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800427a:	e07c      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800427c:	2b20      	cmp	r3, #32
 800427e:	d100      	bne.n	8004282 <HAL_TIM_ConfigClockSource+0x6a>
 8004280:	e06f      	b.n	8004362 <HAL_TIM_ConfigClockSource+0x14a>
 8004282:	2b30      	cmp	r3, #48	; 0x30
 8004284:	d100      	bne.n	8004288 <HAL_TIM_ConfigClockSource+0x70>
 8004286:	e06c      	b.n	8004362 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004288:	e075      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800428a:	2b70      	cmp	r3, #112	; 0x70
 800428c:	d00e      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0x94>
 800428e:	d804      	bhi.n	800429a <HAL_TIM_ConfigClockSource+0x82>
 8004290:	2b50      	cmp	r3, #80	; 0x50
 8004292:	d036      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0xea>
 8004294:	2b60      	cmp	r3, #96	; 0x60
 8004296:	d044      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004298:	e06d      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	0152      	lsls	r2, r2, #5
 800429e:	4293      	cmp	r3, r2
 80042a0:	d068      	beq.n	8004374 <HAL_TIM_ConfigClockSource+0x15c>
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	0192      	lsls	r2, r2, #6
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d017      	beq.n	80042da <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80042aa:	e064      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	6899      	ldr	r1, [r3, #8]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f000 fb60 	bl	8004980 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2277      	movs	r2, #119	; 0x77
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]
      break;
 80042d8:	e04d      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6899      	ldr	r1, [r3, #8]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f000 fb49 	bl	8004980 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	01c9      	lsls	r1, r1, #7
 80042fc:	430a      	orrs	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]
      break;
 8004300:	e039      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	001a      	movs	r2, r3
 8004310:	f000 fabc 	bl	800488c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2150      	movs	r1, #80	; 0x50
 800431a:	0018      	movs	r0, r3
 800431c:	f000 fb16 	bl	800494c <TIM_ITRx_SetConfig>
      break;
 8004320:	e029      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	001a      	movs	r2, r3
 8004330:	f000 fada 	bl	80048e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2160      	movs	r1, #96	; 0x60
 800433a:	0018      	movs	r0, r3
 800433c:	f000 fb06 	bl	800494c <TIM_ITRx_SetConfig>
      break;
 8004340:	e019      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	001a      	movs	r2, r3
 8004350:	f000 fa9c 	bl	800488c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2140      	movs	r1, #64	; 0x40
 800435a:	0018      	movs	r0, r3
 800435c:	f000 faf6 	bl	800494c <TIM_ITRx_SetConfig>
      break;
 8004360:	e009      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0019      	movs	r1, r3
 800436c:	0010      	movs	r0, r2
 800436e:	f000 faed 	bl	800494c <TIM_ITRx_SetConfig>
      break;
 8004372:	e000      	b.n	8004376 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004374:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	223d      	movs	r2, #61	; 0x3d
 800437a:	2101      	movs	r1, #1
 800437c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	223c      	movs	r2, #60	; 0x3c
 8004382:	2100      	movs	r1, #0
 8004384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	b004      	add	sp, #16
 800438e:	bd80      	pop	{r7, pc}
 8004390:	ffff00ff 	.word	0xffff00ff

08004394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a34      	ldr	r2, [pc, #208]	; (8004478 <TIM_Base_SetConfig+0xe4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d008      	beq.n	80043be <TIM_Base_SetConfig+0x2a>
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	05db      	lsls	r3, r3, #23
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x2a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a30      	ldr	r2, [pc, #192]	; (800447c <TIM_Base_SetConfig+0xe8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2270      	movs	r2, #112	; 0x70
 80043c2:	4393      	bics	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a29      	ldr	r2, [pc, #164]	; (8004478 <TIM_Base_SetConfig+0xe4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d018      	beq.n	800440a <TIM_Base_SetConfig+0x76>
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	05db      	lsls	r3, r3, #23
 80043de:	429a      	cmp	r2, r3
 80043e0:	d013      	beq.n	800440a <TIM_Base_SetConfig+0x76>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a25      	ldr	r2, [pc, #148]	; (800447c <TIM_Base_SetConfig+0xe8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00f      	beq.n	800440a <TIM_Base_SetConfig+0x76>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <TIM_Base_SetConfig+0xec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00b      	beq.n	800440a <TIM_Base_SetConfig+0x76>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a23      	ldr	r2, [pc, #140]	; (8004484 <TIM_Base_SetConfig+0xf0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_Base_SetConfig+0x76>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a22      	ldr	r2, [pc, #136]	; (8004488 <TIM_Base_SetConfig+0xf4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_Base_SetConfig+0x76>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a21      	ldr	r2, [pc, #132]	; (800448c <TIM_Base_SetConfig+0xf8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a20      	ldr	r2, [pc, #128]	; (8004490 <TIM_Base_SetConfig+0xfc>)
 800440e:	4013      	ands	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2280      	movs	r2, #128	; 0x80
 8004420:	4393      	bics	r3, r2
 8004422:	001a      	movs	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <TIM_Base_SetConfig+0xe4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00b      	beq.n	8004462 <TIM_Base_SetConfig+0xce>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a0d      	ldr	r2, [pc, #52]	; (8004484 <TIM_Base_SetConfig+0xf0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d007      	beq.n	8004462 <TIM_Base_SetConfig+0xce>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <TIM_Base_SetConfig+0xf4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_Base_SetConfig+0xce>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a0b      	ldr	r2, [pc, #44]	; (800448c <TIM_Base_SetConfig+0xf8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d103      	bne.n	800446a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	615a      	str	r2, [r3, #20]
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b004      	add	sp, #16
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40012c00 	.word	0x40012c00
 800447c:	40000400 	.word	0x40000400
 8004480:	40002000 	.word	0x40002000
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800
 8004490:	fffffcff 	.word	0xfffffcff

08004494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	2201      	movs	r2, #1
 80044a4:	4393      	bics	r3, r2
 80044a6:	001a      	movs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2270      	movs	r2, #112	; 0x70
 80044c2:	4393      	bics	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2203      	movs	r2, #3
 80044ca:	4393      	bics	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2202      	movs	r2, #2
 80044dc:	4393      	bics	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a27      	ldr	r2, [pc, #156]	; (800458c <TIM_OC1_SetConfig+0xf8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00b      	beq.n	800450a <TIM_OC1_SetConfig+0x76>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a26      	ldr	r2, [pc, #152]	; (8004590 <TIM_OC1_SetConfig+0xfc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <TIM_OC1_SetConfig+0x76>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a25      	ldr	r2, [pc, #148]	; (8004594 <TIM_OC1_SetConfig+0x100>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_OC1_SetConfig+0x76>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a24      	ldr	r2, [pc, #144]	; (8004598 <TIM_OC1_SetConfig+0x104>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10c      	bne.n	8004524 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2208      	movs	r2, #8
 800450e:	4393      	bics	r3, r2
 8004510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2204      	movs	r2, #4
 8004520:	4393      	bics	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a19      	ldr	r2, [pc, #100]	; (800458c <TIM_OC1_SetConfig+0xf8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00b      	beq.n	8004544 <TIM_OC1_SetConfig+0xb0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a18      	ldr	r2, [pc, #96]	; (8004590 <TIM_OC1_SetConfig+0xfc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d007      	beq.n	8004544 <TIM_OC1_SetConfig+0xb0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a17      	ldr	r2, [pc, #92]	; (8004594 <TIM_OC1_SetConfig+0x100>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_OC1_SetConfig+0xb0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a16      	ldr	r2, [pc, #88]	; (8004598 <TIM_OC1_SetConfig+0x104>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d111      	bne.n	8004568 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4a15      	ldr	r2, [pc, #84]	; (800459c <TIM_OC1_SetConfig+0x108>)
 8004548:	4013      	ands	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <TIM_OC1_SetConfig+0x10c>)
 8004550:	4013      	ands	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	46bd      	mov	sp, r7
 8004586:	b006      	add	sp, #24
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800
 800459c:	fffffeff 	.word	0xfffffeff
 80045a0:	fffffdff 	.word	0xfffffdff

080045a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	2210      	movs	r2, #16
 80045b4:	4393      	bics	r3, r2
 80045b6:	001a      	movs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a2e      	ldr	r2, [pc, #184]	; (800468c <TIM_OC2_SetConfig+0xe8>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a2d      	ldr	r2, [pc, #180]	; (8004690 <TIM_OC2_SetConfig+0xec>)
 80045da:	4013      	ands	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2220      	movs	r2, #32
 80045ee:	4393      	bics	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a24      	ldr	r2, [pc, #144]	; (8004694 <TIM_OC2_SetConfig+0xf0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10d      	bne.n	8004622 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	4393      	bics	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2240      	movs	r2, #64	; 0x40
 800461e:	4393      	bics	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <TIM_OC2_SetConfig+0xf0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00b      	beq.n	8004642 <TIM_OC2_SetConfig+0x9e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <TIM_OC2_SetConfig+0xf4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <TIM_OC2_SetConfig+0x9e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a19      	ldr	r2, [pc, #100]	; (800469c <TIM_OC2_SetConfig+0xf8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_OC2_SetConfig+0x9e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a18      	ldr	r2, [pc, #96]	; (80046a0 <TIM_OC2_SetConfig+0xfc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d113      	bne.n	800466a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <TIM_OC2_SetConfig+0x100>)
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <TIM_OC2_SetConfig+0x104>)
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	621a      	str	r2, [r3, #32]
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b006      	add	sp, #24
 800468a:	bd80      	pop	{r7, pc}
 800468c:	ffff8fff 	.word	0xffff8fff
 8004690:	fffffcff 	.word	0xfffffcff
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40014000 	.word	0x40014000
 800469c:	40014400 	.word	0x40014400
 80046a0:	40014800 	.word	0x40014800
 80046a4:	fffffbff 	.word	0xfffffbff
 80046a8:	fffff7ff 	.word	0xfffff7ff

080046ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4a35      	ldr	r2, [pc, #212]	; (8004790 <TIM_OC3_SetConfig+0xe4>)
 80046bc:	401a      	ands	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2270      	movs	r2, #112	; 0x70
 80046d8:	4393      	bics	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2203      	movs	r2, #3
 80046e0:	4393      	bics	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	4a28      	ldr	r2, [pc, #160]	; (8004794 <TIM_OC3_SetConfig+0xe8>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a24      	ldr	r2, [pc, #144]	; (8004798 <TIM_OC3_SetConfig+0xec>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10d      	bne.n	8004726 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4a23      	ldr	r2, [pc, #140]	; (800479c <TIM_OC3_SetConfig+0xf0>)
 800470e:	4013      	ands	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <TIM_OC3_SetConfig+0xf4>)
 8004722:	4013      	ands	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <TIM_OC3_SetConfig+0xec>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00b      	beq.n	8004746 <TIM_OC3_SetConfig+0x9a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <TIM_OC3_SetConfig+0xf8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <TIM_OC3_SetConfig+0x9a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1b      	ldr	r2, [pc, #108]	; (80047a8 <TIM_OC3_SetConfig+0xfc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_OC3_SetConfig+0x9a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <TIM_OC3_SetConfig+0x100>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d113      	bne.n	800476e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <TIM_OC3_SetConfig+0x104>)
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <TIM_OC3_SetConfig+0x108>)
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	621a      	str	r2, [r3, #32]
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	b006      	add	sp, #24
 800478e:	bd80      	pop	{r7, pc}
 8004790:	fffffeff 	.word	0xfffffeff
 8004794:	fffffdff 	.word	0xfffffdff
 8004798:	40012c00 	.word	0x40012c00
 800479c:	fffff7ff 	.word	0xfffff7ff
 80047a0:	fffffbff 	.word	0xfffffbff
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800
 80047b0:	ffffefff 	.word	0xffffefff
 80047b4:	ffffdfff 	.word	0xffffdfff

080047b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4a28      	ldr	r2, [pc, #160]	; (8004868 <TIM_OC4_SetConfig+0xb0>)
 80047c8:	401a      	ands	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a22      	ldr	r2, [pc, #136]	; (800486c <TIM_OC4_SetConfig+0xb4>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a21      	ldr	r2, [pc, #132]	; (8004870 <TIM_OC4_SetConfig+0xb8>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <TIM_OC4_SetConfig+0xbc>)
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	031b      	lsls	r3, r3, #12
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a19      	ldr	r2, [pc, #100]	; (8004878 <TIM_OC4_SetConfig+0xc0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00b      	beq.n	8004830 <TIM_OC4_SetConfig+0x78>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <TIM_OC4_SetConfig+0xc4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d007      	beq.n	8004830 <TIM_OC4_SetConfig+0x78>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a17      	ldr	r2, [pc, #92]	; (8004880 <TIM_OC4_SetConfig+0xc8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_OC4_SetConfig+0x78>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a16      	ldr	r2, [pc, #88]	; (8004884 <TIM_OC4_SetConfig+0xcc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d109      	bne.n	8004844 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <TIM_OC4_SetConfig+0xd0>)
 8004834:	4013      	ands	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	b006      	add	sp, #24
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	ffffefff 	.word	0xffffefff
 800486c:	ffff8fff 	.word	0xffff8fff
 8004870:	fffffcff 	.word	0xfffffcff
 8004874:	ffffdfff 	.word	0xffffdfff
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800
 8004888:	ffffbfff 	.word	0xffffbfff

0800488c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	2201      	movs	r2, #1
 80048a4:	4393      	bics	r3, r2
 80048a6:	001a      	movs	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	22f0      	movs	r2, #240	; 0xf0
 80048b6:	4393      	bics	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	220a      	movs	r2, #10
 80048c8:	4393      	bics	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b006      	add	sp, #24
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	2210      	movs	r2, #16
 80048fa:	4393      	bics	r3, r2
 80048fc:	001a      	movs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	4a0d      	ldr	r2, [pc, #52]	; (8004948 <TIM_TI2_ConfigInputStage+0x60>)
 8004912:	4013      	ands	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	22a0      	movs	r2, #160	; 0xa0
 8004924:	4393      	bics	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b006      	add	sp, #24
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	ffff0fff 	.word	0xffff0fff

0800494c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2270      	movs	r2, #112	; 0x70
 8004960:	4393      	bics	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	2207      	movs	r2, #7
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	609a      	str	r2, [r3, #8]
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b004      	add	sp, #16
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <TIM_ETR_SetConfig+0x3c>)
 8004998:	4013      	ands	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	021a      	lsls	r2, r3, #8
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b006      	add	sp, #24
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	ffff00ff 	.word	0xffff00ff

080049c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	223c      	movs	r2, #60	; 0x3c
 80049ce:	5c9b      	ldrb	r3, [r3, r2]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e047      	b.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	223c      	movs	r2, #60	; 0x3c
 80049dc:	2101      	movs	r1, #1
 80049de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	223d      	movs	r2, #61	; 0x3d
 80049e4:	2102      	movs	r1, #2
 80049e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2270      	movs	r2, #112	; 0x70
 80049fc:	4393      	bics	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00f      	beq.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	2380      	movs	r3, #128	; 0x80
 8004a22:	05db      	lsls	r3, r3, #23
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d009      	beq.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10c      	bne.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	4393      	bics	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	223d      	movs	r2, #61	; 0x3d
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	223c      	movs	r2, #60	; 0x3c
 8004a62:	2100      	movs	r1, #0
 8004a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b004      	add	sp, #16
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40014000 	.word	0x40014000

08004a7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	223c      	movs	r2, #60	; 0x3c
 8004a8e:	5c9b      	ldrb	r3, [r3, r2]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e03e      	b.n	8004b16 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	223c      	movs	r2, #60	; 0x3c
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	22ff      	movs	r2, #255	; 0xff
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	001a      	movs	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004ade:	401a      	ands	r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004aec:	401a      	ands	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004afa:	401a      	ands	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	223c      	movs	r2, #60	; 0x3c
 8004b10:	2100      	movs	r1, #0
 8004b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b004      	add	sp, #16
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	fffffcff 	.word	0xfffffcff
 8004b24:	fffffbff 	.word	0xfffffbff
 8004b28:	fffff7ff 	.word	0xfffff7ff
 8004b2c:	ffffefff 	.word	0xffffefff
 8004b30:	ffffdfff 	.word	0xffffdfff
 8004b34:	ffffbfff 	.word	0xffffbfff

08004b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e044      	b.n	8004bd4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d107      	bne.n	8004b62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2270      	movs	r2, #112	; 0x70
 8004b56:	2100      	movs	r1, #0
 8004b58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fc f8db 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2224      	movs	r2, #36	; 0x24
 8004b66:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2101      	movs	r1, #1
 8004b74:	438a      	bics	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f000 f830 	bl	8004be0 <UART_SetConfig>
 8004b80:	0003      	movs	r3, r0
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e024      	b.n	8004bd4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 f9ef 	bl	8004f78 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	490d      	ldr	r1, [pc, #52]	; (8004bdc <HAL_UART_Init+0xa4>)
 8004ba6:	400a      	ands	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	212a      	movs	r1, #42	; 0x2a
 8004bb6:	438a      	bics	r2, r1
 8004bb8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 fa87 	bl	80050e0 <UART_CheckIdleState>
 8004bd2:	0003      	movs	r3, r0
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	ffffb7ff 	.word	0xffffb7ff

08004be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bec:	2317      	movs	r3, #23
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4ac5      	ldr	r2, [pc, #788]	; (8004f28 <UART_SetConfig+0x348>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	0019      	movs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4ac0      	ldr	r2, [pc, #768]	; (8004f2c <UART_SetConfig+0x34c>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4ab7      	ldr	r2, [pc, #732]	; (8004f30 <UART_SetConfig+0x350>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	0019      	movs	r1, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4ab3      	ldr	r2, [pc, #716]	; (8004f34 <UART_SetConfig+0x354>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d125      	bne.n	8004cb6 <UART_SetConfig+0xd6>
 8004c6a:	4bb3      	ldr	r3, [pc, #716]	; (8004f38 <UART_SetConfig+0x358>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	2203      	movs	r2, #3
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d00f      	beq.n	8004c96 <UART_SetConfig+0xb6>
 8004c76:	d304      	bcc.n	8004c82 <UART_SetConfig+0xa2>
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d011      	beq.n	8004ca0 <UART_SetConfig+0xc0>
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d005      	beq.n	8004c8c <UART_SetConfig+0xac>
 8004c80:	e013      	b.n	8004caa <UART_SetConfig+0xca>
 8004c82:	231f      	movs	r3, #31
 8004c84:	18fb      	adds	r3, r7, r3
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e064      	b.n	8004d56 <UART_SetConfig+0x176>
 8004c8c:	231f      	movs	r3, #31
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2202      	movs	r2, #2
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	e05f      	b.n	8004d56 <UART_SetConfig+0x176>
 8004c96:	231f      	movs	r3, #31
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	e05a      	b.n	8004d56 <UART_SetConfig+0x176>
 8004ca0:	231f      	movs	r3, #31
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e055      	b.n	8004d56 <UART_SetConfig+0x176>
 8004caa:	231f      	movs	r3, #31
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	2210      	movs	r2, #16
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	e04f      	b.n	8004d56 <UART_SetConfig+0x176>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4aa0      	ldr	r2, [pc, #640]	; (8004f3c <UART_SetConfig+0x35c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d132      	bne.n	8004d26 <UART_SetConfig+0x146>
 8004cc0:	4b9d      	ldr	r3, [pc, #628]	; (8004f38 <UART_SetConfig+0x358>)
 8004cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc4:	23c0      	movs	r3, #192	; 0xc0
 8004cc6:	029b      	lsls	r3, r3, #10
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2280      	movs	r2, #128	; 0x80
 8004ccc:	0252      	lsls	r2, r2, #9
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d019      	beq.n	8004d06 <UART_SetConfig+0x126>
 8004cd2:	2280      	movs	r2, #128	; 0x80
 8004cd4:	0252      	lsls	r2, r2, #9
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d802      	bhi.n	8004ce0 <UART_SetConfig+0x100>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <UART_SetConfig+0x112>
 8004cde:	e01c      	b.n	8004d1a <UART_SetConfig+0x13a>
 8004ce0:	2280      	movs	r2, #128	; 0x80
 8004ce2:	0292      	lsls	r2, r2, #10
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <UART_SetConfig+0x130>
 8004ce8:	22c0      	movs	r2, #192	; 0xc0
 8004cea:	0292      	lsls	r2, r2, #10
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d005      	beq.n	8004cfc <UART_SetConfig+0x11c>
 8004cf0:	e013      	b.n	8004d1a <UART_SetConfig+0x13a>
 8004cf2:	231f      	movs	r3, #31
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e02c      	b.n	8004d56 <UART_SetConfig+0x176>
 8004cfc:	231f      	movs	r3, #31
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2202      	movs	r2, #2
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	e027      	b.n	8004d56 <UART_SetConfig+0x176>
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e022      	b.n	8004d56 <UART_SetConfig+0x176>
 8004d10:	231f      	movs	r3, #31
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	2208      	movs	r2, #8
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e01d      	b.n	8004d56 <UART_SetConfig+0x176>
 8004d1a:	231f      	movs	r3, #31
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2210      	movs	r2, #16
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	e017      	b.n	8004d56 <UART_SetConfig+0x176>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a85      	ldr	r2, [pc, #532]	; (8004f40 <UART_SetConfig+0x360>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d104      	bne.n	8004d3a <UART_SetConfig+0x15a>
 8004d30:	231f      	movs	r3, #31
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e00d      	b.n	8004d56 <UART_SetConfig+0x176>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a81      	ldr	r2, [pc, #516]	; (8004f44 <UART_SetConfig+0x364>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d104      	bne.n	8004d4e <UART_SetConfig+0x16e>
 8004d44:	231f      	movs	r3, #31
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
 8004d4c:	e003      	b.n	8004d56 <UART_SetConfig+0x176>
 8004d4e:	231f      	movs	r3, #31
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	2210      	movs	r2, #16
 8004d54:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69da      	ldr	r2, [r3, #28]
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d000      	beq.n	8004d64 <UART_SetConfig+0x184>
 8004d62:	e07d      	b.n	8004e60 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8004d64:	231f      	movs	r3, #31
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d01c      	beq.n	8004da8 <UART_SetConfig+0x1c8>
 8004d6e:	dc02      	bgt.n	8004d76 <UART_SetConfig+0x196>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <UART_SetConfig+0x1a0>
 8004d74:	e04b      	b.n	8004e0e <UART_SetConfig+0x22e>
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d025      	beq.n	8004dc6 <UART_SetConfig+0x1e6>
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d037      	beq.n	8004dee <UART_SetConfig+0x20e>
 8004d7e:	e046      	b.n	8004e0e <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fe f978 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8004d84:	0003      	movs	r3, r0
 8004d86:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	005a      	lsls	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	18d2      	adds	r2, r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	0019      	movs	r1, r3
 8004d9a:	0010      	movs	r0, r2
 8004d9c:	f7fb f9b4 	bl	8000108 <__udivsi3>
 8004da0:	0003      	movs	r3, r0
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	61bb      	str	r3, [r7, #24]
        break;
 8004da6:	e037      	b.n	8004e18 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	4a66      	ldr	r2, [pc, #408]	; (8004f48 <UART_SetConfig+0x368>)
 8004db0:	189a      	adds	r2, r3, r2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	0019      	movs	r1, r3
 8004db8:	0010      	movs	r0, r2
 8004dba:	f7fb f9a5 	bl	8000108 <__udivsi3>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	61bb      	str	r3, [r7, #24]
        break;
 8004dc4:	e028      	b.n	8004e18 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7fe f8cb 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	005a      	lsls	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	18d2      	adds	r2, r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	0019      	movs	r1, r3
 8004de0:	0010      	movs	r0, r2
 8004de2:	f7fb f991 	bl	8000108 <__udivsi3>
 8004de6:	0003      	movs	r3, r0
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	61bb      	str	r3, [r7, #24]
        break;
 8004dec:	e014      	b.n	8004e18 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	2280      	movs	r2, #128	; 0x80
 8004df6:	0252      	lsls	r2, r2, #9
 8004df8:	189a      	adds	r2, r3, r2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	0019      	movs	r1, r3
 8004e00:	0010      	movs	r0, r2
 8004e02:	f7fb f981 	bl	8000108 <__udivsi3>
 8004e06:	0003      	movs	r3, r0
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	61bb      	str	r3, [r7, #24]
        break;
 8004e0c:	e004      	b.n	8004e18 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8004e0e:	2317      	movs	r3, #23
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	2201      	movs	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
        break;
 8004e16:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b0f      	cmp	r3, #15
 8004e1c:	d91b      	bls.n	8004e56 <UART_SetConfig+0x276>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	4a4a      	ldr	r2, [pc, #296]	; (8004f4c <UART_SetConfig+0x36c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d817      	bhi.n	8004e56 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	200a      	movs	r0, #10
 8004e2c:	183b      	adds	r3, r7, r0
 8004e2e:	210f      	movs	r1, #15
 8004e30:	438a      	bics	r2, r1
 8004e32:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2207      	movs	r2, #7
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	b299      	uxth	r1, r3
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	183a      	adds	r2, r7, r0
 8004e44:	8812      	ldrh	r2, [r2, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	183a      	adds	r2, r7, r0
 8004e50:	8812      	ldrh	r2, [r2, #0]
 8004e52:	60da      	str	r2, [r3, #12]
 8004e54:	e082      	b.n	8004f5c <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e56:	2317      	movs	r3, #23
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e07d      	b.n	8004f5c <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8004e60:	231f      	movs	r3, #31
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d01b      	beq.n	8004ea2 <UART_SetConfig+0x2c2>
 8004e6a:	dc02      	bgt.n	8004e72 <UART_SetConfig+0x292>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <UART_SetConfig+0x29c>
 8004e70:	e049      	b.n	8004f06 <UART_SetConfig+0x326>
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d024      	beq.n	8004ec0 <UART_SetConfig+0x2e0>
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d035      	beq.n	8004ee6 <UART_SetConfig+0x306>
 8004e7a:	e044      	b.n	8004f06 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7fe f8fa 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8004e80:	0003      	movs	r3, r0
 8004e82:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	085a      	lsrs	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	18d2      	adds	r2, r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	0019      	movs	r1, r3
 8004e94:	0010      	movs	r0, r2
 8004e96:	f7fb f937 	bl	8000108 <__udivsi3>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e036      	b.n	8004f10 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	4a29      	ldr	r2, [pc, #164]	; (8004f50 <UART_SetConfig+0x370>)
 8004eaa:	189a      	adds	r2, r3, r2
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	0010      	movs	r0, r2
 8004eb4:	f7fb f928 	bl	8000108 <__udivsi3>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	61bb      	str	r3, [r7, #24]
        break;
 8004ebe:	e027      	b.n	8004f10 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec0:	f7fe f84e 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	085a      	lsrs	r2, r3, #1
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	18d2      	adds	r2, r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	0010      	movs	r0, r2
 8004eda:	f7fb f915 	bl	8000108 <__udivsi3>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	61bb      	str	r3, [r7, #24]
        break;
 8004ee4:	e014      	b.n	8004f10 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	2280      	movs	r2, #128	; 0x80
 8004eee:	0212      	lsls	r2, r2, #8
 8004ef0:	189a      	adds	r2, r3, r2
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	0010      	movs	r0, r2
 8004efa:	f7fb f905 	bl	8000108 <__udivsi3>
 8004efe:	0003      	movs	r3, r0
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	61bb      	str	r3, [r7, #24]
        break;
 8004f04:	e004      	b.n	8004f10 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8004f06:	2317      	movs	r3, #23
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
        break;
 8004f0e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	d91e      	bls.n	8004f54 <UART_SetConfig+0x374>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <UART_SetConfig+0x36c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d81a      	bhi.n	8004f54 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	60da      	str	r2, [r3, #12]
 8004f26:	e019      	b.n	8004f5c <UART_SetConfig+0x37c>
 8004f28:	efff69f3 	.word	0xefff69f3
 8004f2c:	ffffcfff 	.word	0xffffcfff
 8004f30:	fffff4ff 	.word	0xfffff4ff
 8004f34:	40013800 	.word	0x40013800
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40004400 	.word	0x40004400
 8004f40:	40004800 	.word	0x40004800
 8004f44:	40004c00 	.word	0x40004c00
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	0000ffff 	.word	0x0000ffff
 8004f50:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8004f54:	2317      	movs	r3, #23
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f68:	2317      	movs	r3, #23
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	781b      	ldrb	r3, [r3, #0]
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b008      	add	sp, #32
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)

08004f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a4a      	ldr	r2, [pc, #296]	; (80050bc <UART_AdvFeatureConfig+0x144>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d00b      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4a43      	ldr	r2, [pc, #268]	; (80050c0 <UART_AdvFeatureConfig+0x148>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2204      	movs	r2, #4
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <UART_AdvFeatureConfig+0x14c>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2208      	movs	r2, #8
 8004fec:	4013      	ands	r3, r2
 8004fee:	d00b      	beq.n	8005008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4a34      	ldr	r2, [pc, #208]	; (80050c8 <UART_AdvFeatureConfig+0x150>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2210      	movs	r2, #16
 800500e:	4013      	ands	r3, r2
 8005010:	d00b      	beq.n	800502a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <UART_AdvFeatureConfig+0x154>)
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	2220      	movs	r2, #32
 8005030:	4013      	ands	r3, r2
 8005032:	d00b      	beq.n	800504c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <UART_AdvFeatureConfig+0x158>)
 800503c:	4013      	ands	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	4013      	ands	r3, r2
 8005054:	d01d      	beq.n	8005092 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <UART_AdvFeatureConfig+0x15c>)
 800505e:	4013      	ands	r3, r2
 8005060:	0019      	movs	r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	035b      	lsls	r3, r3, #13
 8005076:	429a      	cmp	r2, r3
 8005078:	d10b      	bne.n	8005092 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <UART_AdvFeatureConfig+0x160>)
 8005082:	4013      	ands	r3, r2
 8005084:	0019      	movs	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	4013      	ands	r3, r2
 800509a:	d00b      	beq.n	80050b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <UART_AdvFeatureConfig+0x164>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	0019      	movs	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	fffdffff 	.word	0xfffdffff
 80050c0:	fffeffff 	.word	0xfffeffff
 80050c4:	fffbffff 	.word	0xfffbffff
 80050c8:	ffff7fff 	.word	0xffff7fff
 80050cc:	ffffefff 	.word	0xffffefff
 80050d0:	ffffdfff 	.word	0xffffdfff
 80050d4:	ffefffff 	.word	0xffefffff
 80050d8:	ff9fffff 	.word	0xff9fffff
 80050dc:	fff7ffff 	.word	0xfff7ffff

080050e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80050ee:	f7fb ffd7 	bl	80010a0 <HAL_GetTick>
 80050f2:	0003      	movs	r3, r0
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2208      	movs	r2, #8
 80050fe:	4013      	ands	r3, r2
 8005100:	2b08      	cmp	r3, #8
 8005102:	d10d      	bne.n	8005120 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	0399      	lsls	r1, r3, #14
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <UART_CheckIdleState+0x88>)
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	0013      	movs	r3, r2
 8005112:	2200      	movs	r2, #0
 8005114:	f000 f82a 	bl	800516c <UART_WaitOnFlagUntilTimeout>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d001      	beq.n	8005120 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e01f      	b.n	8005160 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2204      	movs	r2, #4
 8005128:	4013      	ands	r3, r2
 800512a:	2b04      	cmp	r3, #4
 800512c:	d10d      	bne.n	800514a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	03d9      	lsls	r1, r3, #15
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <UART_CheckIdleState+0x88>)
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	0013      	movs	r3, r2
 800513c:	2200      	movs	r2, #0
 800513e:	f000 f815 	bl	800516c <UART_WaitOnFlagUntilTimeout>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d001      	beq.n	800514a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e00a      	b.n	8005160 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2270      	movs	r2, #112	; 0x70
 800515a:	2100      	movs	r1, #0
 800515c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b004      	add	sp, #16
 8005166:	bd80      	pop	{r7, pc}
 8005168:	01ffffff 	.word	0x01ffffff

0800516c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	1dfb      	adds	r3, r7, #7
 800517a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517c:	e05d      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	3301      	adds	r3, #1
 8005182:	d05a      	beq.n	800523a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005184:	f7fb ff8c 	bl	80010a0 <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11b      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	492f      	ldr	r1, [pc, #188]	; (8005264 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80051a6:	400a      	ands	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2101      	movs	r1, #1
 80051b6:	438a      	bics	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2270      	movs	r2, #112	; 0x70
 80051ca:	2100      	movs	r1, #0
 80051cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e043      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2204      	movs	r2, #4
 80051da:	4013      	ands	r3, r2
 80051dc:	d02d      	beq.n	800523a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	401a      	ands	r2, r3
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d123      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	0112      	lsls	r2, r2, #4
 80051fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4917      	ldr	r1, [pc, #92]	; (8005264 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005208:	400a      	ands	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	438a      	bics	r2, r1
 800521a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2270      	movs	r2, #112	; 0x70
 8005232:	2100      	movs	r1, #0
 8005234:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e00f      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	4013      	ands	r3, r2
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	425a      	negs	r2, r3
 800524a:	4153      	adcs	r3, r2
 800524c:	b2db      	uxtb	r3, r3
 800524e:	001a      	movs	r2, r3
 8005250:	1dfb      	adds	r3, r7, #7
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d092      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	0018      	movs	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	b004      	add	sp, #16
 8005260:	bd80      	pop	{r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	fffffe5f 	.word	0xfffffe5f

08005268 <_ZN5ClockC1Eb>:
#include <app/Clock.h>

Clock::Clock(bool nbrWatchPtr)
 8005268:	b590      	push	{r4, r7, lr}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	000a      	movs	r2, r1
 8005272:	1cfb      	adds	r3, r7, #3
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <_ZN5ClockC1Eb+0xbc>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	601a      	str	r2, [r3, #0]
{
	//False -> 2 watch pointers
	//True -> 3 watch pointers
	if(nbrWatchPtr == false)
 800527c:	1cfb      	adds	r3, r7, #3
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2201      	movs	r2, #1
 8005282:	4053      	eors	r3, r2
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01d      	beq.n	80052c6 <_ZN5ClockC1Eb+0x5e>
	{
		_watchPtr[0] = new WatchPointer(3);	//3° output angle
 800528a:	2392      	movs	r3, #146	; 0x92
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	0018      	movs	r0, r3
 8005290:	f005 feb3 	bl	800affa <_Znwj>
 8005294:	0003      	movs	r3, r0
 8005296:	001c      	movs	r4, r3
 8005298:	2103      	movs	r1, #3
 800529a:	0020      	movs	r0, r4
 800529c:	f002 fa32 	bl	8007704 <_ZN12WatchPointerC1Eh>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	605c      	str	r4, [r3, #4]
		_watchPtr[1] = new WatchPointer(2);	//2° output angle
 80052a4:	2392      	movs	r3, #146	; 0x92
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	0018      	movs	r0, r3
 80052aa:	f005 fea6 	bl	800affa <_Znwj>
 80052ae:	0003      	movs	r3, r0
 80052b0:	001c      	movs	r4, r3
 80052b2:	2102      	movs	r1, #2
 80052b4:	0020      	movs	r0, r4
 80052b6:	f002 fa25 	bl	8007704 <_ZN12WatchPointerC1Eh>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	609c      	str	r4, [r3, #8]
		nbrWatchPointer = 2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	741a      	strb	r2, [r3, #16]
 80052c4:	e029      	b.n	800531a <_ZN5ClockC1Eb+0xb2>
	}
	else
	{
		_watchPtr[0] = new WatchPointer(2);	//2° output angle
 80052c6:	2392      	movs	r3, #146	; 0x92
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	0018      	movs	r0, r3
 80052cc:	f005 fe95 	bl	800affa <_Znwj>
 80052d0:	0003      	movs	r3, r0
 80052d2:	001c      	movs	r4, r3
 80052d4:	2102      	movs	r1, #2
 80052d6:	0020      	movs	r0, r4
 80052d8:	f002 fa14 	bl	8007704 <_ZN12WatchPointerC1Eh>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605c      	str	r4, [r3, #4]
		_watchPtr[1] = new WatchPointer(2);	//2° output angle
 80052e0:	2392      	movs	r3, #146	; 0x92
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f005 fe88 	bl	800affa <_Znwj>
 80052ea:	0003      	movs	r3, r0
 80052ec:	001c      	movs	r4, r3
 80052ee:	2102      	movs	r1, #2
 80052f0:	0020      	movs	r0, r4
 80052f2:	f002 fa07 	bl	8007704 <_ZN12WatchPointerC1Eh>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609c      	str	r4, [r3, #8]
		_watchPtr[2] = new WatchPointer(6);	//6° output angle
 80052fa:	2392      	movs	r3, #146	; 0x92
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	0018      	movs	r0, r3
 8005300:	f005 fe7b 	bl	800affa <_Znwj>
 8005304:	0003      	movs	r3, r0
 8005306:	001c      	movs	r4, r3
 8005308:	2106      	movs	r1, #6
 800530a:	0020      	movs	r0, r4
 800530c:	f002 f9fa 	bl	8007704 <_ZN12WatchPointerC1Eh>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60dc      	str	r4, [r3, #12]
		nbrWatchPointer = 3;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2203      	movs	r2, #3
 8005318:	741a      	strb	r2, [r3, #16]
	}
}
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b003      	add	sp, #12
 8005322:	bd90      	pop	{r4, r7, pc}
 8005324:	0800c30c 	.word	0x0800c30c

08005328 <_ZN5ClockD1Ev>:

Clock::~Clock()
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	4a03      	ldr	r2, [pc, #12]	; (8005340 <_ZN5ClockD1Ev+0x18>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
{}
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}
 8005340:	0800c30c 	.word	0x0800c30c

08005344 <_ZN5ClockD0Ev>:
Clock::~Clock()
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
{}
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	0018      	movs	r0, r3
 8005350:	f7ff ffea 	bl	8005328 <_ZN5ClockD1Ev>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2114      	movs	r1, #20
 8005358:	0018      	movs	r0, r3
 800535a:	f005 fe4a 	bl	800aff2 <_ZdlPvj>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	b002      	add	sp, #8
 8005366:	bd80      	pop	{r7, pc}

08005368 <_ZN5Clock15getWatchPointerEi>:

WatchPointer* Clock::getWatchPointer(int index)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
	if(index < nbrWatchPointer)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	7c1b      	ldrb	r3, [r3, #16]
 8005376:	001a      	movs	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4293      	cmp	r3, r2
 800537c:	da06      	bge.n	800538c <_ZN5Clock15getWatchPointerEi+0x24>
	{
		return _watchPtr[index];
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	18d3      	adds	r3, r2, r3
 8005386:	3304      	adds	r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	e001      	b.n	8005390 <_ZN5Clock15getWatchPointerEi+0x28>
	}
	else
	{
		Error_Handler();
 800538c:	f7fb fba6 	bl	8000adc <Error_Handler>
	}
}
 8005390:	0018      	movs	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <_ZNK7XFEvent12getEventTypeEv>:

    /** \brief Returns the type of the event.
     *
     * Can be used to distinguish between an event or a timeout.
     */
    inline XFEventType getEventType() const { return _eventType; }
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	791b      	ldrb	r3, [r3, #4]
 80053a4:	b25b      	sxtb	r3, r3
 80053a6:	0018      	movs	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b002      	add	sp, #8
 80053ac:	bd80      	pop	{r7, pc}

080053ae <_ZNK7XFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { _pBehavior = pBehavior; }

    inline int getId() const { return _id; }		///< Returns #_id identifying the event in the behaviors context.
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0018      	movs	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	b002      	add	sp, #8
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <_ZN13XFEventStatusC1ENS_12eEventStatusE>:
	/**
	 * Constructor
	 *
	 * \param eventStatus Initial value of the event status.
	 */
    XFEventStatus(eEventStatus eventStatus = Unknown) : _status(eventStatus) {}
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	000a      	movs	r2, r1
 80053cc:	1cfb      	adds	r3, r7, #3
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	1cfa      	adds	r2, r7, #3
 80053d4:	7812      	ldrb	r2, [r2, #0]
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b002      	add	sp, #8
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <_ZN10XFBehavior15scheduleTimeoutEii>:
     *
     * Will work only if the current event is of type IXFEvent::Timeout.
     */
    const XFTimeout * getCurrentTimeout();

    inline void scheduleTimeout(int timeoutId, int interval) { getDispatcher()->scheduleTimeout(timeoutId, interval, this); }	///< @brief Schedules a timeout for this state machine.
 80053e2:	b590      	push	{r4, r7, lr}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	0018      	movs	r0, r3
 80053f2:	f003 f912 	bl	800861a <_ZN10XFBehavior13getDispatcherEv>
 80053f6:	6803      	ldr	r3, [r0, #0]
 80053f8:	3318      	adds	r3, #24
 80053fa:	681c      	ldr	r4, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	47a0      	blx	r4
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	46bd      	mov	sp, r7
 8005408:	b005      	add	sp, #20
 800540a:	bd90      	pop	{r4, r7, pc}

0800540c <_ZN10ControllerC1Ev>:
#include "event/evTimeTrigger.h"
#include "event/evDone.h"
#include "event/evGoToZero.h"
#include "Core/Inc/main.h"

Controller::Controller()
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2100      	movs	r1, #0
 8005418:	0018      	movs	r0, r3
 800541a:	f003 f811 	bl	8008440 <_ZN10XFBehaviorC1Eb>
 800541e:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <_ZN10ControllerC1Ev+0x4c>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a0d      	ldr	r2, [pc, #52]	; (800545c <_ZN10ControllerC1Ev+0x50>)
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40
{
	_currentState = STATE_INIT;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	224b      	movs	r2, #75	; 0x4b
 8005430:	2100      	movs	r1, #0
 8005432:	5499      	strb	r1, [r3, r2]

	test = 0;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	223b      	movs	r2, #59	; 0x3b
 8005438:	2100      	movs	r1, #0
 800543a:	5499      	strb	r1, [r3, r2]

	goToZero = false;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2244      	movs	r2, #68	; 0x44
 8005440:	2100      	movs	r1, #0
 8005442:	5499      	strb	r1, [r3, r2]

	//ONLY FOR TEST
	nbrWatchPtrClk = 0b00010110;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2246      	movs	r2, #70	; 0x46
 8005448:	2116      	movs	r1, #22
 800544a:	5499      	strb	r1, [r3, r2]
}
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b002      	add	sp, #8
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	0800c464 	.word	0x0800c464
 800545c:	0800c134 	.word	0x0800c134

08005460 <_ZN10ControllerD1Ev>:

Controller::~Controller()
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	4a05      	ldr	r2, [pc, #20]	; (8005480 <_ZN10ControllerD1Ev+0x20>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f003 f835 	bl	80084e0 <_ZN10XFBehaviorD1Ev>
{}
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0018      	movs	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	b002      	add	sp, #8
 800547e:	bd80      	pop	{r7, pc}
 8005480:	0800c464 	.word	0x0800c464

08005484 <_ZN10ControllerD0Ev>:
Controller::~Controller()
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
{}
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	0018      	movs	r0, r3
 8005490:	f7ff ffe6 	bl	8005460 <_ZN10ControllerD1Ev>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2150      	movs	r1, #80	; 0x50
 8005498:	0018      	movs	r0, r3
 800549a:	f005 fdaa 	bl	800aff2 <_ZdlPvj>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b002      	add	sp, #8
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <__tcf_0>:

//Singleton pattern
//Return the reference of the singleton
Controller* Controller::getInstance()
{
	static Controller _controller;
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <__tcf_0+0x10>)
 80054ae:	0018      	movs	r0, r3
 80054b0:	f7ff ffd6 	bl	8005460 <_ZN10ControllerD1Ev>
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000094 	.word	0x20000094

080054bc <_ZN10Controller11getInstanceEv>:
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
	static Controller _controller;
 80054c0:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <_ZN10Controller11getInstanceEv+0x2c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2201      	movs	r2, #1
 80054c6:	4013      	ands	r3, r2
 80054c8:	d10a      	bne.n	80054e0 <_ZN10Controller11getInstanceEv+0x24>
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <_ZN10Controller11getInstanceEv+0x30>)
 80054cc:	0018      	movs	r0, r3
 80054ce:	f7ff ff9d 	bl	800540c <_ZN10ControllerC1Ev>
 80054d2:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <_ZN10Controller11getInstanceEv+0x2c>)
 80054d4:	2201      	movs	r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <_ZN10Controller11getInstanceEv+0x34>)
 80054da:	0018      	movs	r0, r3
 80054dc:	f005 fdea 	bl	800b0b4 <atexit>
	return &_controller;
 80054e0:	4b02      	ldr	r3, [pc, #8]	; (80054ec <_ZN10Controller11getInstanceEv+0x30>)
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	200000e4 	.word	0x200000e4
 80054ec:	20000094 	.word	0x20000094
 80054f0:	080054a9 	.word	0x080054a9

080054f4 <_ZN10Controller11intitializeEv>:

void Controller::intitialize()
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
}
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	b002      	add	sp, #8
 8005502:	bd80      	pop	{r7, pc}

08005504 <_ZN10Controller5startEv>:

void Controller::start()
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	startBehavior();
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	0010      	movs	r0, r2
 8005518:	4798      	blx	r3
}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b002      	add	sp, #8
 8005520:	bd80      	pop	{r7, pc}

08005522 <_ZN10Controller8onIrqSPIEv>:

void Controller::onIrqSPI()
{
 8005522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
	GEN(evSpiIrq());
 800552a:	687d      	ldr	r5, [r7, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	681c      	ldr	r4, [r3, #0]
 8005534:	2014      	movs	r0, #20
 8005536:	f005 fd60 	bl	800affa <_Znwj>
 800553a:	0003      	movs	r3, r0
 800553c:	001e      	movs	r6, r3
 800553e:	0030      	movs	r0, r6
 8005540:	f002 feae 	bl	80082a0 <_ZN8evSpiIrqC1Ev>
 8005544:	0031      	movs	r1, r6
 8005546:	0028      	movs	r0, r5
 8005548:	47a0      	blx	r4
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	b003      	add	sp, #12
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005554 <_ZN10Controller8onIrqCANEv>:

void Controller::onIrqCAN()
{
 8005554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &myRxMessage, buffer_CAN_rx);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3333      	adds	r3, #51	; 0x33
 8005560:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <_ZN10Controller8onIrqCANEv+0x40>)
 8005562:	480d      	ldr	r0, [pc, #52]	; (8005598 <_ZN10Controller8onIrqCANEv+0x44>)
 8005564:	2100      	movs	r1, #0
 8005566:	f7fc f8ba 	bl	80016de <HAL_CAN_GetRxMessage>
	GEN(evCanIrq());
 800556a:	687d      	ldr	r5, [r7, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	681c      	ldr	r4, [r3, #0]
 8005574:	2014      	movs	r0, #20
 8005576:	f005 fd40 	bl	800affa <_Znwj>
 800557a:	0003      	movs	r3, r0
 800557c:	001e      	movs	r6, r3
 800557e:	0030      	movs	r0, r6
 8005580:	f002 fd3e 	bl	8008000 <_ZN8evCanIrqC1Ev>
 8005584:	0031      	movs	r1, r6
 8005586:	0028      	movs	r0, r5
 8005588:	47a0      	blx	r4
}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	46bd      	mov	sp, r7
 800558e:	b003      	add	sp, #12
 8005590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	20000248 	.word	0x20000248
 8005598:	20000220 	.word	0x20000220

0800559c <_ZN10Controller13readDIPSwitchEv>:

void Controller::readDIPSwitch()
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	//Read DIP switchs used for the processor address
	// |= <=> XOR
	myAddress |= HAL_GPIO_ReadPin(SW_4_GPIO_Port, SW_4_Pin) << 4;
 80055a4:	4b2e      	ldr	r3, [pc, #184]	; (8005660 <_ZN10Controller13readDIPSwitchEv+0xc4>)
 80055a6:	2140      	movs	r1, #64	; 0x40
 80055a8:	0018      	movs	r0, r3
 80055aa:	f7fd f823 	bl	80025f4 <HAL_GPIO_ReadPin>
 80055ae:	0003      	movs	r3, r0
 80055b0:	0119      	lsls	r1, r3, #4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2245      	movs	r2, #69	; 0x45
 80055b6:	5c9b      	ldrb	r3, [r3, r2]
 80055b8:	b25a      	sxtb	r2, r3
 80055ba:	b24b      	sxtb	r3, r1
 80055bc:	4313      	orrs	r3, r2
 80055be:	b25b      	sxtb	r3, r3
 80055c0:	b2d9      	uxtb	r1, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2245      	movs	r2, #69	; 0x45
 80055c6:	5499      	strb	r1, [r3, r2]
	myAddress |= HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) << 3;
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <_ZN10Controller13readDIPSwitchEv+0xc4>)
 80055ca:	2120      	movs	r1, #32
 80055cc:	0018      	movs	r0, r3
 80055ce:	f7fd f811 	bl	80025f4 <HAL_GPIO_ReadPin>
 80055d2:	0003      	movs	r3, r0
 80055d4:	00d9      	lsls	r1, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2245      	movs	r2, #69	; 0x45
 80055da:	5c9b      	ldrb	r3, [r3, r2]
 80055dc:	b25a      	sxtb	r2, r3
 80055de:	b24b      	sxtb	r3, r1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b25b      	sxtb	r3, r3
 80055e4:	b2d9      	uxtb	r1, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2245      	movs	r2, #69	; 0x45
 80055ea:	5499      	strb	r1, [r3, r2]
	myAddress |= HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) << 2;
 80055ec:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <_ZN10Controller13readDIPSwitchEv+0xc4>)
 80055ee:	2110      	movs	r1, #16
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7fc ffff 	bl	80025f4 <HAL_GPIO_ReadPin>
 80055f6:	0003      	movs	r3, r0
 80055f8:	0099      	lsls	r1, r3, #2
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2245      	movs	r2, #69	; 0x45
 80055fe:	5c9b      	ldrb	r3, [r3, r2]
 8005600:	b25a      	sxtb	r2, r3
 8005602:	b24b      	sxtb	r3, r1
 8005604:	4313      	orrs	r3, r2
 8005606:	b25b      	sxtb	r3, r3
 8005608:	b2d9      	uxtb	r1, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2245      	movs	r2, #69	; 0x45
 800560e:	5499      	strb	r1, [r3, r2]
	myAddress |= HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) << 1;
 8005610:	4b13      	ldr	r3, [pc, #76]	; (8005660 <_ZN10Controller13readDIPSwitchEv+0xc4>)
 8005612:	2108      	movs	r1, #8
 8005614:	0018      	movs	r0, r3
 8005616:	f7fc ffed 	bl	80025f4 <HAL_GPIO_ReadPin>
 800561a:	0003      	movs	r3, r0
 800561c:	0059      	lsls	r1, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2245      	movs	r2, #69	; 0x45
 8005622:	5c9b      	ldrb	r3, [r3, r2]
 8005624:	b25a      	sxtb	r2, r3
 8005626:	b24b      	sxtb	r3, r1
 8005628:	4313      	orrs	r3, r2
 800562a:	b25b      	sxtb	r3, r3
 800562c:	b2d9      	uxtb	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2245      	movs	r2, #69	; 0x45
 8005632:	5499      	strb	r1, [r3, r2]
	myAddress |= HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) << 0;
 8005634:	4b0a      	ldr	r3, [pc, #40]	; (8005660 <_ZN10Controller13readDIPSwitchEv+0xc4>)
 8005636:	2104      	movs	r1, #4
 8005638:	0018      	movs	r0, r3
 800563a:	f7fc ffdb 	bl	80025f4 <HAL_GPIO_ReadPin>
 800563e:	0003      	movs	r3, r0
 8005640:	0019      	movs	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2245      	movs	r2, #69	; 0x45
 8005646:	5c9b      	ldrb	r3, [r3, r2]
 8005648:	b25a      	sxtb	r2, r3
 800564a:	b24b      	sxtb	r3, r1
 800564c:	4313      	orrs	r3, r2
 800564e:	b25b      	sxtb	r3, r3
 8005650:	b2d9      	uxtb	r1, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2245      	movs	r2, #69	; 0x45
 8005656:	5499      	strb	r1, [r3, r2]
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b002      	add	sp, #8
 800565e:	bd80      	pop	{r7, pc}
 8005660:	48001000 	.word	0x48001000

08005664 <_ZN10Controller20initializeMotorsGPIOEv>:

void Controller::initializeMotorsGPIO()
{
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b087      	sub	sp, #28
 8005668:	af04      	add	r7, sp, #16
 800566a:	6078      	str	r0, [r7, #4]
	//False -> 2 watch pointers
	//True -> 3 watch pointers
	_clock[0] = new Clock((nbrWatchPtrClk & 0b00000001)); //2
 800566c:	2014      	movs	r0, #20
 800566e:	f005 fcc4 	bl	800affa <_Znwj>
 8005672:	0003      	movs	r3, r0
 8005674:	001c      	movs	r4, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2246      	movs	r2, #70	; 0x46
 800567a:	5c9b      	ldrb	r3, [r3, r2]
 800567c:	001a      	movs	r2, r3
 800567e:	2301      	movs	r3, #1
 8005680:	4013      	ands	r3, r2
 8005682:	1e5a      	subs	r2, r3, #1
 8005684:	4193      	sbcs	r3, r2
 8005686:	b2db      	uxtb	r3, r3
 8005688:	0019      	movs	r1, r3
 800568a:	0020      	movs	r0, r4
 800568c:	f7ff fdec 	bl	8005268 <_ZN5ClockC1Eb>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	611c      	str	r4, [r3, #16]
	_clock[1] = new Clock((nbrWatchPtrClk & 0b00000010) >> 1); //3
 8005694:	2014      	movs	r0, #20
 8005696:	f005 fcb0 	bl	800affa <_Znwj>
 800569a:	0003      	movs	r3, r0
 800569c:	001c      	movs	r4, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2246      	movs	r2, #70	; 0x46
 80056a2:	5c9b      	ldrb	r3, [r3, r2]
 80056a4:	001a      	movs	r2, r3
 80056a6:	2302      	movs	r3, #2
 80056a8:	4013      	ands	r3, r2
 80056aa:	1e5a      	subs	r2, r3, #1
 80056ac:	4193      	sbcs	r3, r2
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	0019      	movs	r1, r3
 80056b2:	0020      	movs	r0, r4
 80056b4:	f7ff fdd8 	bl	8005268 <_ZN5ClockC1Eb>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	615c      	str	r4, [r3, #20]
	_clock[2] = new Clock((nbrWatchPtrClk & 0b00000100) >> 2); //3
 80056bc:	2014      	movs	r0, #20
 80056be:	f005 fc9c 	bl	800affa <_Znwj>
 80056c2:	0003      	movs	r3, r0
 80056c4:	001c      	movs	r4, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2246      	movs	r2, #70	; 0x46
 80056ca:	5c9b      	ldrb	r3, [r3, r2]
 80056cc:	001a      	movs	r2, r3
 80056ce:	2304      	movs	r3, #4
 80056d0:	4013      	ands	r3, r2
 80056d2:	1e5a      	subs	r2, r3, #1
 80056d4:	4193      	sbcs	r3, r2
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	0019      	movs	r1, r3
 80056da:	0020      	movs	r0, r4
 80056dc:	f7ff fdc4 	bl	8005268 <_ZN5ClockC1Eb>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	619c      	str	r4, [r3, #24]
	_clock[3] = new Clock((nbrWatchPtrClk & 0b00001000) >> 3); //2
 80056e4:	2014      	movs	r0, #20
 80056e6:	f005 fc88 	bl	800affa <_Znwj>
 80056ea:	0003      	movs	r3, r0
 80056ec:	001c      	movs	r4, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2246      	movs	r2, #70	; 0x46
 80056f2:	5c9b      	ldrb	r3, [r3, r2]
 80056f4:	001a      	movs	r2, r3
 80056f6:	2308      	movs	r3, #8
 80056f8:	4013      	ands	r3, r2
 80056fa:	1e5a      	subs	r2, r3, #1
 80056fc:	4193      	sbcs	r3, r2
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	0019      	movs	r1, r3
 8005702:	0020      	movs	r0, r4
 8005704:	f7ff fdb0 	bl	8005268 <_ZN5ClockC1Eb>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	61dc      	str	r4, [r3, #28]
	_clock[4] = new Clock((nbrWatchPtrClk & 0b00010000) >> 4); //3
 800570c:	2014      	movs	r0, #20
 800570e:	f005 fc74 	bl	800affa <_Znwj>
 8005712:	0003      	movs	r3, r0
 8005714:	001c      	movs	r4, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2246      	movs	r2, #70	; 0x46
 800571a:	5c9b      	ldrb	r3, [r3, r2]
 800571c:	001a      	movs	r2, r3
 800571e:	2310      	movs	r3, #16
 8005720:	4013      	ands	r3, r2
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	4193      	sbcs	r3, r2
 8005726:	b2db      	uxtb	r3, r3
 8005728:	0019      	movs	r1, r3
 800572a:	0020      	movs	r0, r4
 800572c:	f7ff fd9c 	bl	8005268 <_ZN5ClockC1Eb>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	621c      	str	r4, [r3, #32]
	_clock[5] = new Clock((nbrWatchPtrClk & 0b00100000) >> 5); //2
 8005734:	2014      	movs	r0, #20
 8005736:	f005 fc60 	bl	800affa <_Znwj>
 800573a:	0003      	movs	r3, r0
 800573c:	001c      	movs	r4, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2246      	movs	r2, #70	; 0x46
 8005742:	5c9b      	ldrb	r3, [r3, r2]
 8005744:	001a      	movs	r2, r3
 8005746:	2320      	movs	r3, #32
 8005748:	4013      	ands	r3, r2
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	4193      	sbcs	r3, r2
 800574e:	b2db      	uxtb	r3, r3
 8005750:	0019      	movs	r1, r3
 8005752:	0020      	movs	r0, r4
 8005754:	f7ff fd88 	bl	8005268 <_ZN5ClockC1Eb>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	625c      	str	r4, [r3, #36]	; 0x24

	//Pin nbr --> see schematic, 0..15
	//Motor 1 -> biaxes
	_clock[0]->getWatchPointer(0)->initGPIO(M1_Ah_GPIO_Port, M1_Ah_Pin,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2100      	movs	r1, #0
 8005762:	0018      	movs	r0, r3
 8005764:	f7ff fe00 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8005768:	0004      	movs	r4, r0
 800576a:	4880      	ldr	r0, [pc, #512]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	497f      	ldr	r1, [pc, #508]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	9302      	str	r3, [sp, #8]
 8005778:	4b7c      	ldr	r3, [pc, #496]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	2380      	movs	r3, #128	; 0x80
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	0003      	movs	r3, r0
 8005784:	0020      	movs	r0, r4
 8005786:	f002 f835 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M1_Bh_GPIO_Port, M1_Bh_Pin,
											M1_Ch_GPIO_Port, M1_Ch_Pin);
	_clock[0]->getWatchPointer(1)->initGPIO(M1_Am_GPIO_Port, M1_Am_Pin,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2101      	movs	r1, #1
 8005790:	0018      	movs	r0, r3
 8005792:	f7ff fde9 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8005796:	0004      	movs	r4, r0
 8005798:	4875      	ldr	r0, [pc, #468]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	4974      	ldr	r1, [pc, #464]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	01db      	lsls	r3, r3, #7
 80057a4:	9302      	str	r3, [sp, #8]
 80057a6:	4b72      	ldr	r3, [pc, #456]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	2380      	movs	r3, #128	; 0x80
 80057ac:	019b      	lsls	r3, r3, #6
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	0003      	movs	r3, r0
 80057b2:	0020      	movs	r0, r4
 80057b4:	f002 f81e 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M1_Bm_GPIO_Port, M1_Bm_Pin,
											M1_Cm_GPIO_Port, M1_Cm_Pin);
	//Motor 2 -> triaxes
	_clock[1]->getWatchPointer(0)->initGPIO(M2_Ah_GPIO_Port, M2_Ah_Pin,
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	2100      	movs	r1, #0
 80057be:	0018      	movs	r0, r3
 80057c0:	f7ff fdd2 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80057c4:	0004      	movs	r4, r0
 80057c6:	486b      	ldr	r0, [pc, #428]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x310>)
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	005a      	lsls	r2, r3, #1
 80057cc:	4969      	ldr	r1, [pc, #420]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x310>)
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	9302      	str	r3, [sp, #8]
 80057d4:	4b67      	ldr	r3, [pc, #412]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x310>)
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	0003      	movs	r3, r0
 80057e0:	0020      	movs	r0, r4
 80057e2:	f002 f807 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M2_Bh_GPIO_Port, M2_Bh_Pin,
											M2_Ch_GPIO_Port, M2_Ch_Pin);
	_clock[1]->getWatchPointer(1)->initGPIO(M2_Am_GPIO_Port, M2_Am_Pin,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	2101      	movs	r1, #1
 80057ec:	0018      	movs	r0, r3
 80057ee:	f7ff fdbb 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80057f2:	0004      	movs	r4, r0
 80057f4:	485d      	ldr	r0, [pc, #372]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	019a      	lsls	r2, r3, #6
 80057fa:	495c      	ldr	r1, [pc, #368]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	021b      	lsls	r3, r3, #8
 8005800:	9302      	str	r3, [sp, #8]
 8005802:	4b5a      	ldr	r3, [pc, #360]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	2380      	movs	r3, #128	; 0x80
 8005808:	01db      	lsls	r3, r3, #7
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	0003      	movs	r3, r0
 800580e:	0020      	movs	r0, r4
 8005810:	f001 fff0 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
	/*_clock[1]->getWatchPointer(2)->initGPIO(M2_As_GPIO_Port, M2_As_Pin,
											M2_Bs_GPIO_Port, M2_Bs_Pin,
											M2_Cs_GPIO_Port, M2_Cs_Pin);*/

	//Motor 3 -> triaxes
	_clock[2]->getWatchPointer(0)->initGPIO(M3_Ah_GPIO_Port, M3_Ah_Pin,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	2100      	movs	r1, #0
 800581a:	0018      	movs	r0, r3
 800581c:	f7ff fda4 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8005820:	0004      	movs	r4, r0
 8005822:	4854      	ldr	r0, [pc, #336]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x310>)
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	4953      	ldr	r1, [pc, #332]	; (8005978 <_ZN10Controller20initializeMotorsGPIOEv+0x314>)
 800582a:	2302      	movs	r3, #2
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	4b51      	ldr	r3, [pc, #324]	; (8005974 <_ZN10Controller20initializeMotorsGPIOEv+0x310>)
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	2301      	movs	r3, #1
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	0003      	movs	r3, r0
 8005838:	0020      	movs	r0, r4
 800583a:	f001 ffdb 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M3_Bh_GPIO_Port, M3_Bh_Pin,
											M3_Ch_GPIO_Port, M3_Ch_Pin);
	_clock[2]->getWatchPointer(1)->initGPIO(M3_Am_GPIO_Port, M3_Am_Pin,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2101      	movs	r1, #1
 8005844:	0018      	movs	r0, r3
 8005846:	f7ff fd8f 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800584a:	0004      	movs	r4, r0
 800584c:	484a      	ldr	r0, [pc, #296]	; (8005978 <_ZN10Controller20initializeMotorsGPIOEv+0x314>)
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	021a      	lsls	r2, r3, #8
 8005852:	2390      	movs	r3, #144	; 0x90
 8005854:	05d9      	lsls	r1, r3, #23
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	9302      	str	r3, [sp, #8]
 800585c:	4b46      	ldr	r3, [pc, #280]	; (8005978 <_ZN10Controller20initializeMotorsGPIOEv+0x314>)
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	0003      	movs	r3, r0
 8005868:	0020      	movs	r0, r4
 800586a:	f001 ffc3 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
	/*_clock[2]->getWatchPointer(2)->initGPIO(M3_As_GPIO_Port, M3_As_Pin,
											M3_Bs_GPIO_Port, M3_Bs_Pin,
											M3_Cs_GPIO_Port, M3_Cs_Pin);*/

	//Motor 4 -> biaxes
	_clock[3]->getWatchPointer(0)->initGPIO(M4_Ah_GPIO_Port, M4_Ah_Pin,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	2100      	movs	r1, #0
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff fd77 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800587a:	0004      	movs	r4, r0
 800587c:	483c      	ldr	r0, [pc, #240]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	009a      	lsls	r2, r3, #2
 8005882:	493b      	ldr	r1, [pc, #236]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	4b39      	ldr	r3, [pc, #228]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	0003      	movs	r3, r0
 8005896:	0020      	movs	r0, r4
 8005898:	f001 ffac 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M4_Bh_GPIO_Port, M4_Bh_Pin,
											M4_Ch_GPIO_Port, M4_Ch_Pin);
	_clock[3]->getWatchPointer(1)->initGPIO(M4_Am_GPIO_Port, M4_Am_Pin,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	2101      	movs	r1, #1
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7ff fd60 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80058a8:	4a31      	ldr	r2, [pc, #196]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 80058aa:	4930      	ldr	r1, [pc, #192]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	4b2f      	ldr	r3, [pc, #188]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	0013      	movs	r3, r2
 80058bc:	2204      	movs	r2, #4
 80058be:	f001 ff99 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M4_Bm_GPIO_Port, M4_Bm_Pin,
											M4_Cm_GPIO_Port, M4_Cm_Pin);

	//Motor 5 -> triaxes
	_clock[4]->getWatchPointer(0)->initGPIO(M5_Ah_GPIO_Port, M5_Ah_Pin,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	2100      	movs	r1, #0
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff fd4d 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80058ce:	2390      	movs	r3, #144	; 0x90
 80058d0:	05da      	lsls	r2, r3, #23
 80058d2:	2390      	movs	r3, #144	; 0x90
 80058d4:	05d9      	lsls	r1, r3, #23
 80058d6:	2308      	movs	r3, #8
 80058d8:	9302      	str	r3, [sp, #8]
 80058da:	2390      	movs	r3, #144	; 0x90
 80058dc:	05db      	lsls	r3, r3, #23
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	2304      	movs	r3, #4
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	0013      	movs	r3, r2
 80058e6:	2202      	movs	r2, #2
 80058e8:	f001 ff84 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M5_Bh_GPIO_Port, M5_Bh_Pin,
											M5_Ch_GPIO_Port, M5_Ch_Pin);
	_clock[4]->getWatchPointer(1)->initGPIO(M5_Am_GPIO_Port, M5_Am_Pin,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	2101      	movs	r1, #1
 80058f2:	0018      	movs	r0, r3
 80058f4:	f7ff fd38 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80058f8:	4a20      	ldr	r2, [pc, #128]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x318>)
 80058fa:	4920      	ldr	r1, [pc, #128]	; (800597c <_ZN10Controller20initializeMotorsGPIOEv+0x318>)
 80058fc:	2301      	movs	r3, #1
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	2390      	movs	r3, #144	; 0x90
 8005902:	05db      	lsls	r3, r3, #23
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	2308      	movs	r3, #8
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	0013      	movs	r3, r2
 800590c:	2204      	movs	r2, #4
 800590e:	f001 ff71 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
	/*_clock[4]->getWatchPointer(2)->initGPIO(M5_As_GPIO_Port, M5_As_Pin,
											M5_Bs_GPIO_Port, M5_Bs_Pin,
											M5_Cs_GPIO_Port, M5_Cs_Pin);*/

	//Motor 6 -> biaxes
	_clock[5]->getWatchPointer(0)->initGPIO(M6_Ah_GPIO_Port, M6_Ah_Pin,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2100      	movs	r1, #0
 8005918:	0018      	movs	r0, r3
 800591a:	f7ff fd25 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800591e:	0004      	movs	r4, r0
 8005920:	4813      	ldr	r0, [pc, #76]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	009a      	lsls	r2, r3, #2
 8005926:	4911      	ldr	r1, [pc, #68]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 8005928:	2302      	movs	r3, #2
 800592a:	9302      	str	r3, [sp, #8]
 800592c:	4b10      	ldr	r3, [pc, #64]	; (8005970 <_ZN10Controller20initializeMotorsGPIOEv+0x30c>)
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	2301      	movs	r3, #1
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	0003      	movs	r3, r0
 8005936:	0020      	movs	r0, r4
 8005938:	f001 ff5c 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M6_Bh_GPIO_Port, M6_Bh_Pin,
											M6_Ch_GPIO_Port, M6_Ch_Pin);
	_clock[5]->getWatchPointer(1)->initGPIO(M6_Am_GPIO_Port, M6_Am_Pin,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2101      	movs	r1, #1
 8005942:	0018      	movs	r0, r3
 8005944:	f7ff fd10 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8005948:	4a08      	ldr	r2, [pc, #32]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 800594a:	4908      	ldr	r1, [pc, #32]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <_ZN10Controller20initializeMotorsGPIOEv+0x308>)
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	0013      	movs	r3, r2
 800595c:	2240      	movs	r2, #64	; 0x40
 800595e:	f001 ff49 	bl	80077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>
											M6_Bm_GPIO_Port, M6_Bm_Pin,
											M6_Cm_GPIO_Port, M6_Cm_Pin);
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b003      	add	sp, #12
 8005968:	bd90      	pop	{r4, r7, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	48000400 	.word	0x48000400
 8005970:	48001000 	.word	0x48001000
 8005974:	48000c00 	.word	0x48000c00
 8005978:	48000800 	.word	0x48000800
 800597c:	48001400 	.word	0x48001400

08005980 <_ZN10Controller12processEventEv>:

XFEventStatus Controller::processEvent()
{
 8005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

	eEventStatus eventStatus = XFEventStatus::Unknown;
 8005988:	230f      	movs	r3, #15
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
	_oldState = _currentState;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	224b      	movs	r2, #75	; 0x4b
 8005994:	5c99      	ldrb	r1, [r3, r2]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	224c      	movs	r2, #76	; 0x4c
 800599a:	5499      	strb	r1, [r3, r2]


	//Transition switch
	switch(_currentState)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	224b      	movs	r2, #75	; 0x4b
 80059a0:	5c9b      	ldrb	r3, [r3, r2]
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d900      	bls.n	80059a8 <_ZN10Controller12processEventEv+0x28>
 80059a6:	e1bf      	b.n	8005d28 <_ZN10Controller12processEventEv+0x3a8>
 80059a8:	009a      	lsls	r2, r3, #2
 80059aa:	4bd8      	ldr	r3, [pc, #864]	; (8005d0c <_ZN10Controller12processEventEv+0x38c>)
 80059ac:	18d3      	adds	r3, r2, r3
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	469f      	mov	pc, r3
	{
	case STATE_INIT:
		if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	0018      	movs	r0, r3
 80059b6:	f002 fe46 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 80059ba:	0003      	movs	r3, r0
 80059bc:	0018      	movs	r0, r3
 80059be:	f7ff fceb 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 80059c2:	0003      	movs	r3, r0
 80059c4:	3b01      	subs	r3, #1
 80059c6:	425a      	negs	r2, r3
 80059c8:	4153      	adcs	r3, r2
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d100      	bne.n	80059d2 <_ZN10Controller12processEventEv+0x52>
 80059d0:	e1ad      	b.n	8005d2e <_ZN10Controller12processEventEv+0x3ae>
		{
			_currentState = STATE_WAIT;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	224b      	movs	r2, #75	; 0x4b
 80059d6:	2101      	movs	r1, #1
 80059d8:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 80059da:	230f      	movs	r3, #15
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80059e2:	e1a4      	b.n	8005d2e <_ZN10Controller12processEventEv+0x3ae>

	case STATE_WAIT:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f002 fe2d 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 80059ec:	0003      	movs	r3, r0
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7ff fcd2 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 80059f4:	0003      	movs	r3, r0
 80059f6:	3b02      	subs	r3, #2
 80059f8:	425a      	negs	r2, r3
 80059fa:	4153      	adcs	r3, r2
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <_ZN10Controller12processEventEv+0x8a>
		{
			//_currentState = STATE_TRIGGER;
			eventStatus = XFEventStatus::Consumed;
 8005a02:	230f      	movs	r3, #15
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
		}

		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f002 fe1a 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005a12:	0003      	movs	r3, r0
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7ff fcbf 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d10c      	bne.n	8005a3a <_ZN10Controller12processEventEv+0xba>
				getCurrentEvent()->getId() == EventIds::evSpiIrqId)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	0018      	movs	r0, r3
 8005a24:	f002 fe0f 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff fcbf 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8005a30:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <_ZN10Controller12processEventEv+0xba>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <_ZN10Controller12processEventEv+0xbc>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <_ZN10Controller12processEventEv+0xd0>
		{
			_currentState = STATE_SPI;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	224b      	movs	r2, #75	; 0x4b
 8005a44:	2102      	movs	r1, #2
 8005a46:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005a48:	230f      	movs	r3, #15
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	0018      	movs	r0, r3
 8005a54:	f002 fdf7 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005a58:	0003      	movs	r3, r0
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f7ff fc9c 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005a60:	0003      	movs	r3, r0
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d10c      	bne.n	8005a80 <_ZN10Controller12processEventEv+0x100>
				getCurrentEvent()->getId() == EventIds::evCanIrqId)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f002 fdec 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005a6e:	0003      	movs	r3, r0
 8005a70:	0018      	movs	r0, r3
 8005a72:	f7ff fc9c 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8005a76:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d101      	bne.n	8005a80 <_ZN10Controller12processEventEv+0x100>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <_ZN10Controller12processEventEv+0x102>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <_ZN10Controller12processEventEv+0x116>
		{
			_currentState = STATE_CAN;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	224b      	movs	r2, #75	; 0x4b
 8005a8a:	2103      	movs	r1, #3
 8005a8c:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005a8e:	230f      	movs	r3, #15
 8005a90:	18fb      	adds	r3, r7, r3
 8005a92:	2201      	movs	r2, #1
 8005a94:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f002 fdd4 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005a9e:	0003      	movs	r3, r0
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7ff fc79 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d10c      	bne.n	8005ac6 <_ZN10Controller12processEventEv+0x146>
				getCurrentEvent()->getId() == EventIds::evFlagTriggerId)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f002 fdc9 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f7ff fc79 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8005abc:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005abe:	2b05      	cmp	r3, #5
 8005ac0:	d101      	bne.n	8005ac6 <_ZN10Controller12processEventEv+0x146>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <_ZN10Controller12processEventEv+0x148>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <_ZN10Controller12processEventEv+0x15c>
		{
			_currentState = STATE_TRIGGER;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	224b      	movs	r2, #75	; 0x4b
 8005ad0:	2104      	movs	r1, #4
 8005ad2:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005ad4:	230f      	movs	r3, #15
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	2201      	movs	r2, #1
 8005ada:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f002 fdb1 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f7ff fc56 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005aec:	0003      	movs	r3, r0
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d10c      	bne.n	8005b0c <_ZN10Controller12processEventEv+0x18c>
				getCurrentEvent()->getId() == EventIds::evGoToZeroId)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f002 fda6 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005afa:	0003      	movs	r3, r0
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7ff fc56 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8005b02:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d101      	bne.n	8005b0c <_ZN10Controller12processEventEv+0x18c>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <_ZN10Controller12processEventEv+0x18e>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d100      	bne.n	8005b14 <_ZN10Controller12processEventEv+0x194>
 8005b12:	e10e      	b.n	8005d32 <_ZN10Controller12processEventEv+0x3b2>
		{
			_currentState = STATE_GO_TO_ZERO;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	224b      	movs	r2, #75	; 0x4b
 8005b18:	2106      	movs	r1, #6
 8005b1a:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005b1c:	230f      	movs	r3, #15
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b24:	e105      	b.n	8005d32 <_ZN10Controller12processEventEv+0x3b2>

	case STATE_SPI:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f002 fd8c 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	0018      	movs	r0, r3
 8005b32:	f7ff fc31 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005b36:	0003      	movs	r3, r0
 8005b38:	3b02      	subs	r3, #2
 8005b3a:	425a      	negs	r2, r3
 8005b3c:	4153      	adcs	r3, r2
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d100      	bne.n	8005b46 <_ZN10Controller12processEventEv+0x1c6>
 8005b44:	e0f7      	b.n	8005d36 <_ZN10Controller12processEventEv+0x3b6>
		{
			_currentState = STATE_WAIT;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	224b      	movs	r2, #75	; 0x4b
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005b4e:	230f      	movs	r3, #15
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b56:	e0ee      	b.n	8005d36 <_ZN10Controller12processEventEv+0x3b6>

	case STATE_CAN:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f002 fd73 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005b60:	0003      	movs	r3, r0
 8005b62:	0018      	movs	r0, r3
 8005b64:	f7ff fc18 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	3b02      	subs	r3, #2
 8005b6c:	425a      	negs	r2, r3
 8005b6e:	4153      	adcs	r3, r2
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d100      	bne.n	8005b78 <_ZN10Controller12processEventEv+0x1f8>
 8005b76:	e0e0      	b.n	8005d3a <_ZN10Controller12processEventEv+0x3ba>
		{
			_currentState = STATE_WAIT;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	224b      	movs	r2, #75	; 0x4b
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005b80:	230f      	movs	r3, #15
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b88:	e0d7      	b.n	8005d3a <_ZN10Controller12processEventEv+0x3ba>

	case STATE_TRIGGER:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f002 fd5a 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005b92:	0003      	movs	r3, r0
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7ff fbff 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	3b02      	subs	r3, #2
 8005b9e:	425a      	negs	r2, r3
 8005ba0:	4153      	adcs	r3, r2
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <_ZN10Controller12processEventEv+0x238>
		{
			_currentState = STATE_WAIT_TRIGGER;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	224b      	movs	r2, #75	; 0x4b
 8005bac:	2105      	movs	r1, #5
 8005bae:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005bb0:	230f      	movs	r3, #15
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]
		}

		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f002 fd43 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f7ff fbe8 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d10c      	bne.n	8005be8 <_ZN10Controller12processEventEv+0x268>
				getCurrentEvent()->getId() == EventIds::evDoneId)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f002 fd38 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f7ff fbe8 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8005bde:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	d101      	bne.n	8005be8 <_ZN10Controller12processEventEv+0x268>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <_ZN10Controller12processEventEv+0x26a>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d100      	bne.n	8005bf0 <_ZN10Controller12processEventEv+0x270>
 8005bee:	e0a6      	b.n	8005d3e <_ZN10Controller12processEventEv+0x3be>
		{
			_currentState = STATE_WAIT;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	224b      	movs	r2, #75	; 0x4b
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005bf8:	230f      	movs	r3, #15
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c00:	e09d      	b.n	8005d3e <_ZN10Controller12processEventEv+0x3be>

	case STATE_WAIT_TRIGGER:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f002 fd1e 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7ff fbc3 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005c12:	0003      	movs	r3, r0
 8005c14:	3b02      	subs	r3, #2
 8005c16:	425a      	negs	r2, r3
 8005c18:	4153      	adcs	r3, r2
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d100      	bne.n	8005c22 <_ZN10Controller12processEventEv+0x2a2>
 8005c20:	e08f      	b.n	8005d42 <_ZN10Controller12processEventEv+0x3c2>
		{
			_currentState = STATE_TRIGGER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	224b      	movs	r2, #75	; 0x4b
 8005c26:	2104      	movs	r1, #4
 8005c28:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005c2a:	230f      	movs	r3, #15
 8005c2c:	18fb      	adds	r3, r7, r3
 8005c2e:	2201      	movs	r2, #1
 8005c30:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c32:	e086      	b.n	8005d42 <_ZN10Controller12processEventEv+0x3c2>

	case STATE_GO_TO_ZERO:
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f002 fd05 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f7ff fbaa 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005c44:	0003      	movs	r3, r0
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d10c      	bne.n	8005c64 <_ZN10Controller12processEventEv+0x2e4>
						getCurrentEvent()->getId() == EventIds::evDoneId)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f002 fcfa 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005c52:	0003      	movs	r3, r0
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7ff fbaa 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8005c5a:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	d101      	bne.n	8005c64 <_ZN10Controller12processEventEv+0x2e4>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <_ZN10Controller12processEventEv+0x2e6>
 8005c64:	2300      	movs	r3, #0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <_ZN10Controller12processEventEv+0x2fa>
		{
			_currentState = STATE_WAIT;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	224b      	movs	r2, #75	; 0x4b
 8005c6e:	2101      	movs	r1, #1
 8005c70:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005c72:	230f      	movs	r3, #15
 8005c74:	18fb      	adds	r3, r7, r3
 8005c76:	2201      	movs	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f002 fce2 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005c82:	0003      	movs	r3, r0
 8005c84:	0018      	movs	r0, r3
 8005c86:	f7ff fb87 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	3b02      	subs	r3, #2
 8005c8e:	425a      	negs	r2, r3
 8005c90:	4153      	adcs	r3, r2
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d056      	beq.n	8005d46 <_ZN10Controller12processEventEv+0x3c6>
		{
			_currentState = STATE_WAIT_ZERO;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	224b      	movs	r2, #75	; 0x4b
 8005c9c:	2107      	movs	r1, #7
 8005c9e:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005ca0:	230f      	movs	r3, #15
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005ca8:	e04d      	b.n	8005d46 <_ZN10Controller12processEventEv+0x3c6>

	case STATE_WAIT_ZERO:
		if (getCurrentEvent()->getEventType() == XFEvent::NullTransition)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0018      	movs	r0, r3
 8005cae:	f002 fcca 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7ff fb6f 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	3b02      	subs	r3, #2
 8005cbe:	425a      	negs	r2, r3
 8005cc0:	4153      	adcs	r3, r2
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d040      	beq.n	8005d4a <_ZN10Controller12processEventEv+0x3ca>
		{
			_currentState = STATE_GO_TO_ZERO;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	224b      	movs	r2, #75	; 0x4b
 8005ccc:	2106      	movs	r1, #6
 8005cce:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005cd0:	230f      	movs	r3, #15
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cd8:	e037      	b.n	8005d4a <_ZN10Controller12processEventEv+0x3ca>

	case STATE_LED:
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f002 fcb2 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f7ff fb57 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8005cea:	0003      	movs	r3, r0
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d10f      	bne.n	8005d10 <_ZN10Controller12processEventEv+0x390>
				getCurrentTimeout()->getId() == Timeout)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f002 fcb2 	bl	800865c <_ZN10XFBehavior17getCurrentTimeoutEv>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7ff fb57 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8005d00:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d104      	bne.n	8005d10 <_ZN10Controller12processEventEv+0x390>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e003      	b.n	8005d12 <_ZN10Controller12processEventEv+0x392>
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	0800c314 	.word	0x0800c314
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01b      	beq.n	8005d4e <_ZN10Controller12processEventEv+0x3ce>
		{
			_currentState = STATE_WAIT;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	224b      	movs	r2, #75	; 0x4b
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	5499      	strb	r1, [r3, r2]
			eventStatus = XFEventStatus::Consumed;
 8005d1e:	230f      	movs	r3, #15
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	2201      	movs	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005d26:	e012      	b.n	8005d4e <_ZN10Controller12processEventEv+0x3ce>

	default:
		Error_Handler();
 8005d28:	f7fa fed8 	bl	8000adc <Error_Handler>
		break;
 8005d2c:	e010      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	e00e      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	e00c      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	e00a      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	e008      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d3e:	46c0      	nop			; (mov r8, r8)
 8005d40:	e006      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	e004      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	e002      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	e000      	b.n	8005d50 <_ZN10Controller12processEventEv+0x3d0>
		break;
 8005d4e:	46c0      	nop			; (mov r8, r8)
	}
	//Action switch
	if(_oldState != _currentState)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	224c      	movs	r2, #76	; 0x4c
 8005d54:	5c9a      	ldrb	r2, [r3, r2]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	214b      	movs	r1, #75	; 0x4b
 8005d5a:	5c5b      	ldrb	r3, [r3, r1]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d100      	bne.n	8005d62 <_ZN10Controller12processEventEv+0x3e2>
 8005d60:	e116      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
	{
		switch(_currentState)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	224b      	movs	r2, #75	; 0x4b
 8005d66:	5c9b      	ldrb	r3, [r3, r2]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d900      	bls.n	8005d6e <_ZN10Controller12processEventEv+0x3ee>
 8005d6c:	e0fb      	b.n	8005f66 <_ZN10Controller12processEventEv+0x5e6>
 8005d6e:	009a      	lsls	r2, r3, #2
 8005d70:	4b8f      	ldr	r3, [pc, #572]	; (8005fb0 <_ZN10Controller12processEventEv+0x630>)
 8005d72:	18d3      	adds	r3, r2, r3
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	469f      	mov	pc, r3
		case STATE_INIT:

			break;

		case STATE_WAIT:
			if(_oldState == STATE_INIT)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	224c      	movs	r2, #76	; 0x4c
 8005d7c:	5c9b      	ldrb	r3, [r3, r2]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d120      	bne.n	8005dc4 <_ZN10Controller12processEventEv+0x444>
			{
				readDIPSwitch();
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7ff fc09 	bl	800559c <_ZN10Controller13readDIPSwitchEv>
				initializeMotorsGPIO();
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7ff fc69 	bl	8005664 <_ZN10Controller20initializeMotorsGPIOEv>
				HAL_SPI_Receive_DMA(&hspi1, buffer_SPI_rx, SPI_FRAME_SIZE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3328      	adds	r3, #40	; 0x28
 8005d96:	0019      	movs	r1, r3
 8005d98:	4b86      	ldr	r3, [pc, #536]	; (8005fb4 <_ZN10Controller12processEventEv+0x634>)
 8005d9a:	220b      	movs	r2, #11
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f7fd fb19 	bl	80033d4 <HAL_SPI_Receive_DMA>
				GEN(XFNullTransition());
 8005da2:	687d      	ldr	r5, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	681c      	ldr	r4, [r3, #0]
 8005dac:	2010      	movs	r0, #16
 8005dae:	f005 f924 	bl	800affa <_Znwj>
 8005db2:	0003      	movs	r3, r0
 8005db4:	001e      	movs	r6, r3
 8005db6:	2100      	movs	r1, #0
 8005db8:	0030      	movs	r0, r6
 8005dba:	f002 fced 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005dbe:	0031      	movs	r1, r6
 8005dc0:	0028      	movs	r0, r5
 8005dc2:	47a0      	blx	r4
			}
			if(_oldState == STATE_SPI)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	224c      	movs	r2, #76	; 0x4c
 8005dc8:	5c9b      	ldrb	r3, [r3, r2]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d107      	bne.n	8005dde <_ZN10Controller12processEventEv+0x45e>
			{
				HAL_SPI_Receive_DMA(&hspi1, buffer_SPI_rx, SPI_FRAME_SIZE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3328      	adds	r3, #40	; 0x28
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	4b77      	ldr	r3, [pc, #476]	; (8005fb4 <_ZN10Controller12processEventEv+0x634>)
 8005dd6:	220b      	movs	r2, #11
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7fd fafb 	bl	80033d4 <HAL_SPI_Receive_DMA>
			}
			if(_oldState == STATE_CAN)
			{

			}
			if(_oldState == STATE_LED)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	224c      	movs	r2, #76	; 0x4c
 8005de2:	5c9b      	ldrb	r3, [r3, r2]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d000      	beq.n	8005dea <_ZN10Controller12processEventEv+0x46a>
 8005de8:	e0c3      	b.n	8005f72 <_ZN10Controller12processEventEv+0x5f2>
			{
				GEN(XFNullTransition());
 8005dea:	687d      	ldr	r5, [r7, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	681c      	ldr	r4, [r3, #0]
 8005df4:	2010      	movs	r0, #16
 8005df6:	f005 f900 	bl	800affa <_Znwj>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	001e      	movs	r6, r3
 8005dfe:	2100      	movs	r1, #0
 8005e00:	0030      	movs	r0, r6
 8005e02:	f002 fcc9 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005e06:	0031      	movs	r1, r6
 8005e08:	0028      	movs	r0, r5
 8005e0a:	47a0      	blx	r4
			}
			if(_oldState == STATE_GO_TO_ZERO)
			{

			}
			break;
 8005e0c:	e0b1      	b.n	8005f72 <_ZN10Controller12processEventEv+0x5f2>

		case STATE_SPI:
			if(_oldState == STATE_WAIT)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	224c      	movs	r2, #76	; 0x4c
 8005e12:	5c9b      	ldrb	r3, [r3, r2]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d000      	beq.n	8005e1a <_ZN10Controller12processEventEv+0x49a>
 8005e18:	e0ad      	b.n	8005f76 <_ZN10Controller12processEventEv+0x5f6>
			{
				GEN(XFNullTransition());
 8005e1a:	687d      	ldr	r5, [r7, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330c      	adds	r3, #12
 8005e22:	681c      	ldr	r4, [r3, #0]
 8005e24:	2010      	movs	r0, #16
 8005e26:	f005 f8e8 	bl	800affa <_Znwj>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	001e      	movs	r6, r3
 8005e2e:	2100      	movs	r1, #0
 8005e30:	0030      	movs	r0, r6
 8005e32:	f002 fcb1 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005e36:	0031      	movs	r1, r6
 8005e38:	0028      	movs	r0, r5
 8005e3a:	47a0      	blx	r4
				SPI_readFrame();
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fae8 	bl	8006414 <_ZN10Controller13SPI_readFrameEv>
			}
			break;
 8005e44:	e097      	b.n	8005f76 <_ZN10Controller12processEventEv+0x5f6>

		case STATE_CAN:
			if(_oldState == STATE_WAIT)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	224c      	movs	r2, #76	; 0x4c
 8005e4a:	5c9b      	ldrb	r3, [r3, r2]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d000      	beq.n	8005e52 <_ZN10Controller12processEventEv+0x4d2>
 8005e50:	e093      	b.n	8005f7a <_ZN10Controller12processEventEv+0x5fa>
			{
				GEN(XFNullTransition());
 8005e52:	687d      	ldr	r5, [r7, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	681c      	ldr	r4, [r3, #0]
 8005e5c:	2010      	movs	r0, #16
 8005e5e:	f005 f8cc 	bl	800affa <_Znwj>
 8005e62:	0003      	movs	r3, r0
 8005e64:	001e      	movs	r6, r3
 8005e66:	2100      	movs	r1, #0
 8005e68:	0030      	movs	r0, r6
 8005e6a:	f002 fc95 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005e6e:	0031      	movs	r1, r6
 8005e70:	0028      	movs	r0, r5
 8005e72:	47a0      	blx	r4
				CAN_readFrame();
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	0018      	movs	r0, r3
 8005e78:	f000 fff0 	bl	8006e5c <_ZN10Controller13CAN_readFrameEv>
			}
			break;
 8005e7c:	e07d      	b.n	8005f7a <_ZN10Controller12processEventEv+0x5fa>

		case STATE_TRIGGER:
			if(_oldState == STATE_WAIT || _oldState == STATE_WAIT_TRIGGER)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	224c      	movs	r2, #76	; 0x4c
 8005e82:	5c9b      	ldrb	r3, [r3, r2]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d005      	beq.n	8005e94 <_ZN10Controller12processEventEv+0x514>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	224c      	movs	r2, #76	; 0x4c
 8005e8c:	5c9b      	ldrb	r3, [r3, r2]
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d000      	beq.n	8005e94 <_ZN10Controller12processEventEv+0x514>
 8005e92:	e074      	b.n	8005f7e <_ZN10Controller12processEventEv+0x5fe>
			{
				manageMotors();
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0018      	movs	r0, r3
 8005e98:	f000 f944 	bl	8006124 <_ZN10Controller12manageMotorsEv>
				//GEN(XFNullTransition());
				//scheduleTimeout(Timeout, 10);
			}
			break;
 8005e9c:	e06f      	b.n	8005f7e <_ZN10Controller12processEventEv+0x5fe>

		case STATE_WAIT_TRIGGER:
			if(_oldState == STATE_TRIGGER)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	224c      	movs	r2, #76	; 0x4c
 8005ea2:	5c9b      	ldrb	r3, [r3, r2]
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d000      	beq.n	8005eaa <_ZN10Controller12processEventEv+0x52a>
 8005ea8:	e06b      	b.n	8005f82 <_ZN10Controller12processEventEv+0x602>
			{
				GEN(XFNullTransition());
 8005eaa:	687d      	ldr	r5, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	681c      	ldr	r4, [r3, #0]
 8005eb4:	2010      	movs	r0, #16
 8005eb6:	f005 f8a0 	bl	800affa <_Znwj>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	001e      	movs	r6, r3
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	0030      	movs	r0, r6
 8005ec2:	f002 fc69 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005ec6:	0031      	movs	r1, r6
 8005ec8:	0028      	movs	r0, r5
 8005eca:	47a0      	blx	r4
			}
			break;
 8005ecc:	e059      	b.n	8005f82 <_ZN10Controller12processEventEv+0x602>

		case STATE_GO_TO_ZERO:
			if(_oldState == STATE_WAIT || _oldState == STATE_WAIT_ZERO)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	224c      	movs	r2, #76	; 0x4c
 8005ed2:	5c9b      	ldrb	r3, [r3, r2]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d004      	beq.n	8005ee2 <_ZN10Controller12processEventEv+0x562>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	224c      	movs	r2, #76	; 0x4c
 8005edc:	5c9b      	ldrb	r3, [r3, r2]
 8005ede:	2b07      	cmp	r3, #7
 8005ee0:	d151      	bne.n	8005f86 <_ZN10Controller12processEventEv+0x606>
			{
				goToZeroPosition();
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f000 f86d 	bl	8005fc4 <_ZN10Controller16goToZeroPositionEv>
			}

			break;
 8005eea:	e04c      	b.n	8005f86 <_ZN10Controller12processEventEv+0x606>

		case STATE_WAIT_ZERO:
			if(_oldState == STATE_GO_TO_ZERO)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	224c      	movs	r2, #76	; 0x4c
 8005ef0:	5c9b      	ldrb	r3, [r3, r2]
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d149      	bne.n	8005f8a <_ZN10Controller12processEventEv+0x60a>
			{
				GEN(XFNullTransition());
 8005ef6:	687d      	ldr	r5, [r7, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	681c      	ldr	r4, [r3, #0]
 8005f00:	2010      	movs	r0, #16
 8005f02:	f005 f87a 	bl	800affa <_Znwj>
 8005f06:	0003      	movs	r3, r0
 8005f08:	001e      	movs	r6, r3
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	0030      	movs	r0, r6
 8005f0e:	f002 fc43 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8005f12:	0031      	movs	r1, r6
 8005f14:	0028      	movs	r0, r5
 8005f16:	47a0      	blx	r4
			}
			break;
 8005f18:	e037      	b.n	8005f8a <_ZN10Controller12processEventEv+0x60a>

		case STATE_LED:
			if(_oldState == STATE_WAIT)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	224c      	movs	r2, #76	; 0x4c
 8005f1e:	5c9b      	ldrb	r3, [r3, r2]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d134      	bne.n	8005f8e <_ZN10Controller12processEventEv+0x60e>
			{
				if(HAL_GPIO_ReadPin(SW_0_GPIO_Port, SW_0_Pin) == GPIO_PIN_RESET)
 8005f24:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <_ZN10Controller12processEventEv+0x638>)
 8005f26:	2104      	movs	r1, #4
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f7fc fb63 	bl	80025f4 <HAL_GPIO_ReadPin>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	425a      	negs	r2, r3
 8005f32:	4153      	adcs	r3, r2
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <_ZN10Controller12processEventEv+0x5ca>
				{
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	481f      	ldr	r0, [pc, #124]	; (8005fbc <_ZN10Controller12processEventEv+0x63c>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	0019      	movs	r1, r3
 8005f44:	f7fc fb73 	bl	800262e <HAL_GPIO_WritePin>
 8005f48:	e006      	b.n	8005f58 <_ZN10Controller12processEventEv+0x5d8>
				}
				else
				{
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8005f4a:	2380      	movs	r3, #128	; 0x80
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	481b      	ldr	r0, [pc, #108]	; (8005fbc <_ZN10Controller12processEventEv+0x63c>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	0019      	movs	r1, r3
 8005f54:	f7fc fb6b 	bl	800262e <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
				HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
				HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
				*/

				scheduleTimeout(Timeout, 5000);	//5000 = 500ms
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a19      	ldr	r2, [pc, #100]	; (8005fc0 <_ZN10Controller12processEventEv+0x640>)
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f7ff fa3f 	bl	80053e2 <_ZN10XFBehavior15scheduleTimeoutEii>
				//GEN(XFNullTransition());
			}
			break;
 8005f64:	e013      	b.n	8005f8e <_ZN10Controller12processEventEv+0x60e>
		default:
			Error_Handler();
 8005f66:	f7fa fdb9 	bl	8000adc <Error_Handler>
			break;
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	e010      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	e00e      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	e00c      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	e00a      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	e008      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	e006      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	e004      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	e002      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	e000      	b.n	8005f90 <_ZN10Controller12processEventEv+0x610>
			break;
 8005f8e:	46c0      	nop			; (mov r8, r8)
		}
	}
	return eventStatus;
 8005f90:	230f      	movs	r3, #15
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	240c      	movs	r4, #12
 8005f98:	193b      	adds	r3, r7, r4
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f7ff fa10 	bl	80053c2 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 8005fa2:	193b      	adds	r3, r7, r4
 8005fa4:	781b      	ldrb	r3, [r3, #0]
}
 8005fa6:	1c18      	adds	r0, r3, #0
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b005      	add	sp, #20
 8005fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	0800c338 	.word	0x0800c338
 8005fb4:	2000033c 	.word	0x2000033c
 8005fb8:	48001000 	.word	0x48001000
 8005fbc:	48001400 	.word	0x48001400
 8005fc0:	00001388 	.word	0x00001388

08005fc4 <_ZN10Controller16goToZeroPositionEv>:

void Controller::goToZeroPosition()
{
 8005fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	bool allToZero = true;
 8005fcc:	230f      	movs	r3, #15
 8005fce:	18fb      	adds	r3, r7, r3
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]
	bool clockwise;

	//Check position of each watch pointer
	for(uint8_t i=0; i<NBR_CLOCK_PER_PROCESSOR; i++)
 8005fd4:	230e      	movs	r3, #14
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	230e      	movs	r3, #14
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	d870      	bhi.n	80060c8 <_ZN10Controller16goToZeroPositionEv+0x104>
	{
		for(uint8_t x=0; x<(MAX_WATCHPOINTER-1); x++)
 8005fe6:	230d      	movs	r3, #13
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	230d      	movs	r3, #13
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d860      	bhi.n	80060ba <_ZN10Controller16goToZeroPositionEv+0xf6>
		{
			if(_clock[i]->getWatchPointer(x)->actualPosition != 0)
 8005ff8:	230e      	movs	r3, #14
 8005ffa:	18fb      	adds	r3, r7, r3
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3204      	adds	r2, #4
 8006002:	0092      	lsls	r2, r2, #2
 8006004:	58d2      	ldr	r2, [r2, r3]
 8006006:	230d      	movs	r3, #13
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	0019      	movs	r1, r3
 800600e:	0010      	movs	r0, r2
 8006010:	f7ff f9aa 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006014:	0002      	movs	r2, r0
 8006016:	4b42      	ldr	r3, [pc, #264]	; (8006120 <_ZN10Controller16goToZeroPositionEv+0x15c>)
 8006018:	5cd3      	ldrb	r3, [r2, r3]
 800601a:	1e5a      	subs	r2, r3, #1
 800601c:	4193      	sbcs	r3, r2
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d043      	beq.n	80060ac <_ZN10Controller16goToZeroPositionEv+0xe8>
			{
				if(i==1 || i==2 || i==4)
 8006024:	230e      	movs	r3, #14
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d009      	beq.n	8006042 <_ZN10Controller16goToZeroPositionEv+0x7e>
 800602e:	230e      	movs	r3, #14
 8006030:	18fb      	adds	r3, r7, r3
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d004      	beq.n	8006042 <_ZN10Controller16goToZeroPositionEv+0x7e>
 8006038:	230e      	movs	r3, #14
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b04      	cmp	r3, #4
 8006040:	d113      	bne.n	800606a <_ZN10Controller16goToZeroPositionEv+0xa6>
				{
					_clock[i]->getWatchPointer(x)->doOneStep(true);
 8006042:	230e      	movs	r3, #14
 8006044:	18fb      	adds	r3, r7, r3
 8006046:	781a      	ldrb	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3204      	adds	r2, #4
 800604c:	0092      	lsls	r2, r2, #2
 800604e:	58d2      	ldr	r2, [r2, r3]
 8006050:	230d      	movs	r3, #13
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	0019      	movs	r1, r3
 8006058:	0010      	movs	r0, r2
 800605a:	f7ff f985 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800605e:	0003      	movs	r3, r0
 8006060:	2101      	movs	r1, #1
 8006062:	0018      	movs	r0, r3
 8006064:	f001 fbfc 	bl	8007860 <_ZN12WatchPointer9doOneStepEb>
 8006068:	e012      	b.n	8006090 <_ZN10Controller16goToZeroPositionEv+0xcc>
				}
				else
				{
					_clock[i]->getWatchPointer(x)->doOneStep(false);
 800606a:	230e      	movs	r3, #14
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	781a      	ldrb	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3204      	adds	r2, #4
 8006074:	0092      	lsls	r2, r2, #2
 8006076:	58d2      	ldr	r2, [r2, r3]
 8006078:	230d      	movs	r3, #13
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	0019      	movs	r1, r3
 8006080:	0010      	movs	r0, r2
 8006082:	f7ff f971 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006086:	0003      	movs	r3, r0
 8006088:	2100      	movs	r1, #0
 800608a:	0018      	movs	r0, r3
 800608c:	f001 fbe8 	bl	8007860 <_ZN12WatchPointer9doOneStepEb>

				}
				incrementPosition(false,i,x);
 8006090:	230e      	movs	r3, #14
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	781a      	ldrb	r2, [r3, #0]
 8006096:	230d      	movs	r3, #13
 8006098:	18fb      	adds	r3, r7, r3
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	2100      	movs	r1, #0
 80060a0:	f000 f912 	bl	80062c8 <_ZN10Controller17incrementPositionEbii>
				allToZero = false;
 80060a4:	230f      	movs	r3, #15
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
		for(uint8_t x=0; x<(MAX_WATCHPOINTER-1); x++)
 80060ac:	210d      	movs	r1, #13
 80060ae:	187b      	adds	r3, r7, r1
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	187b      	adds	r3, r7, r1
 80060b4:	3201      	adds	r2, #1
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	e799      	b.n	8005fee <_ZN10Controller16goToZeroPositionEv+0x2a>
	for(uint8_t i=0; i<NBR_CLOCK_PER_PROCESSOR; i++)
 80060ba:	210e      	movs	r1, #14
 80060bc:	187b      	adds	r3, r7, r1
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	3201      	adds	r2, #1
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	e789      	b.n	8005fdc <_ZN10Controller16goToZeroPositionEv+0x18>
			}
		}
	}

	if(allToZero == true)
 80060c8:	230f      	movs	r3, #15
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d010      	beq.n	80060f4 <_ZN10Controller16goToZeroPositionEv+0x130>
	{
		GEN(evDone());
 80060d2:	687d      	ldr	r5, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	681c      	ldr	r4, [r3, #0]
 80060dc:	2014      	movs	r0, #20
 80060de:	f004 ff8c 	bl	800affa <_Znwj>
 80060e2:	0003      	movs	r3, r0
 80060e4:	001e      	movs	r6, r3
 80060e6:	0030      	movs	r0, r6
 80060e8:	f002 f832 	bl	8008150 <_ZN6evDoneC1Ev>
 80060ec:	0031      	movs	r1, r6
 80060ee:	0028      	movs	r0, r5
 80060f0:	47a0      	blx	r4
	}
	else
	{
		GEN(XFNullTransition());
	}
}
 80060f2:	e010      	b.n	8006116 <_ZN10Controller16goToZeroPositionEv+0x152>
		GEN(XFNullTransition());
 80060f4:	687d      	ldr	r5, [r7, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	681c      	ldr	r4, [r3, #0]
 80060fe:	2010      	movs	r0, #16
 8006100:	f004 ff7b 	bl	800affa <_Znwj>
 8006104:	0003      	movs	r3, r0
 8006106:	001e      	movs	r6, r3
 8006108:	2100      	movs	r1, #0
 800610a:	0030      	movs	r0, r6
 800610c:	f002 fb44 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 8006110:	0031      	movs	r1, r6
 8006112:	0028      	movs	r0, r5
 8006114:	47a0      	blx	r4
}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	46bd      	mov	sp, r7
 800611a:	b005      	add	sp, #20
 800611c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	0000020a 	.word	0x0000020a

08006124 <_ZN10Controller12manageMotorsEv>:

void Controller::manageMotors()
{
 8006124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	bool allToNewPosition = true;
 800612c:	230f      	movs	r3, #15
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	2201      	movs	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<NBR_CLOCK_PER_PROCESSOR; i++)
 8006134:	230e      	movs	r3, #14
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	230e      	movs	r3, #14
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b05      	cmp	r3, #5
 8006144:	d900      	bls.n	8006148 <_ZN10Controller12manageMotorsEv+0x24>
 8006146:	e08f      	b.n	8006268 <_ZN10Controller12manageMotorsEv+0x144>
	{
		for(uint8_t x=0; x<(MAX_WATCHPOINTER-1); x++)
 8006148:	230d      	movs	r3, #13
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	230d      	movs	r3, #13
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d900      	bls.n	800615c <_ZN10Controller12manageMotorsEv+0x38>
 800615a:	e07e      	b.n	800625a <_ZN10Controller12manageMotorsEv+0x136>
		{
			if(_clock[i]->getWatchPointer(x)->actualPosition != (_clock[i]->getWatchPointer(x)->newPosition))
 800615c:	250e      	movs	r5, #14
 800615e:	197b      	adds	r3, r7, r5
 8006160:	781a      	ldrb	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3204      	adds	r2, #4
 8006166:	0092      	lsls	r2, r2, #2
 8006168:	58d2      	ldr	r2, [r2, r3]
 800616a:	260d      	movs	r6, #13
 800616c:	19bb      	adds	r3, r7, r6
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	0019      	movs	r1, r3
 8006172:	0010      	movs	r0, r2
 8006174:	f7ff f8f8 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006178:	0002      	movs	r2, r0
 800617a:	4b51      	ldr	r3, [pc, #324]	; (80062c0 <_ZN10Controller12manageMotorsEv+0x19c>)
 800617c:	5cd4      	ldrb	r4, [r2, r3]
 800617e:	197b      	adds	r3, r7, r5
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3204      	adds	r2, #4
 8006186:	0092      	lsls	r2, r2, #2
 8006188:	58d2      	ldr	r2, [r2, r3]
 800618a:	19bb      	adds	r3, r7, r6
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	0019      	movs	r1, r3
 8006190:	0010      	movs	r0, r2
 8006192:	f7ff f8e9 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006196:	0002      	movs	r2, r0
 8006198:	4b4a      	ldr	r3, [pc, #296]	; (80062c4 <_ZN10Controller12manageMotorsEv+0x1a0>)
 800619a:	5cd3      	ldrb	r3, [r2, r3]
 800619c:	1ae3      	subs	r3, r4, r3
 800619e:	1e5a      	subs	r2, r3, #1
 80061a0:	4193      	sbcs	r3, r2
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d051      	beq.n	800624c <_ZN10Controller12manageMotorsEv+0x128>
			{
				//Check best clockwise
				//bool clockwise = bestClockwise(i,x);
				bool clockwise = false;
 80061a8:	230c      	movs	r3, #12
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]


				if(i==1 || i==2 || i==4)
 80061b0:	230e      	movs	r3, #14
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d009      	beq.n	80061ce <_ZN10Controller12manageMotorsEv+0xaa>
 80061ba:	230e      	movs	r3, #14
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d004      	beq.n	80061ce <_ZN10Controller12manageMotorsEv+0xaa>
 80061c4:	230e      	movs	r3, #14
 80061c6:	18fb      	adds	r3, r7, r3
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d117      	bne.n	80061fe <_ZN10Controller12manageMotorsEv+0xda>
				{
					_clock[i]->getWatchPointer(x)->doOneStep(!clockwise);	//Triaxe clockwise is the opposite of biaxe
 80061ce:	230e      	movs	r3, #14
 80061d0:	18fb      	adds	r3, r7, r3
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3204      	adds	r2, #4
 80061d8:	0092      	lsls	r2, r2, #2
 80061da:	58d2      	ldr	r2, [r2, r3]
 80061dc:	230d      	movs	r3, #13
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	0019      	movs	r1, r3
 80061e4:	0010      	movs	r0, r2
 80061e6:	f7ff f8bf 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80061ea:	230c      	movs	r3, #12
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2201      	movs	r2, #1
 80061f2:	4053      	eors	r3, r2
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	0019      	movs	r1, r3
 80061f8:	f001 fb32 	bl	8007860 <_ZN12WatchPointer9doOneStepEb>
 80061fc:	e015      	b.n	800622a <_ZN10Controller12manageMotorsEv+0x106>
				}
				else
				{
					_clock[i]->getWatchPointer(x)->doOneStep(clockwise);
 80061fe:	230e      	movs	r3, #14
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3204      	adds	r2, #4
 8006208:	0092      	lsls	r2, r2, #2
 800620a:	58d2      	ldr	r2, [r2, r3]
 800620c:	230d      	movs	r3, #13
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	0019      	movs	r1, r3
 8006214:	0010      	movs	r0, r2
 8006216:	f7ff f8a7 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800621a:	0002      	movs	r2, r0
 800621c:	230c      	movs	r3, #12
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	0019      	movs	r1, r3
 8006224:	0010      	movs	r0, r2
 8006226:	f001 fb1b 	bl	8007860 <_ZN12WatchPointer9doOneStepEb>

				}
				incrementPosition(clockwise,i,x);
 800622a:	230e      	movs	r3, #14
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	230d      	movs	r3, #13
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	781c      	ldrb	r4, [r3, #0]
 8006236:	230c      	movs	r3, #12
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	7819      	ldrb	r1, [r3, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	0023      	movs	r3, r4
 8006240:	f000 f842 	bl	80062c8 <_ZN10Controller17incrementPositionEbii>
				allToNewPosition = false;
 8006244:	230f      	movs	r3, #15
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	2200      	movs	r2, #0
 800624a:	701a      	strb	r2, [r3, #0]
		for(uint8_t x=0; x<(MAX_WATCHPOINTER-1); x++)
 800624c:	210d      	movs	r1, #13
 800624e:	187b      	adds	r3, r7, r1
 8006250:	781a      	ldrb	r2, [r3, #0]
 8006252:	187b      	adds	r3, r7, r1
 8006254:	3201      	adds	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e77a      	b.n	8006150 <_ZN10Controller12manageMotorsEv+0x2c>
	for(uint8_t i=0; i<NBR_CLOCK_PER_PROCESSOR; i++)
 800625a:	210e      	movs	r1, #14
 800625c:	187b      	adds	r3, r7, r1
 800625e:	781a      	ldrb	r2, [r3, #0]
 8006260:	187b      	adds	r3, r7, r1
 8006262:	3201      	adds	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e769      	b.n	800613c <_ZN10Controller12manageMotorsEv+0x18>
			}
		}
	}

	if(allToNewPosition == true)
 8006268:	230f      	movs	r3, #15
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <_ZN10Controller12manageMotorsEv+0x170>
	{
		GEN(evDone());
 8006272:	687d      	ldr	r5, [r7, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	681c      	ldr	r4, [r3, #0]
 800627c:	2014      	movs	r0, #20
 800627e:	f004 febc 	bl	800affa <_Znwj>
 8006282:	0003      	movs	r3, r0
 8006284:	001e      	movs	r6, r3
 8006286:	0030      	movs	r0, r6
 8006288:	f001 ff62 	bl	8008150 <_ZN6evDoneC1Ev>
 800628c:	0031      	movs	r1, r6
 800628e:	0028      	movs	r0, r5
 8006290:	47a0      	blx	r4
	}
	else
	{
		GEN(XFNullTransition());
	}
}
 8006292:	e010      	b.n	80062b6 <_ZN10Controller12manageMotorsEv+0x192>
		GEN(XFNullTransition());
 8006294:	687d      	ldr	r5, [r7, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	681c      	ldr	r4, [r3, #0]
 800629e:	2010      	movs	r0, #16
 80062a0:	f004 feab 	bl	800affa <_Znwj>
 80062a4:	0003      	movs	r3, r0
 80062a6:	001e      	movs	r6, r3
 80062a8:	2100      	movs	r1, #0
 80062aa:	0030      	movs	r0, r6
 80062ac:	f002 fa74 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 80062b0:	0031      	movs	r1, r6
 80062b2:	0028      	movs	r0, r5
 80062b4:	47a0      	blx	r4
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b005      	add	sp, #20
 80062bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	0000020a 	.word	0x0000020a
 80062c4:	00000209 	.word	0x00000209

080062c8 <_ZN10Controller17incrementPositionEbii>:

	return clockwise;
}

void Controller::incrementPosition(bool clockwise, int i, int x)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	200b      	movs	r0, #11
 80062d6:	183b      	adds	r3, r7, r0
 80062d8:	1c0a      	adds	r2, r1, #0
 80062da:	701a      	strb	r2, [r3, #0]
	//Increment position
	if(clockwise == true)
 80062dc:	183b      	adds	r3, r7, r0
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d048      	beq.n	8006376 <_ZN10Controller17incrementPositionEbii+0xae>
	{
		if(_clock[i]->getWatchPointer(x)->actualPosition == ((360/_clock[i]->getWatchPointer(x)->outputAngle)-1))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	3204      	adds	r2, #4
 80062ea:	0092      	lsls	r2, r2, #2
 80062ec:	58d3      	ldr	r3, [r2, r3]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	0011      	movs	r1, r2
 80062f2:	0018      	movs	r0, r3
 80062f4:	f7ff f838 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80062f8:	0002      	movs	r2, r0
 80062fa:	4b44      	ldr	r3, [pc, #272]	; (800640c <_ZN10Controller17incrementPositionEbii+0x144>)
 80062fc:	5cd3      	ldrb	r3, [r2, r3]
 80062fe:	001c      	movs	r4, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	3204      	adds	r2, #4
 8006306:	0092      	lsls	r2, r2, #2
 8006308:	58d3      	ldr	r3, [r2, r3]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	0011      	movs	r1, r2
 800630e:	0018      	movs	r0, r3
 8006310:	f7ff f82a 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006314:	0002      	movs	r2, r0
 8006316:	4b3e      	ldr	r3, [pc, #248]	; (8006410 <_ZN10Controller17incrementPositionEbii+0x148>)
 8006318:	5cd3      	ldrb	r3, [r2, r3]
 800631a:	0019      	movs	r1, r3
 800631c:	23b4      	movs	r3, #180	; 0xb4
 800631e:	0058      	lsls	r0, r3, #1
 8006320:	f7f9 ff7c 	bl	800021c <__divsi3>
 8006324:	0003      	movs	r3, r0
 8006326:	3b01      	subs	r3, #1
 8006328:	1ae3      	subs	r3, r4, r3
 800632a:	425a      	negs	r2, r3
 800632c:	4153      	adcs	r3, r2
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00e      	beq.n	8006352 <_ZN10Controller17incrementPositionEbii+0x8a>
		{
			_clock[i]->getWatchPointer(x)->actualPosition = 0;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	3204      	adds	r2, #4
 800633a:	0092      	lsls	r2, r2, #2
 800633c:	58d3      	ldr	r3, [r2, r3]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	0011      	movs	r1, r2
 8006342:	0018      	movs	r0, r3
 8006344:	f7ff f810 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006348:	0002      	movs	r2, r0
 800634a:	4b30      	ldr	r3, [pc, #192]	; (800640c <_ZN10Controller17incrementPositionEbii+0x144>)
 800634c:	2100      	movs	r1, #0
 800634e:	54d1      	strb	r1, [r2, r3]
		else
		{
			_clock[i]->getWatchPointer(x)->actualPosition--;
		}
	}
}
 8006350:	e058      	b.n	8006404 <_ZN10Controller17incrementPositionEbii+0x13c>
			_clock[i]->getWatchPointer(x)->actualPosition++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	3204      	adds	r2, #4
 8006358:	0092      	lsls	r2, r2, #2
 800635a:	58d3      	ldr	r3, [r2, r3]
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	0011      	movs	r1, r2
 8006360:	0018      	movs	r0, r3
 8006362:	f7ff f801 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006366:	0003      	movs	r3, r0
 8006368:	4a28      	ldr	r2, [pc, #160]	; (800640c <_ZN10Controller17incrementPositionEbii+0x144>)
 800636a:	5c9a      	ldrb	r2, [r3, r2]
 800636c:	3201      	adds	r2, #1
 800636e:	b2d1      	uxtb	r1, r2
 8006370:	4a26      	ldr	r2, [pc, #152]	; (800640c <_ZN10Controller17incrementPositionEbii+0x144>)
 8006372:	5499      	strb	r1, [r3, r2]
}
 8006374:	e046      	b.n	8006404 <_ZN10Controller17incrementPositionEbii+0x13c>
		if(_clock[i]->getWatchPointer(x)->actualPosition == 0)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	3204      	adds	r2, #4
 800637c:	0092      	lsls	r2, r2, #2
 800637e:	58d3      	ldr	r3, [r2, r3]
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	0011      	movs	r1, r2
 8006384:	0018      	movs	r0, r3
 8006386:	f7fe ffef 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800638a:	0002      	movs	r2, r0
 800638c:	4b1f      	ldr	r3, [pc, #124]	; (800640c <_ZN10Controller17incrementPositionEbii+0x144>)
 800638e:	5cd3      	ldrb	r3, [r2, r3]
 8006390:	425a      	negs	r2, r3
 8006392:	4153      	adcs	r3, r2
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d023      	beq.n	80063e2 <_ZN10Controller17incrementPositionEbii+0x11a>
			_clock[i]->getWatchPointer(x)->actualPosition = ((360/_clock[i]->getWatchPointer(x)->outputAngle)-1);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	3204      	adds	r2, #4
 80063a0:	0092      	lsls	r2, r2, #2
 80063a2:	58d3      	ldr	r3, [r2, r3]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	0011      	movs	r1, r2
 80063a8:	0018      	movs	r0, r3
 80063aa:	f7fe ffdd 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80063ae:	0002      	movs	r2, r0
 80063b0:	4b17      	ldr	r3, [pc, #92]	; (8006410 <_ZN10Controller17incrementPositionEbii+0x148>)
 80063b2:	5cd3      	ldrb	r3, [r2, r3]
 80063b4:	0019      	movs	r1, r3
 80063b6:	23b4      	movs	r3, #180	; 0xb4
 80063b8:	0058      	lsls	r0, r3, #1
 80063ba:	f7f9 ff2f 	bl	800021c <__divsi3>
 80063be:	0003      	movs	r3, r0
 80063c0:	b2dc      	uxtb	r4, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	3204      	adds	r2, #4
 80063c8:	0092      	lsls	r2, r2, #2
 80063ca:	58d3      	ldr	r3, [r2, r3]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	0011      	movs	r1, r2
 80063d0:	0018      	movs	r0, r3
 80063d2:	f7fe ffc9 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80063d6:	0002      	movs	r2, r0
 80063d8:	1e63      	subs	r3, r4, #1
 80063da:	b2d9      	uxtb	r1, r3
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <_ZN10Controller17incrementPositionEbii+0x144>)
 80063de:	54d1      	strb	r1, [r2, r3]
}
 80063e0:	e010      	b.n	8006404 <_ZN10Controller17incrementPositionEbii+0x13c>
			_clock[i]->getWatchPointer(x)->actualPosition--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	3204      	adds	r2, #4
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	58d3      	ldr	r3, [r2, r3]
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	0011      	movs	r1, r2
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7fe ffb9 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80063f6:	0003      	movs	r3, r0
 80063f8:	4a04      	ldr	r2, [pc, #16]	; (800640c <_ZN10Controller17incrementPositionEbii+0x144>)
 80063fa:	5c9a      	ldrb	r2, [r3, r2]
 80063fc:	3a01      	subs	r2, #1
 80063fe:	b2d1      	uxtb	r1, r2
 8006400:	4a02      	ldr	r2, [pc, #8]	; (800640c <_ZN10Controller17incrementPositionEbii+0x144>)
 8006402:	5499      	strb	r1, [r3, r2]
}
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	46bd      	mov	sp, r7
 8006408:	b005      	add	sp, #20
 800640a:	bd90      	pop	{r4, r7, pc}
 800640c:	0000020a 	.word	0x0000020a
 8006410:	00000206 	.word	0x00000206

08006414 <_ZN10Controller13SPI_readFrameEv>:

//---------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------SPI------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------
void Controller::SPI_readFrame()
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	uint8_t frameType;

	//Check frame type
	frameType = (buffer_SPI_rx[0] & 0b11000000) >> 6;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2228      	movs	r2, #40	; 0x28
 8006420:	5c9a      	ldrb	r2, [r3, r2]
 8006422:	210f      	movs	r1, #15
 8006424:	187b      	adds	r3, r7, r1
 8006426:	0992      	lsrs	r2, r2, #6
 8006428:	701a      	strb	r2, [r3, #0]

	switch(frameType)
 800642a:	187b      	adds	r3, r7, r1
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d00d      	beq.n	800644e <_ZN10Controller13SPI_readFrameEv+0x3a>
 8006432:	dc02      	bgt.n	800643a <_ZN10Controller13SPI_readFrameEv+0x26>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <_ZN10Controller13SPI_readFrameEv+0x30>
 8006438:	e018      	b.n	800646c <_ZN10Controller13SPI_readFrameEv+0x58>
 800643a:	2b02      	cmp	r3, #2
 800643c:	d00c      	beq.n	8006458 <_ZN10Controller13SPI_readFrameEv+0x44>
 800643e:	2b03      	cmp	r3, #3
 8006440:	d00f      	beq.n	8006462 <_ZN10Controller13SPI_readFrameEv+0x4e>
 8006442:	e013      	b.n	800646c <_ZN10Controller13SPI_readFrameEv+0x58>
	{
	//DATA FRAME
	case 0:
		SPI_dataFrame();
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	0018      	movs	r0, r3
 8006448:	f000 f817 	bl	800647a <_ZN10Controller13SPI_dataFrameEv>
		break;
 800644c:	e011      	b.n	8006472 <_ZN10Controller13SPI_readFrameEv+0x5e>
	//CONFIGURATION FRAME
	case 1:
		SPI_configurationFrame();
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	0018      	movs	r0, r3
 8006452:	f000 f832 	bl	80064ba <_ZN10Controller22SPI_configurationFrameEv>
		break;
 8006456:	e00c      	b.n	8006472 <_ZN10Controller13SPI_readFrameEv+0x5e>
	//BROADCAST CONFIGURATION FRAME
	case 2:
		SPI_broadcastConfigurationFrame();
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	0018      	movs	r0, r3
 800645c:	f000 f84d 	bl	80064fa <_ZN10Controller31SPI_broadcastConfigurationFrameEv>
		break;
 8006460:	e007      	b.n	8006472 <_ZN10Controller13SPI_readFrameEv+0x5e>
	//RESET POSITION ZERO FRAME
	case 3:
		SPI_resetPositionZeroFrame();
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	0018      	movs	r0, r3
 8006466:	f000 f859 	bl	800651c <_ZN10Controller26SPI_resetPositionZeroFrameEv>
		break;
 800646a:	e002      	b.n	8006472 <_ZN10Controller13SPI_readFrameEv+0x5e>
	default:
		Error_Handler();
 800646c:	f7fa fb36 	bl	8000adc <Error_Handler>
		break;
 8006470:	46c0      	nop			; (mov r8, r8)
	}
}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	46bd      	mov	sp, r7
 8006476:	b004      	add	sp, #16
 8006478:	bd80      	pop	{r7, pc}

0800647a <_ZN10Controller13SPI_dataFrameEv>:

void Controller::SPI_dataFrame()
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
	uint8_t readAddress = buffer_SPI_rx[0] & 0b00111111;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2228      	movs	r2, #40	; 0x28
 8006486:	5c9a      	ldrb	r2, [r3, r2]
 8006488:	200f      	movs	r0, #15
 800648a:	183b      	adds	r3, r7, r0
 800648c:	213f      	movs	r1, #63	; 0x3f
 800648e:	400a      	ands	r2, r1
 8006490:	701a      	strb	r2, [r3, #0]

	//Check Processor address
	if(readAddress == myAddress)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2245      	movs	r2, #69	; 0x45
 8006496:	5c9b      	ldrb	r3, [r3, r2]
 8006498:	183a      	adds	r2, r7, r0
 800649a:	7812      	ldrb	r2, [r2, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d104      	bne.n	80064aa <_ZN10Controller13SPI_dataFrameEv+0x30>
	{
		SPI_readDataBytes();
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	0018      	movs	r0, r3
 80064a4:	f000 f88c 	bl	80065c0 <_ZN10Controller17SPI_readDataBytesEv>
	else
	{
		//Send data via CAN
		CAN_writeFrame();
	}
}
 80064a8:	e003      	b.n	80064b2 <_ZN10Controller13SPI_dataFrameEv+0x38>
		CAN_writeFrame();
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f000 fc23 	bl	8006cf8 <_ZN10Controller14CAN_writeFrameEv>
}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b004      	add	sp, #16
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ZN10Controller22SPI_configurationFrameEv>:

void Controller::SPI_configurationFrame()
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
	uint8_t readAddress = buffer_SPI_rx[0] & 0b00111111;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2228      	movs	r2, #40	; 0x28
 80064c6:	5c9a      	ldrb	r2, [r3, r2]
 80064c8:	200f      	movs	r0, #15
 80064ca:	183b      	adds	r3, r7, r0
 80064cc:	213f      	movs	r1, #63	; 0x3f
 80064ce:	400a      	ands	r2, r1
 80064d0:	701a      	strb	r2, [r3, #0]

	//Check Processor address
	if(readAddress == myAddress)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2245      	movs	r2, #69	; 0x45
 80064d6:	5c9b      	ldrb	r3, [r3, r2]
 80064d8:	183a      	adds	r2, r7, r0
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d104      	bne.n	80064ea <_ZN10Controller22SPI_configurationFrameEv+0x30>
	{
		SPI_readConfigBytes();
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	0018      	movs	r0, r3
 80064e4:	f000 fb6a 	bl	8006bbc <_ZN10Controller19SPI_readConfigBytesEv>
	else
	{
		//Send data via CAN
		CAN_writeFrame();
	}
}
 80064e8:	e003      	b.n	80064f2 <_ZN10Controller22SPI_configurationFrameEv+0x38>
		CAN_writeFrame();
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f000 fc03 	bl	8006cf8 <_ZN10Controller14CAN_writeFrameEv>
}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b004      	add	sp, #16
 80064f8:	bd80      	pop	{r7, pc}

080064fa <_ZN10Controller31SPI_broadcastConfigurationFrameEv>:

void Controller::SPI_broadcastConfigurationFrame()
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]

	//Write on our variables
	SPI_readConfigBytes();
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	0018      	movs	r0, r3
 8006506:	f000 fb59 	bl	8006bbc <_ZN10Controller19SPI_readConfigBytesEv>

	//Send via CAN for others
	CAN_writeFrame();
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0018      	movs	r0, r3
 800650e:	f000 fbf3 	bl	8006cf8 <_ZN10Controller14CAN_writeFrameEv>

}
 8006512:	46c0      	nop			; (mov r8, r8)
 8006514:	46bd      	mov	sp, r7
 8006516:	b002      	add	sp, #8
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <_ZN10Controller26SPI_resetPositionZeroFrameEv>:

void Controller::SPI_resetPositionZeroFrame()
{
 800651c:	b5b0      	push	{r4, r5, r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	uint8_t readAddress = buffer_SPI_rx[0] & 0b00111111;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2228      	movs	r2, #40	; 0x28
 8006528:	5c9a      	ldrb	r2, [r3, r2]
 800652a:	200f      	movs	r0, #15
 800652c:	183b      	adds	r3, r7, r0
 800652e:	213f      	movs	r1, #63	; 0x3f
 8006530:	400a      	ands	r2, r1
 8006532:	701a      	strb	r2, [r3, #0]
	uint8_t clkAddress;
	uint8_t watchPtrAddress;

	//Check Processor address
	if(readAddress == myAddress)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2245      	movs	r2, #69	; 0x45
 8006538:	5c9b      	ldrb	r3, [r3, r2]
 800653a:	183a      	adds	r2, r7, r0
 800653c:	7812      	ldrb	r2, [r2, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d132      	bne.n	80065a8 <_ZN10Controller26SPI_resetPositionZeroFrameEv+0x8c>
	{
		clkAddress = (buffer_SPI_rx[1] & 0b00011100) >> 2;	//3 bits
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2229      	movs	r2, #41	; 0x29
 8006546:	5c9b      	ldrb	r3, [r3, r2]
 8006548:	109b      	asrs	r3, r3, #2
 800654a:	b2da      	uxtb	r2, r3
 800654c:	240e      	movs	r4, #14
 800654e:	193b      	adds	r3, r7, r4
 8006550:	2107      	movs	r1, #7
 8006552:	400a      	ands	r2, r1
 8006554:	701a      	strb	r2, [r3, #0]
		watchPtrAddress = (buffer_SPI_rx[1] & 0b00000011);	//2 bits
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2229      	movs	r2, #41	; 0x29
 800655a:	5c9a      	ldrb	r2, [r3, r2]
 800655c:	250d      	movs	r5, #13
 800655e:	197b      	adds	r3, r7, r5
 8006560:	2103      	movs	r1, #3
 8006562:	400a      	ands	r2, r1
 8006564:	701a      	strb	r2, [r3, #0]
		//Reset position zero
		_clock[clkAddress]->getWatchPointer(watchPtrAddress)->newPosition = 0;
 8006566:	193b      	adds	r3, r7, r4
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3204      	adds	r2, #4
 800656e:	0092      	lsls	r2, r2, #2
 8006570:	58d2      	ldr	r2, [r2, r3]
 8006572:	197b      	adds	r3, r7, r5
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	0019      	movs	r1, r3
 8006578:	0010      	movs	r0, r2
 800657a:	f7fe fef5 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800657e:	0002      	movs	r2, r0
 8006580:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <_ZN10Controller26SPI_resetPositionZeroFrameEv+0x9c>)
 8006582:	2100      	movs	r1, #0
 8006584:	54d1      	strb	r1, [r2, r3]
		_clock[clkAddress]->getWatchPointer(watchPtrAddress)->actualPosition = 0;
 8006586:	193b      	adds	r3, r7, r4
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3204      	adds	r2, #4
 800658e:	0092      	lsls	r2, r2, #2
 8006590:	58d2      	ldr	r2, [r2, r3]
 8006592:	197b      	adds	r3, r7, r5
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	0019      	movs	r1, r3
 8006598:	0010      	movs	r0, r2
 800659a:	f7fe fee5 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800659e:	0002      	movs	r2, r0
 80065a0:	4b06      	ldr	r3, [pc, #24]	; (80065bc <_ZN10Controller26SPI_resetPositionZeroFrameEv+0xa0>)
 80065a2:	2100      	movs	r1, #0
 80065a4:	54d1      	strb	r1, [r2, r3]
	else
	{
		//Send data via CAN
		CAN_writeFrame();
	}
}
 80065a6:	e003      	b.n	80065b0 <_ZN10Controller26SPI_resetPositionZeroFrameEv+0x94>
		CAN_writeFrame();
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0018      	movs	r0, r3
 80065ac:	f000 fba4 	bl	8006cf8 <_ZN10Controller14CAN_writeFrameEv>
}
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	46bd      	mov	sp, r7
 80065b4:	b004      	add	sp, #16
 80065b6:	bdb0      	pop	{r4, r5, r7, pc}
 80065b8:	00000209 	.word	0x00000209
 80065bc:	0000020a 	.word	0x0000020a

080065c0 <_ZN10Controller17SPI_readDataBytesEv>:

void Controller::SPI_readDataBytes()
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	uint8_t clkAddr = (buffer_SPI_rx[1] & 0b00011100) >> 2;	//3 bits
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2229      	movs	r2, #41	; 0x29
 80065cc:	5c9b      	ldrb	r3, [r3, r2]
 80065ce:	109b      	asrs	r3, r3, #2
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	230f      	movs	r3, #15
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	2107      	movs	r1, #7
 80065d8:	400a      	ands	r2, r1
 80065da:	701a      	strb	r2, [r3, #0]
	uint8_t watchPtrAddress = (buffer_SPI_rx[1] & 0b00000011);	//2 bits
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2229      	movs	r2, #41	; 0x29
 80065e0:	5c9a      	ldrb	r2, [r3, r2]
 80065e2:	200e      	movs	r0, #14
 80065e4:	183b      	adds	r3, r7, r0
 80065e6:	2103      	movs	r1, #3
 80065e8:	400a      	ands	r2, r1
 80065ea:	701a      	strb	r2, [r3, #0]
	uint8_t nbrBytes = buffer_SPI_rx[2];
 80065ec:	230d      	movs	r3, #13
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	212a      	movs	r1, #42	; 0x2a
 80065f4:	5c52      	ldrb	r2, [r2, r1]
 80065f6:	701a      	strb	r2, [r3, #0]

	//Write on registers
	switch(watchPtrAddress)
 80065f8:	183b      	adds	r3, r7, r0
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d013      	beq.n	8006628 <_ZN10Controller17SPI_readDataBytesEv+0x68>
 8006600:	dc02      	bgt.n	8006608 <_ZN10Controller17SPI_readDataBytesEv+0x48>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <_ZN10Controller17SPI_readDataBytesEv+0x52>
 8006606:	e030      	b.n	800666a <_ZN10Controller17SPI_readDataBytesEv+0xaa>
 8006608:	2b02      	cmp	r3, #2
 800660a:	d018      	beq.n	800663e <_ZN10Controller17SPI_readDataBytesEv+0x7e>
 800660c:	2b03      	cmp	r3, #3
 800660e:	d021      	beq.n	8006654 <_ZN10Controller17SPI_readDataBytesEv+0x94>
 8006610:	e02b      	b.n	800666a <_ZN10Controller17SPI_readDataBytesEv+0xaa>
	{
	case 0:
		SPI_writeDataRegister_0(clkAddr, nbrBytes);	//Data frame for watch pointer 0
 8006612:	230d      	movs	r3, #13
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	781a      	ldrb	r2, [r3, #0]
 8006618:	230f      	movs	r3, #15
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	7819      	ldrb	r1, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	0018      	movs	r0, r3
 8006622:	f000 f987 	bl	8006934 <_ZN10Controller23SPI_writeDataRegister_0Ehh>
		break;
 8006626:	e023      	b.n	8006670 <_ZN10Controller17SPI_readDataBytesEv+0xb0>

	case 1:
		SPI_writeDataRegister_1(clkAddr, nbrBytes); //Data frame for watch pointer 1
 8006628:	230d      	movs	r3, #13
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	230f      	movs	r3, #15
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	7819      	ldrb	r1, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0018      	movs	r0, r3
 8006638:	f000 fa16 	bl	8006a68 <_ZN10Controller23SPI_writeDataRegister_1Ehh>
		break;
 800663c:	e018      	b.n	8006670 <_ZN10Controller17SPI_readDataBytesEv+0xb0>

	case 2:
		SPI_writeDataRegister_2(clkAddr, nbrBytes); //Data frame for watch pointer 2
 800663e:	230d      	movs	r3, #13
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	781a      	ldrb	r2, [r3, #0]
 8006644:	230f      	movs	r3, #15
 8006646:	18fb      	adds	r3, r7, r3
 8006648:	7819      	ldrb	r1, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0018      	movs	r0, r3
 800664e:	f000 faa5 	bl	8006b9c <_ZN10Controller23SPI_writeDataRegister_2Ehh>
		break;
 8006652:	e00d      	b.n	8006670 <_ZN10Controller17SPI_readDataBytesEv+0xb0>

	case 3:
		SPI_writeDataRegister(clkAddr, nbrBytes); //Data frame for all watch pointer
 8006654:	230d      	movs	r3, #13
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	230f      	movs	r3, #15
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	7819      	ldrb	r1, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	0018      	movs	r0, r3
 8006664:	f000 f808 	bl	8006678 <_ZN10Controller21SPI_writeDataRegisterEhh>
		break;
 8006668:	e002      	b.n	8006670 <_ZN10Controller17SPI_readDataBytesEv+0xb0>

	default:
		Error_Handler();
 800666a:	f7fa fa37 	bl	8000adc <Error_Handler>
		break;
 800666e:	46c0      	nop			; (mov r8, r8)
	}

}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bd80      	pop	{r7, pc}

08006678 <_ZN10Controller21SPI_writeDataRegisterEhh>:

void Controller::SPI_writeDataRegister(uint8_t clkAddr, uint8_t nbrBytes)
{
 8006678:	b590      	push	{r4, r7, lr}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	0008      	movs	r0, r1
 8006682:	0011      	movs	r1, r2
 8006684:	1cfb      	adds	r3, r7, #3
 8006686:	1c02      	adds	r2, r0, #0
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	1cbb      	adds	r3, r7, #2
 800668c:	1c0a      	adds	r2, r1, #0
 800668e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 8006690:	230f      	movs	r3, #15
 8006692:	18fb      	adds	r3, r7, r3
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	230f      	movs	r3, #15
 800669a:	18fa      	adds	r2, r7, r3
 800669c:	1cbb      	adds	r3, r7, #2
 800669e:	7812      	ldrb	r2, [r2, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d300      	bcc.n	80066a8 <_ZN10Controller21SPI_writeDataRegisterEhh+0x30>
 80066a6:	e138      	b.n	800691a <_ZN10Controller21SPI_writeDataRegisterEhh+0x2a2>
	{
		switch(i)
 80066a8:	230f      	movs	r3, #15
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b07      	cmp	r3, #7
 80066b0:	d900      	bls.n	80066b4 <_ZN10Controller21SPI_writeDataRegisterEhh+0x3c>
 80066b2:	e128      	b.n	8006906 <_ZN10Controller21SPI_writeDataRegisterEhh+0x28e>
 80066b4:	009a      	lsls	r2, r3, #2
 80066b6:	4b9b      	ldr	r3, [pc, #620]	; (8006924 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2ac>)
 80066b8:	18d3      	adds	r3, r2, r3
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(0)->nbrTurns = buffer_SPI_rx[3] & 0b00000111;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	222b      	movs	r2, #43	; 0x2b
 80066c2:	5c9c      	ldrb	r4, [r3, r2]
 80066c4:	1cfb      	adds	r3, r7, #3
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3204      	adds	r2, #4
 80066cc:	0092      	lsls	r2, r2, #2
 80066ce:	58d3      	ldr	r3, [r2, r3]
 80066d0:	2100      	movs	r1, #0
 80066d2:	0018      	movs	r0, r3
 80066d4:	f7fe fe48 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80066d8:	0002      	movs	r2, r0
 80066da:	2307      	movs	r3, #7
 80066dc:	4023      	ands	r3, r4
 80066de:	b2d9      	uxtb	r1, r3
 80066e0:	2382      	movs	r3, #130	; 0x82
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->clockwise = (buffer_SPI_rx[3] & 0b00001000) >> 3;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	222b      	movs	r2, #43	; 0x2b
 80066ea:	5c9b      	ldrb	r3, [r3, r2]
 80066ec:	10db      	asrs	r3, r3, #3
 80066ee:	b2dc      	uxtb	r4, r3
 80066f0:	1cfb      	adds	r3, r7, #3
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3204      	adds	r2, #4
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	58d3      	ldr	r3, [r2, r3]
 80066fc:	2100      	movs	r1, #0
 80066fe:	0018      	movs	r0, r3
 8006700:	f7fe fe32 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006704:	0002      	movs	r2, r0
 8006706:	2301      	movs	r3, #1
 8006708:	4023      	ands	r3, r4
 800670a:	b2d9      	uxtb	r1, r3
 800670c:	4b86      	ldr	r3, [pc, #536]	; (8006928 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b0>)
 800670e:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->nbrTurns = (buffer_SPI_rx[3] & 0b01110000) >> 4;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	222b      	movs	r2, #43	; 0x2b
 8006714:	5c9b      	ldrb	r3, [r3, r2]
 8006716:	111b      	asrs	r3, r3, #4
 8006718:	b2dc      	uxtb	r4, r3
 800671a:	1cfb      	adds	r3, r7, #3
 800671c:	781a      	ldrb	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3204      	adds	r2, #4
 8006722:	0092      	lsls	r2, r2, #2
 8006724:	58d3      	ldr	r3, [r2, r3]
 8006726:	2101      	movs	r1, #1
 8006728:	0018      	movs	r0, r3
 800672a:	f7fe fe1d 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800672e:	0002      	movs	r2, r0
 8006730:	2307      	movs	r3, #7
 8006732:	4023      	ands	r3, r4
 8006734:	b2d9      	uxtb	r1, r3
 8006736:	2382      	movs	r3, #130	; 0x82
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->clockwise = (buffer_SPI_rx[3] & 0b10000000) >> 7;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	222b      	movs	r2, #43	; 0x2b
 8006740:	5c9c      	ldrb	r4, [r3, r2]
 8006742:	1cfb      	adds	r3, r7, #3
 8006744:	781a      	ldrb	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3204      	adds	r2, #4
 800674a:	0092      	lsls	r2, r2, #2
 800674c:	58d3      	ldr	r3, [r2, r3]
 800674e:	2101      	movs	r1, #1
 8006750:	0018      	movs	r0, r3
 8006752:	f7fe fe09 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006756:	0002      	movs	r2, r0
 8006758:	09e3      	lsrs	r3, r4, #7
 800675a:	b2d9      	uxtb	r1, r3
 800675c:	4b72      	ldr	r3, [pc, #456]	; (8006928 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b0>)
 800675e:	54d1      	strb	r1, [r2, r3]
			break;
 8006760:	e0d4      	b.n	800690c <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 1:
			_clock[clkAddr]->getWatchPointer(0)->newPosition = buffer_SPI_rx[4];
 8006762:	1cfb      	adds	r3, r7, #3
 8006764:	781a      	ldrb	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3204      	adds	r2, #4
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	58d3      	ldr	r3, [r2, r3]
 800676e:	2100      	movs	r1, #0
 8006770:	0018      	movs	r0, r3
 8006772:	f7fe fdf9 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006776:	0001      	movs	r1, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	222c      	movs	r2, #44	; 0x2c
 800677c:	5c9a      	ldrb	r2, [r3, r2]
 800677e:	4b6b      	ldr	r3, [pc, #428]	; (800692c <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b4>)
 8006780:	54ca      	strb	r2, [r1, r3]
			break;
 8006782:	e0c3      	b.n	800690c <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 2:
			_clock[clkAddr]->getWatchPointer(0)->offsetStartTime = buffer_SPI_rx[5] & 0b00001111;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	222d      	movs	r2, #45	; 0x2d
 8006788:	5c9c      	ldrb	r4, [r3, r2]
 800678a:	1cfb      	adds	r3, r7, #3
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3204      	adds	r2, #4
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	58d3      	ldr	r3, [r2, r3]
 8006796:	2100      	movs	r1, #0
 8006798:	0018      	movs	r0, r3
 800679a:	f7fe fde5 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800679e:	0002      	movs	r2, r0
 80067a0:	230f      	movs	r3, #15
 80067a2:	4023      	ands	r3, r4
 80067a4:	b2d9      	uxtb	r1, r3
 80067a6:	4b62      	ldr	r3, [pc, #392]	; (8006930 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b8>)
 80067a8:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->movmentDurationTime = (buffer_SPI_rx[5] & 0b11110000) >> 4;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	222d      	movs	r2, #45	; 0x2d
 80067ae:	5c9c      	ldrb	r4, [r3, r2]
 80067b0:	1cfb      	adds	r3, r7, #3
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3204      	adds	r2, #4
 80067b8:	0092      	lsls	r2, r2, #2
 80067ba:	58d3      	ldr	r3, [r2, r3]
 80067bc:	2100      	movs	r1, #0
 80067be:	0018      	movs	r0, r3
 80067c0:	f7fe fdd2 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80067c4:	0002      	movs	r2, r0
 80067c6:	0923      	lsrs	r3, r4, #4
 80067c8:	b2d9      	uxtb	r1, r3
 80067ca:	2383      	movs	r3, #131	; 0x83
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	54d1      	strb	r1, [r2, r3]
			break;
 80067d0:	e09c      	b.n	800690c <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 3:
			_clock[clkAddr]->getWatchPointer(1)->newPosition = buffer_SPI_rx[6];
 80067d2:	1cfb      	adds	r3, r7, #3
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3204      	adds	r2, #4
 80067da:	0092      	lsls	r2, r2, #2
 80067dc:	58d3      	ldr	r3, [r2, r3]
 80067de:	2101      	movs	r1, #1
 80067e0:	0018      	movs	r0, r3
 80067e2:	f7fe fdc1 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80067e6:	0001      	movs	r1, r0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	222e      	movs	r2, #46	; 0x2e
 80067ec:	5c9a      	ldrb	r2, [r3, r2]
 80067ee:	4b4f      	ldr	r3, [pc, #316]	; (800692c <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b4>)
 80067f0:	54ca      	strb	r2, [r1, r3]
			break;
 80067f2:	e08b      	b.n	800690c <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 4:
			_clock[clkAddr]->getWatchPointer(1)->offsetStartTime = buffer_SPI_rx[7] & 0b00001111;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	222f      	movs	r2, #47	; 0x2f
 80067f8:	5c9c      	ldrb	r4, [r3, r2]
 80067fa:	1cfb      	adds	r3, r7, #3
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3204      	adds	r2, #4
 8006802:	0092      	lsls	r2, r2, #2
 8006804:	58d3      	ldr	r3, [r2, r3]
 8006806:	2101      	movs	r1, #1
 8006808:	0018      	movs	r0, r3
 800680a:	f7fe fdad 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800680e:	0002      	movs	r2, r0
 8006810:	230f      	movs	r3, #15
 8006812:	4023      	ands	r3, r4
 8006814:	b2d9      	uxtb	r1, r3
 8006816:	4b46      	ldr	r3, [pc, #280]	; (8006930 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b8>)
 8006818:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->movmentDurationTime = (buffer_SPI_rx[7] & 0b11110000) >> 4;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	222f      	movs	r2, #47	; 0x2f
 800681e:	5c9c      	ldrb	r4, [r3, r2]
 8006820:	1cfb      	adds	r3, r7, #3
 8006822:	781a      	ldrb	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3204      	adds	r2, #4
 8006828:	0092      	lsls	r2, r2, #2
 800682a:	58d3      	ldr	r3, [r2, r3]
 800682c:	2101      	movs	r1, #1
 800682e:	0018      	movs	r0, r3
 8006830:	f7fe fd9a 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006834:	0002      	movs	r2, r0
 8006836:	0923      	lsrs	r3, r4, #4
 8006838:	b2d9      	uxtb	r1, r3
 800683a:	2383      	movs	r3, #131	; 0x83
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	54d1      	strb	r1, [r2, r3]
			break;
 8006840:	e064      	b.n	800690c <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 5:
			_clock[clkAddr]->getWatchPointer(2)->nbrTurns = buffer_SPI_rx[8] & 0b00000111;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2230      	movs	r2, #48	; 0x30
 8006846:	5c9c      	ldrb	r4, [r3, r2]
 8006848:	1cfb      	adds	r3, r7, #3
 800684a:	781a      	ldrb	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3204      	adds	r2, #4
 8006850:	0092      	lsls	r2, r2, #2
 8006852:	58d3      	ldr	r3, [r2, r3]
 8006854:	2102      	movs	r1, #2
 8006856:	0018      	movs	r0, r3
 8006858:	f7fe fd86 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800685c:	0002      	movs	r2, r0
 800685e:	2307      	movs	r3, #7
 8006860:	4023      	ands	r3, r4
 8006862:	b2d9      	uxtb	r1, r3
 8006864:	2382      	movs	r3, #130	; 0x82
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(2)->clockwise = (buffer_SPI_rx[8] & 0b00001000) >> 3;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2230      	movs	r2, #48	; 0x30
 800686e:	5c9b      	ldrb	r3, [r3, r2]
 8006870:	10db      	asrs	r3, r3, #3
 8006872:	b2dc      	uxtb	r4, r3
 8006874:	1cfb      	adds	r3, r7, #3
 8006876:	781a      	ldrb	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3204      	adds	r2, #4
 800687c:	0092      	lsls	r2, r2, #2
 800687e:	58d3      	ldr	r3, [r2, r3]
 8006880:	2102      	movs	r1, #2
 8006882:	0018      	movs	r0, r3
 8006884:	f7fe fd70 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006888:	0002      	movs	r2, r0
 800688a:	2301      	movs	r3, #1
 800688c:	4023      	ands	r3, r4
 800688e:	b2d9      	uxtb	r1, r3
 8006890:	4b25      	ldr	r3, [pc, #148]	; (8006928 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b0>)
 8006892:	54d1      	strb	r1, [r2, r3]
			break;
 8006894:	e03a      	b.n	800690c <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 6:
			_clock[clkAddr]->getWatchPointer(2)->newPosition = buffer_SPI_rx[9];
 8006896:	1cfb      	adds	r3, r7, #3
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3204      	adds	r2, #4
 800689e:	0092      	lsls	r2, r2, #2
 80068a0:	58d3      	ldr	r3, [r2, r3]
 80068a2:	2102      	movs	r1, #2
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7fe fd5f 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80068aa:	0001      	movs	r1, r0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2231      	movs	r2, #49	; 0x31
 80068b0:	5c9a      	ldrb	r2, [r3, r2]
 80068b2:	4b1e      	ldr	r3, [pc, #120]	; (800692c <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b4>)
 80068b4:	54ca      	strb	r2, [r1, r3]
			break;
 80068b6:	e029      	b.n	800690c <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		case 7:
			_clock[clkAddr]->getWatchPointer(2)->offsetStartTime = buffer_SPI_rx[10] & 0b00001111;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2232      	movs	r2, #50	; 0x32
 80068bc:	5c9c      	ldrb	r4, [r3, r2]
 80068be:	1cfb      	adds	r3, r7, #3
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3204      	adds	r2, #4
 80068c6:	0092      	lsls	r2, r2, #2
 80068c8:	58d3      	ldr	r3, [r2, r3]
 80068ca:	2102      	movs	r1, #2
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7fe fd4b 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80068d2:	0002      	movs	r2, r0
 80068d4:	230f      	movs	r3, #15
 80068d6:	4023      	ands	r3, r4
 80068d8:	b2d9      	uxtb	r1, r3
 80068da:	4b15      	ldr	r3, [pc, #84]	; (8006930 <_ZN10Controller21SPI_writeDataRegisterEhh+0x2b8>)
 80068dc:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(2)->movmentDurationTime = (buffer_SPI_rx[10] & 0b11110000) >> 4;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2232      	movs	r2, #50	; 0x32
 80068e2:	5c9c      	ldrb	r4, [r3, r2]
 80068e4:	1cfb      	adds	r3, r7, #3
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3204      	adds	r2, #4
 80068ec:	0092      	lsls	r2, r2, #2
 80068ee:	58d3      	ldr	r3, [r2, r3]
 80068f0:	2102      	movs	r1, #2
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7fe fd38 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80068f8:	0002      	movs	r2, r0
 80068fa:	0923      	lsrs	r3, r4, #4
 80068fc:	b2d9      	uxtb	r1, r3
 80068fe:	2383      	movs	r3, #131	; 0x83
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	54d1      	strb	r1, [r2, r3]
			break;
 8006904:	e002      	b.n	800690c <_ZN10Controller21SPI_writeDataRegisterEhh+0x294>
		default:
			Error_Handler();
 8006906:	f7fa f8e9 	bl	8000adc <Error_Handler>
			break;
 800690a:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 800690c:	210f      	movs	r1, #15
 800690e:	187b      	adds	r3, r7, r1
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	187b      	adds	r3, r7, r1
 8006914:	3201      	adds	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	e6be      	b.n	8006698 <_ZN10Controller21SPI_writeDataRegisterEhh+0x20>
		}
	}
}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	46bd      	mov	sp, r7
 800691e:	b005      	add	sp, #20
 8006920:	bd90      	pop	{r4, r7, pc}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	0800c35c 	.word	0x0800c35c
 8006928:	00000207 	.word	0x00000207
 800692c:	00000209 	.word	0x00000209
 8006930:	0000020b 	.word	0x0000020b

08006934 <_ZN10Controller23SPI_writeDataRegister_0Ehh>:

//Data register for watch pointer n°0
void Controller::SPI_writeDataRegister_0(uint8_t clkAddr, uint8_t nbrBytes)
{
 8006934:	b590      	push	{r4, r7, lr}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	0008      	movs	r0, r1
 800693e:	0011      	movs	r1, r2
 8006940:	1cfb      	adds	r3, r7, #3
 8006942:	1c02      	adds	r2, r0, #0
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	1cbb      	adds	r3, r7, #2
 8006948:	1c0a      	adds	r2, r1, #0
 800694a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 800694c:	230f      	movs	r3, #15
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	2200      	movs	r2, #0
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	230f      	movs	r3, #15
 8006956:	18fa      	adds	r2, r7, r3
 8006958:	1cbb      	adds	r3, r7, #2
 800695a:	7812      	ldrb	r2, [r2, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d276      	bcs.n	8006a50 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x11c>
	{
		switch(i)
 8006962:	230f      	movs	r3, #15
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b07      	cmp	r3, #7
 800696a:	d866      	bhi.n	8006a3a <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x106>
 800696c:	009a      	lsls	r2, r3, #2
 800696e:	4b3a      	ldr	r3, [pc, #232]	; (8006a58 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x124>)
 8006970:	18d3      	adds	r3, r2, r3
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(0)->nbrTurns = buffer_SPI_rx[3] & 0b00000111;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	222b      	movs	r2, #43	; 0x2b
 800697a:	5c9c      	ldrb	r4, [r3, r2]
 800697c:	1cfb      	adds	r3, r7, #3
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3204      	adds	r2, #4
 8006984:	0092      	lsls	r2, r2, #2
 8006986:	58d3      	ldr	r3, [r2, r3]
 8006988:	2100      	movs	r1, #0
 800698a:	0018      	movs	r0, r3
 800698c:	f7fe fcec 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006990:	0002      	movs	r2, r0
 8006992:	2307      	movs	r3, #7
 8006994:	4023      	ands	r3, r4
 8006996:	b2d9      	uxtb	r1, r3
 8006998:	2382      	movs	r3, #130	; 0x82
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->clockwise = (buffer_SPI_rx[3] & 0b00001000) >> 3;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	222b      	movs	r2, #43	; 0x2b
 80069a2:	5c9b      	ldrb	r3, [r3, r2]
 80069a4:	10db      	asrs	r3, r3, #3
 80069a6:	b2dc      	uxtb	r4, r3
 80069a8:	1cfb      	adds	r3, r7, #3
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3204      	adds	r2, #4
 80069b0:	0092      	lsls	r2, r2, #2
 80069b2:	58d3      	ldr	r3, [r2, r3]
 80069b4:	2100      	movs	r1, #0
 80069b6:	0018      	movs	r0, r3
 80069b8:	f7fe fcd6 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80069bc:	0002      	movs	r2, r0
 80069be:	2301      	movs	r3, #1
 80069c0:	4023      	ands	r3, r4
 80069c2:	b2d9      	uxtb	r1, r3
 80069c4:	4b25      	ldr	r3, [pc, #148]	; (8006a5c <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x128>)
 80069c6:	54d1      	strb	r1, [r2, r3]
			break;
 80069c8:	e03b      	b.n	8006a42 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x10e>
		case 1:
			_clock[clkAddr]->getWatchPointer(0)->newPosition = buffer_SPI_rx[4];
 80069ca:	1cfb      	adds	r3, r7, #3
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3204      	adds	r2, #4
 80069d2:	0092      	lsls	r2, r2, #2
 80069d4:	58d3      	ldr	r3, [r2, r3]
 80069d6:	2100      	movs	r1, #0
 80069d8:	0018      	movs	r0, r3
 80069da:	f7fe fcc5 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80069de:	0001      	movs	r1, r0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	222c      	movs	r2, #44	; 0x2c
 80069e4:	5c9a      	ldrb	r2, [r3, r2]
 80069e6:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x12c>)
 80069e8:	54ca      	strb	r2, [r1, r3]
			break;
 80069ea:	e02a      	b.n	8006a42 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x10e>
		case 2:
			_clock[clkAddr]->getWatchPointer(0)->offsetStartTime = buffer_SPI_rx[5] & 0b00001111;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	222d      	movs	r2, #45	; 0x2d
 80069f0:	5c9c      	ldrb	r4, [r3, r2]
 80069f2:	1cfb      	adds	r3, r7, #3
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3204      	adds	r2, #4
 80069fa:	0092      	lsls	r2, r2, #2
 80069fc:	58d3      	ldr	r3, [r2, r3]
 80069fe:	2100      	movs	r1, #0
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7fe fcb1 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006a06:	0002      	movs	r2, r0
 8006a08:	230f      	movs	r3, #15
 8006a0a:	4023      	ands	r3, r4
 8006a0c:	b2d9      	uxtb	r1, r3
 8006a0e:	4b15      	ldr	r3, [pc, #84]	; (8006a64 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x130>)
 8006a10:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->movmentDurationTime = (buffer_SPI_rx[5] & 0b11110000) >> 4;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	222d      	movs	r2, #45	; 0x2d
 8006a16:	5c9c      	ldrb	r4, [r3, r2]
 8006a18:	1cfb      	adds	r3, r7, #3
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3204      	adds	r2, #4
 8006a20:	0092      	lsls	r2, r2, #2
 8006a22:	58d3      	ldr	r3, [r2, r3]
 8006a24:	2100      	movs	r1, #0
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7fe fc9e 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006a2c:	0002      	movs	r2, r0
 8006a2e:	0923      	lsrs	r3, r4, #4
 8006a30:	b2d9      	uxtb	r1, r3
 8006a32:	2383      	movs	r3, #131	; 0x83
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	54d1      	strb	r1, [r2, r3]
			break;
 8006a38:	e003      	b.n	8006a42 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x10e>
		case 6:
			break;
		case 7:
			break;
		default:
			Error_Handler();
 8006a3a:	f7fa f84f 	bl	8000adc <Error_Handler>
			break;
 8006a3e:	e000      	b.n	8006a42 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x10e>
			break;
 8006a40:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 8006a42:	210f      	movs	r1, #15
 8006a44:	187b      	adds	r3, r7, r1
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	187b      	adds	r3, r7, r1
 8006a4a:	3201      	adds	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	e781      	b.n	8006954 <_ZN10Controller23SPI_writeDataRegister_0Ehh+0x20>
		}
	}
}
 8006a50:	46c0      	nop			; (mov r8, r8)
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b005      	add	sp, #20
 8006a56:	bd90      	pop	{r4, r7, pc}
 8006a58:	0800c37c 	.word	0x0800c37c
 8006a5c:	00000207 	.word	0x00000207
 8006a60:	00000209 	.word	0x00000209
 8006a64:	0000020b 	.word	0x0000020b

08006a68 <_ZN10Controller23SPI_writeDataRegister_1Ehh>:

//Data register for watch pointer n°1
void Controller::SPI_writeDataRegister_1(uint8_t clkAddr, uint8_t nbrBytes)
{
 8006a68:	b590      	push	{r4, r7, lr}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	0008      	movs	r0, r1
 8006a72:	0011      	movs	r1, r2
 8006a74:	1cfb      	adds	r3, r7, #3
 8006a76:	1c02      	adds	r2, r0, #0
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	1cbb      	adds	r3, r7, #2
 8006a7c:	1c0a      	adds	r2, r1, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 8006a80:	230f      	movs	r3, #15
 8006a82:	18fb      	adds	r3, r7, r3
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	230f      	movs	r3, #15
 8006a8a:	18fa      	adds	r2, r7, r3
 8006a8c:	1cbb      	adds	r3, r7, #2
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d276      	bcs.n	8006b84 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x11c>
	{
		switch(i)
 8006a96:	230f      	movs	r3, #15
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b07      	cmp	r3, #7
 8006a9e:	d866      	bhi.n	8006b6e <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x106>
 8006aa0:	009a      	lsls	r2, r3, #2
 8006aa2:	4b3a      	ldr	r3, [pc, #232]	; (8006b8c <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x124>)
 8006aa4:	18d3      	adds	r3, r2, r3
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(1)->nbrTurns = buffer_SPI_rx[3] & 0b00000111;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	222b      	movs	r2, #43	; 0x2b
 8006aae:	5c9c      	ldrb	r4, [r3, r2]
 8006ab0:	1cfb      	adds	r3, r7, #3
 8006ab2:	781a      	ldrb	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3204      	adds	r2, #4
 8006ab8:	0092      	lsls	r2, r2, #2
 8006aba:	58d3      	ldr	r3, [r2, r3]
 8006abc:	2101      	movs	r1, #1
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f7fe fc52 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006ac4:	0002      	movs	r2, r0
 8006ac6:	2307      	movs	r3, #7
 8006ac8:	4023      	ands	r3, r4
 8006aca:	b2d9      	uxtb	r1, r3
 8006acc:	2382      	movs	r3, #130	; 0x82
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->clockwise = (buffer_SPI_rx[3] & 0b00001000) >> 3;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	222b      	movs	r2, #43	; 0x2b
 8006ad6:	5c9b      	ldrb	r3, [r3, r2]
 8006ad8:	10db      	asrs	r3, r3, #3
 8006ada:	b2dc      	uxtb	r4, r3
 8006adc:	1cfb      	adds	r3, r7, #3
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3204      	adds	r2, #4
 8006ae4:	0092      	lsls	r2, r2, #2
 8006ae6:	58d3      	ldr	r3, [r2, r3]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7fe fc3c 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006af0:	0002      	movs	r2, r0
 8006af2:	2301      	movs	r3, #1
 8006af4:	4023      	ands	r3, r4
 8006af6:	b2d9      	uxtb	r1, r3
 8006af8:	4b25      	ldr	r3, [pc, #148]	; (8006b90 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x128>)
 8006afa:	54d1      	strb	r1, [r2, r3]
			break;
 8006afc:	e03b      	b.n	8006b76 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x10e>
		case 1:
			_clock[clkAddr]->getWatchPointer(1)->newPosition = buffer_SPI_rx[4];
 8006afe:	1cfb      	adds	r3, r7, #3
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3204      	adds	r2, #4
 8006b06:	0092      	lsls	r2, r2, #2
 8006b08:	58d3      	ldr	r3, [r2, r3]
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7fe fc2b 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006b12:	0001      	movs	r1, r0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	222c      	movs	r2, #44	; 0x2c
 8006b18:	5c9a      	ldrb	r2, [r3, r2]
 8006b1a:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x12c>)
 8006b1c:	54ca      	strb	r2, [r1, r3]
			break;
 8006b1e:	e02a      	b.n	8006b76 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x10e>
		case 2:
			_clock[clkAddr]->getWatchPointer(1)->offsetStartTime = buffer_SPI_rx[5] & 0b00001111;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	222d      	movs	r2, #45	; 0x2d
 8006b24:	5c9c      	ldrb	r4, [r3, r2]
 8006b26:	1cfb      	adds	r3, r7, #3
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3204      	adds	r2, #4
 8006b2e:	0092      	lsls	r2, r2, #2
 8006b30:	58d3      	ldr	r3, [r2, r3]
 8006b32:	2101      	movs	r1, #1
 8006b34:	0018      	movs	r0, r3
 8006b36:	f7fe fc17 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006b3a:	0002      	movs	r2, r0
 8006b3c:	230f      	movs	r3, #15
 8006b3e:	4023      	ands	r3, r4
 8006b40:	b2d9      	uxtb	r1, r3
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x130>)
 8006b44:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->movmentDurationTime = (buffer_SPI_rx[5] & 0b11110000) >> 4;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	222d      	movs	r2, #45	; 0x2d
 8006b4a:	5c9c      	ldrb	r4, [r3, r2]
 8006b4c:	1cfb      	adds	r3, r7, #3
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3204      	adds	r2, #4
 8006b54:	0092      	lsls	r2, r2, #2
 8006b56:	58d3      	ldr	r3, [r2, r3]
 8006b58:	2101      	movs	r1, #1
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7fe fc04 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006b60:	0002      	movs	r2, r0
 8006b62:	0923      	lsrs	r3, r4, #4
 8006b64:	b2d9      	uxtb	r1, r3
 8006b66:	2383      	movs	r3, #131	; 0x83
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	54d1      	strb	r1, [r2, r3]
			break;
 8006b6c:	e003      	b.n	8006b76 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x10e>
		case 6:
			break;
		case 7:
			break;
		default:
			Error_Handler();
 8006b6e:	f7f9 ffb5 	bl	8000adc <Error_Handler>
			break;
 8006b72:	e000      	b.n	8006b76 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x10e>
			break;
 8006b74:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 8006b76:	210f      	movs	r1, #15
 8006b78:	187b      	adds	r3, r7, r1
 8006b7a:	781a      	ldrb	r2, [r3, #0]
 8006b7c:	187b      	adds	r3, r7, r1
 8006b7e:	3201      	adds	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	e781      	b.n	8006a88 <_ZN10Controller23SPI_writeDataRegister_1Ehh+0x20>
		}
	}
}
 8006b84:	46c0      	nop			; (mov r8, r8)
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b005      	add	sp, #20
 8006b8a:	bd90      	pop	{r4, r7, pc}
 8006b8c:	0800c39c 	.word	0x0800c39c
 8006b90:	00000207 	.word	0x00000207
 8006b94:	00000209 	.word	0x00000209
 8006b98:	0000020b 	.word	0x0000020b

08006b9c <_ZN10Controller23SPI_writeDataRegister_2Ehh>:

//Data register for watch pointer n°2
//Used only with triaxes movments
void Controller::SPI_writeDataRegister_2(uint8_t clkAddr, uint8_t nbrBytes)
{}
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	0008      	movs	r0, r1
 8006ba6:	0011      	movs	r1, r2
 8006ba8:	1cfb      	adds	r3, r7, #3
 8006baa:	1c02      	adds	r2, r0, #0
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	1cbb      	adds	r3, r7, #2
 8006bb0:	1c0a      	adds	r2, r1, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	46c0      	nop			; (mov r8, r8)
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b002      	add	sp, #8
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <_ZN10Controller19SPI_readConfigBytesEv>:

void Controller::SPI_readConfigBytes()
{
 8006bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	uint8_t nbrBytes = buffer_SPI_rx[1];
 8006bc4:	230e      	movs	r3, #14
 8006bc6:	18fb      	adds	r3, r7, r3
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	2129      	movs	r1, #41	; 0x29
 8006bcc:	5c52      	ldrb	r2, [r2, r1]
 8006bce:	701a      	strb	r2, [r3, #0]
	uint8_t indexRegister = buffer_SPI_rx[2];
 8006bd0:	200d      	movs	r0, #13
 8006bd2:	183b      	adds	r3, r7, r0
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	212a      	movs	r1, #42	; 0x2a
 8006bd8:	5c52      	ldrb	r2, [r2, r1]
 8006bda:	701a      	strb	r2, [r3, #0]
	//First, read data bytes
	//Then, write on each variables
	for(uint8_t i=indexRegister; i<nbrBytes; i++)
 8006bdc:	230f      	movs	r3, #15
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	183a      	adds	r2, r7, r0
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	230f      	movs	r3, #15
 8006be8:	18fa      	adds	r2, r7, r3
 8006bea:	230e      	movs	r3, #14
 8006bec:	18fb      	adds	r3, r7, r3
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d300      	bcc.n	8006bf8 <_ZN10Controller19SPI_readConfigBytesEv+0x3c>
 8006bf6:	e078      	b.n	8006cea <_ZN10Controller19SPI_readConfigBytesEv+0x12e>
	{
		switch(i)
 8006bf8:	230f      	movs	r3, #15
 8006bfa:	18fb      	adds	r3, r7, r3
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b07      	cmp	r3, #7
 8006c00:	d866      	bhi.n	8006cd0 <_ZN10Controller19SPI_readConfigBytesEv+0x114>
 8006c02:	009a      	lsls	r2, r3, #2
 8006c04:	4b3b      	ldr	r3, [pc, #236]	; (8006cf4 <_ZN10Controller19SPI_readConfigBytesEv+0x138>)
 8006c06:	18d3      	adds	r3, r2, r3
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	469f      	mov	pc, r3
		{
		case 0:
			statusBytes = buffer_SPI_rx[i+3];
 8006c0c:	230f      	movs	r3, #15
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	3303      	adds	r3, #3
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	2128      	movs	r1, #40	; 0x28
 8006c18:	18d3      	adds	r3, r2, r3
 8006c1a:	185b      	adds	r3, r3, r1
 8006c1c:	7819      	ldrb	r1, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2247      	movs	r2, #71	; 0x47
 8006c22:	5499      	strb	r1, [r3, r2]
			if(((statusBytes & 0b00100000) >> 5) == true)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2247      	movs	r2, #71	; 0x47
 8006c28:	5c9b      	ldrb	r3, [r3, r2]
 8006c2a:	001a      	movs	r2, r3
 8006c2c:	2320      	movs	r3, #32
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d00f      	beq.n	8006c52 <_ZN10Controller19SPI_readConfigBytesEv+0x96>
			{
				GEN(evGoToZero());		//FLAG GO TO ZERO
 8006c32:	687d      	ldr	r5, [r7, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	681c      	ldr	r4, [r3, #0]
 8006c3c:	2014      	movs	r0, #20
 8006c3e:	f004 f9dc 	bl	800affa <_Znwj>
 8006c42:	0003      	movs	r3, r0
 8006c44:	001e      	movs	r6, r3
 8006c46:	0030      	movs	r0, r6
 8006c48:	f001 faf2 	bl	8008230 <_ZN10evGoToZeroC1Ev>
 8006c4c:	0031      	movs	r1, r6
 8006c4e:	0028      	movs	r0, r5
 8006c50:	47a0      	blx	r4
			}
			if(((statusBytes & 0b00010000)>>4) == true)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2247      	movs	r2, #71	; 0x47
 8006c56:	5c9b      	ldrb	r3, [r3, r2]
 8006c58:	001a      	movs	r2, r3
 8006c5a:	2310      	movs	r3, #16
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d03c      	beq.n	8006cda <_ZN10Controller19SPI_readConfigBytesEv+0x11e>
			{
				GEN(evFlagTrigger());	//FLAG TRIGGER
 8006c60:	687d      	ldr	r5, [r7, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	330c      	adds	r3, #12
 8006c68:	681c      	ldr	r4, [r3, #0]
 8006c6a:	2014      	movs	r0, #20
 8006c6c:	f004 f9c5 	bl	800affa <_Znwj>
 8006c70:	0003      	movs	r3, r0
 8006c72:	001e      	movs	r6, r3
 8006c74:	0030      	movs	r0, r6
 8006c76:	f001 faa3 	bl	80081c0 <_ZN13evFlagTriggerC1Ev>
 8006c7a:	0031      	movs	r1, r6
 8006c7c:	0028      	movs	r0, r5
 8006c7e:	47a0      	blx	r4
			}
			break;
 8006c80:	e02b      	b.n	8006cda <_ZN10Controller19SPI_readConfigBytesEv+0x11e>
		case 1:
			startTime = buffer_SPI_rx[i+3];
 8006c82:	230f      	movs	r3, #15
 8006c84:	18fb      	adds	r3, r7, r3
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	3303      	adds	r3, #3
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	2128      	movs	r1, #40	; 0x28
 8006c8e:	18d3      	adds	r3, r2, r3
 8006c90:	185b      	adds	r3, r3, r1
 8006c92:	7819      	ldrb	r1, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2248      	movs	r2, #72	; 0x48
 8006c98:	5499      	strb	r1, [r3, r2]
			break;
 8006c9a:	e01f      	b.n	8006cdc <_ZN10Controller19SPI_readConfigBytesEv+0x120>
		case 2:
			stopTime = buffer_SPI_rx[i+3];
 8006c9c:	230f      	movs	r3, #15
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	3303      	adds	r3, #3
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	2128      	movs	r1, #40	; 0x28
 8006ca8:	18d3      	adds	r3, r2, r3
 8006caa:	185b      	adds	r3, r3, r1
 8006cac:	7819      	ldrb	r1, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2249      	movs	r2, #73	; 0x49
 8006cb2:	5499      	strb	r1, [r3, r2]
			break;
 8006cb4:	e012      	b.n	8006cdc <_ZN10Controller19SPI_readConfigBytesEv+0x120>
		case 3:
			nbrWatchPtrClk = buffer_SPI_rx[i+3];
 8006cb6:	230f      	movs	r3, #15
 8006cb8:	18fb      	adds	r3, r7, r3
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	3303      	adds	r3, #3
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	2128      	movs	r1, #40	; 0x28
 8006cc2:	18d3      	adds	r3, r2, r3
 8006cc4:	185b      	adds	r3, r3, r1
 8006cc6:	7819      	ldrb	r1, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2246      	movs	r2, #70	; 0x46
 8006ccc:	5499      	strb	r1, [r3, r2]
			break;
 8006cce:	e005      	b.n	8006cdc <_ZN10Controller19SPI_readConfigBytesEv+0x120>
			break;
		case 7:
			//Free
			break;
		default:
			Error_Handler();
 8006cd0:	f7f9 ff04 	bl	8000adc <Error_Handler>
			break;
 8006cd4:	e002      	b.n	8006cdc <_ZN10Controller19SPI_readConfigBytesEv+0x120>
			break;
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	e000      	b.n	8006cdc <_ZN10Controller19SPI_readConfigBytesEv+0x120>
			break;
 8006cda:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=indexRegister; i<nbrBytes; i++)
 8006cdc:	210f      	movs	r1, #15
 8006cde:	187b      	adds	r3, r7, r1
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	187b      	adds	r3, r7, r1
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	e77d      	b.n	8006be6 <_ZN10Controller19SPI_readConfigBytesEv+0x2a>
		}
	}
}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b005      	add	sp, #20
 8006cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	0800c3bc 	.word	0x0800c3bc

08006cf8 <_ZN10Controller14CAN_writeFrameEv>:

//---------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------CAN------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------
void Controller::CAN_writeFrame()
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	uint8_t frameType = (buffer_SPI_rx[0]&0b11000000) >> 6;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2228      	movs	r2, #40	; 0x28
 8006d04:	5c9a      	ldrb	r2, [r3, r2]
 8006d06:	200e      	movs	r0, #14
 8006d08:	183b      	adds	r3, r7, r0
 8006d0a:	0992      	lsrs	r2, r2, #6
 8006d0c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef statusCAN;

	myTxMessage.StdId = 0x00;									//Message identifier -> 11 bits identifier (initialized)
 8006d0e:	4b51      	ldr	r3, [pc, #324]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
	myTxMessage.StdId += (buffer_SPI_rx[0]&0b11000000) << 3;	//2 bits = frame type (bit 10 & bit 9)
 8006d14:	4b4f      	ldr	r3, [pc, #316]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2128      	movs	r1, #40	; 0x28
 8006d1c:	5c5b      	ldrb	r3, [r3, r1]
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	0019      	movs	r1, r3
 8006d22:	23c0      	movs	r3, #192	; 0xc0
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	400b      	ands	r3, r1
 8006d28:	18d2      	adds	r2, r2, r3
 8006d2a:	4b4a      	ldr	r3, [pc, #296]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d2c:	601a      	str	r2, [r3, #0]
	myTxMessage.StdId += (buffer_SPI_rx[0]&0b00001111) << 5;	//4 bits = Processor Address (bit 8 to bit 5)
 8006d2e:	4b49      	ldr	r3, [pc, #292]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2128      	movs	r1, #40	; 0x28
 8006d36:	5c5b      	ldrb	r3, [r3, r1]
 8006d38:	015b      	lsls	r3, r3, #5
 8006d3a:	0019      	movs	r1, r3
 8006d3c:	23f0      	movs	r3, #240	; 0xf0
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	400b      	ands	r3, r1
 8006d42:	18d2      	adds	r2, r2, r3
 8006d44:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d46:	601a      	str	r2, [r3, #0]

	//myTxMessage.ExtId = 0x00;									//Used of 29 bits identifier
	myTxMessage.IDE = CAN_ID_STD;								//Used 11 bits identifier
 8006d48:	4b42      	ldr	r3, [pc, #264]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	609a      	str	r2, [r3, #8]
	myTxMessage.RTR = CAN_RTR_DATA;								//DATA frame
 8006d4e:	4b41      	ldr	r3, [pc, #260]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	60da      	str	r2, [r3, #12]

	switch(frameType)
 8006d54:	183b      	adds	r3, r7, r0
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	dc04      	bgt.n	8006d66 <_ZN10Controller14CAN_writeFrameEv+0x6e>
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	da2f      	bge.n	8006dc0 <_ZN10Controller14CAN_writeFrameEv+0xc8>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <_ZN10Controller14CAN_writeFrameEv+0x74>
 8006d64:	e067      	b.n	8006e36 <_ZN10Controller14CAN_writeFrameEv+0x13e>
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d03e      	beq.n	8006de8 <_ZN10Controller14CAN_writeFrameEv+0xf0>
 8006d6a:	e064      	b.n	8006e36 <_ZN10Controller14CAN_writeFrameEv+0x13e>
	{
	case 0://Data frame
		myTxMessage.StdId += (buffer_SPI_rx[1]&0b00011100);		//3 bits = ClockAddress (bit 5 to bit 2)
 8006d6c:	4b39      	ldr	r3, [pc, #228]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2129      	movs	r1, #41	; 0x29
 8006d74:	5c5b      	ldrb	r3, [r3, r1]
 8006d76:	0019      	movs	r1, r3
 8006d78:	231c      	movs	r3, #28
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	18d2      	adds	r2, r2, r3
 8006d7e:	4b35      	ldr	r3, [pc, #212]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d80:	601a      	str	r2, [r3, #0]
		myTxMessage.StdId += (buffer_SPI_rx[1]&0b00000011);		//2 bits = Watch pointer address (bit 1 & bit 0)
 8006d82:	4b34      	ldr	r3, [pc, #208]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2129      	movs	r1, #41	; 0x29
 8006d8a:	5c5b      	ldrb	r3, [r3, r1]
 8006d8c:	0019      	movs	r1, r3
 8006d8e:	2303      	movs	r3, #3
 8006d90:	400b      	ands	r3, r1
 8006d92:	18d2      	adds	r2, r2, r3
 8006d94:	4b2f      	ldr	r3, [pc, #188]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006d96:	601a      	str	r2, [r3, #0]

		myTxMessage.DLC = buffer_SPI_rx[2];						//Data Length Code
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	222a      	movs	r2, #42	; 0x2a
 8006d9c:	5c9b      	ldrb	r3, [r3, r2]
 8006d9e:	001a      	movs	r2, r3
 8006da0:	4b2c      	ldr	r3, [pc, #176]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006da2:	611a      	str	r2, [r3, #16]
		statusCAN = HAL_CAN_AddTxMessage(&hcan, &myTxMessage, &buffer_SPI_rx[3], &TxMailbox);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	332b      	adds	r3, #43	; 0x2b
 8006da8:	001a      	movs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	333c      	adds	r3, #60	; 0x3c
 8006dae:	210f      	movs	r1, #15
 8006db0:	187c      	adds	r4, r7, r1
 8006db2:	4928      	ldr	r1, [pc, #160]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006db4:	4828      	ldr	r0, [pc, #160]	; (8006e58 <_ZN10Controller14CAN_writeFrameEv+0x160>)
 8006db6:	f7fa fbb3 	bl	8001520 <HAL_CAN_AddTxMessage>
 8006dba:	0003      	movs	r3, r0
 8006dbc:	7023      	strb	r3, [r4, #0]
		break;
 8006dbe:	e03d      	b.n	8006e3c <_ZN10Controller14CAN_writeFrameEv+0x144>
	case 1://Configuration frame
	case 2://Broadcast configuration frame
		myTxMessage.DLC = buffer_SPI_rx[1];						//Data Length Code
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2229      	movs	r2, #41	; 0x29
 8006dc4:	5c9b      	ldrb	r3, [r3, r2]
 8006dc6:	001a      	movs	r2, r3
 8006dc8:	4b22      	ldr	r3, [pc, #136]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006dca:	611a      	str	r2, [r3, #16]
		statusCAN = HAL_CAN_AddTxMessage(&hcan, &myTxMessage, &buffer_SPI_rx[2], &TxMailbox);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	332a      	adds	r3, #42	; 0x2a
 8006dd0:	001a      	movs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	333c      	adds	r3, #60	; 0x3c
 8006dd6:	210f      	movs	r1, #15
 8006dd8:	187c      	adds	r4, r7, r1
 8006dda:	491e      	ldr	r1, [pc, #120]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006ddc:	481e      	ldr	r0, [pc, #120]	; (8006e58 <_ZN10Controller14CAN_writeFrameEv+0x160>)
 8006dde:	f7fa fb9f 	bl	8001520 <HAL_CAN_AddTxMessage>
 8006de2:	0003      	movs	r3, r0
 8006de4:	7023      	strb	r3, [r4, #0]
		break;
 8006de6:	e029      	b.n	8006e3c <_ZN10Controller14CAN_writeFrameEv+0x144>
	case 3://Reset position frame
		myTxMessage.StdId += (buffer_SPI_rx[1]&0b00011100);		//2 bits = ClockAddress (bit 5 to bit 2)
 8006de8:	4b1a      	ldr	r3, [pc, #104]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2129      	movs	r1, #41	; 0x29
 8006df0:	5c5b      	ldrb	r3, [r3, r1]
 8006df2:	0019      	movs	r1, r3
 8006df4:	231c      	movs	r3, #28
 8006df6:	400b      	ands	r3, r1
 8006df8:	18d2      	adds	r2, r2, r3
 8006dfa:	4b16      	ldr	r3, [pc, #88]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006dfc:	601a      	str	r2, [r3, #0]
		myTxMessage.StdId += (buffer_SPI_rx[1]&0b00000011);		//4 bits = Watch pointer address (bit 1 & bit 0)
 8006dfe:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2129      	movs	r1, #41	; 0x29
 8006e06:	5c5b      	ldrb	r3, [r3, r1]
 8006e08:	0019      	movs	r1, r3
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	400b      	ands	r3, r1
 8006e0e:	18d2      	adds	r2, r2, r3
 8006e10:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e12:	601a      	str	r2, [r3, #0]
		myTxMessage.DLC = 0;									//Data Length Code
 8006e14:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]
		statusCAN = HAL_CAN_AddTxMessage(&hcan, &myTxMessage, &buffer_SPI_rx[0], &TxMailbox);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3328      	adds	r3, #40	; 0x28
 8006e1e:	001a      	movs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	333c      	adds	r3, #60	; 0x3c
 8006e24:	210f      	movs	r1, #15
 8006e26:	187c      	adds	r4, r7, r1
 8006e28:	490a      	ldr	r1, [pc, #40]	; (8006e54 <_ZN10Controller14CAN_writeFrameEv+0x15c>)
 8006e2a:	480b      	ldr	r0, [pc, #44]	; (8006e58 <_ZN10Controller14CAN_writeFrameEv+0x160>)
 8006e2c:	f7fa fb78 	bl	8001520 <HAL_CAN_AddTxMessage>
 8006e30:	0003      	movs	r3, r0
 8006e32:	7023      	strb	r3, [r4, #0]
		break;
 8006e34:	e002      	b.n	8006e3c <_ZN10Controller14CAN_writeFrameEv+0x144>
	default:
		Error_Handler();
 8006e36:	f7f9 fe51 	bl	8000adc <Error_Handler>
		break;
 8006e3a:	46c0      	nop			; (mov r8, r8)
	}

	if( statusCAN != HAL_OK )
 8006e3c:	230f      	movs	r3, #15
 8006e3e:	18fb      	adds	r3, r7, r3
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <_ZN10Controller14CAN_writeFrameEv+0x152>
	{
		Error_Handler();
 8006e46:	f7f9 fe49 	bl	8000adc <Error_Handler>
	}
}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b005      	add	sp, #20
 8006e50:	bd90      	pop	{r4, r7, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	20000264 	.word	0x20000264
 8006e58:	20000220 	.word	0x20000220

08006e5c <_ZN10Controller13CAN_readFrameEv>:


void Controller::CAN_readFrame()
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	uint8_t frameType = (myRxMessage.StdId & 0b11000000000) >> 9;
 8006e64:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <_ZN10Controller13CAN_readFrameEv+0x6c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	0a5b      	lsrs	r3, r3, #9
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	200f      	movs	r0, #15
 8006e6e:	183b      	adds	r3, r7, r0
 8006e70:	2103      	movs	r1, #3
 8006e72:	400a      	ands	r2, r1
 8006e74:	701a      	strb	r2, [r3, #0]
	//uint8_t processorAddress = (myRxMessage.StdId & 0b00111100000) >> 5;
	//uint8_t clockAddress = (myRxMessage.StdId & 0b00000011100) >> 2;
	//uint8_t watchPointerAddress = (myRxMessage.StdId & 0b00000000011);

	switch(frameType)
 8006e76:	183b      	adds	r3, r7, r0
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d00d      	beq.n	8006e9a <_ZN10Controller13CAN_readFrameEv+0x3e>
 8006e7e:	dc02      	bgt.n	8006e86 <_ZN10Controller13CAN_readFrameEv+0x2a>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <_ZN10Controller13CAN_readFrameEv+0x34>
 8006e84:	e018      	b.n	8006eb8 <_ZN10Controller13CAN_readFrameEv+0x5c>
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d00c      	beq.n	8006ea4 <_ZN10Controller13CAN_readFrameEv+0x48>
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d00f      	beq.n	8006eae <_ZN10Controller13CAN_readFrameEv+0x52>
 8006e8e:	e013      	b.n	8006eb8 <_ZN10Controller13CAN_readFrameEv+0x5c>
	{
	case 0:
		CAN_dataFrame();
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	0018      	movs	r0, r3
 8006e94:	f000 f81a 	bl	8006ecc <_ZN10Controller13CAN_dataFrameEv>
		break;
 8006e98:	e011      	b.n	8006ebe <_ZN10Controller13CAN_readFrameEv+0x62>
	case 1:
		CAN_configurationFrame();
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f000 f833 	bl	8006f08 <_ZN10Controller22CAN_configurationFrameEv>
		break;
 8006ea2:	e00c      	b.n	8006ebe <_ZN10Controller13CAN_readFrameEv+0x62>
	case 2:
		CAN_broadcastConfigurationFrame();
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f000 f84c 	bl	8006f44 <_ZN10Controller31CAN_broadcastConfigurationFrameEv>
		break;
 8006eac:	e007      	b.n	8006ebe <_ZN10Controller13CAN_readFrameEv+0x62>
	case 3:
		CAN_resetPositionZeroFrame();
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f000 f853 	bl	8006f5c <_ZN10Controller26CAN_resetPositionZeroFrameEv>
		break;
 8006eb6:	e002      	b.n	8006ebe <_ZN10Controller13CAN_readFrameEv+0x62>
	default:
		Error_Handler();
 8006eb8:	f7f9 fe10 	bl	8000adc <Error_Handler>
		break;
 8006ebc:	46c0      	nop			; (mov r8, r8)
	}
}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b004      	add	sp, #16
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	20000248 	.word	0x20000248

08006ecc <_ZN10Controller13CAN_dataFrameEv>:

void Controller::CAN_dataFrame()
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
	uint8_t processorAddress = (myRxMessage.StdId & 0b00111100000) >> 5;
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <_ZN10Controller13CAN_dataFrameEv+0x38>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	200f      	movs	r0, #15
 8006ede:	183b      	adds	r3, r7, r0
 8006ee0:	210f      	movs	r1, #15
 8006ee2:	400a      	ands	r2, r1
 8006ee4:	701a      	strb	r2, [r3, #0]

	if(processorAddress == myAddress)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2245      	movs	r2, #69	; 0x45
 8006eea:	5c9b      	ldrb	r3, [r3, r2]
 8006eec:	183a      	adds	r2, r7, r0
 8006eee:	7812      	ldrb	r2, [r2, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d103      	bne.n	8006efc <_ZN10Controller13CAN_dataFrameEv+0x30>
	{
		CAN_readDataBytes();
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f000 f880 	bl	8006ffc <_ZN10Controller17CAN_readDataBytesEv>
	}
}
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b004      	add	sp, #16
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000248 	.word	0x20000248

08006f08 <_ZN10Controller22CAN_configurationFrameEv>:

void Controller::CAN_configurationFrame()
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	uint8_t processorAddress = (myRxMessage.StdId & 0b00111100000) >> 5;
 8006f10:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <_ZN10Controller22CAN_configurationFrameEv+0x38>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	200f      	movs	r0, #15
 8006f1a:	183b      	adds	r3, r7, r0
 8006f1c:	210f      	movs	r1, #15
 8006f1e:	400a      	ands	r2, r1
 8006f20:	701a      	strb	r2, [r3, #0]

	if(processorAddress == myAddress)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2245      	movs	r2, #69	; 0x45
 8006f26:	5c9b      	ldrb	r3, [r3, r2]
 8006f28:	183a      	adds	r2, r7, r0
 8006f2a:	7812      	ldrb	r2, [r2, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d103      	bne.n	8006f38 <_ZN10Controller22CAN_configurationFrameEv+0x30>
	{
		CAN_readConfigBytes();
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	0018      	movs	r0, r3
 8006f34:	f000 fb60 	bl	80075f8 <_ZN10Controller19CAN_readConfigBytesEv>
	}
}
 8006f38:	46c0      	nop			; (mov r8, r8)
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b004      	add	sp, #16
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000248 	.word	0x20000248

08006f44 <_ZN10Controller31CAN_broadcastConfigurationFrameEv>:

void Controller::CAN_broadcastConfigurationFrame()
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	//Because broadcast
	CAN_readConfigBytes();
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f000 fb52 	bl	80075f8 <_ZN10Controller19CAN_readConfigBytesEv>
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b002      	add	sp, #8
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <_ZN10Controller26CAN_resetPositionZeroFrameEv>:

void Controller::CAN_resetPositionZeroFrame()
{
 8006f5c:	b5b0      	push	{r4, r5, r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	uint8_t processorAddress = (myRxMessage.StdId & 0b00111100000) >> 5;
 8006f64:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x94>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	200f      	movs	r0, #15
 8006f6e:	183b      	adds	r3, r7, r0
 8006f70:	210f      	movs	r1, #15
 8006f72:	400a      	ands	r2, r1
 8006f74:	701a      	strb	r2, [r3, #0]

	if(processorAddress == myAddress)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2245      	movs	r2, #69	; 0x45
 8006f7a:	5c9b      	ldrb	r3, [r3, r2]
 8006f7c:	183a      	adds	r2, r7, r0
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d130      	bne.n	8006fe6 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x8a>
	{
		uint8_t clockAddress = (myRxMessage.StdId & 0b00000011100) >> 2;
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x94>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	089b      	lsrs	r3, r3, #2
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	240e      	movs	r4, #14
 8006f8e:	193b      	adds	r3, r7, r4
 8006f90:	2107      	movs	r1, #7
 8006f92:	400a      	ands	r2, r1
 8006f94:	701a      	strb	r2, [r3, #0]
		uint8_t watchPointerAddress = (myRxMessage.StdId & 0b00000000011);
 8006f96:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x94>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	250d      	movs	r5, #13
 8006f9e:	197b      	adds	r3, r7, r5
 8006fa0:	2103      	movs	r1, #3
 8006fa2:	400a      	ands	r2, r1
 8006fa4:	701a      	strb	r2, [r3, #0]
		//Reset position zero
		_clock[clockAddress]->getWatchPointer(watchPointerAddress)->newPosition = 0;
 8006fa6:	193b      	adds	r3, r7, r4
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3204      	adds	r2, #4
 8006fae:	0092      	lsls	r2, r2, #2
 8006fb0:	58d2      	ldr	r2, [r2, r3]
 8006fb2:	197b      	adds	r3, r7, r5
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	0019      	movs	r1, r3
 8006fb8:	0010      	movs	r0, r2
 8006fba:	f7fe f9d5 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006fbe:	0002      	movs	r2, r0
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x98>)
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	54d1      	strb	r1, [r2, r3]
		_clock[clockAddress]->getWatchPointer(watchPointerAddress)->actualPosition = 0;
 8006fc6:	193b      	adds	r3, r7, r4
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3204      	adds	r2, #4
 8006fce:	0092      	lsls	r2, r2, #2
 8006fd0:	58d2      	ldr	r2, [r2, r3]
 8006fd2:	197b      	adds	r3, r7, r5
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	0010      	movs	r0, r2
 8006fda:	f7fe f9c5 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8006fde:	0002      	movs	r2, r0
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <_ZN10Controller26CAN_resetPositionZeroFrameEv+0x9c>)
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	54d1      	strb	r1, [r2, r3]
	}
}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	b004      	add	sp, #16
 8006fec:	bdb0      	pop	{r4, r5, r7, pc}
 8006fee:	46c0      	nop			; (mov r8, r8)
 8006ff0:	20000248 	.word	0x20000248
 8006ff4:	00000209 	.word	0x00000209
 8006ff8:	0000020a 	.word	0x0000020a

08006ffc <_ZN10Controller17CAN_readDataBytesEv>:

void Controller::CAN_readDataBytes()
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
	uint8_t clkAddr = (myRxMessage.StdId & 0b00000011100) >> 2;	//3 bits
 8007004:	4b2a      	ldr	r3, [pc, #168]	; (80070b0 <_ZN10Controller17CAN_readDataBytesEv+0xb4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	089b      	lsrs	r3, r3, #2
 800700a:	b2da      	uxtb	r2, r3
 800700c:	230f      	movs	r3, #15
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	2107      	movs	r1, #7
 8007012:	400a      	ands	r2, r1
 8007014:	701a      	strb	r2, [r3, #0]
	uint8_t watchPtrAddress = (buffer_SPI_rx[1] & 0b00000011);	//2 bits
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2229      	movs	r2, #41	; 0x29
 800701a:	5c9a      	ldrb	r2, [r3, r2]
 800701c:	200e      	movs	r0, #14
 800701e:	183b      	adds	r3, r7, r0
 8007020:	2103      	movs	r1, #3
 8007022:	400a      	ands	r2, r1
 8007024:	701a      	strb	r2, [r3, #0]
	uint8_t nbrBytes = myRxMessage.DLC;
 8007026:	4b22      	ldr	r3, [pc, #136]	; (80070b0 <_ZN10Controller17CAN_readDataBytesEv+0xb4>)
 8007028:	691a      	ldr	r2, [r3, #16]
 800702a:	230d      	movs	r3, #13
 800702c:	18fb      	adds	r3, r7, r3
 800702e:	701a      	strb	r2, [r3, #0]


	//First, read data bytes
	//Then, write on each variables
	switch(watchPtrAddress)
 8007030:	183b      	adds	r3, r7, r0
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d013      	beq.n	8007060 <_ZN10Controller17CAN_readDataBytesEv+0x64>
 8007038:	dc02      	bgt.n	8007040 <_ZN10Controller17CAN_readDataBytesEv+0x44>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <_ZN10Controller17CAN_readDataBytesEv+0x4e>
 800703e:	e030      	b.n	80070a2 <_ZN10Controller17CAN_readDataBytesEv+0xa6>
 8007040:	2b02      	cmp	r3, #2
 8007042:	d018      	beq.n	8007076 <_ZN10Controller17CAN_readDataBytesEv+0x7a>
 8007044:	2b03      	cmp	r3, #3
 8007046:	d021      	beq.n	800708c <_ZN10Controller17CAN_readDataBytesEv+0x90>
 8007048:	e02b      	b.n	80070a2 <_ZN10Controller17CAN_readDataBytesEv+0xa6>
	{
	case 0:
		CAN_writeDataRegister_0(clkAddr, nbrBytes);	//Data frame for watch pointer 0
 800704a:	230d      	movs	r3, #13
 800704c:	18fb      	adds	r3, r7, r3
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	230f      	movs	r3, #15
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	7819      	ldrb	r1, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0018      	movs	r0, r3
 800705a:	f000 f989 	bl	8007370 <_ZN10Controller23CAN_writeDataRegister_0Ehh>
		break;
 800705e:	e023      	b.n	80070a8 <_ZN10Controller17CAN_readDataBytesEv+0xac>

	case 1:
		CAN_writeDataRegister_1(clkAddr, nbrBytes); //Data frame for watch pointer 1
 8007060:	230d      	movs	r3, #13
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	781a      	ldrb	r2, [r3, #0]
 8007066:	230f      	movs	r3, #15
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	7819      	ldrb	r1, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	0018      	movs	r0, r3
 8007070:	f000 fa18 	bl	80074a4 <_ZN10Controller23CAN_writeDataRegister_1Ehh>
		break;
 8007074:	e018      	b.n	80070a8 <_ZN10Controller17CAN_readDataBytesEv+0xac>

	case 2:
		CAN_writeDataRegister_2(clkAddr, nbrBytes); //Data frame for watch pointer 2
 8007076:	230d      	movs	r3, #13
 8007078:	18fb      	adds	r3, r7, r3
 800707a:	781a      	ldrb	r2, [r3, #0]
 800707c:	230f      	movs	r3, #15
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	7819      	ldrb	r1, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	0018      	movs	r0, r3
 8007086:	f000 faa7 	bl	80075d8 <_ZN10Controller23CAN_writeDataRegister_2Ehh>
		break;
 800708a:	e00d      	b.n	80070a8 <_ZN10Controller17CAN_readDataBytesEv+0xac>

	case 3:
		CAN_writeDataRegister(clkAddr, nbrBytes); //Data frame for all watch pointer
 800708c:	230d      	movs	r3, #13
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	230f      	movs	r3, #15
 8007094:	18fb      	adds	r3, r7, r3
 8007096:	7819      	ldrb	r1, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0018      	movs	r0, r3
 800709c:	f000 f80a 	bl	80070b4 <_ZN10Controller21CAN_writeDataRegisterEhh>
		break;
 80070a0:	e002      	b.n	80070a8 <_ZN10Controller17CAN_readDataBytesEv+0xac>

	default:
		Error_Handler();
 80070a2:	f7f9 fd1b 	bl	8000adc <Error_Handler>
		break;
 80070a6:	46c0      	nop			; (mov r8, r8)
	}
}
 80070a8:	46c0      	nop			; (mov r8, r8)
 80070aa:	46bd      	mov	sp, r7
 80070ac:	b004      	add	sp, #16
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000248 	.word	0x20000248

080070b4 <_ZN10Controller21CAN_writeDataRegisterEhh>:

void Controller::CAN_writeDataRegister(uint8_t clkAddr, uint8_t nbrBytes)
{
 80070b4:	b590      	push	{r4, r7, lr}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	0008      	movs	r0, r1
 80070be:	0011      	movs	r1, r2
 80070c0:	1cfb      	adds	r3, r7, #3
 80070c2:	1c02      	adds	r2, r0, #0
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	1cbb      	adds	r3, r7, #2
 80070c8:	1c0a      	adds	r2, r1, #0
 80070ca:	701a      	strb	r2, [r3, #0]
	//Write on registers
	for(uint8_t i=0; i<nbrBytes; i++)
 80070cc:	230f      	movs	r3, #15
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
 80070d4:	230f      	movs	r3, #15
 80070d6:	18fa      	adds	r2, r7, r3
 80070d8:	1cbb      	adds	r3, r7, #2
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d300      	bcc.n	80070e4 <_ZN10Controller21CAN_writeDataRegisterEhh+0x30>
 80070e2:	e138      	b.n	8007356 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2a2>
	{
		switch(i)
 80070e4:	230f      	movs	r3, #15
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b07      	cmp	r3, #7
 80070ec:	d900      	bls.n	80070f0 <_ZN10Controller21CAN_writeDataRegisterEhh+0x3c>
 80070ee:	e128      	b.n	8007342 <_ZN10Controller21CAN_writeDataRegisterEhh+0x28e>
 80070f0:	009a      	lsls	r2, r3, #2
 80070f2:	4b9b      	ldr	r3, [pc, #620]	; (8007360 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2ac>)
 80070f4:	18d3      	adds	r3, r2, r3
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(0)->nbrTurns = buffer_CAN_rx[0] & 0b00000111;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2233      	movs	r2, #51	; 0x33
 80070fe:	5c9c      	ldrb	r4, [r3, r2]
 8007100:	1cfb      	adds	r3, r7, #3
 8007102:	781a      	ldrb	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3204      	adds	r2, #4
 8007108:	0092      	lsls	r2, r2, #2
 800710a:	58d3      	ldr	r3, [r2, r3]
 800710c:	2100      	movs	r1, #0
 800710e:	0018      	movs	r0, r3
 8007110:	f7fe f92a 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007114:	0002      	movs	r2, r0
 8007116:	2307      	movs	r3, #7
 8007118:	4023      	ands	r3, r4
 800711a:	b2d9      	uxtb	r1, r3
 800711c:	2382      	movs	r3, #130	; 0x82
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->clockwise = (buffer_CAN_rx[0] & 0b00001000) >> 3;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2233      	movs	r2, #51	; 0x33
 8007126:	5c9b      	ldrb	r3, [r3, r2]
 8007128:	10db      	asrs	r3, r3, #3
 800712a:	b2dc      	uxtb	r4, r3
 800712c:	1cfb      	adds	r3, r7, #3
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3204      	adds	r2, #4
 8007134:	0092      	lsls	r2, r2, #2
 8007136:	58d3      	ldr	r3, [r2, r3]
 8007138:	2100      	movs	r1, #0
 800713a:	0018      	movs	r0, r3
 800713c:	f7fe f914 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007140:	0002      	movs	r2, r0
 8007142:	2301      	movs	r3, #1
 8007144:	4023      	ands	r3, r4
 8007146:	b2d9      	uxtb	r1, r3
 8007148:	4b86      	ldr	r3, [pc, #536]	; (8007364 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b0>)
 800714a:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->nbrTurns = (buffer_CAN_rx[0] & 0b01110000) >> 4;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2233      	movs	r2, #51	; 0x33
 8007150:	5c9b      	ldrb	r3, [r3, r2]
 8007152:	111b      	asrs	r3, r3, #4
 8007154:	b2dc      	uxtb	r4, r3
 8007156:	1cfb      	adds	r3, r7, #3
 8007158:	781a      	ldrb	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3204      	adds	r2, #4
 800715e:	0092      	lsls	r2, r2, #2
 8007160:	58d3      	ldr	r3, [r2, r3]
 8007162:	2101      	movs	r1, #1
 8007164:	0018      	movs	r0, r3
 8007166:	f7fe f8ff 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800716a:	0002      	movs	r2, r0
 800716c:	2307      	movs	r3, #7
 800716e:	4023      	ands	r3, r4
 8007170:	b2d9      	uxtb	r1, r3
 8007172:	2382      	movs	r3, #130	; 0x82
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->clockwise = (buffer_CAN_rx[0] & 0b10000000) >> 7;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2233      	movs	r2, #51	; 0x33
 800717c:	5c9c      	ldrb	r4, [r3, r2]
 800717e:	1cfb      	adds	r3, r7, #3
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3204      	adds	r2, #4
 8007186:	0092      	lsls	r2, r2, #2
 8007188:	58d3      	ldr	r3, [r2, r3]
 800718a:	2101      	movs	r1, #1
 800718c:	0018      	movs	r0, r3
 800718e:	f7fe f8eb 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007192:	0002      	movs	r2, r0
 8007194:	09e3      	lsrs	r3, r4, #7
 8007196:	b2d9      	uxtb	r1, r3
 8007198:	4b72      	ldr	r3, [pc, #456]	; (8007364 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b0>)
 800719a:	54d1      	strb	r1, [r2, r3]
			break;
 800719c:	e0d4      	b.n	8007348 <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 1:
			_clock[clkAddr]->getWatchPointer(0)->newPosition = buffer_CAN_rx[1];
 800719e:	1cfb      	adds	r3, r7, #3
 80071a0:	781a      	ldrb	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3204      	adds	r2, #4
 80071a6:	0092      	lsls	r2, r2, #2
 80071a8:	58d3      	ldr	r3, [r2, r3]
 80071aa:	2100      	movs	r1, #0
 80071ac:	0018      	movs	r0, r3
 80071ae:	f7fe f8db 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80071b2:	0001      	movs	r1, r0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2234      	movs	r2, #52	; 0x34
 80071b8:	5c9a      	ldrb	r2, [r3, r2]
 80071ba:	4b6b      	ldr	r3, [pc, #428]	; (8007368 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b4>)
 80071bc:	54ca      	strb	r2, [r1, r3]
			break;
 80071be:	e0c3      	b.n	8007348 <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 2:
			_clock[clkAddr]->getWatchPointer(0)->offsetStartTime = buffer_CAN_rx[2] & 0b00001111;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2235      	movs	r2, #53	; 0x35
 80071c4:	5c9c      	ldrb	r4, [r3, r2]
 80071c6:	1cfb      	adds	r3, r7, #3
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3204      	adds	r2, #4
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	58d3      	ldr	r3, [r2, r3]
 80071d2:	2100      	movs	r1, #0
 80071d4:	0018      	movs	r0, r3
 80071d6:	f7fe f8c7 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80071da:	0002      	movs	r2, r0
 80071dc:	230f      	movs	r3, #15
 80071de:	4023      	ands	r3, r4
 80071e0:	b2d9      	uxtb	r1, r3
 80071e2:	4b62      	ldr	r3, [pc, #392]	; (800736c <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b8>)
 80071e4:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->movmentDurationTime = (buffer_CAN_rx[2] & 0b11110000) >> 4;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2235      	movs	r2, #53	; 0x35
 80071ea:	5c9c      	ldrb	r4, [r3, r2]
 80071ec:	1cfb      	adds	r3, r7, #3
 80071ee:	781a      	ldrb	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3204      	adds	r2, #4
 80071f4:	0092      	lsls	r2, r2, #2
 80071f6:	58d3      	ldr	r3, [r2, r3]
 80071f8:	2100      	movs	r1, #0
 80071fa:	0018      	movs	r0, r3
 80071fc:	f7fe f8b4 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007200:	0002      	movs	r2, r0
 8007202:	0923      	lsrs	r3, r4, #4
 8007204:	b2d9      	uxtb	r1, r3
 8007206:	2383      	movs	r3, #131	; 0x83
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	54d1      	strb	r1, [r2, r3]
			break;
 800720c:	e09c      	b.n	8007348 <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 3:
			_clock[clkAddr]->getWatchPointer(1)->newPosition = buffer_CAN_rx[3];
 800720e:	1cfb      	adds	r3, r7, #3
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3204      	adds	r2, #4
 8007216:	0092      	lsls	r2, r2, #2
 8007218:	58d3      	ldr	r3, [r2, r3]
 800721a:	2101      	movs	r1, #1
 800721c:	0018      	movs	r0, r3
 800721e:	f7fe f8a3 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007222:	0001      	movs	r1, r0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2236      	movs	r2, #54	; 0x36
 8007228:	5c9a      	ldrb	r2, [r3, r2]
 800722a:	4b4f      	ldr	r3, [pc, #316]	; (8007368 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b4>)
 800722c:	54ca      	strb	r2, [r1, r3]
			break;
 800722e:	e08b      	b.n	8007348 <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 4:
			_clock[clkAddr]->getWatchPointer(1)->offsetStartTime = buffer_CAN_rx[4] & 0b00001111;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2237      	movs	r2, #55	; 0x37
 8007234:	5c9c      	ldrb	r4, [r3, r2]
 8007236:	1cfb      	adds	r3, r7, #3
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3204      	adds	r2, #4
 800723e:	0092      	lsls	r2, r2, #2
 8007240:	58d3      	ldr	r3, [r2, r3]
 8007242:	2101      	movs	r1, #1
 8007244:	0018      	movs	r0, r3
 8007246:	f7fe f88f 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800724a:	0002      	movs	r2, r0
 800724c:	230f      	movs	r3, #15
 800724e:	4023      	ands	r3, r4
 8007250:	b2d9      	uxtb	r1, r3
 8007252:	4b46      	ldr	r3, [pc, #280]	; (800736c <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b8>)
 8007254:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->movmentDurationTime = (buffer_CAN_rx[4] & 0b11110000) >> 4;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2237      	movs	r2, #55	; 0x37
 800725a:	5c9c      	ldrb	r4, [r3, r2]
 800725c:	1cfb      	adds	r3, r7, #3
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3204      	adds	r2, #4
 8007264:	0092      	lsls	r2, r2, #2
 8007266:	58d3      	ldr	r3, [r2, r3]
 8007268:	2101      	movs	r1, #1
 800726a:	0018      	movs	r0, r3
 800726c:	f7fe f87c 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007270:	0002      	movs	r2, r0
 8007272:	0923      	lsrs	r3, r4, #4
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	2383      	movs	r3, #131	; 0x83
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	54d1      	strb	r1, [r2, r3]
			break;
 800727c:	e064      	b.n	8007348 <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 5:
			_clock[clkAddr]->getWatchPointer(2)->nbrTurns = buffer_CAN_rx[5] & 0b00000111;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2238      	movs	r2, #56	; 0x38
 8007282:	5c9c      	ldrb	r4, [r3, r2]
 8007284:	1cfb      	adds	r3, r7, #3
 8007286:	781a      	ldrb	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3204      	adds	r2, #4
 800728c:	0092      	lsls	r2, r2, #2
 800728e:	58d3      	ldr	r3, [r2, r3]
 8007290:	2102      	movs	r1, #2
 8007292:	0018      	movs	r0, r3
 8007294:	f7fe f868 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007298:	0002      	movs	r2, r0
 800729a:	2307      	movs	r3, #7
 800729c:	4023      	ands	r3, r4
 800729e:	b2d9      	uxtb	r1, r3
 80072a0:	2382      	movs	r3, #130	; 0x82
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(2)->clockwise = (buffer_CAN_rx[5] & 0b00001000) >> 3;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2238      	movs	r2, #56	; 0x38
 80072aa:	5c9b      	ldrb	r3, [r3, r2]
 80072ac:	10db      	asrs	r3, r3, #3
 80072ae:	b2dc      	uxtb	r4, r3
 80072b0:	1cfb      	adds	r3, r7, #3
 80072b2:	781a      	ldrb	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3204      	adds	r2, #4
 80072b8:	0092      	lsls	r2, r2, #2
 80072ba:	58d3      	ldr	r3, [r2, r3]
 80072bc:	2102      	movs	r1, #2
 80072be:	0018      	movs	r0, r3
 80072c0:	f7fe f852 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80072c4:	0002      	movs	r2, r0
 80072c6:	2301      	movs	r3, #1
 80072c8:	4023      	ands	r3, r4
 80072ca:	b2d9      	uxtb	r1, r3
 80072cc:	4b25      	ldr	r3, [pc, #148]	; (8007364 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b0>)
 80072ce:	54d1      	strb	r1, [r2, r3]
			break;
 80072d0:	e03a      	b.n	8007348 <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 6:
			_clock[clkAddr]->getWatchPointer(2)->newPosition = buffer_CAN_rx[6];
 80072d2:	1cfb      	adds	r3, r7, #3
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3204      	adds	r2, #4
 80072da:	0092      	lsls	r2, r2, #2
 80072dc:	58d3      	ldr	r3, [r2, r3]
 80072de:	2102      	movs	r1, #2
 80072e0:	0018      	movs	r0, r3
 80072e2:	f7fe f841 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80072e6:	0001      	movs	r1, r0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2239      	movs	r2, #57	; 0x39
 80072ec:	5c9a      	ldrb	r2, [r3, r2]
 80072ee:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b4>)
 80072f0:	54ca      	strb	r2, [r1, r3]
			break;
 80072f2:	e029      	b.n	8007348 <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		case 7:
			_clock[clkAddr]->getWatchPointer(2)->offsetStartTime = buffer_CAN_rx[7] & 0b00001111;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	223a      	movs	r2, #58	; 0x3a
 80072f8:	5c9c      	ldrb	r4, [r3, r2]
 80072fa:	1cfb      	adds	r3, r7, #3
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3204      	adds	r2, #4
 8007302:	0092      	lsls	r2, r2, #2
 8007304:	58d3      	ldr	r3, [r2, r3]
 8007306:	2102      	movs	r1, #2
 8007308:	0018      	movs	r0, r3
 800730a:	f7fe f82d 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800730e:	0002      	movs	r2, r0
 8007310:	230f      	movs	r3, #15
 8007312:	4023      	ands	r3, r4
 8007314:	b2d9      	uxtb	r1, r3
 8007316:	4b15      	ldr	r3, [pc, #84]	; (800736c <_ZN10Controller21CAN_writeDataRegisterEhh+0x2b8>)
 8007318:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(2)->movmentDurationTime = (buffer_CAN_rx[7] & 0b11110000) >> 4;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	223a      	movs	r2, #58	; 0x3a
 800731e:	5c9c      	ldrb	r4, [r3, r2]
 8007320:	1cfb      	adds	r3, r7, #3
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3204      	adds	r2, #4
 8007328:	0092      	lsls	r2, r2, #2
 800732a:	58d3      	ldr	r3, [r2, r3]
 800732c:	2102      	movs	r1, #2
 800732e:	0018      	movs	r0, r3
 8007330:	f7fe f81a 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007334:	0002      	movs	r2, r0
 8007336:	0923      	lsrs	r3, r4, #4
 8007338:	b2d9      	uxtb	r1, r3
 800733a:	2383      	movs	r3, #131	; 0x83
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	54d1      	strb	r1, [r2, r3]
			break;
 8007340:	e002      	b.n	8007348 <_ZN10Controller21CAN_writeDataRegisterEhh+0x294>
		default:
			Error_Handler();
 8007342:	f7f9 fbcb 	bl	8000adc <Error_Handler>
			break;
 8007346:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 8007348:	210f      	movs	r1, #15
 800734a:	187b      	adds	r3, r7, r1
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	187b      	adds	r3, r7, r1
 8007350:	3201      	adds	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e6be      	b.n	80070d4 <_ZN10Controller21CAN_writeDataRegisterEhh+0x20>
		}
	}
}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	46bd      	mov	sp, r7
 800735a:	b005      	add	sp, #20
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	0800c3dc 	.word	0x0800c3dc
 8007364:	00000207 	.word	0x00000207
 8007368:	00000209 	.word	0x00000209
 800736c:	0000020b 	.word	0x0000020b

08007370 <_ZN10Controller23CAN_writeDataRegister_0Ehh>:

void Controller::CAN_writeDataRegister_0(uint8_t clkAddr, uint8_t nbrBytes)
{
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	0008      	movs	r0, r1
 800737a:	0011      	movs	r1, r2
 800737c:	1cfb      	adds	r3, r7, #3
 800737e:	1c02      	adds	r2, r0, #0
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	1cbb      	adds	r3, r7, #2
 8007384:	1c0a      	adds	r2, r1, #0
 8007386:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 8007388:	230f      	movs	r3, #15
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	230f      	movs	r3, #15
 8007392:	18fa      	adds	r2, r7, r3
 8007394:	1cbb      	adds	r3, r7, #2
 8007396:	7812      	ldrb	r2, [r2, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d276      	bcs.n	800748c <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x11c>
	{
		switch(i)
 800739e:	230f      	movs	r3, #15
 80073a0:	18fb      	adds	r3, r7, r3
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b07      	cmp	r3, #7
 80073a6:	d866      	bhi.n	8007476 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x106>
 80073a8:	009a      	lsls	r2, r3, #2
 80073aa:	4b3a      	ldr	r3, [pc, #232]	; (8007494 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x124>)
 80073ac:	18d3      	adds	r3, r2, r3
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(0)->nbrTurns = buffer_CAN_rx[0] & 0b00000111;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2233      	movs	r2, #51	; 0x33
 80073b6:	5c9c      	ldrb	r4, [r3, r2]
 80073b8:	1cfb      	adds	r3, r7, #3
 80073ba:	781a      	ldrb	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3204      	adds	r2, #4
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	58d3      	ldr	r3, [r2, r3]
 80073c4:	2100      	movs	r1, #0
 80073c6:	0018      	movs	r0, r3
 80073c8:	f7fd ffce 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80073cc:	0002      	movs	r2, r0
 80073ce:	2307      	movs	r3, #7
 80073d0:	4023      	ands	r3, r4
 80073d2:	b2d9      	uxtb	r1, r3
 80073d4:	2382      	movs	r3, #130	; 0x82
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->clockwise = (buffer_CAN_rx[0] & 0b00001000) >> 3;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2233      	movs	r2, #51	; 0x33
 80073de:	5c9b      	ldrb	r3, [r3, r2]
 80073e0:	10db      	asrs	r3, r3, #3
 80073e2:	b2dc      	uxtb	r4, r3
 80073e4:	1cfb      	adds	r3, r7, #3
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3204      	adds	r2, #4
 80073ec:	0092      	lsls	r2, r2, #2
 80073ee:	58d3      	ldr	r3, [r2, r3]
 80073f0:	2100      	movs	r1, #0
 80073f2:	0018      	movs	r0, r3
 80073f4:	f7fd ffb8 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 80073f8:	0002      	movs	r2, r0
 80073fa:	2301      	movs	r3, #1
 80073fc:	4023      	ands	r3, r4
 80073fe:	b2d9      	uxtb	r1, r3
 8007400:	4b25      	ldr	r3, [pc, #148]	; (8007498 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x128>)
 8007402:	54d1      	strb	r1, [r2, r3]
			break;
 8007404:	e03b      	b.n	800747e <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x10e>
		case 1:
			_clock[clkAddr]->getWatchPointer(0)->newPosition = buffer_CAN_rx[1];
 8007406:	1cfb      	adds	r3, r7, #3
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3204      	adds	r2, #4
 800740e:	0092      	lsls	r2, r2, #2
 8007410:	58d3      	ldr	r3, [r2, r3]
 8007412:	2100      	movs	r1, #0
 8007414:	0018      	movs	r0, r3
 8007416:	f7fd ffa7 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800741a:	0001      	movs	r1, r0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2234      	movs	r2, #52	; 0x34
 8007420:	5c9a      	ldrb	r2, [r3, r2]
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x12c>)
 8007424:	54ca      	strb	r2, [r1, r3]
			break;
 8007426:	e02a      	b.n	800747e <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x10e>
		case 2:
			_clock[clkAddr]->getWatchPointer(0)->offsetStartTime = buffer_CAN_rx[2] & 0b00001111;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2235      	movs	r2, #53	; 0x35
 800742c:	5c9c      	ldrb	r4, [r3, r2]
 800742e:	1cfb      	adds	r3, r7, #3
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3204      	adds	r2, #4
 8007436:	0092      	lsls	r2, r2, #2
 8007438:	58d3      	ldr	r3, [r2, r3]
 800743a:	2100      	movs	r1, #0
 800743c:	0018      	movs	r0, r3
 800743e:	f7fd ff93 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007442:	0002      	movs	r2, r0
 8007444:	230f      	movs	r3, #15
 8007446:	4023      	ands	r3, r4
 8007448:	b2d9      	uxtb	r1, r3
 800744a:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x130>)
 800744c:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(0)->movmentDurationTime = (buffer_CAN_rx[2] & 0b11110000) >> 4;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2235      	movs	r2, #53	; 0x35
 8007452:	5c9c      	ldrb	r4, [r3, r2]
 8007454:	1cfb      	adds	r3, r7, #3
 8007456:	781a      	ldrb	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3204      	adds	r2, #4
 800745c:	0092      	lsls	r2, r2, #2
 800745e:	58d3      	ldr	r3, [r2, r3]
 8007460:	2100      	movs	r1, #0
 8007462:	0018      	movs	r0, r3
 8007464:	f7fd ff80 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007468:	0002      	movs	r2, r0
 800746a:	0923      	lsrs	r3, r4, #4
 800746c:	b2d9      	uxtb	r1, r3
 800746e:	2383      	movs	r3, #131	; 0x83
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	54d1      	strb	r1, [r2, r3]
			break;
 8007474:	e003      	b.n	800747e <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x10e>
		case 6:
			break;
		case 7:
			break;
		default:
			Error_Handler();
 8007476:	f7f9 fb31 	bl	8000adc <Error_Handler>
			break;
 800747a:	e000      	b.n	800747e <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x10e>
			break;
 800747c:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 800747e:	210f      	movs	r1, #15
 8007480:	187b      	adds	r3, r7, r1
 8007482:	781a      	ldrb	r2, [r3, #0]
 8007484:	187b      	adds	r3, r7, r1
 8007486:	3201      	adds	r2, #1
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	e781      	b.n	8007390 <_ZN10Controller23CAN_writeDataRegister_0Ehh+0x20>
		}
	}
}
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	46bd      	mov	sp, r7
 8007490:	b005      	add	sp, #20
 8007492:	bd90      	pop	{r4, r7, pc}
 8007494:	0800c3fc 	.word	0x0800c3fc
 8007498:	00000207 	.word	0x00000207
 800749c:	00000209 	.word	0x00000209
 80074a0:	0000020b 	.word	0x0000020b

080074a4 <_ZN10Controller23CAN_writeDataRegister_1Ehh>:

void Controller::CAN_writeDataRegister_1(uint8_t clkAddr, uint8_t nbrBytes)
{
 80074a4:	b590      	push	{r4, r7, lr}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	0008      	movs	r0, r1
 80074ae:	0011      	movs	r1, r2
 80074b0:	1cfb      	adds	r3, r7, #3
 80074b2:	1c02      	adds	r2, r0, #0
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	1cbb      	adds	r3, r7, #2
 80074b8:	1c0a      	adds	r2, r1, #0
 80074ba:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nbrBytes; i++)
 80074bc:	230f      	movs	r3, #15
 80074be:	18fb      	adds	r3, r7, r3
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	230f      	movs	r3, #15
 80074c6:	18fa      	adds	r2, r7, r3
 80074c8:	1cbb      	adds	r3, r7, #2
 80074ca:	7812      	ldrb	r2, [r2, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d276      	bcs.n	80075c0 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x11c>
	{
		switch(i)
 80074d2:	230f      	movs	r3, #15
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b07      	cmp	r3, #7
 80074da:	d866      	bhi.n	80075aa <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x106>
 80074dc:	009a      	lsls	r2, r3, #2
 80074de:	4b3a      	ldr	r3, [pc, #232]	; (80075c8 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x124>)
 80074e0:	18d3      	adds	r3, r2, r3
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	469f      	mov	pc, r3
		{
		case 0:
			_clock[clkAddr]->getWatchPointer(1)->nbrTurns = buffer_CAN_rx[0] & 0b00000111;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2233      	movs	r2, #51	; 0x33
 80074ea:	5c9c      	ldrb	r4, [r3, r2]
 80074ec:	1cfb      	adds	r3, r7, #3
 80074ee:	781a      	ldrb	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3204      	adds	r2, #4
 80074f4:	0092      	lsls	r2, r2, #2
 80074f6:	58d3      	ldr	r3, [r2, r3]
 80074f8:	2101      	movs	r1, #1
 80074fa:	0018      	movs	r0, r3
 80074fc:	f7fd ff34 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007500:	0002      	movs	r2, r0
 8007502:	2307      	movs	r3, #7
 8007504:	4023      	ands	r3, r4
 8007506:	b2d9      	uxtb	r1, r3
 8007508:	2382      	movs	r3, #130	; 0x82
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->clockwise = (buffer_CAN_rx[0] & 0b00001000) >> 3;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2233      	movs	r2, #51	; 0x33
 8007512:	5c9b      	ldrb	r3, [r3, r2]
 8007514:	10db      	asrs	r3, r3, #3
 8007516:	b2dc      	uxtb	r4, r3
 8007518:	1cfb      	adds	r3, r7, #3
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3204      	adds	r2, #4
 8007520:	0092      	lsls	r2, r2, #2
 8007522:	58d3      	ldr	r3, [r2, r3]
 8007524:	2101      	movs	r1, #1
 8007526:	0018      	movs	r0, r3
 8007528:	f7fd ff1e 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800752c:	0002      	movs	r2, r0
 800752e:	2301      	movs	r3, #1
 8007530:	4023      	ands	r3, r4
 8007532:	b2d9      	uxtb	r1, r3
 8007534:	4b25      	ldr	r3, [pc, #148]	; (80075cc <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x128>)
 8007536:	54d1      	strb	r1, [r2, r3]
			break;
 8007538:	e03b      	b.n	80075b2 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x10e>
		case 1:
			_clock[clkAddr]->getWatchPointer(1)->newPosition = buffer_CAN_rx[1];
 800753a:	1cfb      	adds	r3, r7, #3
 800753c:	781a      	ldrb	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3204      	adds	r2, #4
 8007542:	0092      	lsls	r2, r2, #2
 8007544:	58d3      	ldr	r3, [r2, r3]
 8007546:	2101      	movs	r1, #1
 8007548:	0018      	movs	r0, r3
 800754a:	f7fd ff0d 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800754e:	0001      	movs	r1, r0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2234      	movs	r2, #52	; 0x34
 8007554:	5c9a      	ldrb	r2, [r3, r2]
 8007556:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x12c>)
 8007558:	54ca      	strb	r2, [r1, r3]
			break;
 800755a:	e02a      	b.n	80075b2 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x10e>
		case 2:
			_clock[clkAddr]->getWatchPointer(1)->offsetStartTime = buffer_CAN_rx[2] & 0b00001111;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2235      	movs	r2, #53	; 0x35
 8007560:	5c9c      	ldrb	r4, [r3, r2]
 8007562:	1cfb      	adds	r3, r7, #3
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3204      	adds	r2, #4
 800756a:	0092      	lsls	r2, r2, #2
 800756c:	58d3      	ldr	r3, [r2, r3]
 800756e:	2101      	movs	r1, #1
 8007570:	0018      	movs	r0, r3
 8007572:	f7fd fef9 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 8007576:	0002      	movs	r2, r0
 8007578:	230f      	movs	r3, #15
 800757a:	4023      	ands	r3, r4
 800757c:	b2d9      	uxtb	r1, r3
 800757e:	4b15      	ldr	r3, [pc, #84]	; (80075d4 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x130>)
 8007580:	54d1      	strb	r1, [r2, r3]
			_clock[clkAddr]->getWatchPointer(1)->movmentDurationTime = (buffer_CAN_rx[2] & 0b11110000) >> 4;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2235      	movs	r2, #53	; 0x35
 8007586:	5c9c      	ldrb	r4, [r3, r2]
 8007588:	1cfb      	adds	r3, r7, #3
 800758a:	781a      	ldrb	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3204      	adds	r2, #4
 8007590:	0092      	lsls	r2, r2, #2
 8007592:	58d3      	ldr	r3, [r2, r3]
 8007594:	2101      	movs	r1, #1
 8007596:	0018      	movs	r0, r3
 8007598:	f7fd fee6 	bl	8005368 <_ZN5Clock15getWatchPointerEi>
 800759c:	0002      	movs	r2, r0
 800759e:	0923      	lsrs	r3, r4, #4
 80075a0:	b2d9      	uxtb	r1, r3
 80075a2:	2383      	movs	r3, #131	; 0x83
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	54d1      	strb	r1, [r2, r3]
			break;
 80075a8:	e003      	b.n	80075b2 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x10e>
		case 6:
			break;
		case 7:
			break;
		default:
			Error_Handler();
 80075aa:	f7f9 fa97 	bl	8000adc <Error_Handler>
			break;
 80075ae:	e000      	b.n	80075b2 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x10e>
			break;
 80075b0:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=0; i<nbrBytes; i++)
 80075b2:	210f      	movs	r1, #15
 80075b4:	187b      	adds	r3, r7, r1
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	187b      	adds	r3, r7, r1
 80075ba:	3201      	adds	r2, #1
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	e781      	b.n	80074c4 <_ZN10Controller23CAN_writeDataRegister_1Ehh+0x20>
		}
	}
}
 80075c0:	46c0      	nop			; (mov r8, r8)
 80075c2:	46bd      	mov	sp, r7
 80075c4:	b005      	add	sp, #20
 80075c6:	bd90      	pop	{r4, r7, pc}
 80075c8:	0800c41c 	.word	0x0800c41c
 80075cc:	00000207 	.word	0x00000207
 80075d0:	00000209 	.word	0x00000209
 80075d4:	0000020b 	.word	0x0000020b

080075d8 <_ZN10Controller23CAN_writeDataRegister_2Ehh>:

void Controller::CAN_writeDataRegister_2(uint8_t clkAddr, uint8_t nbrBytes)
{}
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	0008      	movs	r0, r1
 80075e2:	0011      	movs	r1, r2
 80075e4:	1cfb      	adds	r3, r7, #3
 80075e6:	1c02      	adds	r2, r0, #0
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	1cbb      	adds	r3, r7, #2
 80075ec:	1c0a      	adds	r2, r1, #0
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	46c0      	nop			; (mov r8, r8)
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b002      	add	sp, #8
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <_ZN10Controller19CAN_readConfigBytesEv>:


void Controller::CAN_readConfigBytes()
{
 80075f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	uint8_t nbrBytes = myRxMessage.DLC;
 8007600:	4b3e      	ldr	r3, [pc, #248]	; (80076fc <_ZN10Controller19CAN_readConfigBytesEv+0x104>)
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	230e      	movs	r3, #14
 8007606:	18fb      	adds	r3, r7, r3
 8007608:	701a      	strb	r2, [r3, #0]
	uint8_t indexRegister = buffer_CAN_rx[0];
 800760a:	200d      	movs	r0, #13
 800760c:	183b      	adds	r3, r7, r0
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	2133      	movs	r1, #51	; 0x33
 8007612:	5c52      	ldrb	r2, [r2, r1]
 8007614:	701a      	strb	r2, [r3, #0]
	//First, read data bytes
	//Then, write on each variables
	for(uint8_t i=indexRegister; i<nbrBytes; i++)
 8007616:	230f      	movs	r3, #15
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	183a      	adds	r2, r7, r0
 800761c:	7812      	ldrb	r2, [r2, #0]
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	230f      	movs	r3, #15
 8007622:	18fa      	adds	r2, r7, r3
 8007624:	230e      	movs	r3, #14
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	7812      	ldrb	r2, [r2, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d261      	bcs.n	80076f4 <_ZN10Controller19CAN_readConfigBytesEv+0xfc>
	{
		switch(i)
 8007630:	230f      	movs	r3, #15
 8007632:	18fb      	adds	r3, r7, r3
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b07      	cmp	r3, #7
 8007638:	d84f      	bhi.n	80076da <_ZN10Controller19CAN_readConfigBytesEv+0xe2>
 800763a:	009a      	lsls	r2, r3, #2
 800763c:	4b30      	ldr	r3, [pc, #192]	; (8007700 <_ZN10Controller19CAN_readConfigBytesEv+0x108>)
 800763e:	18d3      	adds	r3, r2, r3
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	469f      	mov	pc, r3
		{
		case 0:
			statusBytes = buffer_CAN_rx[i+1];
 8007644:	230f      	movs	r3, #15
 8007646:	18fb      	adds	r3, r7, r3
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	2133      	movs	r1, #51	; 0x33
 8007650:	18d3      	adds	r3, r2, r3
 8007652:	185b      	adds	r3, r3, r1
 8007654:	7819      	ldrb	r1, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2247      	movs	r2, #71	; 0x47
 800765a:	5499      	strb	r1, [r3, r2]
			if(((statusBytes & 0b00010000)>>4) == true)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2247      	movs	r2, #71	; 0x47
 8007660:	5c9b      	ldrb	r3, [r3, r2]
 8007662:	001a      	movs	r2, r3
 8007664:	2310      	movs	r3, #16
 8007666:	4013      	ands	r3, r2
 8007668:	d03c      	beq.n	80076e4 <_ZN10Controller19CAN_readConfigBytesEv+0xec>
			{
				GEN(evFlagTrigger());	//FLAG TRIGGER
 800766a:	687d      	ldr	r5, [r7, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	681c      	ldr	r4, [r3, #0]
 8007674:	2014      	movs	r0, #20
 8007676:	f003 fcc0 	bl	800affa <_Znwj>
 800767a:	0003      	movs	r3, r0
 800767c:	001e      	movs	r6, r3
 800767e:	0030      	movs	r0, r6
 8007680:	f000 fd9e 	bl	80081c0 <_ZN13evFlagTriggerC1Ev>
 8007684:	0031      	movs	r1, r6
 8007686:	0028      	movs	r0, r5
 8007688:	47a0      	blx	r4
			}
			break;
 800768a:	e02b      	b.n	80076e4 <_ZN10Controller19CAN_readConfigBytesEv+0xec>
		case 1:
			startTime = buffer_CAN_rx[i+1];
 800768c:	230f      	movs	r3, #15
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	3301      	adds	r3, #1
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	2133      	movs	r1, #51	; 0x33
 8007698:	18d3      	adds	r3, r2, r3
 800769a:	185b      	adds	r3, r3, r1
 800769c:	7819      	ldrb	r1, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2248      	movs	r2, #72	; 0x48
 80076a2:	5499      	strb	r1, [r3, r2]
			break;
 80076a4:	e01f      	b.n	80076e6 <_ZN10Controller19CAN_readConfigBytesEv+0xee>
		case 2:
			stopTime = buffer_CAN_rx[i+1];
 80076a6:	230f      	movs	r3, #15
 80076a8:	18fb      	adds	r3, r7, r3
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	2133      	movs	r1, #51	; 0x33
 80076b2:	18d3      	adds	r3, r2, r3
 80076b4:	185b      	adds	r3, r3, r1
 80076b6:	7819      	ldrb	r1, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2249      	movs	r2, #73	; 0x49
 80076bc:	5499      	strb	r1, [r3, r2]
			break;
 80076be:	e012      	b.n	80076e6 <_ZN10Controller19CAN_readConfigBytesEv+0xee>
		case 3:
			nbrWatchPtrClk = buffer_CAN_rx[i+1];
 80076c0:	230f      	movs	r3, #15
 80076c2:	18fb      	adds	r3, r7, r3
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	3301      	adds	r3, #1
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	2133      	movs	r1, #51	; 0x33
 80076cc:	18d3      	adds	r3, r2, r3
 80076ce:	185b      	adds	r3, r3, r1
 80076d0:	7819      	ldrb	r1, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2246      	movs	r2, #70	; 0x46
 80076d6:	5499      	strb	r1, [r3, r2]
			break;
 80076d8:	e005      	b.n	80076e6 <_ZN10Controller19CAN_readConfigBytesEv+0xee>
			break;
		case 7:
			//Free
			break;
		default:
			Error_Handler();
 80076da:	f7f9 f9ff 	bl	8000adc <Error_Handler>
			break;
 80076de:	e002      	b.n	80076e6 <_ZN10Controller19CAN_readConfigBytesEv+0xee>
			break;
 80076e0:	46c0      	nop			; (mov r8, r8)
 80076e2:	e000      	b.n	80076e6 <_ZN10Controller19CAN_readConfigBytesEv+0xee>
			break;
 80076e4:	46c0      	nop			; (mov r8, r8)
	for(uint8_t i=indexRegister; i<nbrBytes; i++)
 80076e6:	210f      	movs	r1, #15
 80076e8:	187b      	adds	r3, r7, r1
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	187b      	adds	r3, r7, r1
 80076ee:	3201      	adds	r2, #1
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e795      	b.n	8007620 <_ZN10Controller19CAN_readConfigBytesEv+0x28>
		}
	}
}
 80076f4:	46c0      	nop			; (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b005      	add	sp, #20
 80076fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076fc:	20000248 	.word	0x20000248
 8007700:	0800c43c 	.word	0x0800c43c

08007704 <_ZN12WatchPointerC1Eh>:
#include <app/WatchPointer.h>
#include "event/evClockwise.h"
#include "event/evCounterClockwise.h"

WatchPointer::WatchPointer(uint8_t outputAngle)
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	000a      	movs	r2, r1
 800770e:	1cfb      	adds	r3, r7, #3
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2100      	movs	r1, #0
 8007716:	0018      	movs	r0, r3
 8007718:	f000 fe92 	bl	8008440 <_ZN10XFBehaviorC1Eb>
 800771c:	4a1c      	ldr	r2, [pc, #112]	; (8007790 <_ZN12WatchPointerC1Eh+0x8c>)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	2387      	movs	r3, #135	; 0x87
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	18d3      	adds	r3, r2, r3
 800772a:	2214      	movs	r2, #20
 800772c:	2100      	movs	r1, #0
 800772e:	0018      	movs	r0, r3
 8007730:	f003 fd29 	bl	800b186 <memset>
{
	this->outputAngle = outputAngle;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	1cfa      	adds	r2, r7, #3
 8007738:	4916      	ldr	r1, [pc, #88]	; (8007794 <_ZN12WatchPointerC1Eh+0x90>)
 800773a:	7812      	ldrb	r2, [r2, #0]
 800773c:	545a      	strb	r2, [r3, r1]
	_currentState = STATE_INIT;
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	2386      	movs	r3, #134	; 0x86
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	2100      	movs	r1, #0
 8007746:	54d1      	strb	r1, [r2, r3]

	clockwiseStep = true;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a13      	ldr	r2, [pc, #76]	; (8007798 <_ZN12WatchPointerC1Eh+0x94>)
 800774c:	2101      	movs	r1, #1
 800774e:	5499      	strb	r1, [r3, r2]
	counterClockwiseStep = true;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a12      	ldr	r2, [pc, #72]	; (800779c <_ZN12WatchPointerC1Eh+0x98>)
 8007754:	2101      	movs	r1, #1
 8007756:	5499      	strb	r1, [r3, r2]

	actualPosition = 0;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a11      	ldr	r2, [pc, #68]	; (80077a0 <_ZN12WatchPointerC1Eh+0x9c>)
 800775c:	2100      	movs	r1, #0
 800775e:	5499      	strb	r1, [r3, r2]
	newPosition = 0;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a10      	ldr	r2, [pc, #64]	; (80077a4 <_ZN12WatchPointerC1Eh+0xa0>)
 8007764:	2100      	movs	r1, #0
 8007766:	5499      	strb	r1, [r3, r2]

	indexQueue = 0;
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	2381      	movs	r3, #129	; 0x81
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	2100      	movs	r1, #0
 8007770:	52d1      	strh	r1, [r2, r3]

	tata = 0;
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	2384      	movs	r3, #132	; 0x84
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	2100      	movs	r1, #0
 800777a:	50d1      	str	r1, [r2, r3]
	toto=0;
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	2385      	movs	r3, #133	; 0x85
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	2100      	movs	r1, #0
 8007784:	50d1      	str	r1, [r2, r3]
}
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	0018      	movs	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	b002      	add	sp, #8
 800778e:	bd80      	pop	{r7, pc}
 8007790:	0800c4b4 	.word	0x0800c4b4
 8007794:	00000206 	.word	0x00000206
 8007798:	0000021a 	.word	0x0000021a
 800779c:	0000021b 	.word	0x0000021b
 80077a0:	0000020a 	.word	0x0000020a
 80077a4:	00000209 	.word	0x00000209

080077a8 <_ZN12WatchPointerD1Ev>:

WatchPointer::~WatchPointer()
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	4a05      	ldr	r2, [pc, #20]	; (80077c8 <_ZN12WatchPointerD1Ev+0x20>)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	0018      	movs	r0, r3
 80077ba:	f000 fe91 	bl	80084e0 <_ZN10XFBehaviorD1Ev>
{}
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	0018      	movs	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	b002      	add	sp, #8
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	0800c4b4 	.word	0x0800c4b4

080077cc <_ZN12WatchPointerD0Ev>:
WatchPointer::~WatchPointer()
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
{}
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	0018      	movs	r0, r3
 80077d8:	f7ff ffe6 	bl	80077a8 <_ZN12WatchPointerD1Ev>
 80077dc:	2392      	movs	r3, #146	; 0x92
 80077de:	009a      	lsls	r2, r3, #2
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	0011      	movs	r1, r2
 80077e4:	0018      	movs	r0, r3
 80077e6:	f003 fc04 	bl	800aff2 <_ZdlPvj>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	0018      	movs	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b002      	add	sp, #8
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <_ZN12WatchPointer8initGPIOEP12GPIO_TypeDeftS1_tS1_t>:

void WatchPointer::initGPIO(GPIO_TypeDef* A_Port, uint16_t A_Pin,
							GPIO_TypeDef* B_Port, uint16_t B_Pin,
							GPIO_TypeDef* C_Port, uint16_t C_Pin)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	1dbb      	adds	r3, r7, #6
 8007802:	801a      	strh	r2, [r3, #0]
	this->A_GPIO_Port = A_Port;
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	238c      	movs	r3, #140	; 0x8c
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	50d1      	str	r1, [r2, r3]
	this->A_GPIO_Pin = A_Pin;
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	1db9      	adds	r1, r7, #6
 8007812:	238d      	movs	r3, #141	; 0x8d
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	8809      	ldrh	r1, [r1, #0]
 8007818:	52d1      	strh	r1, [r2, r3]

	this->B_GPIO_Port = B_Port;
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	238e      	movs	r3, #142	; 0x8e
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	50d1      	str	r1, [r2, r3]
	this->B_GPIO_Pin = B_Pin;
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	2318      	movs	r3, #24
 8007828:	18f9      	adds	r1, r7, r3
 800782a:	238f      	movs	r3, #143	; 0x8f
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	8809      	ldrh	r1, [r1, #0]
 8007830:	52d1      	strh	r1, [r2, r3]

	this->C_GPIO_Port = C_Port;
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	2390      	movs	r3, #144	; 0x90
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	50d1      	str	r1, [r2, r3]
	this->C_GPIO_Pin = C_Pin;
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	2320      	movs	r3, #32
 8007840:	18f9      	adds	r1, r7, r3
 8007842:	2391      	movs	r3, #145	; 0x91
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	8809      	ldrh	r1, [r1, #0]
 8007848:	52d1      	strh	r1, [r2, r3]

	//Start behavior of state machine
	this->startBehavior();
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3308      	adds	r3, #8
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	0010      	movs	r0, r2
 8007856:	4798      	blx	r3
}
 8007858:	46c0      	nop			; (mov r8, r8)
 800785a:	46bd      	mov	sp, r7
 800785c:	b004      	add	sp, #16
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZN12WatchPointer9doOneStepEb>:

void WatchPointer::doOneStep(bool clockwise)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	000a      	movs	r2, r1
 800786a:	1cfb      	adds	r3, r7, #3
 800786c:	701a      	strb	r2, [r3, #0]
	eventQueue[indexQueue] = clockwise;
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	2381      	movs	r3, #129	; 0x81
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	5ad3      	ldrh	r3, [r2, r3]
 8007876:	001a      	movs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	189b      	adds	r3, r3, r2
 800787c:	1cfa      	adds	r2, r7, #3
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	741a      	strb	r2, [r3, #16]
	indexQueue++;
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	2381      	movs	r3, #129	; 0x81
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	5ad3      	ldrh	r3, [r2, r3]
 800788a:	3301      	adds	r3, #1
 800788c:	b299      	uxth	r1, r3
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	2381      	movs	r3, #129	; 0x81
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	52d1      	strh	r1, [r2, r3]

	if((_currentState == STATE_WAIT) && ((_oldState == STATE_WAIT) || (_oldState == STATE_INIT)))
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	2386      	movs	r3, #134	; 0x86
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	5cd3      	ldrb	r3, [r2, r3]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d10d      	bne.n	80078be <_ZN12WatchPointer9doOneStepEb+0x5e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <_ZN12WatchPointer9doOneStepEb+0x68>)
 80078a6:	5c9b      	ldrb	r3, [r3, r2]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d004      	beq.n	80078b6 <_ZN12WatchPointer9doOneStepEb+0x56>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a06      	ldr	r2, [pc, #24]	; (80078c8 <_ZN12WatchPointer9doOneStepEb+0x68>)
 80078b0:	5c9b      	ldrb	r3, [r3, r2]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <_ZN12WatchPointer9doOneStepEb+0x5e>
	{
		generateEvent();
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0018      	movs	r0, r3
 80078ba:	f000 f807 	bl	80078cc <_ZN12WatchPointer13generateEventEv>
	else
	{
		//Wait we are on STATE_WAIT

	}
}
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b002      	add	sp, #8
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	00000219 	.word	0x00000219

080078cc <_ZN12WatchPointer13generateEventEv>:

void WatchPointer::generateEvent()
{
 80078cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	//Check if array is empty
	if(indexQueue != 0)
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	2381      	movs	r3, #129	; 0x81
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	5ad3      	ldrh	r3, [r2, r3]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d051      	beq.n	8007984 <_ZN12WatchPointer13generateEventEv+0xb8>
	{
		if(eventQueue[0] == true)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7c1b      	ldrb	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d010      	beq.n	800790a <_ZN12WatchPointer13generateEventEv+0x3e>
		{
			GEN(evClockwise());
 80078e8:	687d      	ldr	r5, [r7, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	681c      	ldr	r4, [r3, #0]
 80078f2:	2014      	movs	r0, #20
 80078f4:	f003 fb81 	bl	800affa <_Znwj>
 80078f8:	0003      	movs	r3, r0
 80078fa:	001e      	movs	r6, r3
 80078fc:	0030      	movs	r0, r6
 80078fe:	f000 fbb7 	bl	8008070 <_ZN11evClockwiseC1Ev>
 8007902:	0031      	movs	r1, r6
 8007904:	0028      	movs	r0, r5
 8007906:	47a0      	blx	r4
 8007908:	e018      	b.n	800793c <_ZN12WatchPointer13generateEventEv+0x70>
		}
		else
		{
			GEN(evCounterClockwise());
 800790a:	687d      	ldr	r5, [r7, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	330c      	adds	r3, #12
 8007912:	681c      	ldr	r4, [r3, #0]
 8007914:	2014      	movs	r0, #20
 8007916:	f003 fb70 	bl	800affa <_Znwj>
 800791a:	0003      	movs	r3, r0
 800791c:	001e      	movs	r6, r3
 800791e:	0030      	movs	r0, r6
 8007920:	f000 fbde 	bl	80080e0 <_ZN18evCounterClockwiseC1Ev>
 8007924:	0031      	movs	r1, r6
 8007926:	0028      	movs	r0, r5
 8007928:	47a0      	blx	r4
			toto++;
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	2385      	movs	r3, #133	; 0x85
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	58d3      	ldr	r3, [r2, r3]
 8007932:	1c59      	adds	r1, r3, #1
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	2385      	movs	r3, #133	; 0x85
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	50d1      	str	r1, [r2, r3]
		}

		//Decrement position of each value of the array
		for(int i=0; i<indexQueue-1; i++)
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	2381      	movs	r3, #129	; 0x81
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	5ad3      	ldrh	r3, [r2, r3]
 8007948:	3b01      	subs	r3, #1
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	429a      	cmp	r2, r3
 800794e:	da0e      	bge.n	800796e <_ZN12WatchPointer13generateEventEv+0xa2>
		{
			eventQueue[i] = eventQueue[i+1];
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	18d3      	adds	r3, r2, r3
 8007958:	7c19      	ldrb	r1, [r3, #16]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	18d3      	adds	r3, r2, r3
 8007960:	3310      	adds	r3, #16
 8007962:	1c0a      	adds	r2, r1, #0
 8007964:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<indexQueue-1; i++)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	e7e8      	b.n	8007940 <_ZN12WatchPointer13generateEventEv+0x74>
		}
		indexQueue--;
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	2381      	movs	r3, #129	; 0x81
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	5ad3      	ldrh	r3, [r2, r3]
 8007976:	3b01      	subs	r3, #1
 8007978:	b299      	uxth	r1, r3
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	2381      	movs	r3, #129	; 0x81
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	52d1      	strh	r1, [r2, r3]
	}
	else
	{
		GEN(XFNullTransition());
	}
}
 8007982:	e010      	b.n	80079a6 <_ZN12WatchPointer13generateEventEv+0xda>
		GEN(XFNullTransition());
 8007984:	687d      	ldr	r5, [r7, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	330c      	adds	r3, #12
 800798c:	681c      	ldr	r4, [r3, #0]
 800798e:	2010      	movs	r0, #16
 8007990:	f003 fb33 	bl	800affa <_Znwj>
 8007994:	0003      	movs	r3, r0
 8007996:	001e      	movs	r6, r3
 8007998:	2100      	movs	r1, #0
 800799a:	0030      	movs	r0, r6
 800799c:	f000 fefc 	bl	8008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>
 80079a0:	0031      	movs	r1, r6
 80079a2:	0028      	movs	r0, r5
 80079a4:	47a0      	blx	r4
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b005      	add	sp, #20
 80079ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080079b0 <_ZN12WatchPointer12processEventEv>:

XFEventStatus WatchPointer::processEvent()
{
 80079b0:	b590      	push	{r4, r7, lr}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	eEventStatus eventStatus = XFEventStatus::Unknown;
 80079b8:	230f      	movs	r3, #15
 80079ba:	18fb      	adds	r3, r7, r3
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
	_oldState = _currentState;
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	2386      	movs	r3, #134	; 0x86
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	5cd1      	ldrb	r1, [r2, r3]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4ac1      	ldr	r2, [pc, #772]	; (8007cd0 <_ZN12WatchPointer12processEventEv+0x320>)
 80079cc:	5499      	strb	r1, [r3, r2]

	//Transition switch
	switch(_currentState)
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	2386      	movs	r3, #134	; 0x86
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	5cd3      	ldrb	r3, [r2, r3]
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d900      	bls.n	80079dc <_ZN12WatchPointer12processEventEv+0x2c>
 80079da:	e0d7      	b.n	8007b8c <_ZN12WatchPointer12processEventEv+0x1dc>
 80079dc:	009a      	lsls	r2, r3, #2
 80079de:	4bbd      	ldr	r3, [pc, #756]	; (8007cd4 <_ZN12WatchPointer12processEventEv+0x324>)
 80079e0:	18d3      	adds	r3, r2, r3
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	469f      	mov	pc, r3
	{
	case STATE_INIT:
		if (getCurrentEvent()->getEventType() == XFEvent::Initial)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	0018      	movs	r0, r3
 80079ea:	f000 fe2c 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 80079ee:	0003      	movs	r3, r0
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7fd fcd1 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 80079f6:	0003      	movs	r3, r0
 80079f8:	3b01      	subs	r3, #1
 80079fa:	425a      	negs	r2, r3
 80079fc:	4153      	adcs	r3, r2
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d100      	bne.n	8007a06 <_ZN12WatchPointer12processEventEv+0x56>
 8007a04:	e0c4      	b.n	8007b90 <_ZN12WatchPointer12processEventEv+0x1e0>
		{
			_currentState = STATE_WAIT;
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	2386      	movs	r3, #134	; 0x86
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007a10:	230f      	movs	r3, #15
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	2201      	movs	r2, #1
 8007a16:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007a18:	e0ba      	b.n	8007b90 <_ZN12WatchPointer12processEventEv+0x1e0>

	case STATE_WAIT:
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f000 fe12 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8007a22:	0003      	movs	r3, r0
 8007a24:	0018      	movs	r0, r3
 8007a26:	f7fd fcb7 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8007a2a:	0003      	movs	r3, r0
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d10c      	bne.n	8007a4a <_ZN12WatchPointer12processEventEv+0x9a>
					getCurrentEvent()->getId() == EventIds::evClockwiseId)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	0018      	movs	r0, r3
 8007a34:	f000 fe07 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8007a38:	0003      	movs	r3, r0
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f7fd fcb7 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8007a40:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d101      	bne.n	8007a4a <_ZN12WatchPointer12processEventEv+0x9a>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <_ZN12WatchPointer12processEventEv+0x9c>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d008      	beq.n	8007a62 <_ZN12WatchPointer12processEventEv+0xb2>
		{
			_currentState = STATE_CLKWISE;
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	2386      	movs	r3, #134	; 0x86
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	2102      	movs	r1, #2
 8007a58:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007a5a:	230f      	movs	r3, #15
 8007a5c:	18fb      	adds	r3, r7, r3
 8007a5e:	2201      	movs	r2, #1
 8007a60:	701a      	strb	r2, [r3, #0]
		}
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	0018      	movs	r0, r3
 8007a66:	f000 fdee 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f7fd fc93 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8007a72:	0003      	movs	r3, r0
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d10c      	bne.n	8007a92 <_ZN12WatchPointer12processEventEv+0xe2>
					getCurrentEvent()->getId() == EventIds::evCounterClockwiseId)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f000 fde3 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8007a80:	0003      	movs	r3, r0
 8007a82:	0018      	movs	r0, r3
 8007a84:	f7fd fc93 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8007a88:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Event &&
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d101      	bne.n	8007a92 <_ZN12WatchPointer12processEventEv+0xe2>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e000      	b.n	8007a94 <_ZN12WatchPointer12processEventEv+0xe4>
 8007a92:	2300      	movs	r3, #0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d100      	bne.n	8007a9a <_ZN12WatchPointer12processEventEv+0xea>
 8007a98:	e07c      	b.n	8007b94 <_ZN12WatchPointer12processEventEv+0x1e4>
		{
			_currentState = STATE_CNT_CLKWISE;
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	2386      	movs	r3, #134	; 0x86
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	2103      	movs	r1, #3
 8007aa2:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007aa4:	230f      	movs	r3, #15
 8007aa6:	18fb      	adds	r3, r7, r3
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007aac:	e072      	b.n	8007b94 <_ZN12WatchPointer12processEventEv+0x1e4>

	case STATE_CLKWISE:
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f000 fdc8 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f7fd fc6d 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8007abe:	0003      	movs	r3, r0
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d10c      	bne.n	8007ade <_ZN12WatchPointer12processEventEv+0x12e>
						getCurrentTimeout()->getId() == StepTimeout)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f000 fdc8 	bl	800865c <_ZN10XFBehavior17getCurrentTimeoutEv>
 8007acc:	0003      	movs	r3, r0
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f7fd fc6d 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8007ad4:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d101      	bne.n	8007ade <_ZN12WatchPointer12processEventEv+0x12e>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e000      	b.n	8007ae0 <_ZN12WatchPointer12processEventEv+0x130>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d059      	beq.n	8007b98 <_ZN12WatchPointer12processEventEv+0x1e8>
		{
			_currentState = STATE_COMMON;
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	2386      	movs	r3, #134	; 0x86
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	2104      	movs	r1, #4
 8007aec:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007aee:	230f      	movs	r3, #15
 8007af0:	18fb      	adds	r3, r7, r3
 8007af2:	2201      	movs	r2, #1
 8007af4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007af6:	e04f      	b.n	8007b98 <_ZN12WatchPointer12processEventEv+0x1e8>

	case STATE_CNT_CLKWISE:
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	0018      	movs	r0, r3
 8007afc:	f000 fda3 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8007b00:	0003      	movs	r3, r0
 8007b02:	0018      	movs	r0, r3
 8007b04:	f7fd fc48 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8007b08:	0003      	movs	r3, r0
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d10c      	bne.n	8007b28 <_ZN12WatchPointer12processEventEv+0x178>
						getCurrentTimeout()->getId() == StepTimeout)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	0018      	movs	r0, r3
 8007b12:	f000 fda3 	bl	800865c <_ZN10XFBehavior17getCurrentTimeoutEv>
 8007b16:	0003      	movs	r3, r0
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f7fd fc48 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8007b1e:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <_ZN12WatchPointer12processEventEv+0x178>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <_ZN12WatchPointer12processEventEv+0x17a>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d036      	beq.n	8007b9c <_ZN12WatchPointer12processEventEv+0x1ec>
		{
			_currentState = STATE_COMMON;
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	2386      	movs	r3, #134	; 0x86
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	2104      	movs	r1, #4
 8007b36:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007b38:	230f      	movs	r3, #15
 8007b3a:	18fb      	adds	r3, r7, r3
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007b40:	e02c      	b.n	8007b9c <_ZN12WatchPointer12processEventEv+0x1ec>

	case STATE_COMMON:
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f000 fd7e 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f7fd fc23 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8007b52:	0003      	movs	r3, r0
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d10c      	bne.n	8007b72 <_ZN12WatchPointer12processEventEv+0x1c2>
						getCurrentTimeout()->getId() == StepTimeout)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 fd7e 	bl	800865c <_ZN10XFBehavior17getCurrentTimeoutEv>
 8007b60:	0003      	movs	r3, r0
 8007b62:	0018      	movs	r0, r3
 8007b64:	f7fd fc23 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8007b68:	0003      	movs	r3, r0
		if (getCurrentEvent()->getEventType() == XFEvent::Timeout &&
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <_ZN12WatchPointer12processEventEv+0x1c2>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <_ZN12WatchPointer12processEventEv+0x1c4>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d013      	beq.n	8007ba0 <_ZN12WatchPointer12processEventEv+0x1f0>
		{
			_currentState = STATE_WAIT;
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	2386      	movs	r3, #134	; 0x86
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	2101      	movs	r1, #1
 8007b80:	54d1      	strb	r1, [r2, r3]
			eventStatus = XFEventStatus::Consumed;
 8007b82:	230f      	movs	r3, #15
 8007b84:	18fb      	adds	r3, r7, r3
 8007b86:	2201      	movs	r2, #1
 8007b88:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007b8a:	e009      	b.n	8007ba0 <_ZN12WatchPointer12processEventEv+0x1f0>

	default:
		break;
 8007b8c:	46c0      	nop			; (mov r8, r8)
 8007b8e:	e008      	b.n	8007ba2 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007b90:	46c0      	nop			; (mov r8, r8)
 8007b92:	e006      	b.n	8007ba2 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	e004      	b.n	8007ba2 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007b98:	46c0      	nop			; (mov r8, r8)
 8007b9a:	e002      	b.n	8007ba2 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007b9c:	46c0      	nop			; (mov r8, r8)
 8007b9e:	e000      	b.n	8007ba2 <_ZN12WatchPointer12processEventEv+0x1f2>
		break;
 8007ba0:	46c0      	nop			; (mov r8, r8)
	}
	//Action switch
	if(_oldState != _currentState)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a4a      	ldr	r2, [pc, #296]	; (8007cd0 <_ZN12WatchPointer12processEventEv+0x320>)
 8007ba6:	5c9a      	ldrb	r2, [r3, r2]
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	2386      	movs	r3, #134	; 0x86
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	5ccb      	ldrb	r3, [r1, r3]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d100      	bne.n	8007bb6 <_ZN12WatchPointer12processEventEv+0x206>
 8007bb4:	e194      	b.n	8007ee0 <_ZN12WatchPointer12processEventEv+0x530>
	{
		switch(_currentState)
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	2386      	movs	r3, #134	; 0x86
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	5cd3      	ldrb	r3, [r2, r3]
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d900      	bls.n	8007bc4 <_ZN12WatchPointer12processEventEv+0x214>
 8007bc2:	e182      	b.n	8007eca <_ZN12WatchPointer12processEventEv+0x51a>
 8007bc4:	009a      	lsls	r2, r3, #2
 8007bc6:	4b44      	ldr	r3, [pc, #272]	; (8007cd8 <_ZN12WatchPointer12processEventEv+0x328>)
 8007bc8:	18d3      	adds	r3, r2, r3
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	469f      	mov	pc, r3
		{
		case STATE_INIT:
			break;

		case STATE_WAIT:
			if(_oldState == STATE_COMMON)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a3f      	ldr	r2, [pc, #252]	; (8007cd0 <_ZN12WatchPointer12processEventEv+0x320>)
 8007bd2:	5c9b      	ldrb	r3, [r3, r2]
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d000      	beq.n	8007bda <_ZN12WatchPointer12processEventEv+0x22a>
 8007bd8:	e17b      	b.n	8007ed2 <_ZN12WatchPointer12processEventEv+0x522>
			{
				generateEvent(); //Generate next event
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7ff fe75 	bl	80078cc <_ZN12WatchPointer13generateEventEv>
			}
			break;
 8007be2:	e176      	b.n	8007ed2 <_ZN12WatchPointer12processEventEv+0x522>

		case STATE_CNT_CLKWISE:
			if(_oldState == STATE_WAIT)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a3a      	ldr	r2, [pc, #232]	; (8007cd0 <_ZN12WatchPointer12processEventEv+0x320>)
 8007be8:	5c9b      	ldrb	r3, [r3, r2]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d000      	beq.n	8007bf0 <_ZN12WatchPointer12processEventEv+0x240>
 8007bee:	e172      	b.n	8007ed6 <_ZN12WatchPointer12processEventEv+0x526>
			{
				//Output -> Input
				GPIO_InitStruct.Pin = B_GPIO_Pin;
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	238f      	movs	r3, #143	; 0x8f
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	5ad3      	ldrh	r3, [r2, r3]
 8007bf8:	0019      	movs	r1, r3
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	2387      	movs	r3, #135	; 0x87
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	2388      	movs	r3, #136	; 0x88
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	2100      	movs	r1, #0
 8007c0a:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	2389      	movs	r3, #137	; 0x89
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	2100      	movs	r1, #0
 8007c14:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	238e      	movs	r3, #142	; 0x8e
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	58d2      	ldr	r2, [r2, r3]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2187      	movs	r1, #135	; 0x87
 8007c22:	0089      	lsls	r1, r1, #2
 8007c24:	468c      	mov	ip, r1
 8007c26:	4463      	add	r3, ip
 8007c28:	0019      	movs	r1, r3
 8007c2a:	0010      	movs	r0, r2
 8007c2c:	f7fa fb6a 	bl	8002304 <HAL_GPIO_Init>

				if(counterClockwiseStep == true)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a2a      	ldr	r2, [pc, #168]	; (8007cdc <_ZN12WatchPointer12processEventEv+0x32c>)
 8007c34:	5c9b      	ldrb	r3, [r3, r2]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d018      	beq.n	8007c6c <_ZN12WatchPointer12processEventEv+0x2bc>
				{
					HAL_GPIO_WritePin(A_GPIO_Port, A_GPIO_Pin, GPIO_PIN_SET);
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	238c      	movs	r3, #140	; 0x8c
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	58d0      	ldr	r0, [r2, r3]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	238d      	movs	r3, #141	; 0x8d
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	5ad3      	ldrh	r3, [r2, r3]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	0019      	movs	r1, r3
 8007c4e:	f7fa fcee 	bl	800262e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_RESET);
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	2390      	movs	r3, #144	; 0x90
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	58d0      	ldr	r0, [r2, r3]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	2391      	movs	r3, #145	; 0x91
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	5ad3      	ldrh	r3, [r2, r3]
 8007c62:	2200      	movs	r2, #0
 8007c64:	0019      	movs	r1, r3
 8007c66:	f7fa fce2 	bl	800262e <HAL_GPIO_WritePin>
 8007c6a:	e017      	b.n	8007c9c <_ZN12WatchPointer12processEventEv+0x2ec>
				}
				else
				{
					HAL_GPIO_WritePin(A_GPIO_Port, A_GPIO_Pin, GPIO_PIN_RESET);
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	238c      	movs	r3, #140	; 0x8c
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	58d0      	ldr	r0, [r2, r3]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	238d      	movs	r3, #141	; 0x8d
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	5ad3      	ldrh	r3, [r2, r3]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	0019      	movs	r1, r3
 8007c80:	f7fa fcd5 	bl	800262e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_SET);
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	2390      	movs	r3, #144	; 0x90
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	58d0      	ldr	r0, [r2, r3]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	2391      	movs	r3, #145	; 0x91
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	5ad3      	ldrh	r3, [r2, r3]
 8007c94:	2201      	movs	r2, #1
 8007c96:	0019      	movs	r1, r3
 8007c98:	f7fa fcc9 	bl	800262e <HAL_GPIO_WritePin>
				}
				counterClockwiseStep = !counterClockwiseStep;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a0f      	ldr	r2, [pc, #60]	; (8007cdc <_ZN12WatchPointer12processEventEv+0x32c>)
 8007ca0:	5c9b      	ldrb	r3, [r3, r2]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	4053      	eors	r3, r2
 8007ca6:	b2d9      	uxtb	r1, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a0c      	ldr	r2, [pc, #48]	; (8007cdc <_ZN12WatchPointer12processEventEv+0x32c>)
 8007cac:	5499      	strb	r1, [r3, r2]
				scheduleTimeout(StepTimeout, DELAY_ON);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	221e      	movs	r2, #30
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7fd fb94 	bl	80053e2 <_ZN10XFBehavior15scheduleTimeoutEii>
				tata++;
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	2384      	movs	r3, #132	; 0x84
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	58d3      	ldr	r3, [r2, r3]
 8007cc2:	1c59      	adds	r1, r3, #1
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	2384      	movs	r3, #132	; 0x84
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	50d1      	str	r1, [r2, r3]
			}
			break;
 8007ccc:	e103      	b.n	8007ed6 <_ZN12WatchPointer12processEventEv+0x526>
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	00000219 	.word	0x00000219
 8007cd4:	0800c484 	.word	0x0800c484
 8007cd8:	0800c498 	.word	0x0800c498
 8007cdc:	0000021b 	.word	0x0000021b

		case STATE_CLKWISE:
			if(_oldState == STATE_WAIT)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a87      	ldr	r2, [pc, #540]	; (8007f00 <_ZN12WatchPointer12processEventEv+0x550>)
 8007ce4:	5c9b      	ldrb	r3, [r3, r2]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d000      	beq.n	8007cec <_ZN12WatchPointer12processEventEv+0x33c>
 8007cea:	e0f6      	b.n	8007eda <_ZN12WatchPointer12processEventEv+0x52a>
			{
				//Output -> Input
				GPIO_InitStruct.Pin = A_GPIO_Pin;
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	238d      	movs	r3, #141	; 0x8d
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	5ad3      	ldrh	r3, [r2, r3]
 8007cf4:	0019      	movs	r1, r3
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	2387      	movs	r3, #135	; 0x87
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	2388      	movs	r3, #136	; 0x88
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	2100      	movs	r1, #0
 8007d06:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	2389      	movs	r3, #137	; 0x89
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	2100      	movs	r1, #0
 8007d10:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	238c      	movs	r3, #140	; 0x8c
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	58d2      	ldr	r2, [r2, r3]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2187      	movs	r1, #135	; 0x87
 8007d1e:	0089      	lsls	r1, r1, #2
 8007d20:	468c      	mov	ip, r1
 8007d22:	4463      	add	r3, ip
 8007d24:	0019      	movs	r1, r3
 8007d26:	0010      	movs	r0, r2
 8007d28:	f7fa faec 	bl	8002304 <HAL_GPIO_Init>

				if(clockwiseStep == true)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a75      	ldr	r2, [pc, #468]	; (8007f04 <_ZN12WatchPointer12processEventEv+0x554>)
 8007d30:	5c9b      	ldrb	r3, [r3, r2]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d018      	beq.n	8007d68 <_ZN12WatchPointer12processEventEv+0x3b8>
				{
					HAL_GPIO_WritePin(B_GPIO_Port, B_GPIO_Pin, GPIO_PIN_SET);
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	238e      	movs	r3, #142	; 0x8e
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	58d0      	ldr	r0, [r2, r3]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	238f      	movs	r3, #143	; 0x8f
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	5ad3      	ldrh	r3, [r2, r3]
 8007d46:	2201      	movs	r2, #1
 8007d48:	0019      	movs	r1, r3
 8007d4a:	f7fa fc70 	bl	800262e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_RESET);
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	2390      	movs	r3, #144	; 0x90
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	58d0      	ldr	r0, [r2, r3]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	2391      	movs	r3, #145	; 0x91
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	5ad3      	ldrh	r3, [r2, r3]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	0019      	movs	r1, r3
 8007d62:	f7fa fc64 	bl	800262e <HAL_GPIO_WritePin>
 8007d66:	e017      	b.n	8007d98 <_ZN12WatchPointer12processEventEv+0x3e8>
				}
				else
				{
					HAL_GPIO_WritePin(B_GPIO_Port, B_GPIO_Pin, GPIO_PIN_RESET);
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	238e      	movs	r3, #142	; 0x8e
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	58d0      	ldr	r0, [r2, r3]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	238f      	movs	r3, #143	; 0x8f
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	5ad3      	ldrh	r3, [r2, r3]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	0019      	movs	r1, r3
 8007d7c:	f7fa fc57 	bl	800262e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_SET);
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	2390      	movs	r3, #144	; 0x90
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	58d0      	ldr	r0, [r2, r3]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	2391      	movs	r3, #145	; 0x91
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	5ad3      	ldrh	r3, [r2, r3]
 8007d90:	2201      	movs	r2, #1
 8007d92:	0019      	movs	r1, r3
 8007d94:	f7fa fc4b 	bl	800262e <HAL_GPIO_WritePin>
				}

				clockwiseStep = !clockwiseStep;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a5a      	ldr	r2, [pc, #360]	; (8007f04 <_ZN12WatchPointer12processEventEv+0x554>)
 8007d9c:	5c9b      	ldrb	r3, [r3, r2]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4053      	eors	r3, r2
 8007da2:	b2d9      	uxtb	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a57      	ldr	r2, [pc, #348]	; (8007f04 <_ZN12WatchPointer12processEventEv+0x554>)
 8007da8:	5499      	strb	r1, [r3, r2]
				scheduleTimeout(StepTimeout, DELAY_ON);	//3ms
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	221e      	movs	r2, #30
 8007dae:	2101      	movs	r1, #1
 8007db0:	0018      	movs	r0, r3
 8007db2:	f7fd fb16 	bl	80053e2 <_ZN10XFBehavior15scheduleTimeoutEii>
			}
			break;
 8007db6:	e090      	b.n	8007eda <_ZN12WatchPointer12processEventEv+0x52a>

		case STATE_COMMON:
			if(_oldState == STATE_CNT_CLKWISE)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a51      	ldr	r2, [pc, #324]	; (8007f00 <_ZN12WatchPointer12processEventEv+0x550>)
 8007dbc:	5c9b      	ldrb	r3, [r3, r2]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d124      	bne.n	8007e0c <_ZN12WatchPointer12processEventEv+0x45c>
			{
				//Input -> Output
				GPIO_InitStruct.Pin = B_GPIO_Pin;
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	238f      	movs	r3, #143	; 0x8f
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	5ad3      	ldrh	r3, [r2, r3]
 8007dca:	0019      	movs	r1, r3
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	2387      	movs	r3, #135	; 0x87
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	2388      	movs	r3, #136	; 0x88
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	2101      	movs	r1, #1
 8007ddc:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	2389      	movs	r3, #137	; 0x89
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	2100      	movs	r1, #0
 8007de6:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	238a      	movs	r3, #138	; 0x8a
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	2100      	movs	r1, #0
 8007df0:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	238e      	movs	r3, #142	; 0x8e
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	58d2      	ldr	r2, [r2, r3]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2187      	movs	r1, #135	; 0x87
 8007dfe:	0089      	lsls	r1, r1, #2
 8007e00:	468c      	mov	ip, r1
 8007e02:	4463      	add	r3, ip
 8007e04:	0019      	movs	r1, r3
 8007e06:	0010      	movs	r0, r2
 8007e08:	f7fa fa7c 	bl	8002304 <HAL_GPIO_Init>
			}
			if(_oldState == STATE_CLKWISE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a3c      	ldr	r2, [pc, #240]	; (8007f00 <_ZN12WatchPointer12processEventEv+0x550>)
 8007e10:	5c9b      	ldrb	r3, [r3, r2]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d124      	bne.n	8007e60 <_ZN12WatchPointer12processEventEv+0x4b0>
			{
				//Input -> Output
				GPIO_InitStruct.Pin = A_GPIO_Pin;
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	238d      	movs	r3, #141	; 0x8d
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	5ad3      	ldrh	r3, [r2, r3]
 8007e1e:	0019      	movs	r1, r3
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	2387      	movs	r3, #135	; 0x87
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	2388      	movs	r3, #136	; 0x88
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	2101      	movs	r1, #1
 8007e30:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	2389      	movs	r3, #137	; 0x89
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	2100      	movs	r1, #0
 8007e3a:	50d1      	str	r1, [r2, r3]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	238a      	movs	r3, #138	; 0x8a
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	2100      	movs	r1, #0
 8007e44:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	238c      	movs	r3, #140	; 0x8c
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	58d2      	ldr	r2, [r2, r3]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2187      	movs	r1, #135	; 0x87
 8007e52:	0089      	lsls	r1, r1, #2
 8007e54:	468c      	mov	ip, r1
 8007e56:	4463      	add	r3, ip
 8007e58:	0019      	movs	r1, r3
 8007e5a:	0010      	movs	r0, r2
 8007e5c:	f7fa fa52 	bl	8002304 <HAL_GPIO_Init>
			}
			if(_oldState == STATE_CLKWISE || _oldState == STATE_CNT_CLKWISE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a27      	ldr	r2, [pc, #156]	; (8007f00 <_ZN12WatchPointer12processEventEv+0x550>)
 8007e64:	5c9b      	ldrb	r3, [r3, r2]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d004      	beq.n	8007e74 <_ZN12WatchPointer12processEventEv+0x4c4>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a24      	ldr	r2, [pc, #144]	; (8007f00 <_ZN12WatchPointer12processEventEv+0x550>)
 8007e6e:	5c9b      	ldrb	r3, [r3, r2]
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d134      	bne.n	8007ede <_ZN12WatchPointer12processEventEv+0x52e>
			{
				HAL_GPIO_WritePin(A_GPIO_Port, A_GPIO_Pin, GPIO_PIN_RESET);
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	238c      	movs	r3, #140	; 0x8c
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	58d0      	ldr	r0, [r2, r3]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	238d      	movs	r3, #141	; 0x8d
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	5ad3      	ldrh	r3, [r2, r3]
 8007e84:	2200      	movs	r2, #0
 8007e86:	0019      	movs	r1, r3
 8007e88:	f7fa fbd1 	bl	800262e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_GPIO_Pin, GPIO_PIN_RESET);
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	238e      	movs	r3, #142	; 0x8e
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	58d0      	ldr	r0, [r2, r3]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	238f      	movs	r3, #143	; 0x8f
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	5ad3      	ldrh	r3, [r2, r3]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	0019      	movs	r1, r3
 8007ea0:	f7fa fbc5 	bl	800262e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_GPIO_Pin, GPIO_PIN_RESET);
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	2390      	movs	r3, #144	; 0x90
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	58d0      	ldr	r0, [r2, r3]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	2391      	movs	r3, #145	; 0x91
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	5ad3      	ldrh	r3, [r2, r3]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	0019      	movs	r1, r3
 8007eb8:	f7fa fbb9 	bl	800262e <HAL_GPIO_WritePin>
				scheduleTimeout(StepTimeout, DELAY_OFF);	//14ms
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	228c      	movs	r2, #140	; 0x8c
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f7fd fa8d 	bl	80053e2 <_ZN10XFBehavior15scheduleTimeoutEii>
			}

			break;
 8007ec8:	e009      	b.n	8007ede <_ZN12WatchPointer12processEventEv+0x52e>
		default:
			break;
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	e008      	b.n	8007ee0 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	e006      	b.n	8007ee0 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	e004      	b.n	8007ee0 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	e002      	b.n	8007ee0 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	e000      	b.n	8007ee0 <_ZN12WatchPointer12processEventEv+0x530>
			break;
 8007ede:	46c0      	nop			; (mov r8, r8)
		}
	}
	return eventStatus;
 8007ee0:	230f      	movs	r3, #15
 8007ee2:	18fb      	adds	r3, r7, r3
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	240c      	movs	r4, #12
 8007ee8:	193b      	adds	r3, r7, r4
 8007eea:	0011      	movs	r1, r2
 8007eec:	0018      	movs	r0, r3
 8007eee:	f7fd fa68 	bl	80053c2 <_ZN13XFEventStatusC1ENS_12eEventStatusE>
 8007ef2:	193b      	adds	r3, r7, r4
 8007ef4:	781b      	ldrb	r3, [r3, #0]
}
 8007ef6:	1c18      	adds	r0, r3, #0
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	b005      	add	sp, #20
 8007efc:	bd90      	pop	{r4, r7, pc}
 8007efe:	46c0      	nop			; (mov r8, r8)
 8007f00:	00000219 	.word	0x00000219
 8007f04:	0000021a 	.word	0x0000021a

08007f08 <Factory_initialize>:
#include "xf/xf.h"
#include "factory.h"

void Factory_initialize()
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
    Factory::initialize();
 8007f0c:	f000 f80a 	bl	8007f24 <_ZN7Factory10initializeEv>
}
 8007f10:	46c0      	nop			; (mov r8, r8)
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <Factory_build>:

void Factory_build()
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	af00      	add	r7, sp, #0
    Factory::build();
 8007f1a:	f000 f80e 	bl	8007f3a <_ZN7Factory5buildEv>
}
 8007f1e:	46c0      	nop			; (mov r8, r8)
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <_ZN7Factory10initializeEv>:
Factory::Factory()
{}

// static
void Factory::initialize()
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
	Controller::getInstance()->intitialize();
 8007f28:	f7fd fac8 	bl	80054bc <_ZN10Controller11getInstanceEv>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	0018      	movs	r0, r3
 8007f30:	f7fd fae0 	bl	80054f4 <_ZN10Controller11intitializeEv>
}
 8007f34:	46c0      	nop			; (mov r8, r8)
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <_ZN7Factory5buildEv>:

// static
void Factory::build()
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	af00      	add	r7, sp, #0
	Controller::getInstance()->start();
 8007f3e:	f7fd fabd 	bl	80054bc <_ZN10Controller11getInstanceEv>
 8007f42:	0003      	movs	r3, r0
 8007f44:	0018      	movs	r0, r3
 8007f46:	f7fd fadd 	bl	8005504 <_ZN10Controller5startEv>
}
 8007f4a:	46c0      	nop			; (mov r8, r8)
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <_ZN7XFEventD1Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	4a03      	ldr	r2, [pc, #12]	; (8007f68 <_ZN7XFEventD1Ev+0x18>)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	0018      	movs	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	b002      	add	sp, #8
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	0800c504 	.word	0x0800c504

08007f6c <_ZN7XFEventD0Ev>:
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	0018      	movs	r0, r3
 8007f78:	f7ff ffea 	bl	8007f50 <_ZN7XFEventD1Ev>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2110      	movs	r1, #16
 8007f80:	0018      	movs	r0, r3
 8007f82:	f003 f836 	bl	800aff2 <_ZdlPvj>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	0018      	movs	r0, r3
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	b002      	add	sp, #8
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZNK7XFEvent18deleteAfterConsumeEv>:

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b002      	add	sp, #8
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <_ZNK13XFCustomEvent18deleteAfterConsumeEv>:

    /**
     * @brief Tells the XF if the event should be deleted after processing.
     * @return True if the event should be deleted.
     */
    bool deleteAfterConsume() const override { return _bDeleteAfterConsume; }
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	7c1b      	ldrb	r3, [r3, #16]
 8007fae:	0018      	movs	r0, r3
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b002      	add	sp, #8
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <_ZN13XFCustomEventD1Ev>:
class XFCustomEvent : public XFEvent
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	4a05      	ldr	r2, [pc, #20]	; (8007fd8 <_ZN13XFCustomEventD1Ev+0x20>)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f7ff ffc1 	bl	8007f50 <_ZN7XFEventD1Ev>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b002      	add	sp, #8
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	0800c4f0 	.word	0x0800c4f0

08007fdc <_ZN13XFCustomEventD0Ev>:
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f7ff ffe6 	bl	8007fb8 <_ZN13XFCustomEventD1Ev>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2114      	movs	r1, #20
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f002 fffe 	bl	800aff2 <_ZdlPvj>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	0018      	movs	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b002      	add	sp, #8
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <_ZN8evCanIrqC1Ev>:
#include "events.h"
#include "evCanIrq.h"


evCanIrq::evCanIrq() :
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evCanIrqId)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	2102      	movs	r1, #2
 800800e:	0018      	movs	r0, r3
 8008010:	f000 fb66 	bl	80086e0 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8008014:	4a03      	ldr	r2, [pc, #12]	; (8008024 <_ZN8evCanIrqC1Ev+0x24>)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	0018      	movs	r0, r3
 800801e:	46bd      	mov	sp, r7
 8008020:	b002      	add	sp, #8
 8008022:	bd80      	pop	{r7, pc}
 8008024:	0800c4dc 	.word	0x0800c4dc

08008028 <_ZN8evCanIrqD1Ev>:
#define EVCANIRQ_H_

#include "xf/customevent.h"
#include "events.h"

class evCanIrq : public XFCustomEvent
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	4a05      	ldr	r2, [pc, #20]	; (8008048 <_ZN8evCanIrqD1Ev+0x20>)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	0018      	movs	r0, r3
 800803a:	f7ff ffbd 	bl	8007fb8 <_ZN13XFCustomEventD1Ev>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	0018      	movs	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	b002      	add	sp, #8
 8008046:	bd80      	pop	{r7, pc}
 8008048:	0800c4dc 	.word	0x0800c4dc

0800804c <_ZN8evCanIrqD0Ev>:
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	0018      	movs	r0, r3
 8008058:	f7ff ffe6 	bl	8008028 <_ZN8evCanIrqD1Ev>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2114      	movs	r1, #20
 8008060:	0018      	movs	r0, r3
 8008062:	f002 ffc6 	bl	800aff2 <_ZdlPvj>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	0018      	movs	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	b002      	add	sp, #8
 800806e:	bd80      	pop	{r7, pc}

08008070 <_ZN11evClockwiseC1Ev>:
#include "events.h"
#include "evClockwise.h"

evClockwise::evClockwise() :
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evClockwiseId)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	2103      	movs	r1, #3
 800807e:	0018      	movs	r0, r3
 8008080:	f000 fb2e 	bl	80086e0 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8008084:	4a03      	ldr	r2, [pc, #12]	; (8008094 <_ZN11evClockwiseC1Ev+0x24>)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	0018      	movs	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	b002      	add	sp, #8
 8008092:	bd80      	pop	{r7, pc}
 8008094:	0800c518 	.word	0x0800c518

08008098 <_ZN11evClockwiseD1Ev>:
#define EVCLOCKWISE_H_

#include "xf/customevent.h"
#include "events.h"

class evClockwise : public XFCustomEvent
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	4a05      	ldr	r2, [pc, #20]	; (80080b8 <_ZN11evClockwiseD1Ev+0x20>)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	0018      	movs	r0, r3
 80080aa:	f7ff ff85 	bl	8007fb8 <_ZN13XFCustomEventD1Ev>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	0018      	movs	r0, r3
 80080b2:	46bd      	mov	sp, r7
 80080b4:	b002      	add	sp, #8
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	0800c518 	.word	0x0800c518

080080bc <_ZN11evClockwiseD0Ev>:
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	0018      	movs	r0, r3
 80080c8:	f7ff ffe6 	bl	8008098 <_ZN11evClockwiseD1Ev>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2114      	movs	r1, #20
 80080d0:	0018      	movs	r0, r3
 80080d2:	f002 ff8e 	bl	800aff2 <_ZdlPvj>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	0018      	movs	r0, r3
 80080da:	46bd      	mov	sp, r7
 80080dc:	b002      	add	sp, #8
 80080de:	bd80      	pop	{r7, pc}

080080e0 <_ZN18evCounterClockwiseC1Ev>:
#include "events.h"
#include "evCounterClockwise.h"

evCounterClockwise::evCounterClockwise() :
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evCounterClockwiseId)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	2104      	movs	r1, #4
 80080ee:	0018      	movs	r0, r3
 80080f0:	f000 faf6 	bl	80086e0 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80080f4:	4a03      	ldr	r2, [pc, #12]	; (8008104 <_ZN18evCounterClockwiseC1Ev+0x24>)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	0018      	movs	r0, r3
 80080fe:	46bd      	mov	sp, r7
 8008100:	b002      	add	sp, #8
 8008102:	bd80      	pop	{r7, pc}
 8008104:	0800c52c 	.word	0x0800c52c

08008108 <_ZN18evCounterClockwiseD1Ev>:
#define EVCOUNTERCLOCKWISE_H_

#include "xf/customevent.h"
#include "events.h"

class evCounterClockwise : public XFCustomEvent
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	4a05      	ldr	r2, [pc, #20]	; (8008128 <_ZN18evCounterClockwiseD1Ev+0x20>)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	0018      	movs	r0, r3
 800811a:	f7ff ff4d 	bl	8007fb8 <_ZN13XFCustomEventD1Ev>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	0018      	movs	r0, r3
 8008122:	46bd      	mov	sp, r7
 8008124:	b002      	add	sp, #8
 8008126:	bd80      	pop	{r7, pc}
 8008128:	0800c52c 	.word	0x0800c52c

0800812c <_ZN18evCounterClockwiseD0Ev>:
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	0018      	movs	r0, r3
 8008138:	f7ff ffe6 	bl	8008108 <_ZN18evCounterClockwiseD1Ev>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2114      	movs	r1, #20
 8008140:	0018      	movs	r0, r3
 8008142:	f002 ff56 	bl	800aff2 <_ZdlPvj>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	0018      	movs	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	b002      	add	sp, #8
 800814e:	bd80      	pop	{r7, pc}

08008150 <_ZN6evDoneC1Ev>:
#include "events.h"
#include "evDone.h"

evDone::evDone() :
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evDoneId)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	2107      	movs	r1, #7
 800815e:	0018      	movs	r0, r3
 8008160:	f000 fabe 	bl	80086e0 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8008164:	4a03      	ldr	r2, [pc, #12]	; (8008174 <_ZN6evDoneC1Ev+0x24>)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b002      	add	sp, #8
 8008172:	bd80      	pop	{r7, pc}
 8008174:	0800c540 	.word	0x0800c540

08008178 <_ZN6evDoneD1Ev>:
#define EVDONE_H_

#include "xf/customevent.h"
#include "events.h"

class evDone : public XFCustomEvent
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	4a05      	ldr	r2, [pc, #20]	; (8008198 <_ZN6evDoneD1Ev+0x20>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff ff15 	bl	8007fb8 <_ZN13XFCustomEventD1Ev>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	0018      	movs	r0, r3
 8008192:	46bd      	mov	sp, r7
 8008194:	b002      	add	sp, #8
 8008196:	bd80      	pop	{r7, pc}
 8008198:	0800c540 	.word	0x0800c540

0800819c <_ZN6evDoneD0Ev>:
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	0018      	movs	r0, r3
 80081a8:	f7ff ffe6 	bl	8008178 <_ZN6evDoneD1Ev>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2114      	movs	r1, #20
 80081b0:	0018      	movs	r0, r3
 80081b2:	f002 ff1e 	bl	800aff2 <_ZdlPvj>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	0018      	movs	r0, r3
 80081ba:	46bd      	mov	sp, r7
 80081bc:	b002      	add	sp, #8
 80081be:	bd80      	pop	{r7, pc}

080081c0 <_ZN13evFlagTriggerC1Ev>:
#include "events.h"
#include "evFlagTrigger.h"

evFlagTrigger::evFlagTrigger() :
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evFlagTriggerId)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	2105      	movs	r1, #5
 80081ce:	0018      	movs	r0, r3
 80081d0:	f000 fa86 	bl	80086e0 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80081d4:	4a03      	ldr	r2, [pc, #12]	; (80081e4 <_ZN13evFlagTriggerC1Ev+0x24>)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	0018      	movs	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	b002      	add	sp, #8
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	0800c554 	.word	0x0800c554

080081e8 <_ZN13evFlagTriggerD1Ev>:
#define EVFLAGTRIGGER_H_

#include "xf/customevent.h"
#include "events.h"

class evFlagTrigger : public XFCustomEvent
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	4a05      	ldr	r2, [pc, #20]	; (8008208 <_ZN13evFlagTriggerD1Ev+0x20>)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	0018      	movs	r0, r3
 80081fa:	f7ff fedd 	bl	8007fb8 <_ZN13XFCustomEventD1Ev>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	0018      	movs	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	b002      	add	sp, #8
 8008206:	bd80      	pop	{r7, pc}
 8008208:	0800c554 	.word	0x0800c554

0800820c <_ZN13evFlagTriggerD0Ev>:
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	0018      	movs	r0, r3
 8008218:	f7ff ffe6 	bl	80081e8 <_ZN13evFlagTriggerD1Ev>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2114      	movs	r1, #20
 8008220:	0018      	movs	r0, r3
 8008222:	f002 fee6 	bl	800aff2 <_ZdlPvj>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	0018      	movs	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	b002      	add	sp, #8
 800822e:	bd80      	pop	{r7, pc}

08008230 <_ZN10evGoToZeroC1Ev>:
 */

#include "events.h"
#include "evGoToZero.h"

evGoToZero::evGoToZero() :
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evGoToZeroId)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	2108      	movs	r1, #8
 800823e:	0018      	movs	r0, r3
 8008240:	f000 fa4e 	bl	80086e0 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 8008244:	4a03      	ldr	r2, [pc, #12]	; (8008254 <_ZN10evGoToZeroC1Ev+0x24>)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	0018      	movs	r0, r3
 800824e:	46bd      	mov	sp, r7
 8008250:	b002      	add	sp, #8
 8008252:	bd80      	pop	{r7, pc}
 8008254:	0800c568 	.word	0x0800c568

08008258 <_ZN10evGoToZeroD1Ev>:
#define EVGOTOZERO_H_

#include "xf/customevent.h"
#include "events.h"

class evGoToZero : public XFCustomEvent
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	4a05      	ldr	r2, [pc, #20]	; (8008278 <_ZN10evGoToZeroD1Ev+0x20>)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	0018      	movs	r0, r3
 800826a:	f7ff fea5 	bl	8007fb8 <_ZN13XFCustomEventD1Ev>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	0018      	movs	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	b002      	add	sp, #8
 8008276:	bd80      	pop	{r7, pc}
 8008278:	0800c568 	.word	0x0800c568

0800827c <_ZN10evGoToZeroD0Ev>:
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	0018      	movs	r0, r3
 8008288:	f7ff ffe6 	bl	8008258 <_ZN10evGoToZeroD1Ev>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2114      	movs	r1, #20
 8008290:	0018      	movs	r0, r3
 8008292:	f002 feae 	bl	800aff2 <_ZdlPvj>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	0018      	movs	r0, r3
 800829a:	46bd      	mov	sp, r7
 800829c:	b002      	add	sp, #8
 800829e:	bd80      	pop	{r7, pc}

080082a0 <_ZN8evSpiIrqC1Ev>:
#include "events.h"
#include "evSpiIrq.h"


evSpiIrq::evSpiIrq() :
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
	XFCustomEvent(evSpiIrqId)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	2101      	movs	r1, #1
 80082ae:	0018      	movs	r0, r3
 80082b0:	f000 fa16 	bl	80086e0 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>
 80082b4:	4a03      	ldr	r2, [pc, #12]	; (80082c4 <_ZN8evSpiIrqC1Ev+0x24>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
{
	//setDeleteAfterConsume(false);
}
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	0018      	movs	r0, r3
 80082be:	46bd      	mov	sp, r7
 80082c0:	b002      	add	sp, #8
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	0800c57c 	.word	0x0800c57c

080082c8 <_ZN8evSpiIrqD1Ev>:
#define EVSPIIRQ_H_

#include "xf/customevent.h"
#include "events.h"

class evSpiIrq : public XFCustomEvent
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	4a05      	ldr	r2, [pc, #20]	; (80082e8 <_ZN8evSpiIrqD1Ev+0x20>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	0018      	movs	r0, r3
 80082da:	f7ff fe6d 	bl	8007fb8 <_ZN13XFCustomEventD1Ev>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	0018      	movs	r0, r3
 80082e2:	46bd      	mov	sp, r7
 80082e4:	b002      	add	sp, #8
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	0800c57c 	.word	0x0800c57c

080082ec <_ZN8evSpiIrqD0Ev>:
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	0018      	movs	r0, r3
 80082f8:	f7ff ffe6 	bl	80082c8 <_ZN8evSpiIrqD1Ev>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2114      	movs	r1, #20
 8008300:	0018      	movs	r0, r3
 8008302:	f002 fe76 	bl	800aff2 <_ZdlPvj>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	0018      	movs	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	b002      	add	sp, #8
 800830e:	bd80      	pop	{r7, pc}

08008310 <_Z5inISRv>:

volatile int bInISR = 0;
volatile int bOMEnterCriticalRegionNested = 0;

int inISR()
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
	// Variable must be put to TRUE in every ISR to indicate execution
	// of an ISR and need to put back to FALSE before leaving ISR.
	return bInISR;
 8008314:	4b02      	ldr	r3, [pc, #8]	; (8008320 <_Z5inISRv+0x10>)
 8008316:	681b      	ldr	r3, [r3, #0]
}
 8008318:	0018      	movs	r0, r3
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	200000e8 	.word	0x200000e8

08008324 <_Z13enterCriticalv>:

void enterCritical()
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!inISR())
 8008328:	f7ff fff2 	bl	8008310 <_Z5inISRv>
 800832c:	0003      	movs	r3, r0
 800832e:	425a      	negs	r2, r3
 8008330:	4153      	adcs	r3, r2
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00c      	beq.n	8008352 <_Z13enterCriticalv+0x2e>
	{
		if (!bOMEnterCriticalRegionNested)
 8008338:	4b07      	ldr	r3, [pc, #28]	; (8008358 <_Z13enterCriticalv+0x34>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	425a      	negs	r2, r3
 800833e:	4153      	adcs	r3, r2
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d000      	beq.n	8008348 <_Z13enterCriticalv+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008346:	b672      	cpsid	i
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		bOMEnterCriticalRegionNested++;
 8008348:	4b03      	ldr	r3, [pc, #12]	; (8008358 <_Z13enterCriticalv+0x34>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	1c5a      	adds	r2, r3, #1
 800834e:	4b02      	ldr	r3, [pc, #8]	; (8008358 <_Z13enterCriticalv+0x34>)
 8008350:	601a      	str	r2, [r3, #0]
	}
}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200000ec 	.word	0x200000ec

0800835c <_Z12exitCriticalv>:

void exitCritical()
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!inISR())
 8008360:	f7ff ffd6 	bl	8008310 <_Z5inISRv>
 8008364:	0003      	movs	r3, r0
 8008366:	425a      	negs	r2, r3
 8008368:	4153      	adcs	r3, r2
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <_Z12exitCriticalv+0x2e>
	{
		bOMEnterCriticalRegionNested--;
 8008370:	4b07      	ldr	r3, [pc, #28]	; (8008390 <_Z12exitCriticalv+0x34>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	1e5a      	subs	r2, r3, #1
 8008376:	4b06      	ldr	r3, [pc, #24]	; (8008390 <_Z12exitCriticalv+0x34>)
 8008378:	601a      	str	r2, [r3, #0]

		if (!bOMEnterCriticalRegionNested)
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <_Z12exitCriticalv+0x34>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	425a      	negs	r2, r3
 8008380:	4153      	adcs	r3, r2
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d000      	beq.n	800838a <_Z12exitCriticalv+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8008388:	b662      	cpsie	i
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	200000ec 	.word	0x200000ec

08008394 <_ZN7XFEvent11setBehaviorEPN9interface10XFReactiveE>:
    inline void setBehavior(interface::XFReactive * pBehavior) { _pBehavior = pBehavior; }
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	60da      	str	r2, [r3, #12]
 80083a4:	46c0      	nop			; (mov r8, r8)
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b002      	add	sp, #8
 80083aa:	bd80      	pop	{r7, pc}

080083ac <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>:

	/**
	 * Checks if both variables contain the same event status.
	 */
    bool operator == (const XFEventStatus::eEventStatus & eventStatus) const
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	{
		return (this->_status == eventStatus);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	781a      	ldrb	r2, [r3, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	425a      	negs	r2, r3
 80083c2:	4153      	adcs	r3, r2
 80083c4:	b2db      	uxtb	r3, r3
	}
 80083c6:	0018      	movs	r0, r3
 80083c8:	46bd      	mov	sp, r7
 80083ca:	b002      	add	sp, #8
 80083cc:	bd80      	pop	{r7, pc}

080083ce <_ZNK10XFBehavior16hasOwnDispatcherEv>:
    inline bool hasOwnDispatcher() const { return _hasOwnDispatcher; }	///< True if behavior has its own dispatcher.
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	7a1b      	ldrb	r3, [r3, #8]
 80083da:	0018      	movs	r0, r3
 80083dc:	46bd      	mov	sp, r7
 80083de:	b002      	add	sp, #8
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <_ZN9interface10XFReactiveC1Ev>:

protected:
    virtual TerminateBehavior process(const XFEvent * pEvent) = 0;  ///< Called by the dispatcher to process an event.

protected:
    XFReactive() = default;
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	4a03      	ldr	r2, [pc, #12]	; (80083fc <_ZN9interface10XFReactiveC1Ev+0x18>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	0018      	movs	r0, r3
 80083f6:	46bd      	mov	sp, r7
 80083f8:	b002      	add	sp, #8
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	0800c5b8 	.word	0x0800c5b8

08008400 <_ZN9interface10XFReactiveD1Ev>:
    virtual ~XFReactive() = default;
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	4a03      	ldr	r2, [pc, #12]	; (8008418 <_ZN9interface10XFReactiveD1Ev+0x18>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b002      	add	sp, #8
 8008416:	bd80      	pop	{r7, pc}
 8008418:	0800c5b8 	.word	0x0800c5b8

0800841c <_ZN9interface10XFReactiveD0Ev>:
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	0018      	movs	r0, r3
 8008428:	f7ff ffea 	bl	8008400 <_ZN9interface10XFReactiveD1Ev>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2104      	movs	r1, #4
 8008430:	0018      	movs	r0, r3
 8008432:	f002 fdde 	bl	800aff2 <_ZdlPvj>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0018      	movs	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	b002      	add	sp, #8
 800843e:	bd80      	pop	{r7, pc}

08008440 <_ZN10XFBehaviorC1Eb>:
#include "xf/initialevent.h"
#include "xf/behavior.h"

using interface::XFResourceFactory;

XFBehavior::XFBehavior(bool ownDispatcher /* = false */) :
 8008440:	b590      	push	{r4, r7, lr}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	000a      	movs	r2, r1
 800844a:	1cfb      	adds	r3, r7, #3
 800844c:	701a      	strb	r2, [r3, #0]
    _pDispatcher(nullptr),
    _hasOwnDispatcher(ownDispatcher),
    deleteOnTerminate_(false),
    _pCurrentEvent(nullptr)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	0018      	movs	r0, r3
 8008452:	f7ff ffc7 	bl	80083e4 <_ZN9interface10XFReactiveC1Ev>
 8008456:	4a21      	ldr	r2, [pc, #132]	; (80084dc <_ZN10XFBehaviorC1Eb+0x9c>)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	605a      	str	r2, [r3, #4]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	1cfa      	adds	r2, r7, #3
 8008466:	7812      	ldrb	r2, [r2, #0]
 8008468:	721a      	strb	r2, [r3, #8]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	725a      	strb	r2, [r3, #9]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	60da      	str	r2, [r3, #12]
{
    if (ownDispatcher)
 8008476:	1cfb      	adds	r3, r7, #3
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00b      	beq.n	8008496 <_ZN10XFBehaviorC1Eb+0x56>
    {
        _pDispatcher = XFResourceFactory::getInstance()->createDispatcher();
 800847e:	f000 fc87 	bl	8008d90 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8008482:	0002      	movs	r2, r0
 8008484:	6813      	ldr	r3, [r2, #0]
 8008486:	3304      	adds	r3, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	0010      	movs	r0, r2
 800848c:	4798      	blx	r3
 800848e:	0002      	movs	r2, r0
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	605a      	str	r2, [r3, #4]
 8008494:	e009      	b.n	80084aa <_ZN10XFBehaviorC1Eb+0x6a>
    }
    else
    {
        _pDispatcher = XFResourceFactory::getInstance()->getDefaultDispatcher();
 8008496:	f000 fc7b 	bl	8008d90 <_ZN9interface17XFResourceFactory11getInstanceEv>
 800849a:	0002      	movs	r2, r0
 800849c:	6813      	ldr	r3, [r2, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	0010      	movs	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	0002      	movs	r2, r0
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]

    // Force hasOwnDispatcher attribute to false in case actual
    // dispatcher is the default dispatcher. This may happen
    // if in an IDF an other dispatcher is requested, but
    // only the default dispatcher is present.
    if (_pDispatcher == XFResourceFactory::getInstance()->getDefaultDispatcher())
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685c      	ldr	r4, [r3, #4]
 80084ae:	f000 fc6f 	bl	8008d90 <_ZN9interface17XFResourceFactory11getInstanceEv>
 80084b2:	0002      	movs	r2, r0
 80084b4:	6813      	ldr	r3, [r2, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	0010      	movs	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	0003      	movs	r3, r0
 80084be:	1ae3      	subs	r3, r4, r3
 80084c0:	425a      	negs	r2, r3
 80084c2:	4153      	adcs	r3, r2
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <_ZN10XFBehaviorC1Eb+0x90>
    {
        _hasOwnDispatcher = false;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	721a      	strb	r2, [r3, #8]
    }
}
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	0018      	movs	r0, r3
 80084d4:	46bd      	mov	sp, r7
 80084d6:	b003      	add	sp, #12
 80084d8:	bd90      	pop	{r4, r7, pc}
 80084da:	46c0      	nop			; (mov r8, r8)
 80084dc:	0800c590 	.word	0x0800c590

080084e0 <_ZN10XFBehaviorD1Ev>:

XFBehavior::~XFBehavior()
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	4a05      	ldr	r2, [pc, #20]	; (8008500 <_ZN10XFBehaviorD1Ev+0x20>)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7ff ff85 	bl	8008400 <_ZN9interface10XFReactiveD1Ev>
{

}
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	0018      	movs	r0, r3
 80084fa:	46bd      	mov	sp, r7
 80084fc:	b002      	add	sp, #8
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	0800c590 	.word	0x0800c590

08008504 <_ZN10XFBehavior13startBehaviorEv>:

void XFBehavior::startBehavior()
{
 8008504:	b5b0      	push	{r4, r5, r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
    // Send initial event to state machine
    GEN(XFInitialEvent());
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	330c      	adds	r3, #12
 8008512:	681c      	ldr	r4, [r3, #0]
 8008514:	2010      	movs	r0, #16
 8008516:	f002 fd70 	bl	800affa <_Znwj>
 800851a:	0003      	movs	r3, r0
 800851c:	001d      	movs	r5, r3
 800851e:	0028      	movs	r0, r5
 8008520:	f000 f8f8 	bl	8008714 <_ZN14XFInitialEventC1Ev>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	0029      	movs	r1, r5
 8008528:	0018      	movs	r0, r3
 800852a:	47a0      	blx	r4

    // Start dispatcher if behavior has its own dispatcher
    if (hasOwnDispatcher())
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	0018      	movs	r0, r3
 8008530:	f7ff ff4d 	bl	80083ce <_ZNK10XFBehavior16hasOwnDispatcherEv>
 8008534:	1e03      	subs	r3, r0, #0
 8008536:	d009      	beq.n	800854c <_ZN10XFBehavior13startBehaviorEv+0x48>
    {
        getDispatcher()->start();
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	0018      	movs	r0, r3
 800853c:	f000 f86d 	bl	800861a <_ZN10XFBehavior13getDispatcherEv>
 8008540:	0002      	movs	r2, r0
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	330c      	adds	r3, #12
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	0010      	movs	r0, r2
 800854a:	4798      	blx	r3
    }
}
 800854c:	46c0      	nop			; (mov r8, r8)
 800854e:	46bd      	mov	sp, r7
 8008550:	b002      	add	sp, #8
 8008552:	bdb0      	pop	{r4, r5, r7, pc}

08008554 <_ZN10XFBehavior9pushEventEP7XFEvent>:

void XFBehavior::pushEvent(XFEvent * pEvent)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
    // Set owner
    pEvent->setBehavior(this);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	0011      	movs	r1, r2
 8008564:	0018      	movs	r0, r3
 8008566:	f7ff ff15 	bl	8008394 <_ZN7XFEvent11setBehaviorEPN9interface10XFReactiveE>
    // Push to dispatchers event queue
    getDispatcher()->pushEvent(pEvent);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	0018      	movs	r0, r3
 800856e:	f000 f854 	bl	800861a <_ZN10XFBehavior13getDispatcherEv>
 8008572:	0002      	movs	r2, r0
 8008574:	6813      	ldr	r3, [r2, #0]
 8008576:	3314      	adds	r3, #20
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	0010      	movs	r0, r2
 800857e:	4798      	blx	r3
}
 8008580:	46c0      	nop			; (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	b002      	add	sp, #8
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZNK10XFBehavior17deleteOnTerminateEv>:

bool XFBehavior::deleteOnTerminate() const
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    return deleteOnTerminate_;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7a5b      	ldrb	r3, [r3, #9]
}
 8008594:	0018      	movs	r0, r3
 8008596:	46bd      	mov	sp, r7
 8008598:	b002      	add	sp, #8
 800859a:	bd80      	pop	{r7, pc}

0800859c <_ZN10XFBehavior20setDeleteOnTerminateEb>:

void XFBehavior::setDeleteOnTerminate(bool deleteBehaviour)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	000a      	movs	r2, r1
 80085a6:	1cfb      	adds	r3, r7, #3
 80085a8:	701a      	strb	r2, [r3, #0]
    deleteOnTerminate_ = deleteBehaviour;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	1cfa      	adds	r2, r7, #3
 80085ae:	7812      	ldrb	r2, [r2, #0]
 80085b0:	725a      	strb	r2, [r3, #9]
}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	46bd      	mov	sp, r7
 80085b6:	b002      	add	sp, #8
 80085b8:	bd80      	pop	{r7, pc}

080085ba <_ZN10XFBehavior7processEPK7XFEvent>:

XFBehavior::TerminateBehavior XFBehavior::process(const XFEvent * pEvent)
{
 80085ba:	b590      	push	{r4, r7, lr}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
    XFEventStatus eventStatus;
 80085c4:	240c      	movs	r4, #12
 80085c6:	193b      	adds	r3, r7, r4
 80085c8:	2100      	movs	r1, #0
 80085ca:	0018      	movs	r0, r3
 80085cc:	f7fc fef9 	bl	80053c2 <_ZN13XFEventStatusC1ENS_12eEventStatusE>

    setCurrentEvent(pEvent);
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	0011      	movs	r1, r2
 80085d6:	0018      	movs	r0, r3
 80085d8:	f000 f829 	bl	800862e <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>

    eventStatus = processEvent();
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	331c      	adds	r3, #28
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	0010      	movs	r0, r2
 80085e8:	4798      	blx	r3
 80085ea:	1c03      	adds	r3, r0, #0
 80085ec:	1c1a      	adds	r2, r3, #0
 80085ee:	193b      	adds	r3, r7, r4
 80085f0:	701a      	strb	r2, [r3, #0]

    setCurrentEvent(nullptr);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2100      	movs	r1, #0
 80085f6:	0018      	movs	r0, r3
 80085f8:	f000 f819 	bl	800862e <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>

    return (eventStatus == XFEventStatus::Terminate);
 80085fc:	210f      	movs	r1, #15
 80085fe:	187b      	adds	r3, r7, r1
 8008600:	2208      	movs	r2, #8
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	187a      	adds	r2, r7, r1
 8008606:	193b      	adds	r3, r7, r4
 8008608:	0011      	movs	r1, r2
 800860a:	0018      	movs	r0, r3
 800860c:	f7ff fece 	bl	80083ac <_ZNK13XFEventStatuseqERKNS_12eEventStatusE>
 8008610:	0003      	movs	r3, r0
}
 8008612:	0018      	movs	r0, r3
 8008614:	46bd      	mov	sp, r7
 8008616:	b005      	add	sp, #20
 8008618:	bd90      	pop	{r4, r7, pc}

0800861a <_ZN10XFBehavior13getDispatcherEv>:

interface::XFDispatcher * XFBehavior::getDispatcher()
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
    return _pDispatcher;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
}
 8008626:	0018      	movs	r0, r3
 8008628:	46bd      	mov	sp, r7
 800862a:	b002      	add	sp, #8
 800862c:	bd80      	pop	{r7, pc}

0800862e <_ZN10XFBehavior15setCurrentEventEPK7XFEvent>:

void XFBehavior::setCurrentEvent(const XFEvent * pEvent)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
    _pCurrentEvent = pEvent;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	60da      	str	r2, [r3, #12]
}
 800863e:	46c0      	nop			; (mov r8, r8)
 8008640:	46bd      	mov	sp, r7
 8008642:	b002      	add	sp, #8
 8008644:	bd80      	pop	{r7, pc}

08008646 <_ZNK10XFBehavior15getCurrentEventEv>:

const XFEvent * XFBehavior::getCurrentEvent() const
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
    return _pCurrentEvent;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
}
 8008652:	0018      	movs	r0, r3
 8008654:	46bd      	mov	sp, r7
 8008656:	b002      	add	sp, #8
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <_ZN10XFBehavior17getCurrentTimeoutEv>:

const XFTimeout * XFBehavior::getCurrentTimeout()
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
    assert(getCurrentEvent()->getEventType() == XFEvent::Timeout);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	0018      	movs	r0, r3
 8008668:	f7ff ffed 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 800866c:	0003      	movs	r3, r0
 800866e:	0018      	movs	r0, r3
 8008670:	f7fc fe92 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8008674:	0003      	movs	r3, r0
 8008676:	2b04      	cmp	r3, #4
 8008678:	d005      	beq.n	8008686 <_ZN10XFBehavior17getCurrentTimeoutEv+0x2a>
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <_ZN10XFBehavior17getCurrentTimeoutEv+0x3c>)
 800867c:	4a07      	ldr	r2, [pc, #28]	; (800869c <_ZN10XFBehavior17getCurrentTimeoutEv+0x40>)
 800867e:	4808      	ldr	r0, [pc, #32]	; (80086a0 <_ZN10XFBehavior17getCurrentTimeoutEv+0x44>)
 8008680:	2165      	movs	r1, #101	; 0x65
 8008682:	f002 fcf9 	bl	800b078 <__assert_func>

    return static_cast<const XFTimeout *>(getCurrentEvent());
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	0018      	movs	r0, r3
 800868a:	f7ff ffdc 	bl	8008646 <_ZNK10XFBehavior15getCurrentEventEv>
 800868e:	0003      	movs	r3, r0
}
 8008690:	0018      	movs	r0, r3
 8008692:	46bd      	mov	sp, r7
 8008694:	b002      	add	sp, #8
 8008696:	bd80      	pop	{r7, pc}
 8008698:	0800c138 	.word	0x0800c138
 800869c:	0800c5d4 	.word	0x0800c5d4
 80086a0:	0800c170 	.word	0x0800c170

080086a4 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>:
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : _eventType(eventType), _id(id), _pBehavior(pBehavior) {}
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	200b      	movs	r0, #11
 80086b2:	183b      	adds	r3, r7, r0
 80086b4:	1c0a      	adds	r2, r1, #0
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	4a08      	ldr	r2, [pc, #32]	; (80086dc <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE+0x38>)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	183a      	adds	r2, r7, r0
 80086c2:	7812      	ldrb	r2, [r2, #0]
 80086c4:	711a      	strb	r2, [r3, #4]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	609a      	str	r2, [r3, #8]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	60da      	str	r2, [r3, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	0018      	movs	r0, r3
 80086d6:	46bd      	mov	sp, r7
 80086d8:	b004      	add	sp, #16
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	0800c504 	.word	0x0800c504

080086e0 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE>:
#include "xf/customevent.h"

XFCustomEvent::XFCustomEvent(int id, interface::XFReactive * pBehavior)
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
    : XFEvent(XFEvent::Event, id, pBehavior),
      _bDeleteAfterConsume(true)
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	2103      	movs	r1, #3
 80086f4:	f7ff ffd6 	bl	80086a4 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 80086f8:	4a05      	ldr	r2, [pc, #20]	; (8008710 <_ZN13XFCustomEventC1EiPN9interface10XFReactiveE+0x30>)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	741a      	strb	r2, [r3, #16]
{

}
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	0018      	movs	r0, r3
 8008708:	46bd      	mov	sp, r7
 800870a:	b004      	add	sp, #16
 800870c:	bd80      	pop	{r7, pc}
 800870e:	46c0      	nop			; (mov r8, r8)
 8008710:	0800c4f0 	.word	0x0800c4f0

08008714 <_ZN14XFInitialEventC1Ev>:
#include "xf/initialevent.h"

XFInitialEvent::XFInitialEvent()
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
    : XFEvent(XFEvent::Initial, 0, nullptr)
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	2300      	movs	r3, #0
 8008720:	2200      	movs	r2, #0
 8008722:	2101      	movs	r1, #1
 8008724:	f7ff ffbe 	bl	80086a4 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 8008728:	4a03      	ldr	r2, [pc, #12]	; (8008738 <_ZN14XFInitialEventC1Ev+0x24>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
{
}
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	0018      	movs	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	b002      	add	sp, #8
 8008736:	bd80      	pop	{r7, pc}
 8008738:	0800c610 	.word	0x0800c610

0800873c <_ZNK14XFInitialEvent18deleteAfterConsumeEv>:

bool XFInitialEvent::deleteAfterConsume() const
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
    return true;
 8008744:	2301      	movs	r3, #1
}
 8008746:	0018      	movs	r0, r3
 8008748:	46bd      	mov	sp, r7
 800874a:	b002      	add	sp, #8
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <_ZN14XFInitialEventD1Ev>:
 * @brief Initial event to start a behavior.
 *
 * Represents for example the first transition executed
 * in a state machine.
 */
class XFInitialEvent : public XFEvent
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	4a05      	ldr	r2, [pc, #20]	; (8008770 <_ZN14XFInitialEventD1Ev+0x20>)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	0018      	movs	r0, r3
 8008762:	f7ff fbf5 	bl	8007f50 <_ZN7XFEventD1Ev>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	0018      	movs	r0, r3
 800876a:	46bd      	mov	sp, r7
 800876c:	b002      	add	sp, #8
 800876e:	bd80      	pop	{r7, pc}
 8008770:	0800c610 	.word	0x0800c610

08008774 <_ZN14XFInitialEventD0Ev>:
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	0018      	movs	r0, r3
 8008780:	f7ff ffe6 	bl	8008750 <_ZN14XFInitialEventD1Ev>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2110      	movs	r1, #16
 8008788:	0018      	movs	r0, r3
 800878a:	f002 fc32 	bl	800aff2 <_ZdlPvj>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	0018      	movs	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	b002      	add	sp, #8
 8008796:	bd80      	pop	{r7, pc}

08008798 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE>:
#include "xf/nulltransition.h"

XFNullTransition::XFNullTransition(interface::XFReactive * pBehavior)
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
 : XFEvent(XFEvent::NullTransition, 0, pBehavior)
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2200      	movs	r2, #0
 80087a8:	2102      	movs	r1, #2
 80087aa:	f7ff ff7b 	bl	80086a4 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 80087ae:	4a04      	ldr	r2, [pc, #16]	; (80087c0 <_ZN16XFNullTransitionC1EPN9interface10XFReactiveE+0x28>)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
{
}
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	0018      	movs	r0, r3
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b002      	add	sp, #8
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	0800c624 	.word	0x0800c624

080087c4 <_ZNK16XFNullTransition18deleteAfterConsumeEv>:

bool XFNullTransition::deleteAfterConsume() const
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
    return true;
 80087cc:	2301      	movs	r3, #1
}
 80087ce:	0018      	movs	r0, r3
 80087d0:	46bd      	mov	sp, r7
 80087d2:	b002      	add	sp, #8
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <_ZN16XFNullTransitionD1Ev>:
 * Represents a transition in a state machine having no trigger.
 *
 * In case one wants to directly transition from one state to
 * an other (without a trigger) a null transition must be pushed.
 */
class XFNullTransition : public XFEvent
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	4a05      	ldr	r2, [pc, #20]	; (80087f8 <_ZN16XFNullTransitionD1Ev+0x20>)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	0018      	movs	r0, r3
 80087ea:	f7ff fbb1 	bl	8007f50 <_ZN7XFEventD1Ev>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	0018      	movs	r0, r3
 80087f2:	46bd      	mov	sp, r7
 80087f4:	b002      	add	sp, #8
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	0800c624 	.word	0x0800c624

080087fc <_ZN16XFNullTransitionD0Ev>:
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	0018      	movs	r0, r3
 8008808:	f7ff ffe6 	bl	80087d8 <_ZN16XFNullTransitionD1Ev>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2110      	movs	r1, #16
 8008810:	0018      	movs	r0, r3
 8008812:	f002 fbee 	bl	800aff2 <_ZdlPvj>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	0018      	movs	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	b002      	add	sp, #8
 800881e:	bd80      	pop	{r7, pc}

08008820 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
#include "xf/timeout.h"

XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]
 : XFEvent(XFEvent::Timeout, id, pBehavior),
   _interval(interval),
   _relTicks(interval)
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	2104      	movs	r1, #4
 8008836:	f7ff ff35 	bl	80086a4 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 800883a:	4a07      	ldr	r2, [pc, #28]	; (8008858 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x38>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	611a      	str	r2, [r3, #16]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	615a      	str	r2, [r3, #20]
{
}
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	0018      	movs	r0, r3
 8008850:	46bd      	mov	sp, r7
 8008852:	b004      	add	sp, #16
 8008854:	bd80      	pop	{r7, pc}
 8008856:	46c0      	nop			; (mov r8, r8)
 8008858:	0800c638 	.word	0x0800c638

0800885c <_ZNK9XFTimeouteqERKS_>:

bool XFTimeout::operator ==(const XFTimeout & timeout) const
{
 800885c:	b590      	push	{r4, r7, lr}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
    // Check behavior and timeout id attributes, if there are equal
    return (_pBehavior == timeout._pBehavior && getId() == timeout.getId()) ? true : false;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68da      	ldr	r2, [r3, #12]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	429a      	cmp	r2, r3
 8008870:	d10d      	bne.n	800888e <_ZNK9XFTimeouteqERKS_+0x32>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	0018      	movs	r0, r3
 8008876:	f7fc fd9a 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 800887a:	0004      	movs	r4, r0
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	0018      	movs	r0, r3
 8008880:	f7fc fd95 	bl	80053ae <_ZNK7XFEvent5getIdEv>
 8008884:	0003      	movs	r3, r0
 8008886:	429c      	cmp	r4, r3
 8008888:	d101      	bne.n	800888e <_ZNK9XFTimeouteqERKS_+0x32>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <_ZNK9XFTimeouteqERKS_+0x34>
 800888e:	2300      	movs	r3, #0
}
 8008890:	0018      	movs	r0, r3
 8008892:	46bd      	mov	sp, r7
 8008894:	b003      	add	sp, #12
 8008896:	bd90      	pop	{r4, r7, pc}

08008898 <_ZNK9XFTimeout18deleteAfterConsumeEv>:

bool XFTimeout::deleteAfterConsume() const
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
    return true;
 80088a0:	2301      	movs	r3, #1
}
 80088a2:	0018      	movs	r0, r3
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b002      	add	sp, #8
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	4a05      	ldr	r2, [pc, #20]	; (80088cc <_ZN9XFTimeoutD1Ev+0x20>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	0018      	movs	r0, r3
 80088be:	f7ff fb47 	bl	8007f50 <_ZN7XFEventD1Ev>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	0018      	movs	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b002      	add	sp, #8
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	0800c638 	.word	0x0800c638

080088d0 <_ZN9XFTimeoutD0Ev>:
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	0018      	movs	r0, r3
 80088dc:	f7ff ffe6 	bl	80088ac <_ZN9XFTimeoutD1Ev>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2118      	movs	r1, #24
 80088e4:	0018      	movs	r0, r3
 80088e6:	f002 fb84 	bl	800aff2 <_ZdlPvj>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	0018      	movs	r0, r3
 80088ee:	46bd      	mov	sp, r7
 80088f0:	b002      	add	sp, #8
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <_ZNK7XFEvent11getBehaviorEv>:
    inline interface::XFReactive * getBehavior() const { return _pBehavior; }
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	0018      	movs	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	b002      	add	sp, #8
 8008906:	bd80      	pop	{r7, pc}

08008908 <_ZNK9interface12XFDispatcher9getThreadEv>:
     * @brief Returns pointer to thread executing the behavior.
     *
     * Within an IDF no threads are present and this method returns
     * always null.
     */
    virtual interface::XFThread * getThread() const { return nullptr; }
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	2300      	movs	r3, #0
 8008912:	0018      	movs	r0, r3
 8008914:	46bd      	mov	sp, r7
 8008916:	b002      	add	sp, #8
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZNK19XFDispatcherDefault8isActiveEv>:
{
public:
	XFDispatcherDefault();
	virtual  ~XFDispatcherDefault();

	virtual bool isActive() const { return false; }		///< Default dispatcher does not have a composite thread.
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	2300      	movs	r3, #0
 8008924:	0018      	movs	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	b002      	add	sp, #8
 800892a:	bd80      	pop	{r7, pc}

0800892c <_ZN9interface12XFDispatcherC1Ev>:
    XFDispatcher() = default;
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	4a03      	ldr	r2, [pc, #12]	; (8008944 <_ZN9interface12XFDispatcherC1Ev+0x18>)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	0018      	movs	r0, r3
 800893e:	46bd      	mov	sp, r7
 8008940:	b002      	add	sp, #8
 8008942:	bd80      	pop	{r7, pc}
 8008944:	0800c684 	.word	0x0800c684

08008948 <_ZN9interface12XFDispatcherD1Ev>:
    virtual ~XFDispatcher() = default;
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	4a03      	ldr	r2, [pc, #12]	; (8008960 <_ZN9interface12XFDispatcherD1Ev+0x18>)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	0018      	movs	r0, r3
 800895a:	46bd      	mov	sp, r7
 800895c:	b002      	add	sp, #8
 800895e:	bd80      	pop	{r7, pc}
 8008960:	0800c684 	.word	0x0800c684

08008964 <_ZN9interface12XFDispatcherD0Ev>:
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	0018      	movs	r0, r3
 8008970:	f7ff ffea 	bl	8008948 <_ZN9interface12XFDispatcherD1Ev>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2104      	movs	r1, #4
 8008978:	0018      	movs	r0, r3
 800897a:	f002 fb3a 	bl	800aff2 <_ZdlPvj>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	0018      	movs	r0, r3
 8008982:	46bd      	mov	sp, r7
 8008984:	b002      	add	sp, #8
 8008986:	bd80      	pop	{r7, pc}

08008988 <_ZN19XFDispatcherDefaultC1Ev>:
using interface::XFTimeoutManager;
using interface::XFResourceFactory;
using interface::XFReactive;
using interface::XFMutex;

XFDispatcherDefault::XFDispatcherDefault() :
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	_bExecuting(false),
	_pMutex(nullptr)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	0018      	movs	r0, r3
 8008994:	f7ff ffca 	bl	800892c <_ZN9interface12XFDispatcherC1Ev>
 8008998:	4a10      	ldr	r2, [pc, #64]	; (80089dc <_ZN19XFDispatcherDefaultC1Ev+0x54>)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	711a      	strb	r2, [r3, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3308      	adds	r3, #8
 80089a8:	0018      	movs	r0, r3
 80089aa:	f001 fb53 	bl	800a054 <_ZN19XFEventQueueDefaultC1Ev>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
{
	_pMutex = XFMutex::create();
 80089b4:	f002 fa5e 	bl	800ae74 <_ZN9interface7XFMutex6createEv>
 80089b8:	0002      	movs	r2, r0
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	639a      	str	r2, [r3, #56]	; 0x38
	assert(_pMutex);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d105      	bne.n	80089d2 <_ZN19XFDispatcherDefaultC1Ev+0x4a>
 80089c6:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <_ZN19XFDispatcherDefaultC1Ev+0x58>)
 80089c8:	4a06      	ldr	r2, [pc, #24]	; (80089e4 <_ZN19XFDispatcherDefaultC1Ev+0x5c>)
 80089ca:	4807      	ldr	r0, [pc, #28]	; (80089e8 <_ZN19XFDispatcherDefaultC1Ev+0x60>)
 80089cc:	2118      	movs	r1, #24
 80089ce:	f002 fb53 	bl	800b078 <__assert_func>
}
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	0018      	movs	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	b002      	add	sp, #8
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	0800c64c 	.word	0x0800c64c
 80089e0:	0800c1d8 	.word	0x0800c1d8
 80089e4:	0800c6b4 	.word	0x0800c6b4
 80089e8:	0800c1e0 	.word	0x0800c1e0

080089ec <_ZN19XFDispatcherDefaultD1Ev>:

XFDispatcherDefault::~XFDispatcherDefault()
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	4a08      	ldr	r2, [pc, #32]	; (8008a18 <_ZN19XFDispatcherDefaultD1Ev+0x2c>)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3308      	adds	r3, #8
 80089fe:	0018      	movs	r0, r3
 8008a00:	f001 fb44 	bl	800a08c <_ZN19XFEventQueueDefaultD1Ev>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	0018      	movs	r0, r3
 8008a08:	f7ff ff9e 	bl	8008948 <_ZN9interface12XFDispatcherD1Ev>
{

}
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	0018      	movs	r0, r3
 8008a10:	46bd      	mov	sp, r7
 8008a12:	b002      	add	sp, #8
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	0800c64c 	.word	0x0800c64c

08008a1c <_ZN19XFDispatcherDefaultD0Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
}
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	0018      	movs	r0, r3
 8008a28:	f7ff ffe0 	bl	80089ec <_ZN19XFDispatcherDefaultD1Ev>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	213c      	movs	r1, #60	; 0x3c
 8008a30:	0018      	movs	r0, r3
 8008a32:	f002 fade 	bl	800aff2 <_ZdlPvj>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	0018      	movs	r0, r3
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b002      	add	sp, #8
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <_ZN19XFDispatcherDefault5startEv>:

void XFDispatcherDefault::start()
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
        assert(_pMutex);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d105      	bne.n	8008a5c <_ZN19XFDispatcherDefault5startEv+0x1c>
 8008a50:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <_ZN19XFDispatcherDefault5startEv+0x2c>)
 8008a52:	4a07      	ldr	r2, [pc, #28]	; (8008a70 <_ZN19XFDispatcherDefault5startEv+0x30>)
 8008a54:	4807      	ldr	r0, [pc, #28]	; (8008a74 <_ZN19XFDispatcherDefault5startEv+0x34>)
 8008a56:	2122      	movs	r1, #34	; 0x22
 8008a58:	f002 fb0e 	bl	800b078 <__assert_func>
	_bExecuting = true;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	711a      	strb	r2, [r3, #4]
}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	46bd      	mov	sp, r7
 8008a66:	b002      	add	sp, #8
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	0800c1d8 	.word	0x0800c1d8
 8008a70:	0800c6e0 	.word	0x0800c6e0
 8008a74:	0800c1e0 	.word	0x0800c1e0

08008a78 <_ZN19XFDispatcherDefault4stopEv>:

void XFDispatcherDefault::stop()
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
	_bExecuting = false;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	711a      	strb	r2, [r3, #4]
}
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	b002      	add	sp, #8
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <_ZN19XFDispatcherDefault9pushEventEP7XFEvent>:

void XFDispatcherDefault::pushEvent(XFEvent * pEvent)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
	_pMutex->lock();
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	0010      	movs	r0, r2
 8008aa8:	4798      	blx	r3
	{
#ifdef XF_TRACE_EVENT_PUSH_POP
	    Trace::out("Push event: 0x%x", pEvent);
#endif // XF_TRACE_EVENT_PUSH_POP
		_events.push(pEvent);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3308      	adds	r3, #8
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	0011      	movs	r1, r2
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f001 fb26 	bl	800a104 <_ZN19XFEventQueueDefault4pushEPK7XFEvent>
	}
	_pMutex->unlock();
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	0010      	movs	r0, r2
 8008ac8:	4798      	blx	r3
}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	46bd      	mov	sp, r7
 8008ace:	b002      	add	sp, #8
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <_ZN19XFDispatcherDefault15scheduleTimeoutEiiPN9interface10XFReactiveE>:

void XFDispatcherDefault::scheduleTimeout(int timeoutId, int interval, interface::XFReactive * pReactive)
{
 8008ad2:	b590      	push	{r4, r7, lr}
 8008ad4:	b085      	sub	sp, #20
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	603b      	str	r3, [r7, #0]
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 8008ae0:	f000 fa2e 	bl	8008f40 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8008ae4:	6803      	ldr	r3, [r0, #0]
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	681c      	ldr	r4, [r3, #0]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	47a0      	blx	r4
}
 8008af2:	46c0      	nop			; (mov r8, r8)
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b005      	add	sp, #20
 8008af8:	bd90      	pop	{r4, r7, pc}

08008afa <_ZN19XFDispatcherDefault17unscheduleTimeoutEiPN9interface10XFReactiveE>:

void XFDispatcherDefault::unscheduleTimeout(int timeoutId, interface::XFReactive * pReactive)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607a      	str	r2, [r7, #4]
	// Forward timeout to the timeout manager
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 8008b06:	f000 fa1b 	bl	8008f40 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8008b0a:	6803      	ldr	r3, [r0, #0]
 8008b0c:	3318      	adds	r3, #24
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	4798      	blx	r3
}
 8008b16:	46c0      	nop			; (mov r8, r8)
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	b004      	add	sp, #16
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <_ZN19XFDispatcherDefault7executeEPKv>:

int XFDispatcherDefault::execute(const void * param /* = nullptr */)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	6039      	str	r1, [r7, #0]
	(void)param;	// Parameter not used at the method

	while(_bExecuting)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	791b      	ldrb	r3, [r3, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d019      	beq.n	8008b64 <_ZN19XFDispatcherDefault7executeEPKv+0x46>
	{
		while (_events.empty() && _bExecuting)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3308      	adds	r3, #8
 8008b34:	0018      	movs	r0, r3
 8008b36:	f001 fad7 	bl	800a0e8 <_ZNK19XFEventQueueDefault5emptyEv>
 8008b3a:	1e03      	subs	r3, r0, #0
 8008b3c:	d005      	beq.n	8008b4a <_ZN19XFDispatcherDefault7executeEPKv+0x2c>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	791b      	ldrb	r3, [r3, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <_ZN19XFDispatcherDefault7executeEPKv+0x2c>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <_ZN19XFDispatcherDefault7executeEPKv+0x2e>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <_ZN19XFDispatcherDefault7executeEPKv+0x36>
		{
			continue;	// Wait until something to do
 8008b50:	46c0      	nop			; (mov r8, r8)
		while (_events.empty() && _bExecuting)
 8008b52:	e7ed      	b.n	8008b30 <_ZN19XFDispatcherDefault7executeEPKv+0x12>
		}

		executeOnce();  // Dispatch next event
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3328      	adds	r3, #40	; 0x28
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	0010      	movs	r0, r2
 8008b60:	4798      	blx	r3
	while(_bExecuting)
 8008b62:	e7e1      	b.n	8008b28 <_ZN19XFDispatcherDefault7executeEPKv+0xa>
	}

	return 0;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	0018      	movs	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b002      	add	sp, #8
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <_ZN19XFDispatcherDefault11executeOnceEv>:

int XFDispatcherDefault::executeOnce()
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
    if (!_events.empty() and _bExecuting)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3308      	adds	r3, #8
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f001 fab4 	bl	800a0e8 <_ZNK19XFEventQueueDefault5emptyEv>
 8008b80:	0003      	movs	r3, r0
 8008b82:	001a      	movs	r2, r3
 8008b84:	2301      	movs	r3, #1
 8008b86:	4053      	eors	r3, r2
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <_ZN19XFDispatcherDefault11executeOnceEv+0x2c>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	791b      	ldrb	r3, [r3, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <_ZN19XFDispatcherDefault11executeOnceEv+0x2c>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <_ZN19XFDispatcherDefault11executeOnceEv+0x2e>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d049      	beq.n	8008c34 <_ZN19XFDispatcherDefault11executeOnceEv+0xc6>
    {
        const XFEvent * pEvent;

        _pMutex->lock();
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3308      	adds	r3, #8
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	0010      	movs	r0, r2
 8008bb0:	4798      	blx	r3
        {
        	// Deque next event from queue
        	pEvent = _events.front(); _events.pop();
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	f001 fabf 	bl	800a13a <_ZN19XFEventQueueDefault5frontEv>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	f001 fad3 	bl	800a170 <_ZN19XFEventQueueDefault3popEv>
#ifdef XF_TRACE_EVENT_PUSH_POP
        	Trace::out("Pop event:  0x%x", pEvent);
#endif // XF_TRACE_EVENT_PUSH_POP
    	}
    	_pMutex->unlock();
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	0010      	movs	r0, r2
 8008bda:	4798      	blx	r3

        if (pEvent)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d028      	beq.n	8008c34 <_ZN19XFDispatcherDefault11executeOnceEv+0xc6>
        {
            // Forward the event to the behavioral class
            dispatchEvent(pEvent);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	332c      	adds	r3, #44	; 0x2c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	0010      	movs	r0, r2
 8008bf0:	4798      	blx	r3

            if (pEvent->getEventType() == XFEvent::Terminate)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	f7fc fbcf 	bl	8005398 <_ZNK7XFEvent12getEventTypeEv>
 8008bfa:	0003      	movs	r3, r0
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	425a      	negs	r2, r3
 8008c00:	4153      	adcs	r3, r2
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <_ZN19XFDispatcherDefault11executeOnceEv+0xa0>
            {
                // Exit the event loop
                _bExecuting = false;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	711a      	strb	r2, [r3, #4]
            }

            if (pEvent->deleteAfterConsume())
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3308      	adds	r3, #8
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	0010      	movs	r0, r2
 8008c1a:	4798      	blx	r3
 8008c1c:	1e03      	subs	r3, r0, #0
 8008c1e:	d009      	beq.n	8008c34 <_ZN19XFDispatcherDefault11executeOnceEv+0xc6>
            {
                // Remove the consumed event
                delete pEvent;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d006      	beq.n	8008c34 <_ZN19XFDispatcherDefault11executeOnceEv+0xc6>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	0010      	movs	r0, r2
 8008c32:	4798      	blx	r3
            }
        }
    }

    return _bExecuting;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	791b      	ldrb	r3, [r3, #4]
}
 8008c38:	0018      	movs	r0, r3
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	b004      	add	sp, #16
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent>:

void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const
{
 8008c40:	b5b0      	push	{r4, r5, r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
    XFReactive::TerminateBehavior terminateBehavior;

	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f7ff fe51 	bl	80088f4 <_ZNK7XFEvent11getBehaviorEv>
 8008c52:	0002      	movs	r2, r0
 8008c54:	6813      	ldr	r3, [r2, #0]
 8008c56:	3318      	adds	r3, #24
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	250f      	movs	r5, #15
 8008c5c:	197c      	adds	r4, r7, r5
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	0010      	movs	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	0003      	movs	r3, r0
 8008c66:	7023      	strb	r3, [r4, #0]

	// Check if behavior should be deleted
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 8008c68:	197b      	adds	r3, r7, r5
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00d      	beq.n	8008c8c <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x4c>
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	0018      	movs	r0, r3
 8008c74:	f7ff fe3e 	bl	80088f4 <_ZNK7XFEvent11getBehaviorEv>
 8008c78:	0002      	movs	r2, r0
 8008c7a:	6813      	ldr	r3, [r2, #0]
 8008c7c:	3310      	adds	r3, #16
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	0010      	movs	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	1e03      	subs	r3, r0, #0
 8008c86:	d001      	beq.n	8008c8c <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x4c>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e000      	b.n	8008c8e <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x4e>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00a      	beq.n	8008ca8 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x68>
	{
		delete pEvent->getBehavior();
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	0018      	movs	r0, r3
 8008c96:	f7ff fe2d 	bl	80088f4 <_ZNK7XFEvent11getBehaviorEv>
 8008c9a:	1e03      	subs	r3, r0, #0
 8008c9c:	d004      	beq.n	8008ca8 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x68>
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	3204      	adds	r2, #4
 8008ca2:	6812      	ldr	r2, [r2, #0]
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	4790      	blx	r2
	}
}
 8008ca8:	46c0      	nop			; (mov r8, r8)
 8008caa:	46bd      	mov	sp, r7
 8008cac:	b004      	add	sp, #16
 8008cae:	bdb0      	pop	{r4, r5, r7, pc}

08008cb0 <_ZN9interface17XFResourceFactoryD1Ev>:
     * @brief Returns a new mutex.
     * @return Pointer to new mutex.
     */
    virtual interface::XFMutex * createMutex() = 0;

    virtual ~XFResourceFactory() = default;
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	4a03      	ldr	r2, [pc, #12]	; (8008cc8 <_ZN9interface17XFResourceFactoryD1Ev+0x18>)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	b002      	add	sp, #8
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	0800c734 	.word	0x0800c734

08008ccc <_ZN9interface17XFResourceFactoryD0Ev>:
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f7ff ffea 	bl	8008cb0 <_ZN9interface17XFResourceFactoryD1Ev>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2104      	movs	r1, #4
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f002 f986 	bl	800aff2 <_ZdlPvj>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	0018      	movs	r0, r3
 8008cea:	46bd      	mov	sp, r7
 8008cec:	b002      	add	sp, #8
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZN24XFResourceFactoryDefaultD1Ev>:
 * @brief Default implementation of the XF resource factory.
 */
class XFResourceFactoryDefault : public interface::XFResourceFactory
{
public:
	virtual ~XFResourceFactoryDefault() {}
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <_ZN24XFResourceFactoryDefaultD1Ev+0x2c>)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	3304      	adds	r3, #4
 8008d02:	0018      	movs	r0, r3
 8008d04:	f7ff fe72 	bl	80089ec <_ZN19XFDispatcherDefaultD1Ev>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	f7ff ffd0 	bl	8008cb0 <_ZN9interface17XFResourceFactoryD1Ev>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	0018      	movs	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	b002      	add	sp, #8
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	0800c714 	.word	0x0800c714

08008d20 <_ZN24XFResourceFactoryDefaultD0Ev>:
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f7ff ffe0 	bl	8008cf0 <_ZN24XFResourceFactoryDefaultD1Ev>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2140      	movs	r1, #64	; 0x40
 8008d34:	0018      	movs	r0, r3
 8008d36:	f002 f95c 	bl	800aff2 <_ZdlPvj>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	b002      	add	sp, #8
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <_ZN9interface17XFResourceFactoryC1Ev>:

protected:
    XFResourceFactory() = default;
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	4a03      	ldr	r2, [pc, #12]	; (8008d5c <_ZN9interface17XFResourceFactoryC1Ev+0x18>)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	0018      	movs	r0, r3
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b002      	add	sp, #8
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	0800c734 	.word	0x0800c734

08008d60 <_ZN24XFResourceFactoryDefaultC1Ev>:
											   const char * threadName,                             
											   const uint32_t stackSize = 0);                       ///< Creates and returns a new thread.
	virtual interface::XFMutex * createMutex();                                                     ///< Creates and returns a new mutex.
	
protected:
	XFResourceFactoryDefault() {}
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f7ff ffea 	bl	8008d44 <_ZN9interface17XFResourceFactoryC1Ev>
 8008d70:	4a06      	ldr	r2, [pc, #24]	; (8008d8c <_ZN24XFResourceFactoryDefaultC1Ev+0x2c>)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	0018      	movs	r0, r3
 8008d7c:	f7ff fe04 	bl	8008988 <_ZN19XFDispatcherDefaultC1Ev>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	0018      	movs	r0, r3
 8008d84:	46bd      	mov	sp, r7
 8008d86:	b002      	add	sp, #8
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	46c0      	nop			; (mov r8, r8)
 8008d8c:	0800c714 	.word	0x0800c714

08008d90 <_ZN9interface17XFResourceFactory11getInstanceEv>:
#include "resourcefactory-default.h"
#include "mutex-default.h"

//static
interface::XFResourceFactory * interface::XFResourceFactory::getInstance()
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
	return XFResourceFactoryDefault::getInstance();
 8008d94:	f000 f80e 	bl	8008db4 <_ZN24XFResourceFactoryDefault11getInstanceEv>
 8008d98:	0003      	movs	r3, r0
}
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <__tcf_0>:

//static
interface::XFResourceFactory * XFResourceFactoryDefault::getInstance()
{
    static XFResourceFactoryDefault theResourceFactory;
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <__tcf_0+0x10>)
 8008da6:	0018      	movs	r0, r3
 8008da8:	f7ff ffa2 	bl	8008cf0 <_ZN24XFResourceFactoryDefaultD1Ev>
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	200000f0 	.word	0x200000f0

08008db4 <_ZN24XFResourceFactoryDefault11getInstanceEv>:
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
    static XFResourceFactoryDefault theResourceFactory;
 8008db8:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x2c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d10a      	bne.n	8008dd8 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x24>
 8008dc2:	4b08      	ldr	r3, [pc, #32]	; (8008de4 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x30>)
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	f7ff ffcb 	bl	8008d60 <_ZN24XFResourceFactoryDefaultC1Ev>
 8008dca:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x2c>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x34>)
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f002 f96e 	bl	800b0b4 <atexit>

	return &theResourceFactory;
 8008dd8:	4b02      	ldr	r3, [pc, #8]	; (8008de4 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x30>)
}
 8008dda:	0018      	movs	r0, r3
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	20000130 	.word	0x20000130
 8008de4:	200000f0 	.word	0x200000f0
 8008de8:	08008da1 	.word	0x08008da1

08008dec <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv>:

interface::XFDispatcher * XFResourceFactoryDefault::getDefaultDispatcher()
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	return &_mainDispatcher;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3304      	adds	r3, #4
}
 8008df8:	0018      	movs	r0, r3
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	b002      	add	sp, #8
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <_ZN24XFResourceFactoryDefault16createDispatcherEv>:

interface::XFDispatcher * XFResourceFactoryDefault::createDispatcher()
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	// Default implementation cannot create new dispatcher. Return the default dispatcher
	return getDefaultDispatcher();
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	0010      	movs	r0, r2
 8008e12:	4798      	blx	r3
 8008e14:	0003      	movs	r3, r0
}
 8008e16:	0018      	movs	r0, r3
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	b002      	add	sp, #8
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <_ZN24XFResourceFactoryDefault12createThreadEPN9interface26XFThreadEntryPointProviderEMS1_FvPKvEPKcm>:

interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
												  	  	     interface::XFThread::EntryMethodBody entryMethod,
														     const char * threadName,
														     const uint32_t stackSize /* = 0 */)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	0039      	movs	r1, r7
 8008e2a:	600a      	str	r2, [r1, #0]
 8008e2c:	604b      	str	r3, [r1, #4]
	// Default implementation cannot create threads (no underlying OS present)
	return nullptr;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	0018      	movs	r0, r3
 8008e32:	46bd      	mov	sp, r7
 8008e34:	b004      	add	sp, #16
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <__tcf_1>:

interface::XFMutex * XFResourceFactoryDefault::createMutex()
{
	static XFMutexDefault mutex;
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <__tcf_1+0x10>)
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f002 f866 	bl	800af10 <_ZN14XFMutexDefaultD1Ev>
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20000134 	.word	0x20000134

08008e4c <_ZN24XFResourceFactoryDefault11createMutexEv>:
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	static XFMutexDefault mutex;
 8008e54:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <_ZN24XFResourceFactoryDefault11createMutexEv+0x34>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	d10a      	bne.n	8008e74 <_ZN24XFResourceFactoryDefault11createMutexEv+0x28>
 8008e5e:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <_ZN24XFResourceFactoryDefault11createMutexEv+0x38>)
 8008e60:	0018      	movs	r0, r3
 8008e62:	f002 f843 	bl	800aeec <_ZN14XFMutexDefaultC1Ev>
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <_ZN24XFResourceFactoryDefault11createMutexEv+0x34>)
 8008e68:	2201      	movs	r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	4b06      	ldr	r3, [pc, #24]	; (8008e88 <_ZN24XFResourceFactoryDefault11createMutexEv+0x3c>)
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f002 f920 	bl	800b0b4 <atexit>

	return &mutex;
 8008e74:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <_ZN24XFResourceFactoryDefault11createMutexEv+0x38>)
}
 8008e76:	0018      	movs	r0, r3
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	b002      	add	sp, #8
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	20000138 	.word	0x20000138
 8008e84:	20000134 	.word	0x20000134
 8008e88:	08008e39 	.word	0x08008e39

08008e8c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	0018      	movs	r0, r3
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	b002      	add	sp, #8
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <_ZN9interface16XFTimeoutManager10initializeEl>:

    /**
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
    {
        _tickInterval = tickInterval;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	605a      	str	r2, [r3, #4]
    }
 8008eb0:	46c0      	nop			; (mov r8, r8)
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	b002      	add	sp, #8
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:

    /**
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
    {
        return _tickInterval;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
    }
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	b002      	add	sp, #8
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <_ZN9interface16XFTimeoutManagerC1Ev>:
     * belongs.
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
        _tickInterval(0)
 8008ed4:	4a05      	ldr	r2, [pc, #20]	; (8008eec <_ZN9interface16XFTimeoutManagerC1Ev+0x20>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	605a      	str	r2, [r3, #4]
    {}
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	b002      	add	sp, #8
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	46c0      	nop			; (mov r8, r8)
 8008eec:	0800c780 	.word	0x0800c780

08008ef0 <_ZNK9XFTimeout11getRelTicksEv>:
    bool operator ==(const XFTimeout & timeout) const;

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { _relTicks = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return _relTicks; }                                            ///< Returns remaining ticks.
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	0018      	movs	r0, r3
 8008efe:	46bd      	mov	sp, r7
 8008f00:	b002      	add	sp, #8
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <_ZN9XFTimeout21substractFromRelTicksEi>:
    inline void substractFromRelTicks(int ticksToSubstract) { _relTicks -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	695a      	ldr	r2, [r3, #20]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	1ad2      	subs	r2, r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	615a      	str	r2, [r3, #20]
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	b002      	add	sp, #8
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <_ZN9XFTimeout13addToRelTicksEi>:
    inline void addToRelTicks(int ticksToAdd) { _relTicks += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	695a      	ldr	r2, [r3, #20]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	18d2      	adds	r2, r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	615a      	str	r2, [r3, #20]
 8008f38:	46c0      	nop			; (mov r8, r8)
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	b002      	add	sp, #8
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <_ZN9interface16XFTimeoutManager11getInstanceEv>:
#include "timeoutmanager-default.h"

using interface::XFMutex;

interface::XFTimeoutManager * interface::XFTimeoutManager::getInstance()
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
    return XFTimeoutManagerDefault::getInstance();
 8008f44:	f000 f80e 	bl	8008f64 <_ZN23XFTimeoutManagerDefault11getInstanceEv>
 8008f48:	0003      	movs	r3, r0
}
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <__tcf_0>:

interface::XFTimeoutManager * XFTimeoutManagerDefault::getInstance()
{
    static XFTimeoutManagerDefault timeoutManager;
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <__tcf_0+0x10>)
 8008f56:	0018      	movs	r0, r3
 8008f58:	f000 f87e 	bl	8009058 <_ZN23XFTimeoutManagerDefaultD1Ev>
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	2000013c 	.word	0x2000013c

08008f64 <_ZN23XFTimeoutManagerDefault11getInstanceEv>:
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
    static XFTimeoutManagerDefault timeoutManager;
 8008f68:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x2c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	4013      	ands	r3, r2
 8008f70:	d10a      	bne.n	8008f88 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x24>
 8008f72:	4b08      	ldr	r3, [pc, #32]	; (8008f94 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x30>)
 8008f74:	0018      	movs	r0, r3
 8008f76:	f000 f83f 	bl	8008ff8 <_ZN23XFTimeoutManagerDefaultC1Ev>
 8008f7a:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x2c>)
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x34>)
 8008f82:	0018      	movs	r0, r3
 8008f84:	f002 f896 	bl	800b0b4 <atexit>
    return &timeoutManager;
 8008f88:	4b02      	ldr	r3, [pc, #8]	; (8008f94 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x30>)
}
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20000154 	.word	0x20000154
 8008f94:	2000013c 	.word	0x2000013c
 8008f98:	08008f51 	.word	0x08008f51

08008f9c <_ZN9interface16XFTimeoutManagerD1Ev>:
    virtual ~XFTimeoutManager() = default;
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	4a03      	ldr	r2, [pc, #12]	; (8008fb4 <_ZN9interface16XFTimeoutManagerD1Ev+0x18>)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	0018      	movs	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	b002      	add	sp, #8
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	0800c780 	.word	0x0800c780

08008fb8 <_ZN9interface16XFTimeoutManagerD0Ev>:
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f7ff ffea 	bl	8008f9c <_ZN9interface16XFTimeoutManagerD1Ev>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2108      	movs	r1, #8
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f002 f810 	bl	800aff2 <_ZdlPvj>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	b002      	add	sp, #8
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f000 fb6b 	bl	80096c2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	0018      	movs	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b002      	add	sp, #8
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <_ZN23XFTimeoutManagerDefaultC1Ev>:

XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
    _pMutex(nullptr)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	0018      	movs	r0, r3
 8009004:	f7ff ff62 	bl	8008ecc <_ZN9interface16XFTimeoutManagerC1Ev>
 8009008:	4a0f      	ldr	r2, [pc, #60]	; (8009048 <_ZN23XFTimeoutManagerDefaultC1Ev+0x50>)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3308      	adds	r3, #8
 8009012:	0018      	movs	r0, r3
 8009014:	f000 fb3b 	bl	800968e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	615a      	str	r2, [r3, #20]
{
    _pMutex = XFMutex::create();
 800901e:	f001 ff29 	bl	800ae74 <_ZN9interface7XFMutex6createEv>
 8009022:	0002      	movs	r2, r0
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	615a      	str	r2, [r3, #20]
    assert(_pMutex);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d105      	bne.n	800903c <_ZN23XFTimeoutManagerDefaultC1Ev+0x44>
 8009030:	4b06      	ldr	r3, [pc, #24]	; (800904c <_ZN23XFTimeoutManagerDefaultC1Ev+0x54>)
 8009032:	4a07      	ldr	r2, [pc, #28]	; (8009050 <_ZN23XFTimeoutManagerDefaultC1Ev+0x58>)
 8009034:	4807      	ldr	r0, [pc, #28]	; (8009054 <_ZN23XFTimeoutManagerDefaultC1Ev+0x5c>)
 8009036:	211d      	movs	r1, #29
 8009038:	f002 f81e 	bl	800b078 <__assert_func>
}
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	0018      	movs	r0, r3
 8009040:	46bd      	mov	sp, r7
 8009042:	b002      	add	sp, #8
 8009044:	bd80      	pop	{r7, pc}
 8009046:	46c0      	nop			; (mov r8, r8)
 8009048:	0800c754 	.word	0x0800c754
 800904c:	0800c258 	.word	0x0800c258
 8009050:	0800c7a4 	.word	0x0800c7a4
 8009054:	0800c260 	.word	0x0800c260

08009058 <_ZN23XFTimeoutManagerDefaultD1Ev>:

XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	4a08      	ldr	r2, [pc, #32]	; (8009084 <_ZN23XFTimeoutManagerDefaultD1Ev+0x2c>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3308      	adds	r3, #8
 800906a:	0018      	movs	r0, r3
 800906c:	f7ff ffb6 	bl	8008fdc <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	0018      	movs	r0, r3
 8009074:	f7ff ff92 	bl	8008f9c <_ZN9interface16XFTimeoutManagerD1Ev>
{
}
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	0018      	movs	r0, r3
 800907c:	46bd      	mov	sp, r7
 800907e:	b002      	add	sp, #8
 8009080:	bd80      	pop	{r7, pc}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	0800c754 	.word	0x0800c754

08009088 <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
}
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	0018      	movs	r0, r3
 8009094:	f7ff ffe0 	bl	8009058 <_ZN23XFTimeoutManagerDefaultD1Ev>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2118      	movs	r1, #24
 800909c:	0018      	movs	r0, r3
 800909e:	f001 ffa8 	bl	800aff2 <_ZdlPvj>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	0018      	movs	r0, r3
 80090a6:	46bd      	mov	sp, r7
 80090a8:	b002      	add	sp, #8
 80090aa:	bd80      	pop	{r7, pc}

080090ac <_ZN23XFTimeoutManagerDefault5startEv>:

void XFTimeoutManagerDefault::start()
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
    // Check tickInterval. Set default value if not set
    if (_tickInterval == 0)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <_ZN23XFTimeoutManagerDefault5startEv+0x16>
    {
        _tickInterval = 10;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	220a      	movs	r2, #10
 80090c0:	605a      	str	r2, [r3, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(_tickInterval));
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	0018      	movs	r0, r3
 80090c8:	f001 ff64 	bl	800af94 <XF_startTimeoutManagerTimer>
}
 80090cc:	46c0      	nop			; (mov r8, r8)
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b002      	add	sp, #8
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 80090d4:	b590      	push	{r4, r7, lr}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 80090e2:	2018      	movs	r0, #24
 80090e4:	f001 ff89 	bl	800affa <_Znwj>
 80090e8:	0003      	movs	r3, r0
 80090ea:	001c      	movs	r4, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	0020      	movs	r0, r4
 80090f4:	f7ff fb94 	bl	8008820 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
 80090f8:	617c      	str	r4, [r7, #20]

    if (pTimeout)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d007      	beq.n	8009110 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE+0x3c>
    {
        addTimeout(pTimeout);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3320      	adds	r3, #32
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6979      	ldr	r1, [r7, #20]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	0010      	movs	r0, r2
 800910e:	4798      	blx	r3
    }
}
 8009110:	46c0      	nop			; (mov r8, r8)
 8009112:	46bd      	mov	sp, r7
 8009114:	b007      	add	sp, #28
 8009116:	bd90      	pop	{r4, r7, pc}

08009118 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::unscheduleTimeout(int32_t timeoutId, interface::XFReactive * pReactive)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b091      	sub	sp, #68	; 0x44
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	2218      	movs	r2, #24
 800912a:	18b8      	adds	r0, r7, r2
 800912c:	2200      	movs	r2, #0
 800912e:	f7ff fb77 	bl	8008820 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    XFTimeout * pTimeout;

    _pMutex->lock();
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	695a      	ldr	r2, [r3, #20]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3308      	adds	r3, #8
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	0010      	movs	r0, r2
 8009142:	4798      	blx	r3
    {
        for (TimeoutList::iterator i = _timeouts.begin();
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3308      	adds	r3, #8
 8009148:	0018      	movs	r0, r3
 800914a:	f000 facb 	bl	80096e4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800914e:	0003      	movs	r3, r0
 8009150:	617b      	str	r3, [r7, #20]
             i != _timeouts.end(); /*Do not increment here!*/)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3308      	adds	r3, #8
 8009156:	0018      	movs	r0, r3
 8009158:	f000 fad5 	bl	8009706 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800915c:	0003      	movs	r3, r0
 800915e:	633b      	str	r3, [r7, #48]	; 0x30
 8009160:	2330      	movs	r3, #48	; 0x30
 8009162:	18fa      	adds	r2, r7, r3
 8009164:	2314      	movs	r3, #20
 8009166:	18fb      	adds	r3, r7, r3
 8009168:	0011      	movs	r1, r2
 800916a:	0018      	movs	r0, r3
 800916c:	f000 fadb 	bl	8009726 <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 8009170:	1e03      	subs	r3, r0, #0
 8009172:	d05b      	beq.n	800922c <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x114>
        {
            pTimeout = *i;
 8009174:	2314      	movs	r3, #20
 8009176:	18fb      	adds	r3, r7, r3
 8009178:	0018      	movs	r0, r3
 800917a:	f000 fae5 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800917e:	0003      	movs	r3, r0
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c

            // Check if behavior and timeout id are equal
            if (*pTimeout == timeout)
 8009184:	2318      	movs	r3, #24
 8009186:	18fa      	adds	r2, r7, r3
 8009188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918a:	0011      	movs	r1, r2
 800918c:	0018      	movs	r0, r3
 800918e:	f7ff fb65 	bl	800885c <_ZNK9XFTimeouteqERKS_>
 8009192:	1e03      	subs	r3, r0, #0
 8009194:	d043      	beq.n	800921e <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x106>
            {
                TimeoutList::iterator next = i;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	613b      	str	r3, [r7, #16]

                // Check if remaining ticks can be given further
                if (++next != _timeouts.end())
 800919a:	2310      	movs	r3, #16
 800919c:	18fb      	adds	r3, r7, r3
 800919e:	0018      	movs	r0, r3
 80091a0:	f000 fae0 	bl	8009764 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>
 80091a4:	0004      	movs	r4, r0
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3308      	adds	r3, #8
 80091aa:	0018      	movs	r0, r3
 80091ac:	f000 faab 	bl	8009706 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80091b0:	0003      	movs	r3, r0
 80091b2:	637b      	str	r3, [r7, #52]	; 0x34
 80091b4:	2334      	movs	r3, #52	; 0x34
 80091b6:	18fb      	adds	r3, r7, r3
 80091b8:	0019      	movs	r1, r3
 80091ba:	0020      	movs	r0, r4
 80091bc:	f000 fab3 	bl	8009726 <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 80091c0:	1e03      	subs	r3, r0, #0
 80091c2:	d00f      	beq.n	80091e4 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0xcc>
                {
                    // Add (remaining) ticks to next timeout in list
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 80091c4:	2310      	movs	r3, #16
 80091c6:	18fb      	adds	r3, r7, r3
 80091c8:	0018      	movs	r0, r3
 80091ca:	f000 fabd 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80091ce:	0003      	movs	r3, r0
 80091d0:	681c      	ldr	r4, [r3, #0]
 80091d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d4:	0018      	movs	r0, r3
 80091d6:	f7ff fe8b 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 80091da:	0003      	movs	r3, r0
 80091dc:	0019      	movs	r1, r3
 80091de:	0020      	movs	r0, r4
 80091e0:	f7ff fe9f 	bl	8008f22 <_ZN9XFTimeout13addToRelTicksEi>
                }

                i = _timeouts.erase(i);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	3308      	adds	r3, #8
 80091e8:	001c      	movs	r4, r3
 80091ea:	2314      	movs	r3, #20
 80091ec:	18fa      	adds	r2, r7, r3
 80091ee:	2338      	movs	r3, #56	; 0x38
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	0011      	movs	r1, r2
 80091f4:	0018      	movs	r0, r3
 80091f6:	f000 fac3 	bl	8009780 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	0019      	movs	r1, r3
 80091fe:	0020      	movs	r0, r4
 8009200:	f000 facc 	bl	800979c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8009204:	0003      	movs	r3, r0
 8009206:	617b      	str	r3, [r7, #20]
                // Iterator now points to the next element

                delete pTimeout;
 8009208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0a1      	beq.n	8009152 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
 800920e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3304      	adds	r3, #4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009218:	0010      	movs	r0, r2
 800921a:	4798      	blx	r3
 800921c:	e799      	b.n	8009152 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
            else
            {
                i++;
 800921e:	2314      	movs	r3, #20
 8009220:	18fb      	adds	r3, r7, r3
 8009222:	2100      	movs	r1, #0
 8009224:	0018      	movs	r0, r3
 8009226:	f000 fad5 	bl	80097d4 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
        for (TimeoutList::iterator i = _timeouts.begin();
 800922a:	e792      	b.n	8009152 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
        }
    }
    _pMutex->unlock();
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	695a      	ldr	r2, [r3, #20]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	330c      	adds	r3, #12
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	0010      	movs	r0, r2
 800923c:	4798      	blx	r3
    const XFTimeout timeout(timeoutId, 0, pReactive);
 800923e:	2318      	movs	r3, #24
 8009240:	18fb      	adds	r3, r7, r3
 8009242:	0018      	movs	r0, r3
 8009244:	f7ff fb32 	bl	80088ac <_ZN9XFTimeoutD1Ev>
}
 8009248:	46c0      	nop			; (mov r8, r8)
 800924a:	46bd      	mov	sp, r7
 800924c:	b011      	add	sp, #68	; 0x44
 800924e:	bd90      	pop	{r4, r7, pc}

08009250 <_ZN23XFTimeoutManagerDefault4tickEv>:

void XFTimeoutManagerDefault::tick()
{
 8009250:	b5b0      	push	{r4, r5, r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
    assert(_tickInterval);      // Did you call start()?!
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d105      	bne.n	800926c <_ZN23XFTimeoutManagerDefault4tickEv+0x1c>
 8009260:	4b67      	ldr	r3, [pc, #412]	; (8009400 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b0>)
 8009262:	4a68      	ldr	r2, [pc, #416]	; (8009404 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b4>)
 8009264:	4868      	ldr	r0, [pc, #416]	; (8009408 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b8>)
 8009266:	2161      	movs	r1, #97	; 0x61
 8009268:	f001 ff06 	bl	800b078 <__assert_func>
    int32_t intervalToSubtract = _tickInterval;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	61fb      	str	r3, [r7, #28]

    while (!_timeouts.empty())
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3308      	adds	r3, #8
 8009276:	0018      	movs	r0, r3
 8009278:	f000 fabe 	bl	80097f8 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 800927c:	0003      	movs	r3, r0
 800927e:	001a      	movs	r2, r3
 8009280:	2301      	movs	r3, #1
 8009282:	4053      	eors	r3, r2
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d100      	bne.n	800928c <_ZN23XFTimeoutManagerDefault4tickEv+0x3c>
 800928a:	e0b4      	b.n	80093f6 <_ZN23XFTimeoutManagerDefault4tickEv+0x1a6>
    {
        _pMutex->lock();
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	695a      	ldr	r2, [r3, #20]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3308      	adds	r3, #8
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	0010      	movs	r0, r2
 800929c:	4798      	blx	r3
        {
            XFTimeout * pFirstTimeout = _timeouts.front();
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3308      	adds	r3, #8
 80092a2:	0018      	movs	r0, r3
 80092a4:	f000 fab7 	bl	8009816 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>
 80092a8:	0003      	movs	r3, r0
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	61bb      	str	r3, [r7, #24]

            // Subtract time elapsed
            pFirstTimeout->substractFromRelTicks(intervalToSubtract);
 80092ae:	69fa      	ldr	r2, [r7, #28]
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	0011      	movs	r1, r2
 80092b4:	0018      	movs	r0, r3
 80092b6:	f7ff fe25 	bl	8008f04 <_ZN9XFTimeout21substractFromRelTicksEi>

            // From now on set it to zero.
            intervalToSubtract = 0;
 80092ba:	2300      	movs	r3, #0
 80092bc:	61fb      	str	r3, [r7, #28]

            // Check timeout timed out
            if (pFirstTimeout->getRelTicks() <= 0)
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	0018      	movs	r0, r3
 80092c2:	f7ff fe15 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 80092c6:	0003      	movs	r3, r0
 80092c8:	1e5a      	subs	r2, r3, #1
 80092ca:	4313      	orrs	r3, r2
 80092cc:	0fdb      	lsrs	r3, r3, #31
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d100      	bne.n	80092d6 <_ZN23XFTimeoutManagerDefault4tickEv+0x86>
 80092d4:	e079      	b.n	80093ca <_ZN23XFTimeoutManagerDefault4tickEv+0x17a>
            {
                // Check remaining ticks can be given further
                if (_timeouts.size() > 1)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3308      	adds	r3, #8
 80092da:	0018      	movs	r0, r3
 80092dc:	f000 faaf 	bl	800983e <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 80092e0:	0002      	movs	r2, r0
 80092e2:	2301      	movs	r3, #1
 80092e4:	4293      	cmp	r3, r2
 80092e6:	419b      	sbcs	r3, r3
 80092e8:	425b      	negs	r3, r3
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01b      	beq.n	8009328 <_ZN23XFTimeoutManagerDefault4tickEv+0xd8>
                {
                    TimeoutList::iterator i = _timeouts.begin();
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3308      	adds	r3, #8
 80092f4:	0018      	movs	r0, r3
 80092f6:	f000 f9f5 	bl	80096e4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80092fa:	0003      	movs	r3, r0
 80092fc:	60fb      	str	r3, [r7, #12]

                    // Add ticks overrun to next timeout
                    i++;
 80092fe:	240c      	movs	r4, #12
 8009300:	193b      	adds	r3, r7, r4
 8009302:	2100      	movs	r1, #0
 8009304:	0018      	movs	r0, r3
 8009306:	f000 fa65 	bl	80097d4 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    (*i)->substractFromRelTicks(pFirstTimeout->getRelTicks());
 800930a:	193b      	adds	r3, r7, r4
 800930c:	0018      	movs	r0, r3
 800930e:	f000 fa1b 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009312:	0003      	movs	r3, r0
 8009314:	681c      	ldr	r4, [r3, #0]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	0018      	movs	r0, r3
 800931a:	f7ff fde9 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 800931e:	0003      	movs	r3, r0
 8009320:	0019      	movs	r1, r3
 8009322:	0020      	movs	r0, r4
 8009324:	f7ff fdee 	bl	8008f04 <_ZN9XFTimeout21substractFromRelTicksEi>
                }

                // Inject the timeout back to the behavioral class
                returnTimeout(pFirstTimeout);
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	0011      	movs	r1, r2
 800932e:	0018      	movs	r0, r3
 8009330:	f000 f999 	bl	8009666 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>

                // Remove timeout
                _timeouts.pop_front();
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3308      	adds	r3, #8
 8009338:	0018      	movs	r0, r3
 800933a:	f000 fa8d 	bl	8009858 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>

                // Check if timeouts with same timeout value are present
                for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3308      	adds	r3, #8
 8009342:	0018      	movs	r0, r3
 8009344:	f000 f9ce 	bl	80096e4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009348:	0003      	movs	r3, r0
 800934a:	60bb      	str	r3, [r7, #8]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3308      	adds	r3, #8
 8009350:	0018      	movs	r0, r3
 8009352:	f000 f9d8 	bl	8009706 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8009356:	0003      	movs	r3, r0
 8009358:	613b      	str	r3, [r7, #16]
 800935a:	2310      	movs	r3, #16
 800935c:	18fa      	adds	r2, r7, r3
 800935e:	2308      	movs	r3, #8
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	0011      	movs	r1, r2
 8009364:	0018      	movs	r0, r3
 8009366:	f000 f9de 	bl	8009726 <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 800936a:	1e03      	subs	r3, r0, #0
 800936c:	d039      	beq.n	80093e2 <_ZN23XFTimeoutManagerDefault4tickEv+0x192>
                {
                    if ((*it)->getRelTicks() == 0)
 800936e:	2308      	movs	r3, #8
 8009370:	18fb      	adds	r3, r7, r3
 8009372:	0018      	movs	r0, r3
 8009374:	f000 f9e8 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009378:	0003      	movs	r3, r0
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	0018      	movs	r0, r3
 800937e:	f7ff fdb7 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 8009382:	0003      	movs	r3, r0
 8009384:	425a      	negs	r2, r3
 8009386:	4153      	adcs	r3, r2
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d028      	beq.n	80093e0 <_ZN23XFTimeoutManagerDefault4tickEv+0x190>
                    {
                        returnTimeout(*it);			// Return them true
 800938e:	2508      	movs	r5, #8
 8009390:	197b      	adds	r3, r7, r5
 8009392:	0018      	movs	r0, r3
 8009394:	f000 f9d8 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009398:	0003      	movs	r3, r0
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	0011      	movs	r1, r2
 80093a0:	0018      	movs	r0, r3
 80093a2:	f000 f960 	bl	8009666 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                        it = _timeouts.erase(it);	// Remove timeout and adjust iterator to next element
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	3308      	adds	r3, #8
 80093aa:	001c      	movs	r4, r3
 80093ac:	197a      	adds	r2, r7, r5
 80093ae:	2314      	movs	r3, #20
 80093b0:	18fb      	adds	r3, r7, r3
 80093b2:	0011      	movs	r1, r2
 80093b4:	0018      	movs	r0, r3
 80093b6:	f000 f9e3 	bl	8009780 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	0019      	movs	r1, r3
 80093be:	0020      	movs	r0, r4
 80093c0:	f000 f9ec 	bl	800979c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 80093c4:	0003      	movs	r3, r0
 80093c6:	60bb      	str	r3, [r7, #8]
                for (TimeoutList::iterator it = _timeouts.begin(); it != _timeouts.end(); /*Do not increment here!*/)
 80093c8:	e7c0      	b.n	800934c <_ZN23XFTimeoutManagerDefault4tickEv+0xfc>
                    }
                }
            }
            else
            {
                _pMutex->unlock();
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695a      	ldr	r2, [r3, #20]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	330c      	adds	r3, #12
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	0010      	movs	r0, r2
 80093da:	4798      	blx	r3
                // Done. Exit while loop
                break;
 80093dc:	46c0      	nop			; (mov r8, r8)
            }
        }
        _pMutex->unlock();
    }
}
 80093de:	e00a      	b.n	80093f6 <_ZN23XFTimeoutManagerDefault4tickEv+0x1a6>
                        break;
 80093e0:	46c0      	nop			; (mov r8, r8)
        _pMutex->unlock();
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	695a      	ldr	r2, [r3, #20]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	330c      	adds	r3, #12
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	0010      	movs	r0, r2
 80093f2:	4798      	blx	r3
    while (!_timeouts.empty())
 80093f4:	e73d      	b.n	8009272 <_ZN23XFTimeoutManagerDefault4tickEv+0x22>
}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	46bd      	mov	sp, r7
 80093fa:	b008      	add	sp, #32
 80093fc:	bdb0      	pop	{r4, r5, r7, pc}
 80093fe:	46c0      	nop			; (mov r8, r8)
 8009400:	0800c2dc 	.word	0x0800c2dc
 8009404:	0800c7d8 	.word	0x0800c7d8
 8009408:	0800c260 	.word	0x0800c260

0800940c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::addTimeout(XFTimeout * pNewTimeout)
{
 800940c:	b5b0      	push	{r4, r5, r7, lr}
 800940e:	b08c      	sub	sp, #48	; 0x30
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
    if (!_timeouts.empty())
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3308      	adds	r3, #8
 800941a:	0018      	movs	r0, r3
 800941c:	f000 f9ec 	bl	80097f8 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 8009420:	0003      	movs	r3, r0
 8009422:	001a      	movs	r2, r3
 8009424:	2301      	movs	r3, #1
 8009426:	4053      	eors	r3, r2
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d100      	bne.n	8009430 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x24>
 800942e:	e10f      	b.n	8009650 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x244>
    {
        _pMutex->lock();
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	695a      	ldr	r2, [r3, #20]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	695b      	ldr	r3, [r3, #20]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3308      	adds	r3, #8
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	0010      	movs	r0, r2
 8009440:	4798      	blx	r3
        {
            // Insert timeout before timeout(s) triggering later
            TimeoutList::iterator i = _timeouts.begin();
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3308      	adds	r3, #8
 8009446:	0018      	movs	r0, r3
 8009448:	f000 f94c 	bl	80096e4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 800944c:	0003      	movs	r3, r0
 800944e:	60bb      	str	r3, [r7, #8]

            unsigned int index = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c

            // Find the right place to insert new timeout
            while (i != _timeouts.end() &&
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3308      	adds	r3, #8
 8009458:	0018      	movs	r0, r3
 800945a:	f000 f954 	bl	8009706 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800945e:	0003      	movs	r3, r0
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	230c      	movs	r3, #12
 8009464:	18fa      	adds	r2, r7, r3
 8009466:	2308      	movs	r3, #8
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	0011      	movs	r1, r2
 800946c:	0018      	movs	r0, r3
 800946e:	f000 f95a 	bl	8009726 <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 8009472:	1e03      	subs	r3, r0, #0
 8009474:	d013      	beq.n	800949e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 8009476:	2308      	movs	r3, #8
 8009478:	18fb      	adds	r3, r7, r3
 800947a:	0018      	movs	r0, r3
 800947c:	f000 f964 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009480:	0003      	movs	r3, r0
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	0018      	movs	r0, r3
 8009486:	f7ff fd33 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 800948a:	0004      	movs	r4, r0
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	0018      	movs	r0, r3
 8009490:	f7ff fd2e 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 8009494:	0003      	movs	r3, r0
            while (i != _timeouts.end() &&
 8009496:	429c      	cmp	r4, r3
 8009498:	da01      	bge.n	800949e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
 800949a:	2301      	movs	r3, #1
 800949c:	e000      	b.n	80094a0 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x94>
 800949e:	2300      	movs	r3, #0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d018      	beq.n	80094d6 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0xca>
            {	// -> by: test4, test5
                pNewTimeout->substractFromRelTicks((*i)->getRelTicks());
 80094a4:	683c      	ldr	r4, [r7, #0]
 80094a6:	2508      	movs	r5, #8
 80094a8:	197b      	adds	r3, r7, r5
 80094aa:	0018      	movs	r0, r3
 80094ac:	f000 f94c 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80094b0:	0003      	movs	r3, r0
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	0018      	movs	r0, r3
 80094b6:	f7ff fd1b 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 80094ba:	0003      	movs	r3, r0
 80094bc:	0019      	movs	r1, r3
 80094be:	0020      	movs	r0, r4
 80094c0:	f7ff fd20 	bl	8008f04 <_ZN9XFTimeout21substractFromRelTicksEi>
                i++; index++;
 80094c4:	197b      	adds	r3, r7, r5
 80094c6:	2100      	movs	r1, #0
 80094c8:	0018      	movs	r0, r3
 80094ca:	f000 f983 	bl	80097d4 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	3301      	adds	r3, #1
 80094d2:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (i != _timeouts.end() &&
 80094d4:	e7be      	b.n	8009454 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x48>
            }

            if (i != _timeouts.end())
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3308      	adds	r3, #8
 80094da:	0018      	movs	r0, r3
 80094dc:	f000 f913 	bl	8009706 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80094e0:	0003      	movs	r3, r0
 80094e2:	613b      	str	r3, [r7, #16]
 80094e4:	2310      	movs	r3, #16
 80094e6:	18fa      	adds	r2, r7, r3
 80094e8:	2308      	movs	r3, #8
 80094ea:	18fb      	adds	r3, r7, r3
 80094ec:	0011      	movs	r1, r2
 80094ee:	0018      	movs	r0, r3
 80094f0:	f000 f919 	bl	8009726 <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 80094f4:	1e03      	subs	r3, r0, #0
 80094f6:	d100      	bne.n	80094fa <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0xee>
 80094f8:	e088      	b.n	800960c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x200>
            {
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 80094fa:	2308      	movs	r3, #8
 80094fc:	18fb      	adds	r3, r7, r3
 80094fe:	0018      	movs	r0, r3
 8009500:	f000 f922 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009504:	0003      	movs	r3, r0
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	0018      	movs	r0, r3
 800950a:	f7ff fcf1 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 800950e:	0004      	movs	r4, r0
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	0018      	movs	r0, r3
 8009514:	f7ff fcec 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 8009518:	0003      	movs	r3, r0
 800951a:	1ae3      	subs	r3, r4, r3
 800951c:	1e5a      	subs	r2, r3, #1
 800951e:	4193      	sbcs	r3, r2
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b00      	cmp	r3, #0
 8009524:	d020      	beq.n	8009568 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x15c>
                {	// -> by: test1, test4, test5
                    // Timeout are going to timeout at different times

                    // Insert new timeout before
                    _timeouts.insert(i, pNewTimeout);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3308      	adds	r3, #8
 800952a:	001c      	movs	r4, r3
 800952c:	2508      	movs	r5, #8
 800952e:	197a      	adds	r2, r7, r5
 8009530:	2314      	movs	r3, #20
 8009532:	18fb      	adds	r3, r7, r3
 8009534:	0011      	movs	r1, r2
 8009536:	0018      	movs	r0, r3
 8009538:	f000 f922 	bl	8009780 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800953c:	003a      	movs	r2, r7
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	0019      	movs	r1, r3
 8009542:	0020      	movs	r0, r4
 8009544:	f000 f99a 	bl	800987c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>

                    // Remove time from following timeout
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 8009548:	197b      	adds	r3, r7, r5
 800954a:	0018      	movs	r0, r3
 800954c:	f000 f8fc 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009550:	0003      	movs	r3, r0
 8009552:	681c      	ldr	r4, [r3, #0]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	0018      	movs	r0, r3
 8009558:	f7ff fcca 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 800955c:	0003      	movs	r3, r0
 800955e:	0019      	movs	r1, r3
 8009560:	0020      	movs	r0, r4
 8009562:	f7ff fccf 	bl	8008f04 <_ZN9XFTimeout21substractFromRelTicksEi>
 8009566:	e069      	b.n	800963c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x230>

                }
                else
                {	// -> by: test1, test5
                    const int32_t relTicks = (*i)->getRelTicks();
 8009568:	2408      	movs	r4, #8
 800956a:	193b      	adds	r3, r7, r4
 800956c:	0018      	movs	r0, r3
 800956e:	f000 f8eb 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009572:	0003      	movs	r3, r0
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	0018      	movs	r0, r3
 8009578:	f7ff fcba 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 800957c:	0003      	movs	r3, r0
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28
                    // Timeouts timeout at the same time. Put
                    // the new one behind the actual.
                    i++;
 8009580:	193b      	adds	r3, r7, r4
 8009582:	2100      	movs	r1, #0
 8009584:	0018      	movs	r0, r3
 8009586:	f000 f925 	bl	80097d4 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>

                    // Check if even more timeouts with the same timeout
                    while(i != _timeouts.end() && (*i)->getRelTicks() == 0)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3308      	adds	r3, #8
 800958e:	0018      	movs	r0, r3
 8009590:	f000 f8b9 	bl	8009706 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8009594:	0003      	movs	r3, r0
 8009596:	61bb      	str	r3, [r7, #24]
 8009598:	2318      	movs	r3, #24
 800959a:	18fa      	adds	r2, r7, r3
 800959c:	2308      	movs	r3, #8
 800959e:	18fb      	adds	r3, r7, r3
 80095a0:	0011      	movs	r1, r2
 80095a2:	0018      	movs	r0, r3
 80095a4:	f000 f8bf 	bl	8009726 <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>
 80095a8:	1e03      	subs	r3, r0, #0
 80095aa:	d00d      	beq.n	80095c8 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1bc>
 80095ac:	2308      	movs	r3, #8
 80095ae:	18fb      	adds	r3, r7, r3
 80095b0:	0018      	movs	r0, r3
 80095b2:	f000 f8c9 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80095b6:	0003      	movs	r3, r0
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	0018      	movs	r0, r3
 80095bc:	f7ff fc98 	bl	8008ef0 <_ZNK9XFTimeout11getRelTicksEv>
 80095c0:	1e03      	subs	r3, r0, #0
 80095c2:	d101      	bne.n	80095c8 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1bc>
 80095c4:	2301      	movs	r3, #1
 80095c6:	e000      	b.n	80095ca <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1be>
 80095c8:	2300      	movs	r3, #0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d006      	beq.n	80095dc <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1d0>
                    {	// -> by: test5
                        i++;
 80095ce:	2308      	movs	r3, #8
 80095d0:	18fb      	adds	r3, r7, r3
 80095d2:	2100      	movs	r1, #0
 80095d4:	0018      	movs	r0, r3
 80095d6:	f000 f8fd 	bl	80097d4 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    while(i != _timeouts.end() && (*i)->getRelTicks() == 0)
 80095da:	e7d6      	b.n	800958a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x17e>
                    }

                    // Insert new timeout behind actual
                    _timeouts.insert(i, pNewTimeout);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3308      	adds	r3, #8
 80095e0:	001c      	movs	r4, r3
 80095e2:	2308      	movs	r3, #8
 80095e4:	18fa      	adds	r2, r7, r3
 80095e6:	231c      	movs	r3, #28
 80095e8:	18fb      	adds	r3, r7, r3
 80095ea:	0011      	movs	r1, r2
 80095ec:	0018      	movs	r0, r3
 80095ee:	f000 f8c7 	bl	8009780 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 80095f2:	003a      	movs	r2, r7
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	0019      	movs	r1, r3
 80095f8:	0020      	movs	r0, r4
 80095fa:	f000 f93f 	bl	800987c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    // Remove time from actual timeout
                    pNewTimeout->substractFromRelTicks(relTicks);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009602:	0011      	movs	r1, r2
 8009604:	0018      	movs	r0, r3
 8009606:	f7ff fc7d 	bl	8008f04 <_ZN9XFTimeout21substractFromRelTicksEi>
 800960a:	e017      	b.n	800963c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x230>
                }
            }
            else
            {	// -> by: test4, test5
                // Add timeout at the end of the list
                _timeouts.insert(_timeouts.end(), pNewTimeout);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3308      	adds	r3, #8
 8009610:	001c      	movs	r4, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3308      	adds	r3, #8
 8009616:	0018      	movs	r0, r3
 8009618:	f000 f875 	bl	8009706 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800961c:	0003      	movs	r3, r0
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
 8009620:	2324      	movs	r3, #36	; 0x24
 8009622:	18fa      	adds	r2, r7, r3
 8009624:	2320      	movs	r3, #32
 8009626:	18fb      	adds	r3, r7, r3
 8009628:	0011      	movs	r1, r2
 800962a:	0018      	movs	r0, r3
 800962c:	f000 f8a8 	bl	8009780 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8009630:	003a      	movs	r2, r7
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	0019      	movs	r1, r3
 8009636:	0020      	movs	r0, r4
 8009638:	f000 f920 	bl	800987c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
            }
        }
        _pMutex->unlock();
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695a      	ldr	r2, [r3, #20]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	330c      	adds	r3, #12
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	0010      	movs	r0, r2
 800964c:	4798      	blx	r3
    }
    else
    {	// -> by: test1, test2, test3, test4, test5
        _timeouts.push_front(pNewTimeout);
    }
}
 800964e:	e006      	b.n	800965e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x252>
        _timeouts.push_front(pNewTimeout);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3308      	adds	r3, #8
 8009654:	003a      	movs	r2, r7
 8009656:	0011      	movs	r1, r2
 8009658:	0018      	movs	r0, r3
 800965a:	f000 f939 	bl	80098d0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
}
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	46bd      	mov	sp, r7
 8009662:	b00c      	add	sp, #48	; 0x30
 8009664:	bdb0      	pop	{r4, r5, r7, pc}

08009666 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	0018      	movs	r0, r3
 8009674:	f7ff f93e 	bl	80088f4 <_ZNK7XFEvent11getBehaviorEv>
 8009678:	0002      	movs	r2, r0
 800967a:	6813      	ldr	r3, [r2, #0]
 800967c:	330c      	adds	r3, #12
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	0010      	movs	r0, r2
 8009684:	4798      	blx	r3
}
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	46bd      	mov	sp, r7
 800968a:	b002      	add	sp, #8
 800968c:	bd80      	pop	{r7, pc}

0800968e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:
      list()
 800968e:	b580      	push	{r7, lr}
 8009690:	b082      	sub	sp, #8
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	0018      	movs	r0, r3
 800969a:	f000 f92c 	bl	80098f6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	0018      	movs	r0, r3
 80096a2:	46bd      	mov	sp, r7
 80096a4:	b002      	add	sp, #8
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
      struct _List_impl
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	0018      	movs	r0, r3
 80096b4:	f000 f930 	bl	8009918 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	0018      	movs	r0, r3
 80096bc:	46bd      	mov	sp, r7
 80096be:	b002      	add	sp, #8
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	0018      	movs	r0, r3
 80096ce:	f000 f930 	bl	8009932 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	0018      	movs	r0, r3
 80096d6:	f7ff ffe7 	bl	80096a8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	0018      	movs	r0, r3
 80096de:	46bd      	mov	sp, r7
 80096e0:	b002      	add	sp, #8
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	230c      	movs	r3, #12
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	0011      	movs	r1, r2
 80096f6:	0018      	movs	r0, r3
 80096f8:	f000 f946 	bl	8009988 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	0018      	movs	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	b004      	add	sp, #16
 8009704:	bd80      	pop	{r7, pc}

08009706 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	230c      	movs	r3, #12
 8009712:	18fb      	adds	r3, r7, r3
 8009714:	0011      	movs	r1, r2
 8009716:	0018      	movs	r0, r3
 8009718:	f000 f936 	bl	8009988 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	0018      	movs	r0, r3
 8009720:	46bd      	mov	sp, r7
 8009722:	b004      	add	sp, #16
 8009724:	bd80      	pop	{r7, pc}

08009726 <_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_>:
      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
      { return _M_node != __x._M_node; }
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	1e5a      	subs	r2, r3, #1
 800973c:	4193      	sbcs	r3, r2
 800973e:	b2db      	uxtb	r3, r3
 8009740:	0018      	movs	r0, r3
 8009742:	46bd      	mov	sp, r7
 8009744:	b002      	add	sp, #8
 8009746:	bd80      	pop	{r7, pc}

08009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	0018      	movs	r0, r3
 8009756:	f000 f924 	bl	80099a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800975a:	0003      	movs	r3, r0
 800975c:	0018      	movs	r0, r3
 800975e:	46bd      	mov	sp, r7
 8009760:	b002      	add	sp, #8
 8009762:	bd80      	pop	{r7, pc}

08009764 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	601a      	str	r2, [r3, #0]
	return *this;
 8009776:	687b      	ldr	r3, [r7, #4]
      }
 8009778:	0018      	movs	r0, r3
 800977a:	46bd      	mov	sp, r7
 800977c:	b002      	add	sp, #8
 800977e:	bd80      	pop	{r7, pc}

08009780 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	0018      	movs	r0, r3
 8009796:	46bd      	mov	sp, r7
 8009798:	b002      	add	sp, #8
 800979a:	bd80      	pop	{r7, pc}

0800979c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	230c      	movs	r3, #12
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	0011      	movs	r1, r2
 80097b0:	0018      	movs	r0, r3
 80097b2:	f000 f8e9 	bl	8009988 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 80097b6:	003b      	movs	r3, r7
 80097b8:	0018      	movs	r0, r3
 80097ba:	f000 f928 	bl	8009a0e <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 80097be:	0002      	movs	r2, r0
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	0011      	movs	r1, r2
 80097c4:	0018      	movs	r0, r3
 80097c6:	f000 f8fa 	bl	80099be <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 80097ca:	68fb      	ldr	r3, [r7, #12]
    }
 80097cc:	0018      	movs	r0, r3
 80097ce:	46bd      	mov	sp, r7
 80097d0:	b004      	add	sp, #16
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
	return __tmp;
 80097ee:	68fb      	ldr	r3, [r7, #12]
      }
 80097f0:	0018      	movs	r0, r3
 80097f2:	46bd      	mov	sp, r7
 80097f4:	b004      	add	sp, #16
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      bool
      empty() const _GLIBCXX_NOEXCEPT
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	425a      	negs	r2, r3
 800980a:	4153      	adcs	r3, r2
 800980c:	b2db      	uxtb	r3, r3
 800980e:	0018      	movs	r0, r3
 8009810:	46bd      	mov	sp, r7
 8009812:	b002      	add	sp, #8
 8009814:	bd80      	pop	{r7, pc}

08009816 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	0018      	movs	r0, r3
 8009822:	f7ff ff5f 	bl	80096e4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009826:	0003      	movs	r3, r0
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	230c      	movs	r3, #12
 800982c:	18fb      	adds	r3, r7, r3
 800982e:	0018      	movs	r0, r3
 8009830:	f7ff ff8a 	bl	8009748 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009834:	0003      	movs	r3, r0
 8009836:	0018      	movs	r0, r3
 8009838:	46bd      	mov	sp, r7
 800983a:	b004      	add	sp, #16
 800983c:	bd80      	pop	{r7, pc}

0800983e <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
      { return this->_M_node_count(); }
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	0018      	movs	r0, r3
 800984a:	f000 f8f1 	bl	8009a30 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE13_M_node_countEv>
 800984e:	0003      	movs	r3, r0
 8009850:	0018      	movs	r0, r3
 8009852:	46bd      	mov	sp, r7
 8009854:	b002      	add	sp, #8
 8009856:	bd80      	pop	{r7, pc}

08009858 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	0018      	movs	r0, r3
 8009864:	f7ff ff3e 	bl	80096e4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009868:	0002      	movs	r2, r0
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	0011      	movs	r1, r2
 800986e:	0018      	movs	r0, r3
 8009870:	f000 f8a5 	bl	80099be <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 8009874:	46c0      	nop			; (mov r8, r8)
 8009876:	46bd      	mov	sp, r7
 8009878:	b002      	add	sp, #8
 800987a:	bd80      	pop	{r7, pc}

0800987c <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 800987c:	b590      	push	{r4, r7, lr}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	0011      	movs	r1, r2
 800988e:	0018      	movs	r0, r3
 8009890:	f000 f8e5 	bl	8009a5e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8009894:	0003      	movs	r3, r0
 8009896:	617b      	str	r3, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8009898:	697c      	ldr	r4, [r7, #20]
 800989a:	2308      	movs	r3, #8
 800989c:	18fb      	adds	r3, r7, r3
 800989e:	0018      	movs	r0, r3
 80098a0:	f000 f8b5 	bl	8009a0e <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 80098a4:	0003      	movs	r3, r0
 80098a6:	0019      	movs	r1, r3
 80098a8:	0020      	movs	r0, r4
 80098aa:	f001 fbcf 	bl	800b04c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2101      	movs	r1, #1
 80098b2:	0018      	movs	r0, r3
 80098b4:	f000 f909 	bl	8009aca <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	2310      	movs	r3, #16
 80098bc:	18fb      	adds	r3, r7, r3
 80098be:	0011      	movs	r1, r2
 80098c0:	0018      	movs	r0, r3
 80098c2:	f000 f861 	bl	8009988 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80098c6:	693b      	ldr	r3, [r7, #16]
    }
 80098c8:	0018      	movs	r0, r3
 80098ca:	46bd      	mov	sp, r7
 80098cc:	b007      	add	sp, #28
 80098ce:	bd90      	pop	{r4, r7, pc}

080098d0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	0018      	movs	r0, r3
 80098de:	f7ff ff01 	bl	80096e4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80098e2:	0001      	movs	r1, r0
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	0018      	movs	r0, r3
 80098ea:	f000 f900 	bl	8009aee <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	46bd      	mov	sp, r7
 80098f2:	b002      	add	sp, #8
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      _List_base()
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	0018      	movs	r0, r3
 8009902:	f000 f915 	bl	8009b30 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
      { _M_init(); }
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	0018      	movs	r0, r3
 800990a:	f000 f925 	bl	8009b58 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE7_M_initEv>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	0018      	movs	r0, r3
 8009912:	46bd      	mov	sp, r7
 8009914:	b002      	add	sp, #8
 8009916:	bd80      	pop	{r7, pc}

08009918 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	0018      	movs	r0, r3
 8009924:	f000 f92b 	bl	8009b7e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	0018      	movs	r0, r3
 800992c:	46bd      	mov	sp, r7
 800992e:	b002      	add	sp, #8
 8009930:	bd80      	pop	{r7, pc}

08009932 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8009932:	b580      	push	{r7, lr}
 8009934:	b086      	sub	sp, #24
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	429a      	cmp	r2, r3
 8009946:	d01b      	beq.n	8009980 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x4e>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	0018      	movs	r0, r3
 8009956:	f000 f824 	bl	80099a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 800995a:	0003      	movs	r3, r0
 800995c:	60fb      	str	r3, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	0018      	movs	r0, r3
 8009962:	f000 f915 	bl	8009b90 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8009966:	0002      	movs	r2, r0
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	0019      	movs	r1, r3
 800996c:	0010      	movs	r0, r2
 800996e:	f000 f918 	bl	8009ba2 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	0011      	movs	r1, r2
 8009978:	0018      	movs	r0, r3
 800997a:	f000 f921 	bl	8009bc0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 800997e:	e7df      	b.n	8009940 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0xe>
    }
 8009980:	46c0      	nop			; (mov r8, r8)
 8009982:	46bd      	mov	sp, r7
 8009984:	b006      	add	sp, #24
 8009986:	bd80      	pop	{r7, pc}

08009988 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	0018      	movs	r0, r3
 800999c:	46bd      	mov	sp, r7
 800999e:	b002      	add	sp, #8
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3308      	adds	r3, #8
 80099ae:	0018      	movs	r0, r3
 80099b0:	f000 f915 	bl	8009bde <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 80099b4:	0003      	movs	r3, r0
 80099b6:	0018      	movs	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b002      	add	sp, #8
 80099bc:	bd80      	pop	{r7, pc}

080099be <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 80099be:	b590      	push	{r4, r7, lr}
 80099c0:	b085      	sub	sp, #20
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2101      	movs	r1, #1
 80099cc:	0018      	movs	r0, r3
 80099ce:	f000 f913 	bl	8009bf8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	0018      	movs	r0, r3
 80099d6:	f001 fb40 	bl	800b05a <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	0018      	movs	r0, r3
 80099e2:	f000 f8d5 	bl	8009b90 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80099e6:	0004      	movs	r4, r0
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	0018      	movs	r0, r3
 80099ec:	f7ff ffd9 	bl	80099a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 80099f0:	0003      	movs	r3, r0
 80099f2:	0019      	movs	r1, r3
 80099f4:	0020      	movs	r0, r4
 80099f6:	f000 f8d4 	bl	8009ba2 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	0011      	movs	r1, r2
 8009a00:	0018      	movs	r0, r3
 8009a02:	f000 f8dd 	bl	8009bc0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	b005      	add	sp, #20
 8009a0c:	bd90      	pop	{r4, r7, pc}

08009a0e <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	230c      	movs	r3, #12
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	0011      	movs	r1, r2
 8009a20:	0018      	movs	r0, r3
 8009a22:	f7ff ffb1 	bl	8009988 <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	0018      	movs	r0, r3
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	b004      	add	sp, #16
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE13_M_node_countEv>:
      size_t _M_node_count() const { return *_M_impl._M_node._M_valptr(); }
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	f000 f8ee 	bl	8009c1c <_ZNKSt10_List_nodeIjE9_M_valptrEv>
 8009a40:	0003      	movs	r3, r0
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	0018      	movs	r0, r3
 8009a46:	46bd      	mov	sp, r7
 8009a48:	b002      	add	sp, #8
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	0018      	movs	r0, r3
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	b002      	add	sp, #8
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009a5e:	b5b0      	push	{r4, r5, r7, lr}
 8009a60:	b086      	sub	sp, #24
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f000 f8e4 	bl	8009c38 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 8009a70:	0003      	movs	r3, r0
 8009a72:	617b      	str	r3, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	0018      	movs	r0, r3
 8009a78:	f000 f88a 	bl	8009b90 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 8009a7c:	0003      	movs	r3, r0
 8009a7e:	613b      	str	r3, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	6939      	ldr	r1, [r7, #16]
 8009a84:	2508      	movs	r5, #8
 8009a86:	197b      	adds	r3, r7, r5
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f000 f8e3 	bl	8009c54 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	0018      	movs	r0, r3
 8009a92:	f7ff ff86 	bl	80099a2 <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8009a96:	0004      	movs	r4, r0
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f7ff ffd6 	bl	8009a4c <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009aa0:	0002      	movs	r2, r0
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	0021      	movs	r1, r4
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f000 f8fe 	bl	8009ca8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8009aac:	197b      	adds	r3, r7, r5
 8009aae:	2100      	movs	r1, #0
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	f000 f90d 	bl	8009cd0 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 8009ab6:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8009ab8:	197b      	adds	r3, r7, r5
 8009aba:	0018      	movs	r0, r3
 8009abc:	f000 f8df 	bl	8009c7e <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 8009ac0:	0023      	movs	r3, r4
	}
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	b006      	add	sp, #24
 8009ac8:	bdb0      	pop	{r4, r5, r7, pc}

08009aca <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { *_M_impl._M_node._M_valptr() += __n; }
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f000 f907 	bl	8009cea <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8009adc:	0003      	movs	r3, r0
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	188a      	adds	r2, r1, r2
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	b002      	add	sp, #8
 8009aec:	bd80      	pop	{r7, pc}

08009aee <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b086      	sub	sp, #24
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	0018      	movs	r0, r3
 8009afe:	f7ff ffa5 	bl	8009a4c <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009b02:	0002      	movs	r2, r0
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	0011      	movs	r1, r2
 8009b08:	0018      	movs	r0, r3
 8009b0a:	f7ff ffa8 	bl	8009a5e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8009b0e:	0003      	movs	r3, r0
 8009b10:	617b      	str	r3, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	0011      	movs	r1, r2
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f001 fa97 	bl	800b04c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2101      	movs	r1, #1
 8009b22:	0018      	movs	r0, r3
 8009b24:	f7ff ffd1 	bl	8009aca <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 8009b28:	46c0      	nop			; (mov r8, r8)
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	b006      	add	sp, #24
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type(), _M_node()
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	0018      	movs	r0, r3
 8009b3c:	f000 f8e3 	bl	8009d06 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	0018      	movs	r0, r3
 8009b44:	230c      	movs	r3, #12
 8009b46:	001a      	movs	r2, r3
 8009b48:	2100      	movs	r1, #0
 8009b4a:	f001 fb1c 	bl	800b186 <memset>
	{ }
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	0018      	movs	r0, r3
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b002      	add	sp, #8
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE7_M_initEv>:
      _M_init() _GLIBCXX_NOEXCEPT
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	605a      	str	r2, [r3, #4]
	_M_set_size(0);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2100      	movs	r1, #0
 8009b70:	0018      	movs	r0, r3
 8009b72:	f000 f8d5 	bl	8009d20 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_set_sizeEj>
      }
 8009b76:	46c0      	nop			; (mov r8, r8)
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	b002      	add	sp, #8
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	0018      	movs	r0, r3
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	b002      	add	sp, #8
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	b002      	add	sp, #8
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	0011      	movs	r1, r2
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f000 f8c4 	bl	8009d40 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
 8009bb8:	46c0      	nop			; (mov r8, r8)
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	b002      	add	sp, #8
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f000 f8be 	bl	8009d52 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 8009bd6:	46c0      	nop			; (mov r8, r8)
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	b002      	add	sp, #8
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	0018      	movs	r0, r3
 8009bea:	f000 f8c2 	bl	8009d72 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 8009bee:	0003      	movs	r3, r0
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	b002      	add	sp, #8
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { *_M_impl._M_node._M_valptr() -= __n; }
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	0018      	movs	r0, r3
 8009c06:	f000 f870 	bl	8009cea <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8009c0a:	0003      	movs	r3, r0
 8009c0c:	6819      	ldr	r1, [r3, #0]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	1a8a      	subs	r2, r1, r2
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	46c0      	nop			; (mov r8, r8)
 8009c16:	46bd      	mov	sp, r7
 8009c18:	b002      	add	sp, #8
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <_ZNKSt10_List_nodeIjE9_M_valptrEv>:
      _Tp const* _M_valptr() const { return _M_storage._M_ptr(); }
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3308      	adds	r3, #8
 8009c28:	0018      	movs	r0, r3
 8009c2a:	f000 f8ab 	bl	8009d84 <_ZNK9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>
 8009c2e:	0003      	movs	r3, r0
 8009c30:	0018      	movs	r0, r3
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b002      	add	sp, #8
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2101      	movs	r1, #1
 8009c44:	0018      	movs	r0, r3
 8009c46:	f000 f8aa 	bl	8009d9e <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 8009c4a:	0003      	movs	r3, r0
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	b002      	add	sp, #8
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	0018      	movs	r0, r3
 8009c64:	f000 f8ab 	bl	8009dbe <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 8009c68:	0002      	movs	r2, r0
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	605a      	str	r2, [r3, #4]
      { }
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	0018      	movs	r0, r3
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	b004      	add	sp, #16
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d007      	beq.n	8009c9e <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	0019      	movs	r1, r3
 8009c9a:	f000 f85a 	bl	8009d52 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	b002      	add	sp, #8
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	0018      	movs	r0, r3
 8009cb8:	f7ff fec8 	bl	8009a4c <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009cbc:	0002      	movs	r2, r0
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f000 f884 	bl	8009dd0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 8009cc8:	46c0      	nop			; (mov r8, r8)
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	b004      	add	sp, #16
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	605a      	str	r2, [r3, #4]
	return *this;
 8009ce0:	687b      	ldr	r3, [r7, #4]
      }
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b002      	add	sp, #8
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <_ZNSt10_List_nodeIjE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3308      	adds	r3, #8
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f000 f882 	bl	8009e00 <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>
 8009cfc:	0003      	movs	r3, r0
 8009cfe:	0018      	movs	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	b002      	add	sp, #8
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() throw() { }
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	0018      	movs	r0, r3
 8009d12:	f000 f882 	bl	8009e1a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	0018      	movs	r0, r3
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	b002      	add	sp, #8
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_set_sizeEj>:
      void _M_set_size(size_t __n) { *_M_impl._M_node._M_valptr() = __n; }
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	f7ff ffdc 	bl	8009cea <_ZNSt10_List_nodeIjE9_M_valptrEv>
 8009d32:	0003      	movs	r3, r0
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	46c0      	nop			; (mov r8, r8)
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	b002      	add	sp, #8
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	b002      	add	sp, #8
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	0018      	movs	r0, r3
 8009d66:	f000 f861 	bl	8009e2c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 8009d6a:	46c0      	nop			; (mov r8, r8)
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	b004      	add	sp, #16
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	b002      	add	sp, #8
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <_ZNK9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	0018      	movs	r0, r3
 8009d90:	f000 f85a 	bl	8009e48 <_ZNK9__gnu_cxx16__aligned_membufIjE7_M_addrEv>
 8009d94:	0003      	movs	r3, r0
 8009d96:	0018      	movs	r0, r3
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	b002      	add	sp, #8
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	0018      	movs	r0, r3
 8009db0:	f000 f853 	bl	8009e5a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 8009db4:	0003      	movs	r3, r0
 8009db6:	0018      	movs	r0, r3
 8009db8:	46bd      	mov	sp, r7
 8009dba:	b002      	add	sp, #8
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	0018      	movs	r0, r3
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b002      	add	sp, #8
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009dd0:	b590      	push	{r4, r7, lr}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	0018      	movs	r0, r3
 8009de0:	f7ff fe34 	bl	8009a4c <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009de4:	0003      	movs	r3, r0
 8009de6:	681c      	ldr	r4, [r3, #0]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	0019      	movs	r1, r3
 8009dec:	2004      	movs	r0, #4
 8009dee:	f7ff f84d 	bl	8008e8c <_ZnwjPv>
 8009df2:	1e03      	subs	r3, r0, #0
 8009df4:	d000      	beq.n	8009df8 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_+0x28>
 8009df6:	601c      	str	r4, [r3, #0]
 8009df8:	46c0      	nop			; (mov r8, r8)
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	b005      	add	sp, #20
 8009dfe:	bd90      	pop	{r4, r7, pc}

08009e00 <_ZN9__gnu_cxx16__aligned_membufIjE6_M_ptrEv>:
      _M_ptr() noexcept
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f000 f846 	bl	8009e9c <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>
 8009e10:	0003      	movs	r3, r0
 8009e12:	0018      	movs	r0, r3
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b002      	add	sp, #8
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	0018      	movs	r0, r3
 8009e26:	46bd      	mov	sp, r7
 8009e28:	b002      	add	sp, #8
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	f001 f8f6 	bl	800b02c <_ZdlPv>
      }
 8009e40:	46c0      	nop			; (mov r8, r8)
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b004      	add	sp, #16
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <_ZNK9__gnu_cxx16__aligned_membufIjE7_M_addrEv>:
      _M_addr() const noexcept
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	0018      	movs	r0, r3
 8009e54:	46bd      	mov	sp, r7
 8009e56:	b002      	add	sp, #8
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f000 f821 	bl	8009eb0 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv>
 8009e6e:	0002      	movs	r2, r0
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	419b      	sbcs	r3, r3
 8009e76:	425b      	negs	r3, r3
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009e7e:	f001 f8f1 	bl	800b064 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	0013      	movs	r3, r2
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	189b      	adds	r3, r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f001 f8b4 	bl	800affa <_Znwj>
 8009e92:	0003      	movs	r3, r0
      }
 8009e94:	0018      	movs	r0, r3
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b004      	add	sp, #16
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <_ZN9__gnu_cxx16__aligned_membufIjE7_M_addrEv>:
      _M_addr() noexcept
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	b002      	add	sp, #8
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8009eb8:	4b02      	ldr	r3, [pc, #8]	; (8009ec4 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv+0x14>)
 8009eba:	0018      	movs	r0, r3
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	b002      	add	sp, #8
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	15555555 	.word	0x15555555

08009ec8 <XF_initialize>:
using interface::XFTimeoutManager;

bool XF::_bInitialized = false;

void XF_initialize(int timeInterval)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
    XF::initialize(timeInterval);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f000 f80c 	bl	8009ef4 <_ZN2XF10initializeEiiPPc>
}
 8009edc:	46c0      	nop			; (mov r8, r8)
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	b002      	add	sp, #8
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <XF_exec>:

void XF_exec()
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	af00      	add	r7, sp, #0
    XF::exec();
 8009ee8:	f000 f824 	bl	8009f34 <_ZN2XF4execEv>
}
 8009eec:	46c0      	nop			; (mov r8, r8)
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <_ZN2XF10initializeEiiPPc>:
{
    XF::execOnce();
}

void XF::initialize(int timeInterval /* = 10 */, int argc /* = 0 */, char * argv[] /* = nullptr */)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
    if (!_bInitialized)
 8009f00:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <_ZN2XF10initializeEiiPPc+0x3c>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2201      	movs	r2, #1
 8009f06:	4053      	eors	r3, r2
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00b      	beq.n	8009f26 <_ZN2XF10initializeEiiPPc+0x32>
    {
        // Create and initialize TimeoutManager
        XFTimeoutManager::getInstance()->initialize(timeInterval);
 8009f0e:	f7ff f817 	bl	8008f40 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8009f12:	0002      	movs	r2, r0
 8009f14:	6813      	ldr	r3, [r2, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68f9      	ldr	r1, [r7, #12]
 8009f1c:	0010      	movs	r0, r2
 8009f1e:	4798      	blx	r3

        _bInitialized = true;
 8009f20:	4b03      	ldr	r3, [pc, #12]	; (8009f30 <_ZN2XF10initializeEiiPPc+0x3c>)
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
    }
}
 8009f26:	46c0      	nop			; (mov r8, r8)
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	b004      	add	sp, #16
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	46c0      	nop			; (mov r8, r8)
 8009f30:	20000158 	.word	0x20000158

08009f34 <_ZN2XF4execEv>:

int XF::exec()
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
	// Start timeout manager
	XFTimeoutManager::getInstance()->start();
 8009f38:	f7ff f802 	bl	8008f40 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8009f3c:	0002      	movs	r2, r0
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	3310      	adds	r3, #16
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	0010      	movs	r0, r2
 8009f46:	4798      	blx	r3

	// Start default dispatcher
	XFResourceFactory::getInstance()->getDefaultDispatcher()->start();
 8009f48:	f7fe ff22 	bl	8008d90 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8009f4c:	0002      	movs	r2, r0
 8009f4e:	6813      	ldr	r3, [r2, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	0010      	movs	r0, r2
 8009f54:	4798      	blx	r3
 8009f56:	0002      	movs	r2, r0
 8009f58:	6813      	ldr	r3, [r2, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	0010      	movs	r0, r2
 8009f60:	4798      	blx	r3

	// In case default dispatcher does not have a thread executing it,
	// call it with this thread
	if (!XFResourceFactory::getInstance()->getDefaultDispatcher()->isActive())
 8009f62:	f7fe ff15 	bl	8008d90 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8009f66:	0002      	movs	r2, r0
 8009f68:	6813      	ldr	r3, [r2, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	0010      	movs	r0, r2
 8009f6e:	4798      	blx	r3
 8009f70:	0002      	movs	r2, r0
 8009f72:	6813      	ldr	r3, [r2, #0]
 8009f74:	3308      	adds	r3, #8
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	0010      	movs	r0, r2
 8009f7a:	4798      	blx	r3
 8009f7c:	0003      	movs	r3, r0
 8009f7e:	001a      	movs	r2, r3
 8009f80:	2301      	movs	r3, #1
 8009f82:	4053      	eors	r3, r2
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00d      	beq.n	8009fa6 <_ZN2XF4execEv+0x72>
	{
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
 8009f8a:	f7fe ff01 	bl	8008d90 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8009f8e:	0002      	movs	r2, r0
 8009f90:	6813      	ldr	r3, [r2, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	0010      	movs	r0, r2
 8009f96:	4798      	blx	r3
 8009f98:	0002      	movs	r2, r0
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	3324      	adds	r3, #36	; 0x24
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	0010      	movs	r0, r2
 8009fa4:	4798      	blx	r3
	}
    return 0;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	0018      	movs	r0, r3
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a07      	ldr	r2, [pc, #28]	; (8009fd8 <_ZSt16__deque_buf_sizej+0x28>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d806      	bhi.n	8009fce <_ZSt16__deque_buf_sizej+0x1e>
 8009fc0:	6879      	ldr	r1, [r7, #4]
 8009fc2:	2380      	movs	r3, #128	; 0x80
 8009fc4:	0098      	lsls	r0, r3, #2
 8009fc6:	f7f6 f89f 	bl	8000108 <__udivsi3>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	e000      	b.n	8009fd0 <_ZSt16__deque_buf_sizej+0x20>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b002      	add	sp, #8
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	000001ff 	.word	0x000001ff

08009fdc <_ZN9interface12XFEventQueueC1Ev>:
    virtual const XFEvent * front() = 0;			///< Returns pointer to next event to pop.
    virtual void pop() = 0;							///< Pops the next event from the queue.
    virtual bool pend() = 0;						///< Wait for the next event to arrive. Returns true if an event is in the queue.

public:
    XFEventQueue() = default;
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	4a03      	ldr	r2, [pc, #12]	; (8009ff4 <_ZN9interface12XFEventQueueC1Ev+0x18>)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	0018      	movs	r0, r3
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	b002      	add	sp, #8
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	0800c834 	.word	0x0800c834

08009ff8 <_ZN9interface12XFEventQueueD1Ev>:
    virtual ~XFEventQueue() = default;
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	4a03      	ldr	r2, [pc, #12]	; (800a010 <_ZN9interface12XFEventQueueD1Ev+0x18>)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	0018      	movs	r0, r3
 800a00a:	46bd      	mov	sp, r7
 800a00c:	b002      	add	sp, #8
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	0800c834 	.word	0x0800c834

0800a014 <_ZN9interface12XFEventQueueD0Ev>:
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	0018      	movs	r0, r3
 800a020:	f7ff ffea 	bl	8009ff8 <_ZN9interface12XFEventQueueD1Ev>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2104      	movs	r1, #4
 800a028:	0018      	movs	r0, r3
 800a02a:	f000 ffe2 	bl	800aff2 <_ZdlPvj>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	0018      	movs	r0, r3
 800a032:	46bd      	mov	sp, r7
 800a034:	b002      	add	sp, #8
 800a036:	bd80      	pop	{r7, pc}

0800a038 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	0018      	movs	r0, r3
 800a044:	f000 f8c1 	bl	800a1ca <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	0018      	movs	r0, r3
 800a04c:	46bd      	mov	sp, r7
 800a04e:	b002      	add	sp, #8
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <_ZN19XFEventQueueDefaultC1Ev>:
#if (USE_XF_EVENT_QUEUE_DEFAULT_IDF_IMPLEMENTATION != 0)

#include <assert.h>
#include "eventqueue-default.h"

XFEventQueueDefault::XFEventQueueDefault()
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	0018      	movs	r0, r3
 800a060:	f7ff ffbc 	bl	8009fdc <_ZN9interface12XFEventQueueC1Ev>
 800a064:	4a08      	ldr	r2, [pc, #32]	; (800a088 <_ZN19XFEventQueueDefaultC1Ev+0x34>)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3304      	adds	r3, #4
 800a06e:	0018      	movs	r0, r3
 800a070:	f000 ff3c 	bl	800aeec <_ZN14XFMutexDefaultC1Ev>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3308      	adds	r3, #8
 800a078:	0018      	movs	r0, r3
 800a07a:	f000 f899 	bl	800a1b0 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>
{

}
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	0018      	movs	r0, r3
 800a082:	46bd      	mov	sp, r7
 800a084:	b002      	add	sp, #8
 800a086:	bd80      	pop	{r7, pc}
 800a088:	0800c810 	.word	0x0800c810

0800a08c <_ZN19XFEventQueueDefaultD1Ev>:

XFEventQueueDefault::~XFEventQueueDefault()
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	4a0a      	ldr	r2, [pc, #40]	; (800a0c0 <_ZN19XFEventQueueDefaultD1Ev+0x34>)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3308      	adds	r3, #8
 800a09e:	0018      	movs	r0, r3
 800a0a0:	f7ff ffca 	bl	800a038 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEED1Ev>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f000 ff31 	bl	800af10 <_ZN14XFMutexDefaultD1Ev>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f7ff ffa1 	bl	8009ff8 <_ZN9interface12XFEventQueueD1Ev>
{

}
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	b002      	add	sp, #8
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	0800c810 	.word	0x0800c810

0800a0c4 <_ZN19XFEventQueueDefaultD0Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
}
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f7ff ffdc 	bl	800a08c <_ZN19XFEventQueueDefaultD1Ev>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2130      	movs	r1, #48	; 0x30
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f000 ff8a 	bl	800aff2 <_ZdlPvj>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	b002      	add	sp, #8
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <_ZNK19XFEventQueueDefault5emptyEv>:

bool XFEventQueueDefault::empty() const
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
    return _queue.empty();
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f000 f88d 	bl	800a214 <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>
 800a0fa:	0003      	movs	r3, r0
}
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	46bd      	mov	sp, r7
 800a100:	b002      	add	sp, #8
 800a102:	bd80      	pop	{r7, pc}

0800a104 <_ZN19XFEventQueueDefault4pushEPK7XFEvent>:

bool XFEventQueueDefault::push(const XFEvent * pEvent)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
    _mutex.lock();
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3304      	adds	r3, #4
 800a112:	0018      	movs	r0, r3
 800a114:	f000 ff20 	bl	800af58 <_ZN14XFMutexDefault4lockEv>
    {
        _queue.push(pEvent);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3308      	adds	r3, #8
 800a11c:	003a      	movs	r2, r7
 800a11e:	0011      	movs	r1, r2
 800a120:	0018      	movs	r0, r3
 800a122:	f000 f884 	bl	800a22e <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>
    }
    _mutex.unlock();
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3304      	adds	r3, #4
 800a12a:	0018      	movs	r0, r3
 800a12c:	f000 ff1e 	bl	800af6c <_ZN14XFMutexDefault6unlockEv>

    return true;
 800a130:	2301      	movs	r3, #1
}
 800a132:	0018      	movs	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	b002      	add	sp, #8
 800a138:	bd80      	pop	{r7, pc}

0800a13a <_ZN19XFEventQueueDefault5frontEv>:

const XFEvent * XFEventQueueDefault::front()
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
    const XFEvent * event;
    _mutex.lock();
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3304      	adds	r3, #4
 800a146:	0018      	movs	r0, r3
 800a148:	f000 ff06 	bl	800af58 <_ZN14XFMutexDefault4lockEv>
    {
        event =  _queue.front();
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3308      	adds	r3, #8
 800a150:	0018      	movs	r0, r3
 800a152:	f000 f87b 	bl	800a24c <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>
 800a156:	0003      	movs	r3, r0
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]
    }
    _mutex.unlock();
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3304      	adds	r3, #4
 800a160:	0018      	movs	r0, r3
 800a162:	f000 ff03 	bl	800af6c <_ZN14XFMutexDefault6unlockEv>
    return event;
 800a166:	68fb      	ldr	r3, [r7, #12]
}
 800a168:	0018      	movs	r0, r3
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b004      	add	sp, #16
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <_ZN19XFEventQueueDefault3popEv>:

void XFEventQueueDefault::pop()
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
    _mutex.lock();
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3304      	adds	r3, #4
 800a17c:	0018      	movs	r0, r3
 800a17e:	f000 feeb 	bl	800af58 <_ZN14XFMutexDefault4lockEv>
    {
        _queue.pop();
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3308      	adds	r3, #8
 800a186:	0018      	movs	r0, r3
 800a188:	f000 f86d 	bl	800a266 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>
    }
    _mutex.unlock();
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3304      	adds	r3, #4
 800a190:	0018      	movs	r0, r3
 800a192:	f000 feeb 	bl	800af6c <_ZN14XFMutexDefault6unlockEv>
}
 800a196:	46c0      	nop			; (mov r8, r8)
 800a198:	46bd      	mov	sp, r7
 800a19a:	b002      	add	sp, #8
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <_ZN19XFEventQueueDefault4pendEv>:

bool XFEventQueueDefault::pend()
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	b002      	add	sp, #8
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEEC1IS5_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	: c() { }
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f000 f85f 	bl	800a27e <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	b002      	add	sp, #8
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <_ZNSt5dequeIPK7XFEventSaIS2_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800a1ca:	b5b0      	push	{r4, r5, r7, lr}
 800a1cc:	b08a      	sub	sp, #40	; 0x28
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800a1d2:	2408      	movs	r4, #8
 800a1d4:	193b      	adds	r3, r7, r4
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	0011      	movs	r1, r2
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f000 f88b 	bl	800a2f6 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 800a1e0:	2518      	movs	r5, #24
 800a1e2:	197b      	adds	r3, r7, r5
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	0011      	movs	r1, r2
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f000 f895 	bl	800a318 <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	0018      	movs	r0, r3
 800a1f2:	f000 f8a2 	bl	800a33a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 800a1f6:	0003      	movs	r3, r0
 800a1f8:	197a      	adds	r2, r7, r5
 800a1fa:	1939      	adds	r1, r7, r4
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f8bf 	bl	800a380 <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	0018      	movs	r0, r3
 800a206:	f000 f854 	bl	800a2b2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	0018      	movs	r0, r3
 800a20e:	46bd      	mov	sp, r7
 800a210:	b00a      	add	sp, #40	; 0x28
 800a212:	bdb0      	pop	{r4, r5, r7, pc}

0800a214 <_ZNKSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      bool
      empty() const
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	0018      	movs	r0, r3
 800a220:	f000 f8b9 	bl	800a396 <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>
 800a224:	0003      	movs	r3, r0
 800a226:	0018      	movs	r0, r3
 800a228:	46bd      	mov	sp, r7
 800a22a:	b002      	add	sp, #8
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE4pushERKS2_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	0011      	movs	r1, r2
 800a23e:	0018      	movs	r0, r3
 800a240:	f000 f8bb 	bl	800a3ba <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>
 800a244:	46c0      	nop			; (mov r8, r8)
 800a246:	46bd      	mov	sp, r7
 800a248:	b002      	add	sp, #8
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE5frontEv>:
      front()
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	return c.front();
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f8d2 	bl	800a400 <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>
 800a25c:	0003      	movs	r3, r0
      }
 800a25e:	0018      	movs	r0, r3
 800a260:	46bd      	mov	sp, r7
 800a262:	b002      	add	sp, #8
 800a264:	bd80      	pop	{r7, pc}

0800a266 <_ZNSt5queueIPK7XFEventSt5dequeIS2_SaIS2_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	0018      	movs	r0, r3
 800a272:	f000 f8d9 	bl	800a428 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>
      }
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	46bd      	mov	sp, r7
 800a27a:	b002      	add	sp, #8
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <_ZNSt5dequeIPK7XFEventSaIS2_EEC1Ev>:
      deque() : _Base() { }
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	0018      	movs	r0, r3
 800a28a:	f000 f8ed 	bl	800a468 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	0018      	movs	r0, r3
 800a292:	46bd      	mov	sp, r7
 800a294:	b002      	add	sp, #8
 800a296:	bd80      	pop	{r7, pc}

0800a298 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	f000 f8f2 	bl	800a48c <_ZNSaIPK7XFEventED1Ev>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	b002      	add	sp, #8
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b082      	sub	sp, #8
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d010      	beq.n	800a2e4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800a2ca:	1d1a      	adds	r2, r3, #4
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f000 f8e9 	bl	800a4a6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6819      	ldr	r1, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f000 f8fc 	bl	800a4dc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>
    }
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f7ff ffd6 	bl	800a298 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implD1Ev>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	b002      	add	sp, #8
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	3308      	adds	r3, #8
 800a304:	001a      	movs	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	0011      	movs	r1, r2
 800a30a:	0018      	movs	r0, r3
 800a30c:	f000 f81e 	bl	800a34c <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	46bd      	mov	sp, r7
 800a314:	b002      	add	sp, #8
 800a316:	bd80      	pop	{r7, pc}

0800a318 <_ZNSt5dequeIPK7XFEventSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	3318      	adds	r3, #24
 800a326:	001a      	movs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	0011      	movs	r1, r2
 800a32c:	0018      	movs	r0, r3
 800a32e:	f000 f80d 	bl	800a34c <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	46bd      	mov	sp, r7
 800a336:	b002      	add	sp, #8
 800a338:	bd80      	pop	{r7, pc}

0800a33a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	0018      	movs	r0, r3
 800a346:	46bd      	mov	sp, r7
 800a348:	b002      	add	sp, #8
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1ERKS5_>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	601a      	str	r2, [r3, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	689a      	ldr	r2, [r3, #8]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	609a      	str	r2, [r3, #8]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68da      	ldr	r2, [r3, #12]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	60da      	str	r2, [r3, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	0018      	movs	r0, r3
 800a37a:	46bd      	mov	sp, r7
 800a37c:	b002      	add	sp, #8
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <_ZNSt5dequeIPK7XFEventSaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800a380:	b580      	push	{r7, lr}
 800a382:	b08c      	sub	sp, #48	; 0x30
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800a38e:	46c0      	nop			; (mov r8, r8)
 800a390:	46bd      	mov	sp, r7
 800a392:	b00c      	add	sp, #48	; 0x30
 800a394:	bd80      	pop	{r7, pc}

0800a396 <_ZNKSt5dequeIPK7XFEventSaIS2_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3318      	adds	r3, #24
 800a3a2:	001a      	movs	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	0019      	movs	r1, r3
 800a3aa:	0010      	movs	r0, r2
 800a3ac:	f000 f8b1 	bl	800a512 <_ZSteqIPK7XFEventRS2_PS2_EbRKSt15_Deque_iteratorIT_T0_T1_ESB_>
 800a3b0:	0003      	movs	r3, r0
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	b002      	add	sp, #8
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d00c      	beq.n	800a3ec <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	0019      	movs	r1, r3
 800a3dc:	f000 f8b3 	bl	800a546 <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	1d1a      	adds	r2, r3, #4
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	619a      	str	r2, [r3, #24]
      }
 800a3ea:	e005      	b.n	800a3f8 <_ZNSt5dequeIPK7XFEventSaIS2_EE9push_backERKS2_+0x3e>
	  _M_push_back_aux(__x);
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	0011      	movs	r1, r2
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	f000 f8bb 	bl	800a56e <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
      }
 800a3f8:	46c0      	nop			; (mov r8, r8)
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	b002      	add	sp, #8
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <_ZNSt5dequeIPK7XFEventSaIS2_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 800a400:	b590      	push	{r4, r7, lr}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
	return *begin();
 800a408:	2408      	movs	r4, #8
 800a40a:	193b      	adds	r3, r7, r4
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	0011      	movs	r1, r2
 800a410:	0018      	movs	r0, r3
 800a412:	f7ff ff70 	bl	800a2f6 <_ZNSt5dequeIPK7XFEventSaIS2_EE5beginEv>
 800a416:	193b      	adds	r3, r7, r4
 800a418:	0018      	movs	r0, r3
 800a41a:	f000 f8da 	bl	800a5d2 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>
 800a41e:	0003      	movs	r3, r0
      }
 800a420:	0018      	movs	r0, r3
 800a422:	46bd      	mov	sp, r7
 800a424:	b007      	add	sp, #28
 800a426:	bd90      	pop	{r4, r7, pc}

0800a428 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d00c      	beq.n	800a458 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x30>
	    _Alloc_traits::destroy(this->_M_impl,
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	0019      	movs	r1, r3
 800a446:	0010      	movs	r0, r2
 800a448:	f000 f8cd 	bl	800a5e6 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	1d1a      	adds	r2, r3, #4
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	609a      	str	r2, [r3, #8]
      }
 800a456:	e003      	b.n	800a460 <_ZNSt5dequeIPK7XFEventSaIS2_EE9pop_frontEv+0x38>
	  _M_pop_front_aux();
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	0018      	movs	r0, r3
 800a45c:	f000 f8d2 	bl	800a604 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
      }
 800a460:	46c0      	nop			; (mov r8, r8)
 800a462:	46bd      	mov	sp, r7
 800a464:	b002      	add	sp, #8
 800a466:	bd80      	pop	{r7, pc}

0800a468 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EEC1Ev>:
      _Deque_base()
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	0018      	movs	r0, r3
 800a474:	f000 f8ee 	bl	800a654 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2100      	movs	r1, #0
 800a47c:	0018      	movs	r0, r3
 800a47e:	f000 f906 	bl	800a68e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	0018      	movs	r0, r3
 800a486:	46bd      	mov	sp, r7
 800a488:	b002      	add	sp, #8
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <_ZNSaIPK7XFEventED1Ev>:
      ~allocator() throw() { }
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	0018      	movs	r0, r3
 800a498:	f000 f961 	bl	800a75e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	0018      	movs	r0, r3
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b002      	add	sp, #8
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b086      	sub	sp, #24
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	617b      	str	r3, [r7, #20]
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d20a      	bcs.n	800a4d4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x2e>
	_M_deallocate_node(*__n);
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	0011      	movs	r1, r2
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	f000 f952 	bl	800a770 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	617b      	str	r3, [r7, #20]
 800a4d2:	e7f0      	b.n	800a4b6 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x10>
    }
 800a4d4:	46c0      	nop			; (mov r8, r8)
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	b006      	add	sp, #24
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800a4dc:	b590      	push	{r4, r7, lr}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a4e8:	2414      	movs	r4, #20
 800a4ea:	193b      	adds	r3, r7, r4
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	0011      	movs	r1, r2
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	f000 f950 	bl	800a796 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	193b      	adds	r3, r7, r4
 800a4fc:	0018      	movs	r0, r3
 800a4fe:	f000 f96a 	bl	800a7d6 <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a502:	193b      	adds	r3, r7, r4
 800a504:	0018      	movs	r0, r3
 800a506:	f000 f959 	bl	800a7bc <_ZNSaIPPK7XFEventED1Ev>
      }
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	46bd      	mov	sp, r7
 800a50e:	b007      	add	sp, #28
 800a510:	bd90      	pop	{r4, r7, pc}

0800a512 <_ZSteqIPK7XFEventRS2_PS2_EbRKSt15_Deque_iteratorIT_T0_T1_ESB_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	425a      	negs	r2, r3
 800a528:	4153      	adcs	r3, r2
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	0018      	movs	r0, r3
 800a52e:	46bd      	mov	sp, r7
 800a530:	b002      	add	sp, #8
 800a532:	bd80      	pop	{r7, pc}

0800a534 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	0018      	movs	r0, r3
 800a540:	46bd      	mov	sp, r7
 800a542:	b002      	add	sp, #8
 800a544:	bd80      	pop	{r7, pc}

0800a546 <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	0018      	movs	r0, r3
 800a556:	f7ff ffed 	bl	800a534 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 800a55a:	0002      	movs	r2, r0
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	0018      	movs	r0, r3
 800a562:	f000 f948 	bl	800a7f6 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>
 800a566:	46c0      	nop			; (mov r8, r8)
 800a568:	46bd      	mov	sp, r7
 800a56a:	b004      	add	sp, #16
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800a56e:	b5b0      	push	{r4, r5, r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2101      	movs	r1, #1
 800a57c:	0018      	movs	r0, r3
 800a57e:	f000 f952 	bl	800a826 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	1d1c      	adds	r4, r3, #4
 800a58a:	0010      	movs	r0, r2
 800a58c:	f000 f968 	bl	800a860 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 800a590:	0003      	movs	r3, r0
 800a592:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800a594:	687c      	ldr	r4, [r7, #4]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	699d      	ldr	r5, [r3, #24]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	0018      	movs	r0, r3
 800a59e:	f7ff ffc9 	bl	800a534 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 800a5a2:	0003      	movs	r3, r0
 800a5a4:	001a      	movs	r2, r3
 800a5a6:	0029      	movs	r1, r5
 800a5a8:	0020      	movs	r0, r4
 800a5aa:	f7ff ffcc 	bl	800a546 <_ZNSt16allocator_traitsISaIPK7XFEventEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3318      	adds	r3, #24
 800a5b2:	001a      	movs	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	0019      	movs	r1, r3
 800a5bc:	0010      	movs	r0, r2
 800a5be:	f000 f961 	bl	800a884 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	69da      	ldr	r2, [r3, #28]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	b002      	add	sp, #8
 800a5d0:	bdb0      	pop	{r4, r5, r7, pc}

0800a5d2 <_ZNKSt15_Deque_iteratorIPK7XFEventRS2_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	0018      	movs	r0, r3
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	b002      	add	sp, #8
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	0011      	movs	r1, r2
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f000 f95d 	bl	800a8b6 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>
 800a5fc:	46c0      	nop			; (mov r8, r8)
 800a5fe:	46bd      	mov	sp, r7
 800a600:	b002      	add	sp, #8
 800a602:	bd80      	pop	{r7, pc}

0800a604 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	0018      	movs	r0, r3
 800a610:	f7ff fe93 	bl	800a33a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 800a614:	0002      	movs	r2, r0
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	0019      	movs	r1, r3
 800a61c:	0010      	movs	r0, r2
 800a61e:	f7ff ffe2 	bl	800a5e6 <_ZNSt16allocator_traitsISaIPK7XFEventEE7destroyIS2_EEvRS3_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	0019      	movs	r1, r3
 800a62a:	0010      	movs	r0, r2
 800a62c:	f000 f8a0 	bl	800a770 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3308      	adds	r3, #8
 800a634:	001a      	movs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	3304      	adds	r3, #4
 800a63c:	0019      	movs	r1, r3
 800a63e:	0010      	movs	r0, r2
 800a640:	f000 f920 	bl	800a884 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	609a      	str	r2, [r3, #8]
    }
 800a64c:	46c0      	nop			; (mov r8, r8)
 800a64e:	46bd      	mov	sp, r7
 800a650:	b002      	add	sp, #8
 800a652:	bd80      	pop	{r7, pc}

0800a654 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE11_Deque_implC1Ev>:
	_Deque_impl()
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	0018      	movs	r0, r3
 800a660:	f000 f932 	bl	800a8c8 <_ZNSaIPK7XFEventEC1Ev>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	605a      	str	r2, [r3, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3308      	adds	r3, #8
 800a674:	0018      	movs	r0, r3
 800a676:	f000 f934 	bl	800a8e2 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	3318      	adds	r3, #24
 800a67e:	0018      	movs	r0, r3
 800a680:	f000 f92f 	bl	800a8e2 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>
	{ }
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	0018      	movs	r0, r3
 800a688:	46bd      	mov	sp, r7
 800a68a:	b002      	add	sp, #8
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800a68e:	b590      	push	{r4, r7, lr}
 800a690:	b089      	sub	sp, #36	; 0x24
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 800a698:	2004      	movs	r0, #4
 800a69a:	f7ff fc89 	bl	8009fb0 <_ZSt16__deque_buf_sizej>
 800a69e:	0003      	movs	r3, r0
 800a6a0:	0019      	movs	r1, r3
 800a6a2:	6838      	ldr	r0, [r7, #0]
 800a6a4:	f7f5 fd30 	bl	8000108 <__udivsi3>
 800a6a8:	0003      	movs	r3, r0
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	61fb      	str	r3, [r7, #28]
					   size_t(__num_nodes + 2));
 800a6ae:	2308      	movs	r3, #8
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	3302      	adds	r3, #2
 800a6b6:	613b      	str	r3, [r7, #16]
 800a6b8:	2310      	movs	r3, #16
 800a6ba:	18fa      	adds	r2, r7, r3
 800a6bc:	230c      	movs	r3, #12
 800a6be:	18fb      	adds	r3, r7, r3
 800a6c0:	0011      	movs	r1, r2
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	f000 f922 	bl	800a90c <_ZSt3maxIjERKT_S2_S2_>
 800a6c8:	0003      	movs	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	0011      	movs	r1, r2
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f000 f929 	bl	800a930 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 800a6de:	0002      	movs	r2, r0
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6859      	ldr	r1, [r3, #4]
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	1acb      	subs	r3, r1, r3
 800a6f0:	085b      	lsrs	r3, r3, #1
 800a6f2:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800a6f4:	18d3      	adds	r3, r2, r3
 800a6f6:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	18d3      	adds	r3, r2, r3
 800a700:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	69b9      	ldr	r1, [r7, #24]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	0018      	movs	r0, r3
 800a70a:	f000 f92d 	bl	800a968 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3308      	adds	r3, #8
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	0011      	movs	r1, r2
 800a716:	0018      	movs	r0, r3
 800a718:	f000 f8b4 	bl	800a884 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3318      	adds	r3, #24
 800a720:	001a      	movs	r2, r3
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	3b04      	subs	r3, #4
 800a726:	0019      	movs	r1, r3
 800a728:	0010      	movs	r0, r2
 800a72a:	f000 f8ab 	bl	800a884 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68da      	ldr	r2, [r3, #12]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800a73a:	2004      	movs	r0, #4
 800a73c:	f7ff fc38 	bl	8009fb0 <_ZSt16__deque_buf_sizej>
 800a740:	0002      	movs	r2, r0
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	0011      	movs	r1, r2
 800a746:	0018      	movs	r0, r3
 800a748:	f7f5 fd64 	bl	8000214 <__aeabi_uidivmod>
 800a74c:	000b      	movs	r3, r1
					+ __num_elements
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	619a      	str	r2, [r3, #24]
    }
 800a756:	46c0      	nop			; (mov r8, r8)
 800a758:	46bd      	mov	sp, r7
 800a75a:	b009      	add	sp, #36	; 0x24
 800a75c:	bd90      	pop	{r4, r7, pc}

0800a75e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a75e:	b580      	push	{r7, lr}
 800a760:	b082      	sub	sp, #8
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	0018      	movs	r0, r3
 800a76a:	46bd      	mov	sp, r7
 800a76c:	b002      	add	sp, #8
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE18_M_deallocate_nodeEPS2_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800a770:	b590      	push	{r4, r7, lr}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800a77a:	687c      	ldr	r4, [r7, #4]
 800a77c:	2004      	movs	r0, #4
 800a77e:	f7ff fc17 	bl	8009fb0 <_ZSt16__deque_buf_sizej>
 800a782:	0002      	movs	r2, r0
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	0019      	movs	r1, r3
 800a788:	0020      	movs	r0, r4
 800a78a:	f000 f908 	bl	800a99e <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>
      }
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	46bd      	mov	sp, r7
 800a792:	b003      	add	sp, #12
 800a794:	bd90      	pop	{r4, r7, pc}

0800a796 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	0018      	movs	r0, r3
 800a7a4:	f000 f90b 	bl	800a9be <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>
 800a7a8:	0002      	movs	r2, r0
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	0011      	movs	r1, r2
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	f000 f90e 	bl	800a9d0 <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	b002      	add	sp, #8
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <_ZNSaIPPK7XFEventED1Ev>:
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	0018      	movs	r0, r3
 800a7c8:	f000 f910 	bl	800a9ec <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	b002      	add	sp, #8
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <_ZNSt16allocator_traitsISaIPPK7XFEventEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b084      	sub	sp, #16
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	f000 f908 	bl	800a9fe <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	b004      	add	sp, #16
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800a7f6:	b590      	push	{r4, r7, lr}
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	0018      	movs	r0, r3
 800a806:	f7ff fe95 	bl	800a534 <_ZSt7forwardIRKPK7XFEventEOT_RNSt16remove_referenceIS5_E4typeE>
 800a80a:	0003      	movs	r3, r0
 800a80c:	681c      	ldr	r4, [r3, #0]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	0019      	movs	r1, r3
 800a812:	2004      	movs	r0, #4
 800a814:	f7fe fb3a 	bl	8008e8c <_ZnwjPv>
 800a818:	1e03      	subs	r3, r0, #0
 800a81a:	d000      	beq.n	800a81e <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE9constructIS3_JRKS3_EEEvPT_DpOT0_+0x28>
 800a81c:	601c      	str	r4, [r3, #0]
 800a81e:	46c0      	nop			; (mov r8, r8)
 800a820:	46bd      	mov	sp, r7
 800a822:	b005      	add	sp, #20
 800a824:	bd90      	pop	{r4, r7, pc}

0800a826 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6859      	ldr	r1, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	0018      	movs	r0, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	1ac3      	subs	r3, r0, r3
 800a844:	109b      	asrs	r3, r3, #2
 800a846:	1acb      	subs	r3, r1, r3
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800a848:	429a      	cmp	r2, r3
 800a84a:	d905      	bls.n	800a858 <_ZNSt5dequeIPK7XFEventSaIS2_EE22_M_reserve_map_at_backEj+0x32>
	  _M_reallocate_map(__nodes_to_add, false);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	0018      	movs	r0, r3
 800a854:	f000 f8e2 	bl	800aa1c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
      }
 800a858:	46c0      	nop			; (mov r8, r8)
 800a85a:	46bd      	mov	sp, r7
 800a85c:	b002      	add	sp, #8
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800a868:	687c      	ldr	r4, [r7, #4]
 800a86a:	2004      	movs	r0, #4
 800a86c:	f7ff fba0 	bl	8009fb0 <_ZSt16__deque_buf_sizej>
 800a870:	0003      	movs	r3, r0
 800a872:	0019      	movs	r1, r3
 800a874:	0020      	movs	r0, r4
 800a876:	f000 f973 	bl	800ab60 <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>
 800a87a:	0003      	movs	r3, r0
      }
 800a87c:	0018      	movs	r0, r3
 800a87e:	46bd      	mov	sp, r7
 800a880:	b003      	add	sp, #12
 800a882:	bd90      	pop	{r4, r7, pc}

0800a884 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800a884:	b590      	push	{r4, r7, lr}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685c      	ldr	r4, [r3, #4]
 800a8a0:	f000 f96e 	bl	800ab80 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>
 800a8a4:	0003      	movs	r3, r0
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	18e2      	adds	r2, r4, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	609a      	str	r2, [r3, #8]
      }
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	b003      	add	sp, #12
 800a8b4:	bd90      	pop	{r4, r7, pc}

0800a8b6 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE7destroyIS3_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
 800a8c0:	46c0      	nop			; (mov r8, r8)
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	b002      	add	sp, #8
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <_ZNSaIPK7XFEventEC1Ev>:
      allocator() throw() { }
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	0018      	movs	r0, r3
 800a8d4:	f000 f95d 	bl	800ab92 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	0018      	movs	r0, r3
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	b002      	add	sp, #8
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	605a      	str	r2, [r3, #4]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	609a      	str	r2, [r3, #8]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	60da      	str	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	0018      	movs	r0, r3
 800a906:	46bd      	mov	sp, r7
 800a908:	b002      	add	sp, #8
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d201      	bcs.n	800a926 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	e000      	b.n	800a928 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800a926:	687b      	ldr	r3, [r7, #4]
    }
 800a928:	0018      	movs	r0, r3
 800a92a:	46bd      	mov	sp, r7
 800a92c:	b002      	add	sp, #8
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800a930:	b5b0      	push	{r4, r5, r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a93a:	250c      	movs	r5, #12
 800a93c:	197b      	adds	r3, r7, r5
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	0011      	movs	r1, r2
 800a942:	0018      	movs	r0, r3
 800a944:	f7ff ff27 	bl	800a796 <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	197b      	adds	r3, r7, r5
 800a94c:	0011      	movs	r1, r2
 800a94e:	0018      	movs	r0, r3
 800a950:	f000 f928 	bl	800aba4 <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>
 800a954:	0004      	movs	r4, r0
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800a956:	197b      	adds	r3, r7, r5
 800a958:	0018      	movs	r0, r3
 800a95a:	f7ff ff2f 	bl	800a7bc <_ZNSaIPPK7XFEventED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800a95e:	0023      	movs	r3, r4
      }
 800a960:	0018      	movs	r0, r3
 800a962:	46bd      	mov	sp, r7
 800a964:	b004      	add	sp, #16
 800a966:	bdb0      	pop	{r4, r5, r7, pc}

0800a968 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	617b      	str	r3, [r7, #20]
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d20a      	bcs.n	800a996 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x2e>
	    *__cur = this->_M_allocate_node();
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	0018      	movs	r0, r3
 800a984:	f7ff ff6c 	bl	800a860 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_allocate_nodeEv>
 800a988:	0002      	movs	r2, r0
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	3304      	adds	r3, #4
 800a992:	617b      	str	r3, [r7, #20]
 800a994:	e7f0      	b.n	800a978 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x10>
    }
 800a996:	46c0      	nop			; (mov r8, r8)
 800a998:	46bd      	mov	sp, r7
 800a99a:	b006      	add	sp, #24
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <_ZNSt16allocator_traitsISaIPK7XFEventEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	60f8      	str	r0, [r7, #12]
 800a9a6:	60b9      	str	r1, [r7, #8]
 800a9a8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f000 f907 	bl	800abc4 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	b004      	add	sp, #16
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <_ZNKSt11_Deque_baseIPK7XFEventSaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	0018      	movs	r0, r3
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	b002      	add	sp, #8
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <_ZNSaIPPK7XFEventEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	0018      	movs	r0, r3
 800a9de:	f000 f8ff 	bl	800abe0 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	b002      	add	sp, #8
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	b002      	add	sp, #8
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	f000 fb0d 	bl	800b02c <_ZdlPv>
      }
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b004      	add	sp, #16
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800aa1c:	b590      	push	{r4, r7, lr}
 800aa1e:	b08b      	sub	sp, #44	; 0x2c
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	1dfb      	adds	r3, r7, #7
 800aa28:	701a      	strb	r2, [r3, #0]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	001a      	movs	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	109b      	asrs	r3, r3, #2
 800aa38:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800aa3a:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	6a3a      	ldr	r2, [r7, #32]
 800aa40:	18d3      	adds	r3, r2, r3
 800aa42:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d92e      	bls.n	800aaae <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x92>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	1acb      	subs	r3, r1, r3
 800aa5c:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800aa5e:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800aa60:	1dfb      	adds	r3, r7, #7
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x52>
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	e000      	b.n	800aa70 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x54>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	185b      	adds	r3, r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800aa72:	18d3      	adds	r3, r2, r3
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d209      	bcs.n	800aa94 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x78>
	    std::copy(this->_M_impl._M_start._M_node,
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800aa88:	3304      	adds	r3, #4
 800aa8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa8c:	0019      	movs	r1, r3
 800aa8e:	f000 f8b0 	bl	800abf2 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
 800aa92:	e04b      	b.n	800ab2c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x110>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800aa9c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800aa9e:	6a3b      	ldr	r3, [r7, #32]
 800aaa0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800aaa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa4:	18d3      	adds	r3, r2, r3
 800aaa6:	001a      	movs	r2, r3
 800aaa8:	f000 f8bd 	bl	800ac26 <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>
 800aaac:	e03e      	b.n	800ab2c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x110>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	3304      	adds	r3, #4
 800aab6:	2208      	movs	r2, #8
 800aab8:	18ba      	adds	r2, r7, r2
 800aaba:	0011      	movs	r1, r2
 800aabc:	0018      	movs	r0, r3
 800aabe:	f7ff ff25 	bl	800a90c <_ZSt3maxIjERKT_S2_S2_>
 800aac2:	0003      	movs	r3, r0
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	18e3      	adds	r3, r4, r3
	  size_type __new_map_size = this->_M_impl._M_map_size
 800aac8:	3302      	adds	r3, #2
 800aaca:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	69ba      	ldr	r2, [r7, #24]
 800aad0:	0011      	movs	r1, r2
 800aad2:	0018      	movs	r0, r3
 800aad4:	f7ff ff2c 	bl	800a930 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_allocate_mapEj>
 800aad8:	0003      	movs	r3, r0
 800aada:	617b      	str	r3, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	085b      	lsrs	r3, r3, #1
 800aae4:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800aae6:	1dfb      	adds	r3, r7, #7
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xd8>
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	e000      	b.n	800aaf6 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xda>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	189b      	adds	r3, r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	18d3      	adds	r3, r2, r3
 800aafc:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800ab06:	3304      	adds	r3, #4
 800ab08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab0a:	0019      	movs	r1, r3
 800ab0c:	f000 f871 	bl	800abf2 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6819      	ldr	r1, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	001a      	movs	r2, r3
 800ab1c:	f7ff fcde 	bl	800a4dc <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_deallocate_mapEPPS2_j>

	  this->_M_impl._M_map = __new_map;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3308      	adds	r3, #8
 800ab30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab32:	0011      	movs	r1, r2
 800ab34:	0018      	movs	r0, r3
 800ab36:	f7ff fea5 	bl	800a884 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3318      	adds	r3, #24
 800ab3e:	0018      	movs	r0, r3
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	4a06      	ldr	r2, [pc, #24]	; (800ab5c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x140>)
 800ab44:	4694      	mov	ip, r2
 800ab46:	4463      	add	r3, ip
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab4c:	18d3      	adds	r3, r2, r3
 800ab4e:	0019      	movs	r1, r3
 800ab50:	f7ff fe98 	bl	800a884 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E11_M_set_nodeEPS4_>
    }
 800ab54:	46c0      	nop			; (mov r8, r8)
 800ab56:	46bd      	mov	sp, r7
 800ab58:	b00b      	add	sp, #44	; 0x2c
 800ab5a:	bd90      	pop	{r4, r7, pc}
 800ab5c:	3fffffff 	.word	0x3fffffff

0800ab60 <_ZNSt16allocator_traitsISaIPK7XFEventEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	0018      	movs	r0, r3
 800ab72:	f000 f872 	bl	800ac5a <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>
 800ab76:	0003      	movs	r3, r0
 800ab78:	0018      	movs	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b002      	add	sp, #8
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <_ZNSt15_Deque_iteratorIPK7XFEventRS2_PS2_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800ab80:	b580      	push	{r7, lr}
 800ab82:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800ab84:	2004      	movs	r0, #4
 800ab86:	f7ff fa13 	bl	8009fb0 <_ZSt16__deque_buf_sizej>
 800ab8a:	0003      	movs	r3, r0
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b082      	sub	sp, #8
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	0018      	movs	r0, r3
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	b002      	add	sp, #8
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <_ZNSt16allocator_traitsISaIPPK7XFEventEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	0018      	movs	r0, r3
 800abb6:	f000 f86e 	bl	800ac96 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>
 800abba:	0003      	movs	r3, r0
 800abbc:	0018      	movs	r0, r3
 800abbe:	46bd      	mov	sp, r7
 800abc0:	b002      	add	sp, #8
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	0018      	movs	r0, r3
 800abd4:	f000 fa2a 	bl	800b02c <_ZdlPv>
      }
 800abd8:	46c0      	nop			; (mov r8, r8)
 800abda:	46bd      	mov	sp, r7
 800abdc:	b004      	add	sp, #16
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	0018      	movs	r0, r3
 800abec:	46bd      	mov	sp, r7
 800abee:	b002      	add	sp, #8
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <_ZSt4copyIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800abf2:	b590      	push	{r4, r7, lr}
 800abf4:	b085      	sub	sp, #20
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	60f8      	str	r0, [r7, #12]
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	0018      	movs	r0, r3
 800ac02:	f000 f866 	bl	800acd2 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800ac06:	0004      	movs	r4, r0
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	f000 f861 	bl	800acd2 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800ac10:	0001      	movs	r1, r0
	       __result));
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	001a      	movs	r2, r3
 800ac16:	0020      	movs	r0, r4
 800ac18:	f000 f864 	bl	800ace4 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800ac1c:	0003      	movs	r3, r0
    }
 800ac1e:	0018      	movs	r0, r3
 800ac20:	46bd      	mov	sp, r7
 800ac22:	b005      	add	sp, #20
 800ac24:	bd90      	pop	{r4, r7, pc}

0800ac26 <_ZSt13copy_backwardIPPPK7XFEventS4_ET0_T_S6_S5_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ac26:	b590      	push	{r4, r7, lr}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	0018      	movs	r0, r3
 800ac36:	f000 f84c 	bl	800acd2 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800ac3a:	0004      	movs	r4, r0
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f000 f847 	bl	800acd2 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>
 800ac44:	0001      	movs	r1, r0
	       __result));
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	001a      	movs	r2, r3
 800ac4a:	0020      	movs	r0, r4
 800ac4c:	f000 f869 	bl	800ad22 <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800ac50:	0003      	movs	r3, r0
    }
 800ac52:	0018      	movs	r0, r3
 800ac54:	46bd      	mov	sp, r7
 800ac56:	b005      	add	sp, #20
 800ac58:	bd90      	pop	{r4, r7, pc}

0800ac5a <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	0018      	movs	r0, r3
 800ac6a:	f000 f879 	bl	800ad60 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>
 800ac6e:	0002      	movs	r2, r0
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	419b      	sbcs	r3, r3
 800ac76:	425b      	negs	r3, r3
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <_ZN9__gnu_cxx13new_allocatorIPK7XFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ac7e:	f000 f9f1 	bl	800b064 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	0018      	movs	r0, r3
 800ac88:	f000 f9b7 	bl	800affa <_Znwj>
 800ac8c:	0003      	movs	r3, r0
      }
 800ac8e:	0018      	movs	r0, r3
 800ac90:	46bd      	mov	sp, r7
 800ac92:	b004      	add	sp, #16
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	0018      	movs	r0, r3
 800aca6:	f000 f867 	bl	800ad78 <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE8max_sizeEv>
 800acaa:	0002      	movs	r2, r0
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	429a      	cmp	r2, r3
 800acb0:	419b      	sbcs	r3, r3
 800acb2:	425b      	negs	r3, r3
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <_ZN9__gnu_cxx13new_allocatorIPPK7XFEventE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800acba:	f000 f9d3 	bl	800b064 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	0018      	movs	r0, r3
 800acc4:	f000 f999 	bl	800affa <_Znwj>
 800acc8:	0003      	movs	r3, r0
      }
 800acca:	0018      	movs	r0, r3
 800accc:	46bd      	mov	sp, r7
 800acce:	b004      	add	sp, #16
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <_ZSt12__miter_baseIPPPK7XFEventET_S5_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	0018      	movs	r0, r3
 800acde:	46bd      	mov	sp, r7
 800ace0:	b002      	add	sp, #8
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <_ZSt14__copy_move_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ace4:	b5b0      	push	{r4, r5, r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	0018      	movs	r0, r3
 800acf4:	f000 f84c 	bl	800ad90 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800acf8:	0004      	movs	r4, r0
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	0018      	movs	r0, r3
 800acfe:	f000 f847 	bl	800ad90 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad02:	0005      	movs	r5, r0
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	0018      	movs	r0, r3
 800ad08:	f000 f842 	bl	800ad90 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad0c:	0003      	movs	r3, r0
					     std::__niter_base(__result)));
 800ad0e:	001a      	movs	r2, r3
 800ad10:	0029      	movs	r1, r5
 800ad12:	0020      	movs	r0, r4
 800ad14:	f000 f845 	bl	800ada2 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800ad18:	0003      	movs	r3, r0
    }
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	b004      	add	sp, #16
 800ad20:	bdb0      	pop	{r4, r5, r7, pc}

0800ad22 <_ZSt23__copy_move_backward_a2ILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800ad22:	b5b0      	push	{r4, r5, r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	0018      	movs	r0, r3
 800ad32:	f000 f82d 	bl	800ad90 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad36:	0004      	movs	r4, r0
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	f000 f828 	bl	800ad90 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad40:	0005      	movs	r5, r0
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	0018      	movs	r0, r3
 800ad46:	f000 f823 	bl	800ad90 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>
 800ad4a:	0003      	movs	r3, r0
		   std::__niter_base(__result)));
 800ad4c:	001a      	movs	r2, r3
 800ad4e:	0029      	movs	r1, r5
 800ad50:	0020      	movs	r0, r4
 800ad52:	f000 f83b 	bl	800adcc <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>
 800ad56:	0003      	movs	r3, r0
    }
 800ad58:	0018      	movs	r0, r3
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	b004      	add	sp, #16
 800ad5e:	bdb0      	pop	{r4, r5, r7, pc}

0800ad60 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800ad68:	4b02      	ldr	r3, [pc, #8]	; (800ad74 <_ZNK9__gnu_cxx13new_allocatorIPK7XFEventE8max_sizeEv+0x14>)
 800ad6a:	0018      	movs	r0, r3
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	b002      	add	sp, #8
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	46c0      	nop			; (mov r8, r8)
 800ad74:	3fffffff 	.word	0x3fffffff

0800ad78 <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800ad80:	4b02      	ldr	r3, [pc, #8]	; (800ad8c <_ZNK9__gnu_cxx13new_allocatorIPPK7XFEventE8max_sizeEv+0x14>)
 800ad82:	0018      	movs	r0, r3
 800ad84:	46bd      	mov	sp, r7
 800ad86:	b002      	add	sp, #8
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	46c0      	nop			; (mov r8, r8)
 800ad8c:	3fffffff 	.word	0x3fffffff

0800ad90 <_ZSt12__niter_baseIPPPK7XFEventET_S5_>:
    __niter_base(_Iterator __it)
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b002      	add	sp, #8
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <_ZSt13__copy_move_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b086      	sub	sp, #24
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	60f8      	str	r0, [r7, #12]
 800adaa:	60b9      	str	r1, [r7, #8]
 800adac:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800adae:	2317      	movs	r3, #23
 800adb0:	18fb      	adds	r3, r7, r3
 800adb2:	2201      	movs	r2, #1
 800adb4:	701a      	strb	r2, [r3, #0]
	                      _Category>::__copy_m(__first, __last, __result);
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	68b9      	ldr	r1, [r7, #8]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	0018      	movs	r0, r3
 800adbe:	f000 f81a 	bl	800adf6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>
 800adc2:	0003      	movs	r3, r0
    }
 800adc4:	0018      	movs	r0, r3
 800adc6:	46bd      	mov	sp, r7
 800adc8:	b006      	add	sp, #24
 800adca:	bd80      	pop	{r7, pc}

0800adcc <_ZSt22__copy_move_backward_aILb0EPPPK7XFEventS4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 800add8:	2317      	movs	r3, #23
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	2201      	movs	r2, #1
 800adde:	701a      	strb	r2, [r3, #0]
								 __result);
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	68b9      	ldr	r1, [r7, #8]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	0018      	movs	r0, r3
 800ade8:	f000 f822 	bl	800ae30 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>
 800adec:	0003      	movs	r3, r0
    }
 800adee:	0018      	movs	r0, r3
 800adf0:	46bd      	mov	sp, r7
 800adf2:	b006      	add	sp, #24
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b086      	sub	sp, #24
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	109b      	asrs	r3, r3, #2
 800ae0a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d006      	beq.n	800ae20 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPK7XFEventEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	009a      	lsls	r2, r3, #2
 800ae16:	68f9      	ldr	r1, [r7, #12]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	f000 f9a0 	bl	800b160 <memmove>
	  return __result + _Num;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	18d3      	adds	r3, r2, r3
	}
 800ae28:	0018      	movs	r0, r3
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	b006      	add	sp, #24
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	109b      	asrs	r3, r3, #2
 800ae44:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00a      	beq.n	800ae62 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPK7XFEventEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	425b      	negs	r3, r3
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	18d0      	adds	r0, r2, r3
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	009a      	lsls	r2, r3, #2
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	0019      	movs	r1, r3
 800ae5e:	f000 f97f 	bl	800b160 <memmove>
	  return __result - _Num;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	425b      	negs	r3, r3
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	18d3      	adds	r3, r2, r3
	}
 800ae6c:	0018      	movs	r0, r3
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	b006      	add	sp, #24
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <_ZN9interface7XFMutex6createEv>:

/**
 * @brief Implementation of interface::XFMutex::create method.
 */
interface::XFMutex * interface::XFMutex::create()
{
 800ae74:	b5b0      	push	{r4, r5, r7, lr}
 800ae76:	af00      	add	r7, sp, #0
    return new XFMutexDefault;
 800ae78:	2004      	movs	r0, #4
 800ae7a:	f000 f8be 	bl	800affa <_Znwj>
 800ae7e:	0003      	movs	r3, r0
 800ae80:	001c      	movs	r4, r3
 800ae82:	0020      	movs	r0, r4
 800ae84:	f000 f832 	bl	800aeec <_ZN14XFMutexDefaultC1Ev>
 800ae88:	0023      	movs	r3, r4
}
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bdb0      	pop	{r4, r5, r7, pc}

0800ae90 <_ZN9interface7XFMutexC1Ev>:
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	4a03      	ldr	r2, [pc, #12]	; (800aea8 <_ZN9interface7XFMutexC1Ev+0x18>)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	0018      	movs	r0, r3
 800aea2:	46bd      	mov	sp, r7
 800aea4:	b002      	add	sp, #8
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	0800c874 	.word	0x0800c874

0800aeac <_ZN9interface7XFMutexD1Ev>:
    virtual ~XFMutex() = default;
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	4a03      	ldr	r2, [pc, #12]	; (800aec4 <_ZN9interface7XFMutexD1Ev+0x18>)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	0018      	movs	r0, r3
 800aebe:	46bd      	mov	sp, r7
 800aec0:	b002      	add	sp, #8
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	0800c874 	.word	0x0800c874

0800aec8 <_ZN9interface7XFMutexD0Ev>:
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	0018      	movs	r0, r3
 800aed4:	f7ff ffea 	bl	800aeac <_ZN9interface7XFMutexD1Ev>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2104      	movs	r1, #4
 800aedc:	0018      	movs	r0, r3
 800aede:	f000 f888 	bl	800aff2 <_ZdlPvj>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	0018      	movs	r0, r3
 800aee6:	46bd      	mov	sp, r7
 800aee8:	b002      	add	sp, #8
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <_ZN14XFMutexDefaultC1Ev>:

XFMutexDefault::XFMutexDefault()
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	0018      	movs	r0, r3
 800aef8:	f7ff ffca 	bl	800ae90 <_ZN9interface7XFMutexC1Ev>
 800aefc:	4a03      	ldr	r2, [pc, #12]	; (800af0c <_ZN14XFMutexDefaultC1Ev+0x20>)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	601a      	str	r2, [r3, #0]
{
}
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	0018      	movs	r0, r3
 800af06:	46bd      	mov	sp, r7
 800af08:	b002      	add	sp, #8
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	0800c858 	.word	0x0800c858

0800af10 <_ZN14XFMutexDefaultD1Ev>:

XFMutexDefault::~XFMutexDefault()
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	4a05      	ldr	r2, [pc, #20]	; (800af30 <_ZN14XFMutexDefaultD1Ev+0x20>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	0018      	movs	r0, r3
 800af22:	f7ff ffc3 	bl	800aeac <_ZN9interface7XFMutexD1Ev>
{
}
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	0018      	movs	r0, r3
 800af2a:	46bd      	mov	sp, r7
 800af2c:	b002      	add	sp, #8
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	0800c858 	.word	0x0800c858

0800af34 <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
}
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	0018      	movs	r0, r3
 800af40:	f7ff ffe6 	bl	800af10 <_ZN14XFMutexDefaultD1Ev>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2104      	movs	r1, #4
 800af48:	0018      	movs	r0, r3
 800af4a:	f000 f852 	bl	800aff2 <_ZdlPvj>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	0018      	movs	r0, r3
 800af52:	46bd      	mov	sp, r7
 800af54:	b002      	add	sp, #8
 800af56:	bd80      	pop	{r7, pc}

0800af58 <_ZN14XFMutexDefault4lockEv>:

void XFMutexDefault::lock()
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
	enterCritical();
 800af60:	f7fd f9e0 	bl	8008324 <_Z13enterCriticalv>
}
 800af64:	46c0      	nop			; (mov r8, r8)
 800af66:	46bd      	mov	sp, r7
 800af68:	b002      	add	sp, #8
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <_ZN14XFMutexDefault6unlockEv>:


void XFMutexDefault::unlock()
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
	exitCritical();
 800af74:	f7fd f9f2 	bl	800835c <_Z12exitCriticalv>
}
 800af78:	46c0      	nop			; (mov r8, r8)
 800af7a:	46bd      	mov	sp, r7
 800af7c:	b002      	add	sp, #8
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <_ZN14XFMutexDefault7tryLockEl>:

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
	return true;	// Always allow
 800af8a:	2301      	movs	r3, #1
}
 800af8c:	0018      	movs	r0, r3
 800af8e:	46bd      	mov	sp, r7
 800af90:	b002      	add	sp, #8
 800af92:	bd80      	pop	{r7, pc}

0800af94 <XF_startTimeoutManagerTimer>:
 * This means that changes in 'tickInterval' needs to be handled elsewhere
 * using the XF_tickIntervalInMilliseconds() function.
 */

void XF_startTimeoutManagerTimer(uint32_t tickInterval)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 800af9c:	46c0      	nop			; (mov r8, r8)
 800af9e:	46bd      	mov	sp, r7
 800afa0:	b002      	add	sp, #8
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
	bInISR = true;								// Tell critical section we are in an ISR
 800afa8:	4b08      	ldr	r3, [pc, #32]	; (800afcc <XF_tick+0x28>)
 800afaa:	2201      	movs	r2, #1
 800afac:	601a      	str	r2, [r3, #0]
	XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 800afae:	f7fd ffc7 	bl	8008f40 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800afb2:	0002      	movs	r2, r0
 800afb4:	6813      	ldr	r3, [r2, #0]
 800afb6:	331c      	adds	r3, #28
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	0010      	movs	r0, r2
 800afbc:	4798      	blx	r3
	bInISR = false;
 800afbe:	4b03      	ldr	r3, [pc, #12]	; (800afcc <XF_tick+0x28>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	601a      	str	r2, [r3, #0]
}
 800afc4:	46c0      	nop			; (mov r8, r8)
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	46c0      	nop			; (mov r8, r8)
 800afcc:	200000e8 	.word	0x200000e8

0800afd0 <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->getTickInterval();
 800afd4:	f7fd ffb4 	bl	8008f40 <_ZN9interface16XFTimeoutManager11getInstanceEv>
 800afd8:	0002      	movs	r2, r0
 800afda:	6813      	ldr	r3, [r2, #0]
 800afdc:	330c      	adds	r3, #12
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	0010      	movs	r0, r2
 800afe2:	4798      	blx	r3
 800afe4:	0003      	movs	r3, r0
}
 800afe6:	0018      	movs	r0, r3
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <__cxa_pure_virtual>:
 800afec:	b510      	push	{r4, lr}
 800afee:	f000 f825 	bl	800b03c <_ZSt9terminatev>

0800aff2 <_ZdlPvj>:
 800aff2:	b510      	push	{r4, lr}
 800aff4:	f000 f81a 	bl	800b02c <_ZdlPv>
 800aff8:	bd10      	pop	{r4, pc}

0800affa <_Znwj>:
 800affa:	b510      	push	{r4, lr}
 800affc:	1e04      	subs	r4, r0, #0
 800affe:	d100      	bne.n	800b002 <_Znwj+0x8>
 800b000:	3401      	adds	r4, #1
 800b002:	0020      	movs	r0, r4
 800b004:	f000 f898 	bl	800b138 <malloc>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d107      	bne.n	800b01c <_Znwj+0x22>
 800b00c:	f000 f808 	bl	800b020 <_ZSt15get_new_handlerv>
 800b010:	2800      	cmp	r0, #0
 800b012:	d101      	bne.n	800b018 <_Znwj+0x1e>
 800b014:	f000 f829 	bl	800b06a <abort>
 800b018:	4780      	blx	r0
 800b01a:	e7f2      	b.n	800b002 <_Znwj+0x8>
 800b01c:	bd10      	pop	{r4, pc}
	...

0800b020 <_ZSt15get_new_handlerv>:
 800b020:	4b01      	ldr	r3, [pc, #4]	; (800b028 <_ZSt15get_new_handlerv+0x8>)
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	4770      	bx	lr
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	2000015c 	.word	0x2000015c

0800b02c <_ZdlPv>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	f000 f88d 	bl	800b14c <free>
 800b032:	bd10      	pop	{r4, pc}

0800b034 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b034:	b510      	push	{r4, lr}
 800b036:	4780      	blx	r0
 800b038:	f000 f817 	bl	800b06a <abort>

0800b03c <_ZSt9terminatev>:
 800b03c:	4b02      	ldr	r3, [pc, #8]	; (800b048 <_ZSt9terminatev+0xc>)
 800b03e:	b510      	push	{r4, lr}
 800b040:	6818      	ldr	r0, [r3, #0]
 800b042:	f7ff fff7 	bl	800b034 <_ZN10__cxxabiv111__terminateEPFvvE>
 800b046:	46c0      	nop			; (mov r8, r8)
 800b048:	2000000c 	.word	0x2000000c

0800b04c <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800b04c:	684b      	ldr	r3, [r1, #4]
 800b04e:	6001      	str	r1, [r0, #0]
 800b050:	6043      	str	r3, [r0, #4]
 800b052:	684b      	ldr	r3, [r1, #4]
 800b054:	6018      	str	r0, [r3, #0]
 800b056:	6048      	str	r0, [r1, #4]
 800b058:	4770      	bx	lr

0800b05a <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800b05a:	6803      	ldr	r3, [r0, #0]
 800b05c:	6842      	ldr	r2, [r0, #4]
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	605a      	str	r2, [r3, #4]
 800b062:	4770      	bx	lr

0800b064 <_ZSt17__throw_bad_allocv>:
 800b064:	b510      	push	{r4, lr}
 800b066:	f000 f800 	bl	800b06a <abort>

0800b06a <abort>:
 800b06a:	b510      	push	{r4, lr}
 800b06c:	2006      	movs	r0, #6
 800b06e:	f000 fc2b 	bl	800b8c8 <raise>
 800b072:	2001      	movs	r0, #1
 800b074:	f7f5 fefe 	bl	8000e74 <_exit>

0800b078 <__assert_func>:
 800b078:	b530      	push	{r4, r5, lr}
 800b07a:	001c      	movs	r4, r3
 800b07c:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <__assert_func+0x2c>)
 800b07e:	0005      	movs	r5, r0
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	b085      	sub	sp, #20
 800b084:	68d8      	ldr	r0, [r3, #12]
 800b086:	4b08      	ldr	r3, [pc, #32]	; (800b0a8 <__assert_func+0x30>)
 800b088:	2a00      	cmp	r2, #0
 800b08a:	d101      	bne.n	800b090 <__assert_func+0x18>
 800b08c:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <__assert_func+0x34>)
 800b08e:	001a      	movs	r2, r3
 800b090:	9202      	str	r2, [sp, #8]
 800b092:	9301      	str	r3, [sp, #4]
 800b094:	9100      	str	r1, [sp, #0]
 800b096:	002b      	movs	r3, r5
 800b098:	0022      	movs	r2, r4
 800b09a:	4905      	ldr	r1, [pc, #20]	; (800b0b0 <__assert_func+0x38>)
 800b09c:	f000 f818 	bl	800b0d0 <fiprintf>
 800b0a0:	f7ff ffe3 	bl	800b06a <abort>
 800b0a4:	20000010 	.word	0x20000010
 800b0a8:	0800c888 	.word	0x0800c888
 800b0ac:	0800c8c3 	.word	0x0800c8c3
 800b0b0:	0800c895 	.word	0x0800c895

0800b0b4 <atexit>:
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	b510      	push	{r4, lr}
 800b0b8:	0001      	movs	r1, r0
 800b0ba:	001a      	movs	r2, r3
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f000 fcef 	bl	800baa0 <__register_exitproc>
 800b0c2:	bd10      	pop	{r4, pc}

0800b0c4 <__errno>:
 800b0c4:	4b01      	ldr	r3, [pc, #4]	; (800b0cc <__errno+0x8>)
 800b0c6:	6818      	ldr	r0, [r3, #0]
 800b0c8:	4770      	bx	lr
 800b0ca:	46c0      	nop			; (mov r8, r8)
 800b0cc:	20000010 	.word	0x20000010

0800b0d0 <fiprintf>:
 800b0d0:	b40e      	push	{r1, r2, r3}
 800b0d2:	b503      	push	{r0, r1, lr}
 800b0d4:	0001      	movs	r1, r0
 800b0d6:	ab03      	add	r3, sp, #12
 800b0d8:	4804      	ldr	r0, [pc, #16]	; (800b0ec <fiprintf+0x1c>)
 800b0da:	cb04      	ldmia	r3!, {r2}
 800b0dc:	6800      	ldr	r0, [r0, #0]
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	f000 f92a 	bl	800b338 <_vfiprintf_r>
 800b0e4:	b002      	add	sp, #8
 800b0e6:	bc08      	pop	{r3}
 800b0e8:	b003      	add	sp, #12
 800b0ea:	4718      	bx	r3
 800b0ec:	20000010 	.word	0x20000010

0800b0f0 <__libc_init_array>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	2600      	movs	r6, #0
 800b0f4:	4d0c      	ldr	r5, [pc, #48]	; (800b128 <__libc_init_array+0x38>)
 800b0f6:	4c0d      	ldr	r4, [pc, #52]	; (800b12c <__libc_init_array+0x3c>)
 800b0f8:	1b64      	subs	r4, r4, r5
 800b0fa:	10a4      	asrs	r4, r4, #2
 800b0fc:	42a6      	cmp	r6, r4
 800b0fe:	d109      	bne.n	800b114 <__libc_init_array+0x24>
 800b100:	2600      	movs	r6, #0
 800b102:	f000 fffb 	bl	800c0fc <_init>
 800b106:	4d0a      	ldr	r5, [pc, #40]	; (800b130 <__libc_init_array+0x40>)
 800b108:	4c0a      	ldr	r4, [pc, #40]	; (800b134 <__libc_init_array+0x44>)
 800b10a:	1b64      	subs	r4, r4, r5
 800b10c:	10a4      	asrs	r4, r4, #2
 800b10e:	42a6      	cmp	r6, r4
 800b110:	d105      	bne.n	800b11e <__libc_init_array+0x2e>
 800b112:	bd70      	pop	{r4, r5, r6, pc}
 800b114:	00b3      	lsls	r3, r6, #2
 800b116:	58eb      	ldr	r3, [r5, r3]
 800b118:	4798      	blx	r3
 800b11a:	3601      	adds	r6, #1
 800b11c:	e7ee      	b.n	800b0fc <__libc_init_array+0xc>
 800b11e:	00b3      	lsls	r3, r6, #2
 800b120:	58eb      	ldr	r3, [r5, r3]
 800b122:	4798      	blx	r3
 800b124:	3601      	adds	r6, #1
 800b126:	e7f2      	b.n	800b10e <__libc_init_array+0x1e>
 800b128:	0800c95c 	.word	0x0800c95c
 800b12c:	0800c95c 	.word	0x0800c95c
 800b130:	0800c95c 	.word	0x0800c95c
 800b134:	0800c960 	.word	0x0800c960

0800b138 <malloc>:
 800b138:	b510      	push	{r4, lr}
 800b13a:	4b03      	ldr	r3, [pc, #12]	; (800b148 <malloc+0x10>)
 800b13c:	0001      	movs	r1, r0
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	f000 f874 	bl	800b22c <_malloc_r>
 800b144:	bd10      	pop	{r4, pc}
 800b146:	46c0      	nop			; (mov r8, r8)
 800b148:	20000010 	.word	0x20000010

0800b14c <free>:
 800b14c:	b510      	push	{r4, lr}
 800b14e:	4b03      	ldr	r3, [pc, #12]	; (800b15c <free+0x10>)
 800b150:	0001      	movs	r1, r0
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	f000 f820 	bl	800b198 <_free_r>
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	20000010 	.word	0x20000010

0800b160 <memmove>:
 800b160:	b510      	push	{r4, lr}
 800b162:	4288      	cmp	r0, r1
 800b164:	d902      	bls.n	800b16c <memmove+0xc>
 800b166:	188b      	adds	r3, r1, r2
 800b168:	4298      	cmp	r0, r3
 800b16a:	d303      	bcc.n	800b174 <memmove+0x14>
 800b16c:	2300      	movs	r3, #0
 800b16e:	e007      	b.n	800b180 <memmove+0x20>
 800b170:	5c8b      	ldrb	r3, [r1, r2]
 800b172:	5483      	strb	r3, [r0, r2]
 800b174:	3a01      	subs	r2, #1
 800b176:	d2fb      	bcs.n	800b170 <memmove+0x10>
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	5ccc      	ldrb	r4, [r1, r3]
 800b17c:	54c4      	strb	r4, [r0, r3]
 800b17e:	3301      	adds	r3, #1
 800b180:	429a      	cmp	r2, r3
 800b182:	d1fa      	bne.n	800b17a <memmove+0x1a>
 800b184:	e7f8      	b.n	800b178 <memmove+0x18>

0800b186 <memset>:
 800b186:	0003      	movs	r3, r0
 800b188:	1812      	adds	r2, r2, r0
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d100      	bne.n	800b190 <memset+0xa>
 800b18e:	4770      	bx	lr
 800b190:	7019      	strb	r1, [r3, #0]
 800b192:	3301      	adds	r3, #1
 800b194:	e7f9      	b.n	800b18a <memset+0x4>
	...

0800b198 <_free_r>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	0005      	movs	r5, r0
 800b19c:	2900      	cmp	r1, #0
 800b19e:	d010      	beq.n	800b1c2 <_free_r+0x2a>
 800b1a0:	1f0c      	subs	r4, r1, #4
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da00      	bge.n	800b1aa <_free_r+0x12>
 800b1a8:	18e4      	adds	r4, r4, r3
 800b1aa:	0028      	movs	r0, r5
 800b1ac:	f000 fee5 	bl	800bf7a <__malloc_lock>
 800b1b0:	4a1d      	ldr	r2, [pc, #116]	; (800b228 <_free_r+0x90>)
 800b1b2:	6813      	ldr	r3, [r2, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d105      	bne.n	800b1c4 <_free_r+0x2c>
 800b1b8:	6063      	str	r3, [r4, #4]
 800b1ba:	6014      	str	r4, [r2, #0]
 800b1bc:	0028      	movs	r0, r5
 800b1be:	f000 fedd 	bl	800bf7c <__malloc_unlock>
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	d909      	bls.n	800b1dc <_free_r+0x44>
 800b1c8:	6821      	ldr	r1, [r4, #0]
 800b1ca:	1860      	adds	r0, r4, r1
 800b1cc:	4283      	cmp	r3, r0
 800b1ce:	d1f3      	bne.n	800b1b8 <_free_r+0x20>
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	1841      	adds	r1, r0, r1
 800b1d6:	6021      	str	r1, [r4, #0]
 800b1d8:	e7ee      	b.n	800b1b8 <_free_r+0x20>
 800b1da:	0013      	movs	r3, r2
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	d001      	beq.n	800b1e6 <_free_r+0x4e>
 800b1e2:	42a2      	cmp	r2, r4
 800b1e4:	d9f9      	bls.n	800b1da <_free_r+0x42>
 800b1e6:	6819      	ldr	r1, [r3, #0]
 800b1e8:	1858      	adds	r0, r3, r1
 800b1ea:	42a0      	cmp	r0, r4
 800b1ec:	d10b      	bne.n	800b206 <_free_r+0x6e>
 800b1ee:	6820      	ldr	r0, [r4, #0]
 800b1f0:	1809      	adds	r1, r1, r0
 800b1f2:	1858      	adds	r0, r3, r1
 800b1f4:	6019      	str	r1, [r3, #0]
 800b1f6:	4282      	cmp	r2, r0
 800b1f8:	d1e0      	bne.n	800b1bc <_free_r+0x24>
 800b1fa:	6810      	ldr	r0, [r2, #0]
 800b1fc:	6852      	ldr	r2, [r2, #4]
 800b1fe:	1841      	adds	r1, r0, r1
 800b200:	6019      	str	r1, [r3, #0]
 800b202:	605a      	str	r2, [r3, #4]
 800b204:	e7da      	b.n	800b1bc <_free_r+0x24>
 800b206:	42a0      	cmp	r0, r4
 800b208:	d902      	bls.n	800b210 <_free_r+0x78>
 800b20a:	230c      	movs	r3, #12
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	e7d5      	b.n	800b1bc <_free_r+0x24>
 800b210:	6821      	ldr	r1, [r4, #0]
 800b212:	1860      	adds	r0, r4, r1
 800b214:	4282      	cmp	r2, r0
 800b216:	d103      	bne.n	800b220 <_free_r+0x88>
 800b218:	6810      	ldr	r0, [r2, #0]
 800b21a:	6852      	ldr	r2, [r2, #4]
 800b21c:	1841      	adds	r1, r0, r1
 800b21e:	6021      	str	r1, [r4, #0]
 800b220:	6062      	str	r2, [r4, #4]
 800b222:	605c      	str	r4, [r3, #4]
 800b224:	e7ca      	b.n	800b1bc <_free_r+0x24>
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	20000160 	.word	0x20000160

0800b22c <_malloc_r>:
 800b22c:	2303      	movs	r3, #3
 800b22e:	b570      	push	{r4, r5, r6, lr}
 800b230:	1ccd      	adds	r5, r1, #3
 800b232:	439d      	bics	r5, r3
 800b234:	3508      	adds	r5, #8
 800b236:	0006      	movs	r6, r0
 800b238:	2d0c      	cmp	r5, #12
 800b23a:	d21e      	bcs.n	800b27a <_malloc_r+0x4e>
 800b23c:	250c      	movs	r5, #12
 800b23e:	42a9      	cmp	r1, r5
 800b240:	d81d      	bhi.n	800b27e <_malloc_r+0x52>
 800b242:	0030      	movs	r0, r6
 800b244:	f000 fe99 	bl	800bf7a <__malloc_lock>
 800b248:	4a25      	ldr	r2, [pc, #148]	; (800b2e0 <_malloc_r+0xb4>)
 800b24a:	6814      	ldr	r4, [r2, #0]
 800b24c:	0021      	movs	r1, r4
 800b24e:	2900      	cmp	r1, #0
 800b250:	d119      	bne.n	800b286 <_malloc_r+0x5a>
 800b252:	4c24      	ldr	r4, [pc, #144]	; (800b2e4 <_malloc_r+0xb8>)
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d103      	bne.n	800b262 <_malloc_r+0x36>
 800b25a:	0030      	movs	r0, r6
 800b25c:	f000 faf8 	bl	800b850 <_sbrk_r>
 800b260:	6020      	str	r0, [r4, #0]
 800b262:	0029      	movs	r1, r5
 800b264:	0030      	movs	r0, r6
 800b266:	f000 faf3 	bl	800b850 <_sbrk_r>
 800b26a:	1c43      	adds	r3, r0, #1
 800b26c:	d12b      	bne.n	800b2c6 <_malloc_r+0x9a>
 800b26e:	230c      	movs	r3, #12
 800b270:	0030      	movs	r0, r6
 800b272:	6033      	str	r3, [r6, #0]
 800b274:	f000 fe82 	bl	800bf7c <__malloc_unlock>
 800b278:	e003      	b.n	800b282 <_malloc_r+0x56>
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	dadf      	bge.n	800b23e <_malloc_r+0x12>
 800b27e:	230c      	movs	r3, #12
 800b280:	6033      	str	r3, [r6, #0]
 800b282:	2000      	movs	r0, #0
 800b284:	bd70      	pop	{r4, r5, r6, pc}
 800b286:	680b      	ldr	r3, [r1, #0]
 800b288:	1b5b      	subs	r3, r3, r5
 800b28a:	d419      	bmi.n	800b2c0 <_malloc_r+0x94>
 800b28c:	2b0b      	cmp	r3, #11
 800b28e:	d903      	bls.n	800b298 <_malloc_r+0x6c>
 800b290:	600b      	str	r3, [r1, #0]
 800b292:	18cc      	adds	r4, r1, r3
 800b294:	6025      	str	r5, [r4, #0]
 800b296:	e003      	b.n	800b2a0 <_malloc_r+0x74>
 800b298:	684b      	ldr	r3, [r1, #4]
 800b29a:	428c      	cmp	r4, r1
 800b29c:	d10d      	bne.n	800b2ba <_malloc_r+0x8e>
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	0030      	movs	r0, r6
 800b2a2:	f000 fe6b 	bl	800bf7c <__malloc_unlock>
 800b2a6:	0020      	movs	r0, r4
 800b2a8:	2207      	movs	r2, #7
 800b2aa:	300b      	adds	r0, #11
 800b2ac:	1d23      	adds	r3, r4, #4
 800b2ae:	4390      	bics	r0, r2
 800b2b0:	1ac3      	subs	r3, r0, r3
 800b2b2:	d0e7      	beq.n	800b284 <_malloc_r+0x58>
 800b2b4:	425a      	negs	r2, r3
 800b2b6:	50e2      	str	r2, [r4, r3]
 800b2b8:	e7e4      	b.n	800b284 <_malloc_r+0x58>
 800b2ba:	6063      	str	r3, [r4, #4]
 800b2bc:	000c      	movs	r4, r1
 800b2be:	e7ef      	b.n	800b2a0 <_malloc_r+0x74>
 800b2c0:	000c      	movs	r4, r1
 800b2c2:	6849      	ldr	r1, [r1, #4]
 800b2c4:	e7c3      	b.n	800b24e <_malloc_r+0x22>
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	1cc4      	adds	r4, r0, #3
 800b2ca:	439c      	bics	r4, r3
 800b2cc:	42a0      	cmp	r0, r4
 800b2ce:	d0e1      	beq.n	800b294 <_malloc_r+0x68>
 800b2d0:	1a21      	subs	r1, r4, r0
 800b2d2:	0030      	movs	r0, r6
 800b2d4:	f000 fabc 	bl	800b850 <_sbrk_r>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d1db      	bne.n	800b294 <_malloc_r+0x68>
 800b2dc:	e7c7      	b.n	800b26e <_malloc_r+0x42>
 800b2de:	46c0      	nop			; (mov r8, r8)
 800b2e0:	20000160 	.word	0x20000160
 800b2e4:	20000164 	.word	0x20000164

0800b2e8 <__sfputc_r>:
 800b2e8:	6893      	ldr	r3, [r2, #8]
 800b2ea:	b510      	push	{r4, lr}
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	6093      	str	r3, [r2, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	da04      	bge.n	800b2fe <__sfputc_r+0x16>
 800b2f4:	6994      	ldr	r4, [r2, #24]
 800b2f6:	42a3      	cmp	r3, r4
 800b2f8:	db07      	blt.n	800b30a <__sfputc_r+0x22>
 800b2fa:	290a      	cmp	r1, #10
 800b2fc:	d005      	beq.n	800b30a <__sfputc_r+0x22>
 800b2fe:	6813      	ldr	r3, [r2, #0]
 800b300:	1c58      	adds	r0, r3, #1
 800b302:	6010      	str	r0, [r2, #0]
 800b304:	7019      	strb	r1, [r3, #0]
 800b306:	0008      	movs	r0, r1
 800b308:	bd10      	pop	{r4, pc}
 800b30a:	f000 fafd 	bl	800b908 <__swbuf_r>
 800b30e:	0001      	movs	r1, r0
 800b310:	e7f9      	b.n	800b306 <__sfputc_r+0x1e>

0800b312 <__sfputs_r>:
 800b312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b314:	0006      	movs	r6, r0
 800b316:	000f      	movs	r7, r1
 800b318:	0014      	movs	r4, r2
 800b31a:	18d5      	adds	r5, r2, r3
 800b31c:	42ac      	cmp	r4, r5
 800b31e:	d101      	bne.n	800b324 <__sfputs_r+0x12>
 800b320:	2000      	movs	r0, #0
 800b322:	e007      	b.n	800b334 <__sfputs_r+0x22>
 800b324:	7821      	ldrb	r1, [r4, #0]
 800b326:	003a      	movs	r2, r7
 800b328:	0030      	movs	r0, r6
 800b32a:	f7ff ffdd 	bl	800b2e8 <__sfputc_r>
 800b32e:	3401      	adds	r4, #1
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d1f3      	bne.n	800b31c <__sfputs_r+0xa>
 800b334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b338 <_vfiprintf_r>:
 800b338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33a:	b0a1      	sub	sp, #132	; 0x84
 800b33c:	9003      	str	r0, [sp, #12]
 800b33e:	000f      	movs	r7, r1
 800b340:	0016      	movs	r6, r2
 800b342:	001d      	movs	r5, r3
 800b344:	2800      	cmp	r0, #0
 800b346:	d005      	beq.n	800b354 <_vfiprintf_r+0x1c>
 800b348:	6983      	ldr	r3, [r0, #24]
 800b34a:	9305      	str	r3, [sp, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d101      	bne.n	800b354 <_vfiprintf_r+0x1c>
 800b350:	f000 fd08 	bl	800bd64 <__sinit>
 800b354:	4b7b      	ldr	r3, [pc, #492]	; (800b544 <_vfiprintf_r+0x20c>)
 800b356:	429f      	cmp	r7, r3
 800b358:	d15c      	bne.n	800b414 <_vfiprintf_r+0xdc>
 800b35a:	9b03      	ldr	r3, [sp, #12]
 800b35c:	685f      	ldr	r7, [r3, #4]
 800b35e:	89bb      	ldrh	r3, [r7, #12]
 800b360:	071b      	lsls	r3, r3, #28
 800b362:	d563      	bpl.n	800b42c <_vfiprintf_r+0xf4>
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d060      	beq.n	800b42c <_vfiprintf_r+0xf4>
 800b36a:	2300      	movs	r3, #0
 800b36c:	ac08      	add	r4, sp, #32
 800b36e:	6163      	str	r3, [r4, #20]
 800b370:	3320      	adds	r3, #32
 800b372:	7663      	strb	r3, [r4, #25]
 800b374:	3310      	adds	r3, #16
 800b376:	76a3      	strb	r3, [r4, #26]
 800b378:	9507      	str	r5, [sp, #28]
 800b37a:	0035      	movs	r5, r6
 800b37c:	782b      	ldrb	r3, [r5, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <_vfiprintf_r+0x4e>
 800b382:	2b25      	cmp	r3, #37	; 0x25
 800b384:	d15c      	bne.n	800b440 <_vfiprintf_r+0x108>
 800b386:	1bab      	subs	r3, r5, r6
 800b388:	9305      	str	r3, [sp, #20]
 800b38a:	d00c      	beq.n	800b3a6 <_vfiprintf_r+0x6e>
 800b38c:	0032      	movs	r2, r6
 800b38e:	0039      	movs	r1, r7
 800b390:	9803      	ldr	r0, [sp, #12]
 800b392:	f7ff ffbe 	bl	800b312 <__sfputs_r>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	d100      	bne.n	800b39c <_vfiprintf_r+0x64>
 800b39a:	e0c4      	b.n	800b526 <_vfiprintf_r+0x1ee>
 800b39c:	6962      	ldr	r2, [r4, #20]
 800b39e:	9b05      	ldr	r3, [sp, #20]
 800b3a0:	4694      	mov	ip, r2
 800b3a2:	4463      	add	r3, ip
 800b3a4:	6163      	str	r3, [r4, #20]
 800b3a6:	782b      	ldrb	r3, [r5, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d100      	bne.n	800b3ae <_vfiprintf_r+0x76>
 800b3ac:	e0bb      	b.n	800b526 <_vfiprintf_r+0x1ee>
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4252      	negs	r2, r2
 800b3b4:	6062      	str	r2, [r4, #4]
 800b3b6:	a904      	add	r1, sp, #16
 800b3b8:	3254      	adds	r2, #84	; 0x54
 800b3ba:	1852      	adds	r2, r2, r1
 800b3bc:	1c6e      	adds	r6, r5, #1
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	60e3      	str	r3, [r4, #12]
 800b3c2:	60a3      	str	r3, [r4, #8]
 800b3c4:	7013      	strb	r3, [r2, #0]
 800b3c6:	65a3      	str	r3, [r4, #88]	; 0x58
 800b3c8:	7831      	ldrb	r1, [r6, #0]
 800b3ca:	2205      	movs	r2, #5
 800b3cc:	485e      	ldr	r0, [pc, #376]	; (800b548 <_vfiprintf_r+0x210>)
 800b3ce:	f000 fdc9 	bl	800bf64 <memchr>
 800b3d2:	1c75      	adds	r5, r6, #1
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d135      	bne.n	800b444 <_vfiprintf_r+0x10c>
 800b3d8:	6822      	ldr	r2, [r4, #0]
 800b3da:	06d3      	lsls	r3, r2, #27
 800b3dc:	d504      	bpl.n	800b3e8 <_vfiprintf_r+0xb0>
 800b3de:	2353      	movs	r3, #83	; 0x53
 800b3e0:	a904      	add	r1, sp, #16
 800b3e2:	185b      	adds	r3, r3, r1
 800b3e4:	2120      	movs	r1, #32
 800b3e6:	7019      	strb	r1, [r3, #0]
 800b3e8:	0713      	lsls	r3, r2, #28
 800b3ea:	d504      	bpl.n	800b3f6 <_vfiprintf_r+0xbe>
 800b3ec:	2353      	movs	r3, #83	; 0x53
 800b3ee:	a904      	add	r1, sp, #16
 800b3f0:	185b      	adds	r3, r3, r1
 800b3f2:	212b      	movs	r1, #43	; 0x2b
 800b3f4:	7019      	strb	r1, [r3, #0]
 800b3f6:	7833      	ldrb	r3, [r6, #0]
 800b3f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b3fa:	d02c      	beq.n	800b456 <_vfiprintf_r+0x11e>
 800b3fc:	0035      	movs	r5, r6
 800b3fe:	2100      	movs	r1, #0
 800b400:	200a      	movs	r0, #10
 800b402:	68e3      	ldr	r3, [r4, #12]
 800b404:	782a      	ldrb	r2, [r5, #0]
 800b406:	1c6e      	adds	r6, r5, #1
 800b408:	3a30      	subs	r2, #48	; 0x30
 800b40a:	2a09      	cmp	r2, #9
 800b40c:	d964      	bls.n	800b4d8 <_vfiprintf_r+0x1a0>
 800b40e:	2900      	cmp	r1, #0
 800b410:	d02e      	beq.n	800b470 <_vfiprintf_r+0x138>
 800b412:	e026      	b.n	800b462 <_vfiprintf_r+0x12a>
 800b414:	4b4d      	ldr	r3, [pc, #308]	; (800b54c <_vfiprintf_r+0x214>)
 800b416:	429f      	cmp	r7, r3
 800b418:	d102      	bne.n	800b420 <_vfiprintf_r+0xe8>
 800b41a:	9b03      	ldr	r3, [sp, #12]
 800b41c:	689f      	ldr	r7, [r3, #8]
 800b41e:	e79e      	b.n	800b35e <_vfiprintf_r+0x26>
 800b420:	4b4b      	ldr	r3, [pc, #300]	; (800b550 <_vfiprintf_r+0x218>)
 800b422:	429f      	cmp	r7, r3
 800b424:	d19b      	bne.n	800b35e <_vfiprintf_r+0x26>
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	68df      	ldr	r7, [r3, #12]
 800b42a:	e798      	b.n	800b35e <_vfiprintf_r+0x26>
 800b42c:	0039      	movs	r1, r7
 800b42e:	9803      	ldr	r0, [sp, #12]
 800b430:	f000 fac0 	bl	800b9b4 <__swsetup_r>
 800b434:	2800      	cmp	r0, #0
 800b436:	d098      	beq.n	800b36a <_vfiprintf_r+0x32>
 800b438:	2001      	movs	r0, #1
 800b43a:	4240      	negs	r0, r0
 800b43c:	b021      	add	sp, #132	; 0x84
 800b43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b440:	3501      	adds	r5, #1
 800b442:	e79b      	b.n	800b37c <_vfiprintf_r+0x44>
 800b444:	4b40      	ldr	r3, [pc, #256]	; (800b548 <_vfiprintf_r+0x210>)
 800b446:	6822      	ldr	r2, [r4, #0]
 800b448:	1ac0      	subs	r0, r0, r3
 800b44a:	2301      	movs	r3, #1
 800b44c:	4083      	lsls	r3, r0
 800b44e:	4313      	orrs	r3, r2
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	002e      	movs	r6, r5
 800b454:	e7b8      	b.n	800b3c8 <_vfiprintf_r+0x90>
 800b456:	9b07      	ldr	r3, [sp, #28]
 800b458:	1d19      	adds	r1, r3, #4
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	9107      	str	r1, [sp, #28]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	db01      	blt.n	800b466 <_vfiprintf_r+0x12e>
 800b462:	930b      	str	r3, [sp, #44]	; 0x2c
 800b464:	e004      	b.n	800b470 <_vfiprintf_r+0x138>
 800b466:	425b      	negs	r3, r3
 800b468:	60e3      	str	r3, [r4, #12]
 800b46a:	2302      	movs	r3, #2
 800b46c:	4313      	orrs	r3, r2
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	782b      	ldrb	r3, [r5, #0]
 800b472:	2b2e      	cmp	r3, #46	; 0x2e
 800b474:	d10a      	bne.n	800b48c <_vfiprintf_r+0x154>
 800b476:	786b      	ldrb	r3, [r5, #1]
 800b478:	2b2a      	cmp	r3, #42	; 0x2a
 800b47a:	d135      	bne.n	800b4e8 <_vfiprintf_r+0x1b0>
 800b47c:	9b07      	ldr	r3, [sp, #28]
 800b47e:	3502      	adds	r5, #2
 800b480:	1d1a      	adds	r2, r3, #4
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	9207      	str	r2, [sp, #28]
 800b486:	2b00      	cmp	r3, #0
 800b488:	db2b      	blt.n	800b4e2 <_vfiprintf_r+0x1aa>
 800b48a:	9309      	str	r3, [sp, #36]	; 0x24
 800b48c:	4e31      	ldr	r6, [pc, #196]	; (800b554 <_vfiprintf_r+0x21c>)
 800b48e:	7829      	ldrb	r1, [r5, #0]
 800b490:	2203      	movs	r2, #3
 800b492:	0030      	movs	r0, r6
 800b494:	f000 fd66 	bl	800bf64 <memchr>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d006      	beq.n	800b4aa <_vfiprintf_r+0x172>
 800b49c:	2340      	movs	r3, #64	; 0x40
 800b49e:	1b80      	subs	r0, r0, r6
 800b4a0:	4083      	lsls	r3, r0
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	7829      	ldrb	r1, [r5, #0]
 800b4ac:	2206      	movs	r2, #6
 800b4ae:	482a      	ldr	r0, [pc, #168]	; (800b558 <_vfiprintf_r+0x220>)
 800b4b0:	1c6e      	adds	r6, r5, #1
 800b4b2:	7621      	strb	r1, [r4, #24]
 800b4b4:	f000 fd56 	bl	800bf64 <memchr>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d03a      	beq.n	800b532 <_vfiprintf_r+0x1fa>
 800b4bc:	4b27      	ldr	r3, [pc, #156]	; (800b55c <_vfiprintf_r+0x224>)
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d125      	bne.n	800b50e <_vfiprintf_r+0x1d6>
 800b4c2:	2207      	movs	r2, #7
 800b4c4:	9b07      	ldr	r3, [sp, #28]
 800b4c6:	3307      	adds	r3, #7
 800b4c8:	4393      	bics	r3, r2
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	9307      	str	r3, [sp, #28]
 800b4ce:	6963      	ldr	r3, [r4, #20]
 800b4d0:	9a04      	ldr	r2, [sp, #16]
 800b4d2:	189b      	adds	r3, r3, r2
 800b4d4:	6163      	str	r3, [r4, #20]
 800b4d6:	e750      	b.n	800b37a <_vfiprintf_r+0x42>
 800b4d8:	4343      	muls	r3, r0
 800b4da:	2101      	movs	r1, #1
 800b4dc:	189b      	adds	r3, r3, r2
 800b4de:	0035      	movs	r5, r6
 800b4e0:	e790      	b.n	800b404 <_vfiprintf_r+0xcc>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	425b      	negs	r3, r3
 800b4e6:	e7d0      	b.n	800b48a <_vfiprintf_r+0x152>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	200a      	movs	r0, #10
 800b4ec:	001a      	movs	r2, r3
 800b4ee:	3501      	adds	r5, #1
 800b4f0:	6063      	str	r3, [r4, #4]
 800b4f2:	7829      	ldrb	r1, [r5, #0]
 800b4f4:	1c6e      	adds	r6, r5, #1
 800b4f6:	3930      	subs	r1, #48	; 0x30
 800b4f8:	2909      	cmp	r1, #9
 800b4fa:	d903      	bls.n	800b504 <_vfiprintf_r+0x1cc>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0c5      	beq.n	800b48c <_vfiprintf_r+0x154>
 800b500:	9209      	str	r2, [sp, #36]	; 0x24
 800b502:	e7c3      	b.n	800b48c <_vfiprintf_r+0x154>
 800b504:	4342      	muls	r2, r0
 800b506:	2301      	movs	r3, #1
 800b508:	1852      	adds	r2, r2, r1
 800b50a:	0035      	movs	r5, r6
 800b50c:	e7f1      	b.n	800b4f2 <_vfiprintf_r+0x1ba>
 800b50e:	ab07      	add	r3, sp, #28
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	003a      	movs	r2, r7
 800b514:	4b12      	ldr	r3, [pc, #72]	; (800b560 <_vfiprintf_r+0x228>)
 800b516:	0021      	movs	r1, r4
 800b518:	9803      	ldr	r0, [sp, #12]
 800b51a:	e000      	b.n	800b51e <_vfiprintf_r+0x1e6>
 800b51c:	bf00      	nop
 800b51e:	9004      	str	r0, [sp, #16]
 800b520:	9b04      	ldr	r3, [sp, #16]
 800b522:	3301      	adds	r3, #1
 800b524:	d1d3      	bne.n	800b4ce <_vfiprintf_r+0x196>
 800b526:	89bb      	ldrh	r3, [r7, #12]
 800b528:	065b      	lsls	r3, r3, #25
 800b52a:	d500      	bpl.n	800b52e <_vfiprintf_r+0x1f6>
 800b52c:	e784      	b.n	800b438 <_vfiprintf_r+0x100>
 800b52e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b530:	e784      	b.n	800b43c <_vfiprintf_r+0x104>
 800b532:	ab07      	add	r3, sp, #28
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	003a      	movs	r2, r7
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <_vfiprintf_r+0x228>)
 800b53a:	0021      	movs	r1, r4
 800b53c:	9803      	ldr	r0, [sp, #12]
 800b53e:	f000 f87f 	bl	800b640 <_printf_i>
 800b542:	e7ec      	b.n	800b51e <_vfiprintf_r+0x1e6>
 800b544:	0800c91c 	.word	0x0800c91c
 800b548:	0800c8c8 	.word	0x0800c8c8
 800b54c:	0800c93c 	.word	0x0800c93c
 800b550:	0800c8fc 	.word	0x0800c8fc
 800b554:	0800c8ce 	.word	0x0800c8ce
 800b558:	0800c8d2 	.word	0x0800c8d2
 800b55c:	00000000 	.word	0x00000000
 800b560:	0800b313 	.word	0x0800b313

0800b564 <_printf_common>:
 800b564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b566:	0015      	movs	r5, r2
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	688a      	ldr	r2, [r1, #8]
 800b56c:	690b      	ldr	r3, [r1, #16]
 800b56e:	9000      	str	r0, [sp, #0]
 800b570:	000c      	movs	r4, r1
 800b572:	4293      	cmp	r3, r2
 800b574:	da00      	bge.n	800b578 <_printf_common+0x14>
 800b576:	0013      	movs	r3, r2
 800b578:	0022      	movs	r2, r4
 800b57a:	602b      	str	r3, [r5, #0]
 800b57c:	3243      	adds	r2, #67	; 0x43
 800b57e:	7812      	ldrb	r2, [r2, #0]
 800b580:	2a00      	cmp	r2, #0
 800b582:	d001      	beq.n	800b588 <_printf_common+0x24>
 800b584:	3301      	adds	r3, #1
 800b586:	602b      	str	r3, [r5, #0]
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	069b      	lsls	r3, r3, #26
 800b58c:	d502      	bpl.n	800b594 <_printf_common+0x30>
 800b58e:	682b      	ldr	r3, [r5, #0]
 800b590:	3302      	adds	r3, #2
 800b592:	602b      	str	r3, [r5, #0]
 800b594:	2706      	movs	r7, #6
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	401f      	ands	r7, r3
 800b59a:	d027      	beq.n	800b5ec <_printf_common+0x88>
 800b59c:	0023      	movs	r3, r4
 800b59e:	3343      	adds	r3, #67	; 0x43
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	1e5a      	subs	r2, r3, #1
 800b5a4:	4193      	sbcs	r3, r2
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	0692      	lsls	r2, r2, #26
 800b5aa:	d430      	bmi.n	800b60e <_printf_common+0xaa>
 800b5ac:	0022      	movs	r2, r4
 800b5ae:	9901      	ldr	r1, [sp, #4]
 800b5b0:	3243      	adds	r2, #67	; 0x43
 800b5b2:	9800      	ldr	r0, [sp, #0]
 800b5b4:	9e08      	ldr	r6, [sp, #32]
 800b5b6:	47b0      	blx	r6
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d025      	beq.n	800b608 <_printf_common+0xa4>
 800b5bc:	2306      	movs	r3, #6
 800b5be:	6820      	ldr	r0, [r4, #0]
 800b5c0:	682a      	ldr	r2, [r5, #0]
 800b5c2:	68e1      	ldr	r1, [r4, #12]
 800b5c4:	4003      	ands	r3, r0
 800b5c6:	2500      	movs	r5, #0
 800b5c8:	2b04      	cmp	r3, #4
 800b5ca:	d103      	bne.n	800b5d4 <_printf_common+0x70>
 800b5cc:	1a8d      	subs	r5, r1, r2
 800b5ce:	43eb      	mvns	r3, r5
 800b5d0:	17db      	asrs	r3, r3, #31
 800b5d2:	401d      	ands	r5, r3
 800b5d4:	68a3      	ldr	r3, [r4, #8]
 800b5d6:	6922      	ldr	r2, [r4, #16]
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	dd01      	ble.n	800b5e0 <_printf_common+0x7c>
 800b5dc:	1a9b      	subs	r3, r3, r2
 800b5de:	18ed      	adds	r5, r5, r3
 800b5e0:	2700      	movs	r7, #0
 800b5e2:	42bd      	cmp	r5, r7
 800b5e4:	d120      	bne.n	800b628 <_printf_common+0xc4>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	e010      	b.n	800b60c <_printf_common+0xa8>
 800b5ea:	3701      	adds	r7, #1
 800b5ec:	68e3      	ldr	r3, [r4, #12]
 800b5ee:	682a      	ldr	r2, [r5, #0]
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	42bb      	cmp	r3, r7
 800b5f4:	ddd2      	ble.n	800b59c <_printf_common+0x38>
 800b5f6:	0022      	movs	r2, r4
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	3219      	adds	r2, #25
 800b5fc:	9901      	ldr	r1, [sp, #4]
 800b5fe:	9800      	ldr	r0, [sp, #0]
 800b600:	9e08      	ldr	r6, [sp, #32]
 800b602:	47b0      	blx	r6
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d1f0      	bne.n	800b5ea <_printf_common+0x86>
 800b608:	2001      	movs	r0, #1
 800b60a:	4240      	negs	r0, r0
 800b60c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b60e:	2030      	movs	r0, #48	; 0x30
 800b610:	18e1      	adds	r1, r4, r3
 800b612:	3143      	adds	r1, #67	; 0x43
 800b614:	7008      	strb	r0, [r1, #0]
 800b616:	0021      	movs	r1, r4
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	3145      	adds	r1, #69	; 0x45
 800b61c:	7809      	ldrb	r1, [r1, #0]
 800b61e:	18a2      	adds	r2, r4, r2
 800b620:	3243      	adds	r2, #67	; 0x43
 800b622:	3302      	adds	r3, #2
 800b624:	7011      	strb	r1, [r2, #0]
 800b626:	e7c1      	b.n	800b5ac <_printf_common+0x48>
 800b628:	0022      	movs	r2, r4
 800b62a:	2301      	movs	r3, #1
 800b62c:	321a      	adds	r2, #26
 800b62e:	9901      	ldr	r1, [sp, #4]
 800b630:	9800      	ldr	r0, [sp, #0]
 800b632:	9e08      	ldr	r6, [sp, #32]
 800b634:	47b0      	blx	r6
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	d0e6      	beq.n	800b608 <_printf_common+0xa4>
 800b63a:	3701      	adds	r7, #1
 800b63c:	e7d1      	b.n	800b5e2 <_printf_common+0x7e>
	...

0800b640 <_printf_i>:
 800b640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b642:	b089      	sub	sp, #36	; 0x24
 800b644:	9204      	str	r2, [sp, #16]
 800b646:	000a      	movs	r2, r1
 800b648:	3243      	adds	r2, #67	; 0x43
 800b64a:	9305      	str	r3, [sp, #20]
 800b64c:	9003      	str	r0, [sp, #12]
 800b64e:	9202      	str	r2, [sp, #8]
 800b650:	7e0a      	ldrb	r2, [r1, #24]
 800b652:	000c      	movs	r4, r1
 800b654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b656:	2a6e      	cmp	r2, #110	; 0x6e
 800b658:	d100      	bne.n	800b65c <_printf_i+0x1c>
 800b65a:	e086      	b.n	800b76a <_printf_i+0x12a>
 800b65c:	d81f      	bhi.n	800b69e <_printf_i+0x5e>
 800b65e:	2a63      	cmp	r2, #99	; 0x63
 800b660:	d033      	beq.n	800b6ca <_printf_i+0x8a>
 800b662:	d808      	bhi.n	800b676 <_printf_i+0x36>
 800b664:	2a00      	cmp	r2, #0
 800b666:	d100      	bne.n	800b66a <_printf_i+0x2a>
 800b668:	e08c      	b.n	800b784 <_printf_i+0x144>
 800b66a:	2a58      	cmp	r2, #88	; 0x58
 800b66c:	d04d      	beq.n	800b70a <_printf_i+0xca>
 800b66e:	0025      	movs	r5, r4
 800b670:	3542      	adds	r5, #66	; 0x42
 800b672:	702a      	strb	r2, [r5, #0]
 800b674:	e030      	b.n	800b6d8 <_printf_i+0x98>
 800b676:	2a64      	cmp	r2, #100	; 0x64
 800b678:	d001      	beq.n	800b67e <_printf_i+0x3e>
 800b67a:	2a69      	cmp	r2, #105	; 0x69
 800b67c:	d1f7      	bne.n	800b66e <_printf_i+0x2e>
 800b67e:	6819      	ldr	r1, [r3, #0]
 800b680:	6825      	ldr	r5, [r4, #0]
 800b682:	1d0a      	adds	r2, r1, #4
 800b684:	0628      	lsls	r0, r5, #24
 800b686:	d529      	bpl.n	800b6dc <_printf_i+0x9c>
 800b688:	6808      	ldr	r0, [r1, #0]
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	2800      	cmp	r0, #0
 800b68e:	da03      	bge.n	800b698 <_printf_i+0x58>
 800b690:	232d      	movs	r3, #45	; 0x2d
 800b692:	9a02      	ldr	r2, [sp, #8]
 800b694:	4240      	negs	r0, r0
 800b696:	7013      	strb	r3, [r2, #0]
 800b698:	4e6b      	ldr	r6, [pc, #428]	; (800b848 <_printf_i+0x208>)
 800b69a:	270a      	movs	r7, #10
 800b69c:	e04f      	b.n	800b73e <_printf_i+0xfe>
 800b69e:	2a73      	cmp	r2, #115	; 0x73
 800b6a0:	d074      	beq.n	800b78c <_printf_i+0x14c>
 800b6a2:	d808      	bhi.n	800b6b6 <_printf_i+0x76>
 800b6a4:	2a6f      	cmp	r2, #111	; 0x6f
 800b6a6:	d01f      	beq.n	800b6e8 <_printf_i+0xa8>
 800b6a8:	2a70      	cmp	r2, #112	; 0x70
 800b6aa:	d1e0      	bne.n	800b66e <_printf_i+0x2e>
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	6809      	ldr	r1, [r1, #0]
 800b6b0:	430a      	orrs	r2, r1
 800b6b2:	6022      	str	r2, [r4, #0]
 800b6b4:	e003      	b.n	800b6be <_printf_i+0x7e>
 800b6b6:	2a75      	cmp	r2, #117	; 0x75
 800b6b8:	d016      	beq.n	800b6e8 <_printf_i+0xa8>
 800b6ba:	2a78      	cmp	r2, #120	; 0x78
 800b6bc:	d1d7      	bne.n	800b66e <_printf_i+0x2e>
 800b6be:	0022      	movs	r2, r4
 800b6c0:	2178      	movs	r1, #120	; 0x78
 800b6c2:	3245      	adds	r2, #69	; 0x45
 800b6c4:	7011      	strb	r1, [r2, #0]
 800b6c6:	4e61      	ldr	r6, [pc, #388]	; (800b84c <_printf_i+0x20c>)
 800b6c8:	e022      	b.n	800b710 <_printf_i+0xd0>
 800b6ca:	0025      	movs	r5, r4
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	3542      	adds	r5, #66	; 0x42
 800b6d0:	1d11      	adds	r1, r2, #4
 800b6d2:	6019      	str	r1, [r3, #0]
 800b6d4:	6813      	ldr	r3, [r2, #0]
 800b6d6:	702b      	strb	r3, [r5, #0]
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e065      	b.n	800b7a8 <_printf_i+0x168>
 800b6dc:	6808      	ldr	r0, [r1, #0]
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	0669      	lsls	r1, r5, #25
 800b6e2:	d5d3      	bpl.n	800b68c <_printf_i+0x4c>
 800b6e4:	b200      	sxth	r0, r0
 800b6e6:	e7d1      	b.n	800b68c <_printf_i+0x4c>
 800b6e8:	6819      	ldr	r1, [r3, #0]
 800b6ea:	6825      	ldr	r5, [r4, #0]
 800b6ec:	1d08      	adds	r0, r1, #4
 800b6ee:	6018      	str	r0, [r3, #0]
 800b6f0:	6808      	ldr	r0, [r1, #0]
 800b6f2:	062e      	lsls	r6, r5, #24
 800b6f4:	d505      	bpl.n	800b702 <_printf_i+0xc2>
 800b6f6:	4e54      	ldr	r6, [pc, #336]	; (800b848 <_printf_i+0x208>)
 800b6f8:	2708      	movs	r7, #8
 800b6fa:	2a6f      	cmp	r2, #111	; 0x6f
 800b6fc:	d01b      	beq.n	800b736 <_printf_i+0xf6>
 800b6fe:	270a      	movs	r7, #10
 800b700:	e019      	b.n	800b736 <_printf_i+0xf6>
 800b702:	066d      	lsls	r5, r5, #25
 800b704:	d5f7      	bpl.n	800b6f6 <_printf_i+0xb6>
 800b706:	b280      	uxth	r0, r0
 800b708:	e7f5      	b.n	800b6f6 <_printf_i+0xb6>
 800b70a:	3145      	adds	r1, #69	; 0x45
 800b70c:	4e4e      	ldr	r6, [pc, #312]	; (800b848 <_printf_i+0x208>)
 800b70e:	700a      	strb	r2, [r1, #0]
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	6822      	ldr	r2, [r4, #0]
 800b714:	1d01      	adds	r1, r0, #4
 800b716:	6800      	ldr	r0, [r0, #0]
 800b718:	6019      	str	r1, [r3, #0]
 800b71a:	0615      	lsls	r5, r2, #24
 800b71c:	d521      	bpl.n	800b762 <_printf_i+0x122>
 800b71e:	07d3      	lsls	r3, r2, #31
 800b720:	d502      	bpl.n	800b728 <_printf_i+0xe8>
 800b722:	2320      	movs	r3, #32
 800b724:	431a      	orrs	r2, r3
 800b726:	6022      	str	r2, [r4, #0]
 800b728:	2710      	movs	r7, #16
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d103      	bne.n	800b736 <_printf_i+0xf6>
 800b72e:	2320      	movs	r3, #32
 800b730:	6822      	ldr	r2, [r4, #0]
 800b732:	439a      	bics	r2, r3
 800b734:	6022      	str	r2, [r4, #0]
 800b736:	0023      	movs	r3, r4
 800b738:	2200      	movs	r2, #0
 800b73a:	3343      	adds	r3, #67	; 0x43
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	db58      	blt.n	800b7f8 <_printf_i+0x1b8>
 800b746:	2204      	movs	r2, #4
 800b748:	6821      	ldr	r1, [r4, #0]
 800b74a:	4391      	bics	r1, r2
 800b74c:	6021      	str	r1, [r4, #0]
 800b74e:	2800      	cmp	r0, #0
 800b750:	d154      	bne.n	800b7fc <_printf_i+0x1bc>
 800b752:	9d02      	ldr	r5, [sp, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d05a      	beq.n	800b80e <_printf_i+0x1ce>
 800b758:	0025      	movs	r5, r4
 800b75a:	7833      	ldrb	r3, [r6, #0]
 800b75c:	3542      	adds	r5, #66	; 0x42
 800b75e:	702b      	strb	r3, [r5, #0]
 800b760:	e055      	b.n	800b80e <_printf_i+0x1ce>
 800b762:	0655      	lsls	r5, r2, #25
 800b764:	d5db      	bpl.n	800b71e <_printf_i+0xde>
 800b766:	b280      	uxth	r0, r0
 800b768:	e7d9      	b.n	800b71e <_printf_i+0xde>
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	680d      	ldr	r5, [r1, #0]
 800b76e:	1d10      	adds	r0, r2, #4
 800b770:	6949      	ldr	r1, [r1, #20]
 800b772:	6018      	str	r0, [r3, #0]
 800b774:	6813      	ldr	r3, [r2, #0]
 800b776:	062e      	lsls	r6, r5, #24
 800b778:	d501      	bpl.n	800b77e <_printf_i+0x13e>
 800b77a:	6019      	str	r1, [r3, #0]
 800b77c:	e002      	b.n	800b784 <_printf_i+0x144>
 800b77e:	066d      	lsls	r5, r5, #25
 800b780:	d5fb      	bpl.n	800b77a <_printf_i+0x13a>
 800b782:	8019      	strh	r1, [r3, #0]
 800b784:	2300      	movs	r3, #0
 800b786:	9d02      	ldr	r5, [sp, #8]
 800b788:	6123      	str	r3, [r4, #16]
 800b78a:	e04f      	b.n	800b82c <_printf_i+0x1ec>
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	1d11      	adds	r1, r2, #4
 800b790:	6019      	str	r1, [r3, #0]
 800b792:	6815      	ldr	r5, [r2, #0]
 800b794:	2100      	movs	r1, #0
 800b796:	6862      	ldr	r2, [r4, #4]
 800b798:	0028      	movs	r0, r5
 800b79a:	f000 fbe3 	bl	800bf64 <memchr>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d001      	beq.n	800b7a6 <_printf_i+0x166>
 800b7a2:	1b40      	subs	r0, r0, r5
 800b7a4:	6060      	str	r0, [r4, #4]
 800b7a6:	6863      	ldr	r3, [r4, #4]
 800b7a8:	6123      	str	r3, [r4, #16]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	9a02      	ldr	r2, [sp, #8]
 800b7ae:	7013      	strb	r3, [r2, #0]
 800b7b0:	e03c      	b.n	800b82c <_printf_i+0x1ec>
 800b7b2:	6923      	ldr	r3, [r4, #16]
 800b7b4:	002a      	movs	r2, r5
 800b7b6:	9904      	ldr	r1, [sp, #16]
 800b7b8:	9803      	ldr	r0, [sp, #12]
 800b7ba:	9d05      	ldr	r5, [sp, #20]
 800b7bc:	47a8      	blx	r5
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	d03e      	beq.n	800b840 <_printf_i+0x200>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	079b      	lsls	r3, r3, #30
 800b7c6:	d415      	bmi.n	800b7f4 <_printf_i+0x1b4>
 800b7c8:	9b07      	ldr	r3, [sp, #28]
 800b7ca:	68e0      	ldr	r0, [r4, #12]
 800b7cc:	4298      	cmp	r0, r3
 800b7ce:	da39      	bge.n	800b844 <_printf_i+0x204>
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	e037      	b.n	800b844 <_printf_i+0x204>
 800b7d4:	0022      	movs	r2, r4
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	3219      	adds	r2, #25
 800b7da:	9904      	ldr	r1, [sp, #16]
 800b7dc:	9803      	ldr	r0, [sp, #12]
 800b7de:	9e05      	ldr	r6, [sp, #20]
 800b7e0:	47b0      	blx	r6
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	d02c      	beq.n	800b840 <_printf_i+0x200>
 800b7e6:	3501      	adds	r5, #1
 800b7e8:	68e3      	ldr	r3, [r4, #12]
 800b7ea:	9a07      	ldr	r2, [sp, #28]
 800b7ec:	1a9b      	subs	r3, r3, r2
 800b7ee:	42ab      	cmp	r3, r5
 800b7f0:	dcf0      	bgt.n	800b7d4 <_printf_i+0x194>
 800b7f2:	e7e9      	b.n	800b7c8 <_printf_i+0x188>
 800b7f4:	2500      	movs	r5, #0
 800b7f6:	e7f7      	b.n	800b7e8 <_printf_i+0x1a8>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d0ad      	beq.n	800b758 <_printf_i+0x118>
 800b7fc:	9d02      	ldr	r5, [sp, #8]
 800b7fe:	0039      	movs	r1, r7
 800b800:	f7f4 fd08 	bl	8000214 <__aeabi_uidivmod>
 800b804:	5c73      	ldrb	r3, [r6, r1]
 800b806:	3d01      	subs	r5, #1
 800b808:	702b      	strb	r3, [r5, #0]
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1f7      	bne.n	800b7fe <_printf_i+0x1be>
 800b80e:	2f08      	cmp	r7, #8
 800b810:	d109      	bne.n	800b826 <_printf_i+0x1e6>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	07db      	lsls	r3, r3, #31
 800b816:	d506      	bpl.n	800b826 <_printf_i+0x1e6>
 800b818:	6863      	ldr	r3, [r4, #4]
 800b81a:	6922      	ldr	r2, [r4, #16]
 800b81c:	4293      	cmp	r3, r2
 800b81e:	dc02      	bgt.n	800b826 <_printf_i+0x1e6>
 800b820:	2330      	movs	r3, #48	; 0x30
 800b822:	3d01      	subs	r5, #1
 800b824:	702b      	strb	r3, [r5, #0]
 800b826:	9b02      	ldr	r3, [sp, #8]
 800b828:	1b5b      	subs	r3, r3, r5
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	9b05      	ldr	r3, [sp, #20]
 800b82e:	aa07      	add	r2, sp, #28
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	0021      	movs	r1, r4
 800b834:	9b04      	ldr	r3, [sp, #16]
 800b836:	9803      	ldr	r0, [sp, #12]
 800b838:	f7ff fe94 	bl	800b564 <_printf_common>
 800b83c:	1c43      	adds	r3, r0, #1
 800b83e:	d1b8      	bne.n	800b7b2 <_printf_i+0x172>
 800b840:	2001      	movs	r0, #1
 800b842:	4240      	negs	r0, r0
 800b844:	b009      	add	sp, #36	; 0x24
 800b846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b848:	0800c8d9 	.word	0x0800c8d9
 800b84c:	0800c8ea 	.word	0x0800c8ea

0800b850 <_sbrk_r>:
 800b850:	2300      	movs	r3, #0
 800b852:	b570      	push	{r4, r5, r6, lr}
 800b854:	4c06      	ldr	r4, [pc, #24]	; (800b870 <_sbrk_r+0x20>)
 800b856:	0005      	movs	r5, r0
 800b858:	0008      	movs	r0, r1
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	f7f5 fb7c 	bl	8000f58 <_sbrk>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d103      	bne.n	800b86c <_sbrk_r+0x1c>
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d000      	beq.n	800b86c <_sbrk_r+0x1c>
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	bd70      	pop	{r4, r5, r6, pc}
 800b86e:	46c0      	nop			; (mov r8, r8)
 800b870:	200003e8 	.word	0x200003e8

0800b874 <_raise_r>:
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	0004      	movs	r4, r0
 800b878:	000d      	movs	r5, r1
 800b87a:	291f      	cmp	r1, #31
 800b87c:	d904      	bls.n	800b888 <_raise_r+0x14>
 800b87e:	2316      	movs	r3, #22
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	2001      	movs	r0, #1
 800b884:	4240      	negs	r0, r0
 800b886:	bd70      	pop	{r4, r5, r6, pc}
 800b888:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d004      	beq.n	800b898 <_raise_r+0x24>
 800b88e:	008a      	lsls	r2, r1, #2
 800b890:	189b      	adds	r3, r3, r2
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	2a00      	cmp	r2, #0
 800b896:	d108      	bne.n	800b8aa <_raise_r+0x36>
 800b898:	0020      	movs	r0, r4
 800b89a:	f000 f831 	bl	800b900 <_getpid_r>
 800b89e:	002a      	movs	r2, r5
 800b8a0:	0001      	movs	r1, r0
 800b8a2:	0020      	movs	r0, r4
 800b8a4:	f000 f81a 	bl	800b8dc <_kill_r>
 800b8a8:	e7ed      	b.n	800b886 <_raise_r+0x12>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	2a01      	cmp	r2, #1
 800b8ae:	d0ea      	beq.n	800b886 <_raise_r+0x12>
 800b8b0:	1c51      	adds	r1, r2, #1
 800b8b2:	d103      	bne.n	800b8bc <_raise_r+0x48>
 800b8b4:	2316      	movs	r3, #22
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	e7e4      	b.n	800b886 <_raise_r+0x12>
 800b8bc:	2400      	movs	r4, #0
 800b8be:	0028      	movs	r0, r5
 800b8c0:	601c      	str	r4, [r3, #0]
 800b8c2:	4790      	blx	r2
 800b8c4:	0020      	movs	r0, r4
 800b8c6:	e7de      	b.n	800b886 <_raise_r+0x12>

0800b8c8 <raise>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	4b03      	ldr	r3, [pc, #12]	; (800b8d8 <raise+0x10>)
 800b8cc:	0001      	movs	r1, r0
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	f7ff ffd0 	bl	800b874 <_raise_r>
 800b8d4:	bd10      	pop	{r4, pc}
 800b8d6:	46c0      	nop			; (mov r8, r8)
 800b8d8:	20000010 	.word	0x20000010

0800b8dc <_kill_r>:
 800b8dc:	2300      	movs	r3, #0
 800b8de:	b570      	push	{r4, r5, r6, lr}
 800b8e0:	4c06      	ldr	r4, [pc, #24]	; (800b8fc <_kill_r+0x20>)
 800b8e2:	0005      	movs	r5, r0
 800b8e4:	0008      	movs	r0, r1
 800b8e6:	0011      	movs	r1, r2
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	f7f5 fab3 	bl	8000e54 <_kill>
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	d103      	bne.n	800b8fa <_kill_r+0x1e>
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d000      	beq.n	800b8fa <_kill_r+0x1e>
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}
 800b8fc:	200003e8 	.word	0x200003e8

0800b900 <_getpid_r>:
 800b900:	b510      	push	{r4, lr}
 800b902:	f7f5 faa1 	bl	8000e48 <_getpid>
 800b906:	bd10      	pop	{r4, pc}

0800b908 <__swbuf_r>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	0005      	movs	r5, r0
 800b90c:	000e      	movs	r6, r1
 800b90e:	0014      	movs	r4, r2
 800b910:	2800      	cmp	r0, #0
 800b912:	d004      	beq.n	800b91e <__swbuf_r+0x16>
 800b914:	6983      	ldr	r3, [r0, #24]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <__swbuf_r+0x16>
 800b91a:	f000 fa23 	bl	800bd64 <__sinit>
 800b91e:	4b22      	ldr	r3, [pc, #136]	; (800b9a8 <__swbuf_r+0xa0>)
 800b920:	429c      	cmp	r4, r3
 800b922:	d12d      	bne.n	800b980 <__swbuf_r+0x78>
 800b924:	686c      	ldr	r4, [r5, #4]
 800b926:	69a3      	ldr	r3, [r4, #24]
 800b928:	60a3      	str	r3, [r4, #8]
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	071b      	lsls	r3, r3, #28
 800b92e:	d531      	bpl.n	800b994 <__swbuf_r+0x8c>
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d02e      	beq.n	800b994 <__swbuf_r+0x8c>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	6922      	ldr	r2, [r4, #16]
 800b93a:	b2f7      	uxtb	r7, r6
 800b93c:	1a98      	subs	r0, r3, r2
 800b93e:	6963      	ldr	r3, [r4, #20]
 800b940:	b2f6      	uxtb	r6, r6
 800b942:	4283      	cmp	r3, r0
 800b944:	dc05      	bgt.n	800b952 <__swbuf_r+0x4a>
 800b946:	0021      	movs	r1, r4
 800b948:	0028      	movs	r0, r5
 800b94a:	f000 f99d 	bl	800bc88 <_fflush_r>
 800b94e:	2800      	cmp	r0, #0
 800b950:	d126      	bne.n	800b9a0 <__swbuf_r+0x98>
 800b952:	68a3      	ldr	r3, [r4, #8]
 800b954:	3001      	adds	r0, #1
 800b956:	3b01      	subs	r3, #1
 800b958:	60a3      	str	r3, [r4, #8]
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	6022      	str	r2, [r4, #0]
 800b960:	701f      	strb	r7, [r3, #0]
 800b962:	6963      	ldr	r3, [r4, #20]
 800b964:	4283      	cmp	r3, r0
 800b966:	d004      	beq.n	800b972 <__swbuf_r+0x6a>
 800b968:	89a3      	ldrh	r3, [r4, #12]
 800b96a:	07db      	lsls	r3, r3, #31
 800b96c:	d51a      	bpl.n	800b9a4 <__swbuf_r+0x9c>
 800b96e:	2e0a      	cmp	r6, #10
 800b970:	d118      	bne.n	800b9a4 <__swbuf_r+0x9c>
 800b972:	0021      	movs	r1, r4
 800b974:	0028      	movs	r0, r5
 800b976:	f000 f987 	bl	800bc88 <_fflush_r>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d012      	beq.n	800b9a4 <__swbuf_r+0x9c>
 800b97e:	e00f      	b.n	800b9a0 <__swbuf_r+0x98>
 800b980:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <__swbuf_r+0xa4>)
 800b982:	429c      	cmp	r4, r3
 800b984:	d101      	bne.n	800b98a <__swbuf_r+0x82>
 800b986:	68ac      	ldr	r4, [r5, #8]
 800b988:	e7cd      	b.n	800b926 <__swbuf_r+0x1e>
 800b98a:	4b09      	ldr	r3, [pc, #36]	; (800b9b0 <__swbuf_r+0xa8>)
 800b98c:	429c      	cmp	r4, r3
 800b98e:	d1ca      	bne.n	800b926 <__swbuf_r+0x1e>
 800b990:	68ec      	ldr	r4, [r5, #12]
 800b992:	e7c8      	b.n	800b926 <__swbuf_r+0x1e>
 800b994:	0021      	movs	r1, r4
 800b996:	0028      	movs	r0, r5
 800b998:	f000 f80c 	bl	800b9b4 <__swsetup_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d0ca      	beq.n	800b936 <__swbuf_r+0x2e>
 800b9a0:	2601      	movs	r6, #1
 800b9a2:	4276      	negs	r6, r6
 800b9a4:	0030      	movs	r0, r6
 800b9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a8:	0800c91c 	.word	0x0800c91c
 800b9ac:	0800c93c 	.word	0x0800c93c
 800b9b0:	0800c8fc 	.word	0x0800c8fc

0800b9b4 <__swsetup_r>:
 800b9b4:	4b36      	ldr	r3, [pc, #216]	; (800ba90 <__swsetup_r+0xdc>)
 800b9b6:	b570      	push	{r4, r5, r6, lr}
 800b9b8:	681d      	ldr	r5, [r3, #0]
 800b9ba:	0006      	movs	r6, r0
 800b9bc:	000c      	movs	r4, r1
 800b9be:	2d00      	cmp	r5, #0
 800b9c0:	d005      	beq.n	800b9ce <__swsetup_r+0x1a>
 800b9c2:	69ab      	ldr	r3, [r5, #24]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d102      	bne.n	800b9ce <__swsetup_r+0x1a>
 800b9c8:	0028      	movs	r0, r5
 800b9ca:	f000 f9cb 	bl	800bd64 <__sinit>
 800b9ce:	4b31      	ldr	r3, [pc, #196]	; (800ba94 <__swsetup_r+0xe0>)
 800b9d0:	429c      	cmp	r4, r3
 800b9d2:	d10f      	bne.n	800b9f4 <__swsetup_r+0x40>
 800b9d4:	686c      	ldr	r4, [r5, #4]
 800b9d6:	230c      	movs	r3, #12
 800b9d8:	5ee2      	ldrsh	r2, [r4, r3]
 800b9da:	b293      	uxth	r3, r2
 800b9dc:	0719      	lsls	r1, r3, #28
 800b9de:	d42d      	bmi.n	800ba3c <__swsetup_r+0x88>
 800b9e0:	06d9      	lsls	r1, r3, #27
 800b9e2:	d411      	bmi.n	800ba08 <__swsetup_r+0x54>
 800b9e4:	2309      	movs	r3, #9
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	6033      	str	r3, [r6, #0]
 800b9ea:	3337      	adds	r3, #55	; 0x37
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	81a3      	strh	r3, [r4, #12]
 800b9f0:	4240      	negs	r0, r0
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}
 800b9f4:	4b28      	ldr	r3, [pc, #160]	; (800ba98 <__swsetup_r+0xe4>)
 800b9f6:	429c      	cmp	r4, r3
 800b9f8:	d101      	bne.n	800b9fe <__swsetup_r+0x4a>
 800b9fa:	68ac      	ldr	r4, [r5, #8]
 800b9fc:	e7eb      	b.n	800b9d6 <__swsetup_r+0x22>
 800b9fe:	4b27      	ldr	r3, [pc, #156]	; (800ba9c <__swsetup_r+0xe8>)
 800ba00:	429c      	cmp	r4, r3
 800ba02:	d1e8      	bne.n	800b9d6 <__swsetup_r+0x22>
 800ba04:	68ec      	ldr	r4, [r5, #12]
 800ba06:	e7e6      	b.n	800b9d6 <__swsetup_r+0x22>
 800ba08:	075b      	lsls	r3, r3, #29
 800ba0a:	d513      	bpl.n	800ba34 <__swsetup_r+0x80>
 800ba0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba0e:	2900      	cmp	r1, #0
 800ba10:	d008      	beq.n	800ba24 <__swsetup_r+0x70>
 800ba12:	0023      	movs	r3, r4
 800ba14:	3344      	adds	r3, #68	; 0x44
 800ba16:	4299      	cmp	r1, r3
 800ba18:	d002      	beq.n	800ba20 <__swsetup_r+0x6c>
 800ba1a:	0030      	movs	r0, r6
 800ba1c:	f7ff fbbc 	bl	800b198 <_free_r>
 800ba20:	2300      	movs	r3, #0
 800ba22:	6363      	str	r3, [r4, #52]	; 0x34
 800ba24:	2224      	movs	r2, #36	; 0x24
 800ba26:	89a3      	ldrh	r3, [r4, #12]
 800ba28:	4393      	bics	r3, r2
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	6063      	str	r3, [r4, #4]
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	6023      	str	r3, [r4, #0]
 800ba34:	2308      	movs	r3, #8
 800ba36:	89a2      	ldrh	r2, [r4, #12]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	81a3      	strh	r3, [r4, #12]
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10b      	bne.n	800ba5a <__swsetup_r+0xa6>
 800ba42:	21a0      	movs	r1, #160	; 0xa0
 800ba44:	2280      	movs	r2, #128	; 0x80
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	0089      	lsls	r1, r1, #2
 800ba4a:	0092      	lsls	r2, r2, #2
 800ba4c:	400b      	ands	r3, r1
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d003      	beq.n	800ba5a <__swsetup_r+0xa6>
 800ba52:	0021      	movs	r1, r4
 800ba54:	0030      	movs	r0, r6
 800ba56:	f000 fa41 	bl	800bedc <__smakebuf_r>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	89a2      	ldrh	r2, [r4, #12]
 800ba5e:	4013      	ands	r3, r2
 800ba60:	d011      	beq.n	800ba86 <__swsetup_r+0xd2>
 800ba62:	2300      	movs	r3, #0
 800ba64:	60a3      	str	r3, [r4, #8]
 800ba66:	6963      	ldr	r3, [r4, #20]
 800ba68:	425b      	negs	r3, r3
 800ba6a:	61a3      	str	r3, [r4, #24]
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	4283      	cmp	r3, r0
 800ba72:	d1be      	bne.n	800b9f2 <__swsetup_r+0x3e>
 800ba74:	230c      	movs	r3, #12
 800ba76:	5ee2      	ldrsh	r2, [r4, r3]
 800ba78:	0613      	lsls	r3, r2, #24
 800ba7a:	d5ba      	bpl.n	800b9f2 <__swsetup_r+0x3e>
 800ba7c:	2340      	movs	r3, #64	; 0x40
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	81a3      	strh	r3, [r4, #12]
 800ba82:	3801      	subs	r0, #1
 800ba84:	e7b5      	b.n	800b9f2 <__swsetup_r+0x3e>
 800ba86:	0792      	lsls	r2, r2, #30
 800ba88:	d400      	bmi.n	800ba8c <__swsetup_r+0xd8>
 800ba8a:	6963      	ldr	r3, [r4, #20]
 800ba8c:	60a3      	str	r3, [r4, #8]
 800ba8e:	e7ed      	b.n	800ba6c <__swsetup_r+0xb8>
 800ba90:	20000010 	.word	0x20000010
 800ba94:	0800c91c 	.word	0x0800c91c
 800ba98:	0800c93c 	.word	0x0800c93c
 800ba9c:	0800c8fc 	.word	0x0800c8fc

0800baa0 <__register_exitproc>:
 800baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baa2:	4d30      	ldr	r5, [pc, #192]	; (800bb64 <__register_exitproc+0xc4>)
 800baa4:	b085      	sub	sp, #20
 800baa6:	682c      	ldr	r4, [r5, #0]
 800baa8:	0006      	movs	r6, r0
 800baaa:	9101      	str	r1, [sp, #4]
 800baac:	0017      	movs	r7, r2
 800baae:	9302      	str	r3, [sp, #8]
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	d10a      	bne.n	800baca <__register_exitproc+0x2a>
 800bab4:	4b2c      	ldr	r3, [pc, #176]	; (800bb68 <__register_exitproc+0xc8>)
 800bab6:	4a2d      	ldr	r2, [pc, #180]	; (800bb6c <__register_exitproc+0xcc>)
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	001c      	movs	r4, r3
 800babc:	2a00      	cmp	r2, #0
 800babe:	d004      	beq.n	800baca <__register_exitproc+0x2a>
 800bac0:	0019      	movs	r1, r3
 800bac2:	6812      	ldr	r2, [r2, #0]
 800bac4:	3188      	adds	r1, #136	; 0x88
 800bac6:	9203      	str	r2, [sp, #12]
 800bac8:	600a      	str	r2, [r1, #0]
 800baca:	6863      	ldr	r3, [r4, #4]
 800bacc:	2b1f      	cmp	r3, #31
 800bace:	dd3d      	ble.n	800bb4c <__register_exitproc+0xac>
 800bad0:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <__register_exitproc+0xd0>)
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d103      	bne.n	800bade <__register_exitproc+0x3e>
 800bad6:	2001      	movs	r0, #1
 800bad8:	4240      	negs	r0, r0
 800bada:	b005      	add	sp, #20
 800badc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bade:	208c      	movs	r0, #140	; 0x8c
 800bae0:	f7ff fb2a 	bl	800b138 <malloc>
 800bae4:	1e04      	subs	r4, r0, #0
 800bae6:	d0f6      	beq.n	800bad6 <__register_exitproc+0x36>
 800bae8:	682a      	ldr	r2, [r5, #0]
 800baea:	2300      	movs	r3, #0
 800baec:	6002      	str	r2, [r0, #0]
 800baee:	0002      	movs	r2, r0
 800baf0:	3288      	adds	r2, #136	; 0x88
 800baf2:	6043      	str	r3, [r0, #4]
 800baf4:	6028      	str	r0, [r5, #0]
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	429e      	cmp	r6, r3
 800bafa:	d01e      	beq.n	800bb3a <__register_exitproc+0x9a>
 800bafc:	2084      	movs	r0, #132	; 0x84
 800bafe:	0040      	lsls	r0, r0, #1
 800bb00:	f7ff fb1a 	bl	800b138 <malloc>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d0e6      	beq.n	800bad6 <__register_exitproc+0x36>
 800bb08:	0003      	movs	r3, r0
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	33fc      	adds	r3, #252	; 0xfc
 800bb0e:	605a      	str	r2, [r3, #4]
 800bb10:	609a      	str	r2, [r3, #8]
 800bb12:	0023      	movs	r3, r4
 800bb14:	3388      	adds	r3, #136	; 0x88
 800bb16:	6018      	str	r0, [r3, #0]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	6861      	ldr	r1, [r4, #4]
 800bb1c:	408a      	lsls	r2, r1
 800bb1e:	008b      	lsls	r3, r1, #2
 800bb20:	18c3      	adds	r3, r0, r3
 800bb22:	c380      	stmia	r3!, {r7}
 800bb24:	30fc      	adds	r0, #252	; 0xfc
 800bb26:	6841      	ldr	r1, [r0, #4]
 800bb28:	4311      	orrs	r1, r2
 800bb2a:	6041      	str	r1, [r0, #4]
 800bb2c:	9902      	ldr	r1, [sp, #8]
 800bb2e:	67d9      	str	r1, [r3, #124]	; 0x7c
 800bb30:	2e02      	cmp	r6, #2
 800bb32:	d102      	bne.n	800bb3a <__register_exitproc+0x9a>
 800bb34:	6883      	ldr	r3, [r0, #8]
 800bb36:	431a      	orrs	r2, r3
 800bb38:	6082      	str	r2, [r0, #8]
 800bb3a:	6863      	ldr	r3, [r4, #4]
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	6062      	str	r2, [r4, #4]
 800bb42:	3302      	adds	r3, #2
 800bb44:	9a01      	ldr	r2, [sp, #4]
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	511a      	str	r2, [r3, r4]
 800bb4a:	e7c6      	b.n	800bada <__register_exitproc+0x3a>
 800bb4c:	2e00      	cmp	r6, #0
 800bb4e:	d0f4      	beq.n	800bb3a <__register_exitproc+0x9a>
 800bb50:	0023      	movs	r3, r4
 800bb52:	3388      	adds	r3, #136	; 0x88
 800bb54:	6818      	ldr	r0, [r3, #0]
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d1de      	bne.n	800bb18 <__register_exitproc+0x78>
 800bb5a:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <__register_exitproc+0xd0>)
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0ba      	beq.n	800bad6 <__register_exitproc+0x36>
 800bb60:	e7cc      	b.n	800bafc <__register_exitproc+0x5c>
 800bb62:	46c0      	nop			; (mov r8, r8)
 800bb64:	200001f4 	.word	0x200001f4
 800bb68:	20000168 	.word	0x20000168
 800bb6c:	00000000 	.word	0x00000000
 800bb70:	0800b139 	.word	0x0800b139

0800bb74 <__sflush_r>:
 800bb74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb76:	898a      	ldrh	r2, [r1, #12]
 800bb78:	0005      	movs	r5, r0
 800bb7a:	000c      	movs	r4, r1
 800bb7c:	0713      	lsls	r3, r2, #28
 800bb7e:	d460      	bmi.n	800bc42 <__sflush_r+0xce>
 800bb80:	684b      	ldr	r3, [r1, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	dc04      	bgt.n	800bb90 <__sflush_r+0x1c>
 800bb86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	dc01      	bgt.n	800bb90 <__sflush_r+0x1c>
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bb92:	2f00      	cmp	r7, #0
 800bb94:	d0fa      	beq.n	800bb8c <__sflush_r+0x18>
 800bb96:	2300      	movs	r3, #0
 800bb98:	682e      	ldr	r6, [r5, #0]
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	2380      	movs	r3, #128	; 0x80
 800bb9e:	015b      	lsls	r3, r3, #5
 800bba0:	6a21      	ldr	r1, [r4, #32]
 800bba2:	401a      	ands	r2, r3
 800bba4:	d034      	beq.n	800bc10 <__sflush_r+0x9c>
 800bba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bba8:	89a3      	ldrh	r3, [r4, #12]
 800bbaa:	075b      	lsls	r3, r3, #29
 800bbac:	d506      	bpl.n	800bbbc <__sflush_r+0x48>
 800bbae:	6863      	ldr	r3, [r4, #4]
 800bbb0:	1ac0      	subs	r0, r0, r3
 800bbb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <__sflush_r+0x48>
 800bbb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbba:	1ac0      	subs	r0, r0, r3
 800bbbc:	0002      	movs	r2, r0
 800bbbe:	6a21      	ldr	r1, [r4, #32]
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	0028      	movs	r0, r5
 800bbc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bbc6:	47b8      	blx	r7
 800bbc8:	89a1      	ldrh	r1, [r4, #12]
 800bbca:	1c43      	adds	r3, r0, #1
 800bbcc:	d106      	bne.n	800bbdc <__sflush_r+0x68>
 800bbce:	682b      	ldr	r3, [r5, #0]
 800bbd0:	2b1d      	cmp	r3, #29
 800bbd2:	d830      	bhi.n	800bc36 <__sflush_r+0xc2>
 800bbd4:	4a2b      	ldr	r2, [pc, #172]	; (800bc84 <__sflush_r+0x110>)
 800bbd6:	40da      	lsrs	r2, r3
 800bbd8:	07d3      	lsls	r3, r2, #31
 800bbda:	d52c      	bpl.n	800bc36 <__sflush_r+0xc2>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	6063      	str	r3, [r4, #4]
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	04cb      	lsls	r3, r1, #19
 800bbe6:	d505      	bpl.n	800bbf4 <__sflush_r+0x80>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <__sflush_r+0x7e>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d100      	bne.n	800bbf4 <__sflush_r+0x80>
 800bbf2:	6560      	str	r0, [r4, #84]	; 0x54
 800bbf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbf6:	602e      	str	r6, [r5, #0]
 800bbf8:	2900      	cmp	r1, #0
 800bbfa:	d0c7      	beq.n	800bb8c <__sflush_r+0x18>
 800bbfc:	0023      	movs	r3, r4
 800bbfe:	3344      	adds	r3, #68	; 0x44
 800bc00:	4299      	cmp	r1, r3
 800bc02:	d002      	beq.n	800bc0a <__sflush_r+0x96>
 800bc04:	0028      	movs	r0, r5
 800bc06:	f7ff fac7 	bl	800b198 <_free_r>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc0e:	e7be      	b.n	800bb8e <__sflush_r+0x1a>
 800bc10:	2301      	movs	r3, #1
 800bc12:	0028      	movs	r0, r5
 800bc14:	47b8      	blx	r7
 800bc16:	1c43      	adds	r3, r0, #1
 800bc18:	d1c6      	bne.n	800bba8 <__sflush_r+0x34>
 800bc1a:	682b      	ldr	r3, [r5, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d0c3      	beq.n	800bba8 <__sflush_r+0x34>
 800bc20:	2b1d      	cmp	r3, #29
 800bc22:	d001      	beq.n	800bc28 <__sflush_r+0xb4>
 800bc24:	2b16      	cmp	r3, #22
 800bc26:	d101      	bne.n	800bc2c <__sflush_r+0xb8>
 800bc28:	602e      	str	r6, [r5, #0]
 800bc2a:	e7af      	b.n	800bb8c <__sflush_r+0x18>
 800bc2c:	2340      	movs	r3, #64	; 0x40
 800bc2e:	89a2      	ldrh	r2, [r4, #12]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	81a3      	strh	r3, [r4, #12]
 800bc34:	e7ab      	b.n	800bb8e <__sflush_r+0x1a>
 800bc36:	2340      	movs	r3, #64	; 0x40
 800bc38:	430b      	orrs	r3, r1
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	81a3      	strh	r3, [r4, #12]
 800bc3e:	4240      	negs	r0, r0
 800bc40:	e7a5      	b.n	800bb8e <__sflush_r+0x1a>
 800bc42:	690f      	ldr	r7, [r1, #16]
 800bc44:	2f00      	cmp	r7, #0
 800bc46:	d0a1      	beq.n	800bb8c <__sflush_r+0x18>
 800bc48:	680b      	ldr	r3, [r1, #0]
 800bc4a:	600f      	str	r7, [r1, #0]
 800bc4c:	1bdb      	subs	r3, r3, r7
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	2300      	movs	r3, #0
 800bc52:	0792      	lsls	r2, r2, #30
 800bc54:	d100      	bne.n	800bc58 <__sflush_r+0xe4>
 800bc56:	694b      	ldr	r3, [r1, #20]
 800bc58:	60a3      	str	r3, [r4, #8]
 800bc5a:	9b01      	ldr	r3, [sp, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	dc00      	bgt.n	800bc62 <__sflush_r+0xee>
 800bc60:	e794      	b.n	800bb8c <__sflush_r+0x18>
 800bc62:	9b01      	ldr	r3, [sp, #4]
 800bc64:	003a      	movs	r2, r7
 800bc66:	6a21      	ldr	r1, [r4, #32]
 800bc68:	0028      	movs	r0, r5
 800bc6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc6c:	47b0      	blx	r6
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	dc03      	bgt.n	800bc7a <__sflush_r+0x106>
 800bc72:	2340      	movs	r3, #64	; 0x40
 800bc74:	89a2      	ldrh	r2, [r4, #12]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	e7df      	b.n	800bc3a <__sflush_r+0xc6>
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	183f      	adds	r7, r7, r0
 800bc7e:	1a1b      	subs	r3, r3, r0
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	e7ea      	b.n	800bc5a <__sflush_r+0xe6>
 800bc84:	20400001 	.word	0x20400001

0800bc88 <_fflush_r>:
 800bc88:	690b      	ldr	r3, [r1, #16]
 800bc8a:	b570      	push	{r4, r5, r6, lr}
 800bc8c:	0005      	movs	r5, r0
 800bc8e:	000c      	movs	r4, r1
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <_fflush_r+0x10>
 800bc94:	2000      	movs	r0, #0
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d004      	beq.n	800bca6 <_fflush_r+0x1e>
 800bc9c:	6983      	ldr	r3, [r0, #24]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d101      	bne.n	800bca6 <_fflush_r+0x1e>
 800bca2:	f000 f85f 	bl	800bd64 <__sinit>
 800bca6:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <_fflush_r+0x4c>)
 800bca8:	429c      	cmp	r4, r3
 800bcaa:	d109      	bne.n	800bcc0 <_fflush_r+0x38>
 800bcac:	686c      	ldr	r4, [r5, #4]
 800bcae:	220c      	movs	r2, #12
 800bcb0:	5ea3      	ldrsh	r3, [r4, r2]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0ee      	beq.n	800bc94 <_fflush_r+0xc>
 800bcb6:	0021      	movs	r1, r4
 800bcb8:	0028      	movs	r0, r5
 800bcba:	f7ff ff5b 	bl	800bb74 <__sflush_r>
 800bcbe:	e7ea      	b.n	800bc96 <_fflush_r+0xe>
 800bcc0:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <_fflush_r+0x50>)
 800bcc2:	429c      	cmp	r4, r3
 800bcc4:	d101      	bne.n	800bcca <_fflush_r+0x42>
 800bcc6:	68ac      	ldr	r4, [r5, #8]
 800bcc8:	e7f1      	b.n	800bcae <_fflush_r+0x26>
 800bcca:	4b04      	ldr	r3, [pc, #16]	; (800bcdc <_fflush_r+0x54>)
 800bccc:	429c      	cmp	r4, r3
 800bcce:	d1ee      	bne.n	800bcae <_fflush_r+0x26>
 800bcd0:	68ec      	ldr	r4, [r5, #12]
 800bcd2:	e7ec      	b.n	800bcae <_fflush_r+0x26>
 800bcd4:	0800c91c 	.word	0x0800c91c
 800bcd8:	0800c93c 	.word	0x0800c93c
 800bcdc:	0800c8fc 	.word	0x0800c8fc

0800bce0 <std>:
 800bce0:	2300      	movs	r3, #0
 800bce2:	b510      	push	{r4, lr}
 800bce4:	0004      	movs	r4, r0
 800bce6:	6003      	str	r3, [r0, #0]
 800bce8:	6043      	str	r3, [r0, #4]
 800bcea:	6083      	str	r3, [r0, #8]
 800bcec:	8181      	strh	r1, [r0, #12]
 800bcee:	6643      	str	r3, [r0, #100]	; 0x64
 800bcf0:	81c2      	strh	r2, [r0, #14]
 800bcf2:	6103      	str	r3, [r0, #16]
 800bcf4:	6143      	str	r3, [r0, #20]
 800bcf6:	6183      	str	r3, [r0, #24]
 800bcf8:	0019      	movs	r1, r3
 800bcfa:	2208      	movs	r2, #8
 800bcfc:	305c      	adds	r0, #92	; 0x5c
 800bcfe:	f7ff fa42 	bl	800b186 <memset>
 800bd02:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <std+0x38>)
 800bd04:	6224      	str	r4, [r4, #32]
 800bd06:	6263      	str	r3, [r4, #36]	; 0x24
 800bd08:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <std+0x3c>)
 800bd0a:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd0c:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <std+0x40>)
 800bd0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd10:	4b04      	ldr	r3, [pc, #16]	; (800bd24 <std+0x44>)
 800bd12:	6323      	str	r3, [r4, #48]	; 0x30
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	46c0      	nop			; (mov r8, r8)
 800bd18:	0800bf81 	.word	0x0800bf81
 800bd1c:	0800bfa9 	.word	0x0800bfa9
 800bd20:	0800bfe1 	.word	0x0800bfe1
 800bd24:	0800c00d 	.word	0x0800c00d

0800bd28 <_cleanup_r>:
 800bd28:	b510      	push	{r4, lr}
 800bd2a:	4902      	ldr	r1, [pc, #8]	; (800bd34 <_cleanup_r+0xc>)
 800bd2c:	f000 f88c 	bl	800be48 <_fwalk_reent>
 800bd30:	bd10      	pop	{r4, pc}
 800bd32:	46c0      	nop			; (mov r8, r8)
 800bd34:	0800bc89 	.word	0x0800bc89

0800bd38 <__sfmoreglue>:
 800bd38:	b570      	push	{r4, r5, r6, lr}
 800bd3a:	2568      	movs	r5, #104	; 0x68
 800bd3c:	1e4a      	subs	r2, r1, #1
 800bd3e:	4355      	muls	r5, r2
 800bd40:	000e      	movs	r6, r1
 800bd42:	0029      	movs	r1, r5
 800bd44:	3174      	adds	r1, #116	; 0x74
 800bd46:	f7ff fa71 	bl	800b22c <_malloc_r>
 800bd4a:	1e04      	subs	r4, r0, #0
 800bd4c:	d008      	beq.n	800bd60 <__sfmoreglue+0x28>
 800bd4e:	2100      	movs	r1, #0
 800bd50:	002a      	movs	r2, r5
 800bd52:	6001      	str	r1, [r0, #0]
 800bd54:	6046      	str	r6, [r0, #4]
 800bd56:	300c      	adds	r0, #12
 800bd58:	60a0      	str	r0, [r4, #8]
 800bd5a:	3268      	adds	r2, #104	; 0x68
 800bd5c:	f7ff fa13 	bl	800b186 <memset>
 800bd60:	0020      	movs	r0, r4
 800bd62:	bd70      	pop	{r4, r5, r6, pc}

0800bd64 <__sinit>:
 800bd64:	6983      	ldr	r3, [r0, #24]
 800bd66:	b513      	push	{r0, r1, r4, lr}
 800bd68:	0004      	movs	r4, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d128      	bne.n	800bdc0 <__sinit+0x5c>
 800bd6e:	6483      	str	r3, [r0, #72]	; 0x48
 800bd70:	64c3      	str	r3, [r0, #76]	; 0x4c
 800bd72:	6503      	str	r3, [r0, #80]	; 0x50
 800bd74:	4b13      	ldr	r3, [pc, #76]	; (800bdc4 <__sinit+0x60>)
 800bd76:	4a14      	ldr	r2, [pc, #80]	; (800bdc8 <__sinit+0x64>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6282      	str	r2, [r0, #40]	; 0x28
 800bd7c:	9301      	str	r3, [sp, #4]
 800bd7e:	4298      	cmp	r0, r3
 800bd80:	d101      	bne.n	800bd86 <__sinit+0x22>
 800bd82:	2301      	movs	r3, #1
 800bd84:	6183      	str	r3, [r0, #24]
 800bd86:	0020      	movs	r0, r4
 800bd88:	f000 f820 	bl	800bdcc <__sfp>
 800bd8c:	6060      	str	r0, [r4, #4]
 800bd8e:	0020      	movs	r0, r4
 800bd90:	f000 f81c 	bl	800bdcc <__sfp>
 800bd94:	60a0      	str	r0, [r4, #8]
 800bd96:	0020      	movs	r0, r4
 800bd98:	f000 f818 	bl	800bdcc <__sfp>
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	60e0      	str	r0, [r4, #12]
 800bda0:	2104      	movs	r1, #4
 800bda2:	6860      	ldr	r0, [r4, #4]
 800bda4:	f7ff ff9c 	bl	800bce0 <std>
 800bda8:	2201      	movs	r2, #1
 800bdaa:	2109      	movs	r1, #9
 800bdac:	68a0      	ldr	r0, [r4, #8]
 800bdae:	f7ff ff97 	bl	800bce0 <std>
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	2112      	movs	r1, #18
 800bdb6:	68e0      	ldr	r0, [r4, #12]
 800bdb8:	f7ff ff92 	bl	800bce0 <std>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	61a3      	str	r3, [r4, #24]
 800bdc0:	bd13      	pop	{r0, r1, r4, pc}
 800bdc2:	46c0      	nop			; (mov r8, r8)
 800bdc4:	0800c8c4 	.word	0x0800c8c4
 800bdc8:	0800bd29 	.word	0x0800bd29

0800bdcc <__sfp>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	4b1c      	ldr	r3, [pc, #112]	; (800be40 <__sfp+0x74>)
 800bdd0:	0007      	movs	r7, r0
 800bdd2:	681e      	ldr	r6, [r3, #0]
 800bdd4:	69b3      	ldr	r3, [r6, #24]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d102      	bne.n	800bde0 <__sfp+0x14>
 800bdda:	0030      	movs	r0, r6
 800bddc:	f7ff ffc2 	bl	800bd64 <__sinit>
 800bde0:	3648      	adds	r6, #72	; 0x48
 800bde2:	68b4      	ldr	r4, [r6, #8]
 800bde4:	6873      	ldr	r3, [r6, #4]
 800bde6:	3b01      	subs	r3, #1
 800bde8:	d504      	bpl.n	800bdf4 <__sfp+0x28>
 800bdea:	6833      	ldr	r3, [r6, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d007      	beq.n	800be00 <__sfp+0x34>
 800bdf0:	6836      	ldr	r6, [r6, #0]
 800bdf2:	e7f6      	b.n	800bde2 <__sfp+0x16>
 800bdf4:	220c      	movs	r2, #12
 800bdf6:	5ea5      	ldrsh	r5, [r4, r2]
 800bdf8:	2d00      	cmp	r5, #0
 800bdfa:	d00d      	beq.n	800be18 <__sfp+0x4c>
 800bdfc:	3468      	adds	r4, #104	; 0x68
 800bdfe:	e7f2      	b.n	800bde6 <__sfp+0x1a>
 800be00:	2104      	movs	r1, #4
 800be02:	0038      	movs	r0, r7
 800be04:	f7ff ff98 	bl	800bd38 <__sfmoreglue>
 800be08:	6030      	str	r0, [r6, #0]
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d1f0      	bne.n	800bdf0 <__sfp+0x24>
 800be0e:	230c      	movs	r3, #12
 800be10:	0004      	movs	r4, r0
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	0020      	movs	r0, r4
 800be16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be18:	0020      	movs	r0, r4
 800be1a:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <__sfp+0x78>)
 800be1c:	6665      	str	r5, [r4, #100]	; 0x64
 800be1e:	6025      	str	r5, [r4, #0]
 800be20:	6065      	str	r5, [r4, #4]
 800be22:	60a5      	str	r5, [r4, #8]
 800be24:	60e3      	str	r3, [r4, #12]
 800be26:	6125      	str	r5, [r4, #16]
 800be28:	6165      	str	r5, [r4, #20]
 800be2a:	61a5      	str	r5, [r4, #24]
 800be2c:	2208      	movs	r2, #8
 800be2e:	0029      	movs	r1, r5
 800be30:	305c      	adds	r0, #92	; 0x5c
 800be32:	f7ff f9a8 	bl	800b186 <memset>
 800be36:	6365      	str	r5, [r4, #52]	; 0x34
 800be38:	63a5      	str	r5, [r4, #56]	; 0x38
 800be3a:	64a5      	str	r5, [r4, #72]	; 0x48
 800be3c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800be3e:	e7e9      	b.n	800be14 <__sfp+0x48>
 800be40:	0800c8c4 	.word	0x0800c8c4
 800be44:	ffff0001 	.word	0xffff0001

0800be48 <_fwalk_reent>:
 800be48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be4a:	0004      	movs	r4, r0
 800be4c:	0007      	movs	r7, r0
 800be4e:	2600      	movs	r6, #0
 800be50:	9101      	str	r1, [sp, #4]
 800be52:	3448      	adds	r4, #72	; 0x48
 800be54:	2c00      	cmp	r4, #0
 800be56:	d101      	bne.n	800be5c <_fwalk_reent+0x14>
 800be58:	0030      	movs	r0, r6
 800be5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be5c:	6863      	ldr	r3, [r4, #4]
 800be5e:	68a5      	ldr	r5, [r4, #8]
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	9b00      	ldr	r3, [sp, #0]
 800be64:	3b01      	subs	r3, #1
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	d501      	bpl.n	800be6e <_fwalk_reent+0x26>
 800be6a:	6824      	ldr	r4, [r4, #0]
 800be6c:	e7f2      	b.n	800be54 <_fwalk_reent+0xc>
 800be6e:	89ab      	ldrh	r3, [r5, #12]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d908      	bls.n	800be86 <_fwalk_reent+0x3e>
 800be74:	220e      	movs	r2, #14
 800be76:	5eab      	ldrsh	r3, [r5, r2]
 800be78:	3301      	adds	r3, #1
 800be7a:	d004      	beq.n	800be86 <_fwalk_reent+0x3e>
 800be7c:	0029      	movs	r1, r5
 800be7e:	0038      	movs	r0, r7
 800be80:	9b01      	ldr	r3, [sp, #4]
 800be82:	4798      	blx	r3
 800be84:	4306      	orrs	r6, r0
 800be86:	3568      	adds	r5, #104	; 0x68
 800be88:	e7eb      	b.n	800be62 <_fwalk_reent+0x1a>
	...

0800be8c <__swhatbuf_r>:
 800be8c:	b570      	push	{r4, r5, r6, lr}
 800be8e:	000e      	movs	r6, r1
 800be90:	001d      	movs	r5, r3
 800be92:	230e      	movs	r3, #14
 800be94:	5ec9      	ldrsh	r1, [r1, r3]
 800be96:	b096      	sub	sp, #88	; 0x58
 800be98:	0014      	movs	r4, r2
 800be9a:	2900      	cmp	r1, #0
 800be9c:	da07      	bge.n	800beae <__swhatbuf_r+0x22>
 800be9e:	2300      	movs	r3, #0
 800bea0:	602b      	str	r3, [r5, #0]
 800bea2:	89b3      	ldrh	r3, [r6, #12]
 800bea4:	061b      	lsls	r3, r3, #24
 800bea6:	d411      	bmi.n	800becc <__swhatbuf_r+0x40>
 800bea8:	2380      	movs	r3, #128	; 0x80
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	e00f      	b.n	800bece <__swhatbuf_r+0x42>
 800beae:	466a      	mov	r2, sp
 800beb0:	f000 f8d8 	bl	800c064 <_fstat_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	dbf2      	blt.n	800be9e <__swhatbuf_r+0x12>
 800beb8:	22f0      	movs	r2, #240	; 0xf0
 800beba:	9b01      	ldr	r3, [sp, #4]
 800bebc:	0212      	lsls	r2, r2, #8
 800bebe:	4013      	ands	r3, r2
 800bec0:	4a05      	ldr	r2, [pc, #20]	; (800bed8 <__swhatbuf_r+0x4c>)
 800bec2:	189b      	adds	r3, r3, r2
 800bec4:	425a      	negs	r2, r3
 800bec6:	4153      	adcs	r3, r2
 800bec8:	602b      	str	r3, [r5, #0]
 800beca:	e7ed      	b.n	800bea8 <__swhatbuf_r+0x1c>
 800becc:	2340      	movs	r3, #64	; 0x40
 800bece:	2000      	movs	r0, #0
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	b016      	add	sp, #88	; 0x58
 800bed4:	bd70      	pop	{r4, r5, r6, pc}
 800bed6:	46c0      	nop			; (mov r8, r8)
 800bed8:	ffffe000 	.word	0xffffe000

0800bedc <__smakebuf_r>:
 800bedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bede:	2602      	movs	r6, #2
 800bee0:	898b      	ldrh	r3, [r1, #12]
 800bee2:	0005      	movs	r5, r0
 800bee4:	000c      	movs	r4, r1
 800bee6:	4233      	tst	r3, r6
 800bee8:	d006      	beq.n	800bef8 <__smakebuf_r+0x1c>
 800beea:	0023      	movs	r3, r4
 800beec:	3347      	adds	r3, #71	; 0x47
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	6123      	str	r3, [r4, #16]
 800bef2:	2301      	movs	r3, #1
 800bef4:	6163      	str	r3, [r4, #20]
 800bef6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bef8:	ab01      	add	r3, sp, #4
 800befa:	466a      	mov	r2, sp
 800befc:	f7ff ffc6 	bl	800be8c <__swhatbuf_r>
 800bf00:	9900      	ldr	r1, [sp, #0]
 800bf02:	0007      	movs	r7, r0
 800bf04:	0028      	movs	r0, r5
 800bf06:	f7ff f991 	bl	800b22c <_malloc_r>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d108      	bne.n	800bf20 <__smakebuf_r+0x44>
 800bf0e:	220c      	movs	r2, #12
 800bf10:	5ea3      	ldrsh	r3, [r4, r2]
 800bf12:	059a      	lsls	r2, r3, #22
 800bf14:	d4ef      	bmi.n	800bef6 <__smakebuf_r+0x1a>
 800bf16:	2203      	movs	r2, #3
 800bf18:	4393      	bics	r3, r2
 800bf1a:	431e      	orrs	r6, r3
 800bf1c:	81a6      	strh	r6, [r4, #12]
 800bf1e:	e7e4      	b.n	800beea <__smakebuf_r+0xe>
 800bf20:	4b0f      	ldr	r3, [pc, #60]	; (800bf60 <__smakebuf_r+0x84>)
 800bf22:	62ab      	str	r3, [r5, #40]	; 0x28
 800bf24:	2380      	movs	r3, #128	; 0x80
 800bf26:	89a2      	ldrh	r2, [r4, #12]
 800bf28:	6020      	str	r0, [r4, #0]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	81a3      	strh	r3, [r4, #12]
 800bf2e:	9b00      	ldr	r3, [sp, #0]
 800bf30:	6120      	str	r0, [r4, #16]
 800bf32:	6163      	str	r3, [r4, #20]
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00d      	beq.n	800bf56 <__smakebuf_r+0x7a>
 800bf3a:	230e      	movs	r3, #14
 800bf3c:	5ee1      	ldrsh	r1, [r4, r3]
 800bf3e:	0028      	movs	r0, r5
 800bf40:	f000 f8a2 	bl	800c088 <_isatty_r>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d006      	beq.n	800bf56 <__smakebuf_r+0x7a>
 800bf48:	2203      	movs	r2, #3
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	4393      	bics	r3, r2
 800bf4e:	001a      	movs	r2, r3
 800bf50:	2301      	movs	r3, #1
 800bf52:	4313      	orrs	r3, r2
 800bf54:	81a3      	strh	r3, [r4, #12]
 800bf56:	89a0      	ldrh	r0, [r4, #12]
 800bf58:	4338      	orrs	r0, r7
 800bf5a:	81a0      	strh	r0, [r4, #12]
 800bf5c:	e7cb      	b.n	800bef6 <__smakebuf_r+0x1a>
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	0800bd29 	.word	0x0800bd29

0800bf64 <memchr>:
 800bf64:	b2c9      	uxtb	r1, r1
 800bf66:	1882      	adds	r2, r0, r2
 800bf68:	4290      	cmp	r0, r2
 800bf6a:	d101      	bne.n	800bf70 <memchr+0xc>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	4770      	bx	lr
 800bf70:	7803      	ldrb	r3, [r0, #0]
 800bf72:	428b      	cmp	r3, r1
 800bf74:	d0fb      	beq.n	800bf6e <memchr+0xa>
 800bf76:	3001      	adds	r0, #1
 800bf78:	e7f6      	b.n	800bf68 <memchr+0x4>

0800bf7a <__malloc_lock>:
 800bf7a:	4770      	bx	lr

0800bf7c <__malloc_unlock>:
 800bf7c:	4770      	bx	lr
	...

0800bf80 <__sread>:
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	000c      	movs	r4, r1
 800bf84:	250e      	movs	r5, #14
 800bf86:	5f49      	ldrsh	r1, [r1, r5]
 800bf88:	f000 f8a4 	bl	800c0d4 <_read_r>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	db03      	blt.n	800bf98 <__sread+0x18>
 800bf90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bf92:	181b      	adds	r3, r3, r0
 800bf94:	6563      	str	r3, [r4, #84]	; 0x54
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	4a02      	ldr	r2, [pc, #8]	; (800bfa4 <__sread+0x24>)
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	81a3      	strh	r3, [r4, #12]
 800bfa0:	e7f9      	b.n	800bf96 <__sread+0x16>
 800bfa2:	46c0      	nop			; (mov r8, r8)
 800bfa4:	ffffefff 	.word	0xffffefff

0800bfa8 <__swrite>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	001f      	movs	r7, r3
 800bfac:	898b      	ldrh	r3, [r1, #12]
 800bfae:	0005      	movs	r5, r0
 800bfb0:	000c      	movs	r4, r1
 800bfb2:	0016      	movs	r6, r2
 800bfb4:	05db      	lsls	r3, r3, #23
 800bfb6:	d505      	bpl.n	800bfc4 <__swrite+0x1c>
 800bfb8:	230e      	movs	r3, #14
 800bfba:	5ec9      	ldrsh	r1, [r1, r3]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	f000 f874 	bl	800c0ac <_lseek_r>
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	4a05      	ldr	r2, [pc, #20]	; (800bfdc <__swrite+0x34>)
 800bfc8:	0028      	movs	r0, r5
 800bfca:	4013      	ands	r3, r2
 800bfcc:	81a3      	strh	r3, [r4, #12]
 800bfce:	0032      	movs	r2, r6
 800bfd0:	230e      	movs	r3, #14
 800bfd2:	5ee1      	ldrsh	r1, [r4, r3]
 800bfd4:	003b      	movs	r3, r7
 800bfd6:	f000 f81f 	bl	800c018 <_write_r>
 800bfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfdc:	ffffefff 	.word	0xffffefff

0800bfe0 <__sseek>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	000c      	movs	r4, r1
 800bfe4:	250e      	movs	r5, #14
 800bfe6:	5f49      	ldrsh	r1, [r1, r5]
 800bfe8:	f000 f860 	bl	800c0ac <_lseek_r>
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	1c42      	adds	r2, r0, #1
 800bff0:	d103      	bne.n	800bffa <__sseek+0x1a>
 800bff2:	4a05      	ldr	r2, [pc, #20]	; (800c008 <__sseek+0x28>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	81a3      	strh	r3, [r4, #12]
 800bff8:	bd70      	pop	{r4, r5, r6, pc}
 800bffa:	2280      	movs	r2, #128	; 0x80
 800bffc:	0152      	lsls	r2, r2, #5
 800bffe:	4313      	orrs	r3, r2
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	6560      	str	r0, [r4, #84]	; 0x54
 800c004:	e7f8      	b.n	800bff8 <__sseek+0x18>
 800c006:	46c0      	nop			; (mov r8, r8)
 800c008:	ffffefff 	.word	0xffffefff

0800c00c <__sclose>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	230e      	movs	r3, #14
 800c010:	5ec9      	ldrsh	r1, [r1, r3]
 800c012:	f000 f815 	bl	800c040 <_close_r>
 800c016:	bd10      	pop	{r4, pc}

0800c018 <_write_r>:
 800c018:	b570      	push	{r4, r5, r6, lr}
 800c01a:	0005      	movs	r5, r0
 800c01c:	0008      	movs	r0, r1
 800c01e:	0011      	movs	r1, r2
 800c020:	2200      	movs	r2, #0
 800c022:	4c06      	ldr	r4, [pc, #24]	; (800c03c <_write_r+0x24>)
 800c024:	6022      	str	r2, [r4, #0]
 800c026:	001a      	movs	r2, r3
 800c028:	f7f4 ff4d 	bl	8000ec6 <_write>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d103      	bne.n	800c038 <_write_r+0x20>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d000      	beq.n	800c038 <_write_r+0x20>
 800c036:	602b      	str	r3, [r5, #0]
 800c038:	bd70      	pop	{r4, r5, r6, pc}
 800c03a:	46c0      	nop			; (mov r8, r8)
 800c03c:	200003e8 	.word	0x200003e8

0800c040 <_close_r>:
 800c040:	2300      	movs	r3, #0
 800c042:	b570      	push	{r4, r5, r6, lr}
 800c044:	4c06      	ldr	r4, [pc, #24]	; (800c060 <_close_r+0x20>)
 800c046:	0005      	movs	r5, r0
 800c048:	0008      	movs	r0, r1
 800c04a:	6023      	str	r3, [r4, #0]
 800c04c:	f7f4 ff57 	bl	8000efe <_close>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d103      	bne.n	800c05c <_close_r+0x1c>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d000      	beq.n	800c05c <_close_r+0x1c>
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	200003e8 	.word	0x200003e8

0800c064 <_fstat_r>:
 800c064:	2300      	movs	r3, #0
 800c066:	b570      	push	{r4, r5, r6, lr}
 800c068:	4c06      	ldr	r4, [pc, #24]	; (800c084 <_fstat_r+0x20>)
 800c06a:	0005      	movs	r5, r0
 800c06c:	0008      	movs	r0, r1
 800c06e:	0011      	movs	r1, r2
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	f7f4 ff4e 	bl	8000f12 <_fstat>
 800c076:	1c43      	adds	r3, r0, #1
 800c078:	d103      	bne.n	800c082 <_fstat_r+0x1e>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d000      	beq.n	800c082 <_fstat_r+0x1e>
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	200003e8 	.word	0x200003e8

0800c088 <_isatty_r>:
 800c088:	2300      	movs	r3, #0
 800c08a:	b570      	push	{r4, r5, r6, lr}
 800c08c:	4c06      	ldr	r4, [pc, #24]	; (800c0a8 <_isatty_r+0x20>)
 800c08e:	0005      	movs	r5, r0
 800c090:	0008      	movs	r0, r1
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	f7f4 ff4b 	bl	8000f2e <_isatty>
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	d103      	bne.n	800c0a4 <_isatty_r+0x1c>
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d000      	beq.n	800c0a4 <_isatty_r+0x1c>
 800c0a2:	602b      	str	r3, [r5, #0]
 800c0a4:	bd70      	pop	{r4, r5, r6, pc}
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	200003e8 	.word	0x200003e8

0800c0ac <_lseek_r>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	0005      	movs	r5, r0
 800c0b0:	0008      	movs	r0, r1
 800c0b2:	0011      	movs	r1, r2
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	4c06      	ldr	r4, [pc, #24]	; (800c0d0 <_lseek_r+0x24>)
 800c0b8:	6022      	str	r2, [r4, #0]
 800c0ba:	001a      	movs	r2, r3
 800c0bc:	f7f4 ff40 	bl	8000f40 <_lseek>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d103      	bne.n	800c0cc <_lseek_r+0x20>
 800c0c4:	6823      	ldr	r3, [r4, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d000      	beq.n	800c0cc <_lseek_r+0x20>
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	bd70      	pop	{r4, r5, r6, pc}
 800c0ce:	46c0      	nop			; (mov r8, r8)
 800c0d0:	200003e8 	.word	0x200003e8

0800c0d4 <_read_r>:
 800c0d4:	b570      	push	{r4, r5, r6, lr}
 800c0d6:	0005      	movs	r5, r0
 800c0d8:	0008      	movs	r0, r1
 800c0da:	0011      	movs	r1, r2
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4c06      	ldr	r4, [pc, #24]	; (800c0f8 <_read_r+0x24>)
 800c0e0:	6022      	str	r2, [r4, #0]
 800c0e2:	001a      	movs	r2, r3
 800c0e4:	f7f4 fed2 	bl	8000e8c <_read>
 800c0e8:	1c43      	adds	r3, r0, #1
 800c0ea:	d103      	bne.n	800c0f4 <_read_r+0x20>
 800c0ec:	6823      	ldr	r3, [r4, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d000      	beq.n	800c0f4 <_read_r+0x20>
 800c0f2:	602b      	str	r3, [r5, #0]
 800c0f4:	bd70      	pop	{r4, r5, r6, pc}
 800c0f6:	46c0      	nop			; (mov r8, r8)
 800c0f8:	200003e8 	.word	0x200003e8

0800c0fc <_init>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	46c0      	nop			; (mov r8, r8)
 800c100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c102:	bc08      	pop	{r3}
 800c104:	469e      	mov	lr, r3
 800c106:	4770      	bx	lr

0800c108 <_fini>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	46c0      	nop			; (mov r8, r8)
 800c10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10e:	bc08      	pop	{r3}
 800c110:	469e      	mov	lr, r3
 800c112:	4770      	bx	lr
